--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: frange; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA frange;


ALTER SCHEMA frange OWNER TO postgres;

--
-- Name: genetic_code; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA genetic_code;


ALTER SCHEMA genetic_code OWNER TO postgres;

--
-- Name: so; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA so;


ALTER SCHEMA so OWNER TO postgres;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

--
-- Name: feature_by_fx_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE feature_by_fx_type AS (
	feature_id integer,
	depth integer
);


ALTER TYPE public.feature_by_fx_type OWNER TO postgres;

--
-- Name: soi_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE soi_type AS (
	type_id integer,
	subject_id integer,
	object_id integer
);


ALTER TYPE public.soi_type OWNER TO postgres;

SET search_path = frange, pg_catalog;

--
-- Name: _fill_featuregroup(integer, integer); Type: FUNCTION; Schema: frange; Owner: postgres
--

CREATE FUNCTION _fill_featuregroup(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    groupid alias for $1;
    parentid alias for $2;
    g featuregroup%ROWTYPE;
BEGIN
    FOR g IN
        SELECT DISTINCT 0, fr.subject_id, fr.object_id, groupid, fl.srcfeature_id, fl.fmin, fl.fmax, fl.strand, 0
        FROM  feature_relationship AS fr,
              featureloc AS fl
        WHERE fr.object_id = parentid
          AND fr.subject_id = fl.feature_id
    LOOP
        INSERT INTO featuregroup
            (subject_id, object_id, group_id, srcfeature_id, fmin, fmax, strand, is_root)
        VALUES
            (g.subject_id, g.object_id, g.group_id, g.srcfeature_id, g.fmin, g.fmax, g.strand, 0);
        PERFORM _fill_featuregroup(groupid,g.subject_id);
    END LOOP;
    RETURN 1;
END;
$_$;


ALTER FUNCTION frange._fill_featuregroup(integer, integer) OWNER TO postgres;

--
-- Name: fill_featuregroup(); Type: FUNCTION; Schema: frange; Owner: postgres
--

CREATE FUNCTION fill_featuregroup() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    p featuregroup%ROWTYPE;
    l featureloc%ROWTYPE;
    isa int;
    c int;
BEGIN
    TRUNCATE featuregroup;
    SELECT INTO isa cvterm_id FROM cvterm WHERE (name = 'isa' OR name = 'is_a');

    -- Recursion is the biggest performance killer for this function.
    -- We can dodge the first round of recursion using the "fr1 / GROUP BY" approach.
    -- Luckily, most feature graphs are only 2 levels deep, so most recursion is
    -- avoidable.

    RAISE NOTICE 'Loading root and singleton features.';
    FOR p IN
        SELECT DISTINCT 0, f.feature_id, f.feature_id, f.feature_id, srcfeature_id, fmin, fmax, strand, 1
        FROM feature AS f
        LEFT JOIN feature_relationship ON (f.feature_id = object_id)
        LEFT JOIN featureloc           ON (f.feature_id = featureloc.feature_id)
        WHERE f.feature_id NOT IN ( SELECT subject_id FROM feature_relationship )
          AND srcfeature_id IS NOT NULL
    LOOP
        INSERT INTO featuregroup
            (subject_id, object_id, group_id, srcfeature_id, fmin, fmax, strand, is_root)
        VALUES
            (p.object_id, p.object_id, p.object_id, p.srcfeature_id, p.fmin, p.fmax, p.strand, 1);
    END LOOP;

    RAISE NOTICE 'Loading child features.  If your database contains grandchild';
    RAISE NOTICE 'features, they will be loaded recursively and may take a long time.';

    FOR p IN
        SELECT DISTINCT 0, fr0.subject_id, fr0.object_id, fr0.object_id, fl.srcfeature_id, fl.fmin, fl.fmax, fl.strand, count(fr1.subject_id)
        FROM  feature_relationship AS fr0
        LEFT JOIN feature_relationship AS fr1 ON ( fr0.subject_id = fr1.object_id),
        featureloc AS fl
        WHERE fr0.subject_id = fl.feature_id
          AND fr0.object_id IN (
                  SELECT f.feature_id
                  FROM feature AS f
                  LEFT JOIN feature_relationship ON (f.feature_id = object_id)
                  LEFT JOIN featureloc           ON (f.feature_id = featureloc.feature_id)
                  WHERE f.feature_id NOT IN ( SELECT subject_id FROM feature_relationship )
                    AND f.feature_id     IN ( SELECT object_id  FROM feature_relationship )
                    AND srcfeature_id IS NOT NULL
              )
        GROUP BY fr0.subject_id, fr0.object_id, fl.srcfeature_id, fl.fmin, fl.fmax, fl.strand
    LOOP
        INSERT INTO featuregroup
            (subject_id, object_id, group_id, srcfeature_id, fmin, fmax, strand, is_root)
        VALUES
            (p.subject_id, p.object_id, p.object_id, p.srcfeature_id, p.fmin, p.fmax, p.strand, 0);
        IF ( p.is_root > 0 ) THEN
            PERFORM _fill_featuregroup(p.subject_id,p.subject_id);
        END IF;
    END LOOP;

    RETURN 1;
END;   
$$;


ALTER FUNCTION frange.fill_featuregroup() OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: featuregroup; Type: TABLE; Schema: frange; Owner: postgres; Tablespace: 
--

CREATE TABLE featuregroup (
    featuregroup_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    group_id integer NOT NULL,
    srcfeature_id integer,
    fmin integer,
    fmax integer,
    strand integer,
    is_root integer DEFAULT 0 NOT NULL
);


ALTER TABLE frange.featuregroup OWNER TO postgres;

--
-- Name: groupcontains(integer, integer, character varying); Type: FUNCTION; Schema: frange; Owner: postgres
--

CREATE FUNCTION groupcontains(integer, integer, character varying) RETURNS SETOF featuregroup
    LANGUAGE sql
    AS $_$
  SELECT *
  FROM groupoverlaps($1,$2,$3)
  WHERE fmin <= $1 AND fmax >= $2
$_$;


ALTER FUNCTION frange.groupcontains(integer, integer, character varying) OWNER TO postgres;

--
-- Name: groupcontains(integer[], integer[], character varying[]); Type: FUNCTION; Schema: frange; Owner: postgres
--

CREATE FUNCTION groupcontains(integer[], integer[], character varying[]) RETURNS SETOF featuregroup
    LANGUAGE plpgsql
    AS $_$
DECLARE
    mins alias for $1;
    maxs alias for $2;
    srcs alias for $3;
    f featuregroup%ROWTYPE;
    i int;
    s int;
BEGIN
    i := 1;
    FOR i in array_lower( mins, 1 ) .. array_upper( mins, 1 ) LOOP
        SELECT INTO s feature_id FROM feature WHERE uniquename = srcs[i];
        FOR f IN
            SELECT *
            FROM  featuregroup WHERE group_id IN (
                SELECT group_id FROM featuregroup
                WHERE (srcfeature_id = s OR srcfeature_id IS NULL)
                  AND fmin <= mins[i]
                  AND fmax >= maxs[i]
                  AND group_id IN (
                      SELECT group_id FROM groupoverlaps( mins[i], maxs[i] )
                      WHERE  srcfeature_id = s
                  )
            )
        LOOP
            RETURN NEXT f;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION frange.groupcontains(integer[], integer[], character varying[]) OWNER TO postgres;

--
-- Name: groupidentical(integer, integer, character varying); Type: FUNCTION; Schema: frange; Owner: postgres
--

CREATE FUNCTION groupidentical(integer, integer, character varying) RETURNS SETOF featuregroup
    LANGUAGE sql
    AS $_$
  SELECT *
  FROM groupoverlaps($1,$2,$3)
  WHERE fmin = $1 AND fmax = $2
$_$;


ALTER FUNCTION frange.groupidentical(integer, integer, character varying) OWNER TO postgres;

--
-- Name: groupidentical(integer[], integer[], character varying[]); Type: FUNCTION; Schema: frange; Owner: postgres
--

CREATE FUNCTION groupidentical(integer[], integer[], character varying[]) RETURNS SETOF featuregroup
    LANGUAGE plpgsql
    AS $_$
DECLARE
    mins alias for $1;
    maxs alias for $2;
    srcs alias for $3;
    f featuregroup%ROWTYPE;
    i int;
    s int;
BEGIN
    i := 1;
    FOR i in array_lower( mins, 1 ) .. array_upper( mins, 1 ) LOOP
        SELECT INTO s feature_id FROM feature WHERE uniquename = srcs[i];
        FOR f IN
            SELECT *
            FROM  featuregroup WHERE group_id IN (
                SELECT group_id FROM featuregroup
                WHERE (srcfeature_id = s OR srcfeature_id IS NULL)
                  AND fmin = mins[i]
                  AND fmax = maxs[i]
                  AND group_id IN (
                      SELECT group_id FROM groupoverlaps( mins[i], maxs[i] )
                      WHERE  srcfeature_id = s
                  )
            )
        LOOP
            RETURN NEXT f;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION frange.groupidentical(integer[], integer[], character varying[]) OWNER TO postgres;

--
-- Name: groupinside(integer, integer, character varying); Type: FUNCTION; Schema: frange; Owner: postgres
--

CREATE FUNCTION groupinside(integer, integer, character varying) RETURNS SETOF featuregroup
    LANGUAGE sql
    AS $_$
  SELECT *
  FROM groupoverlaps($1,$2,$3)
  WHERE fmin >= $1 AND fmax <= $2
$_$;


ALTER FUNCTION frange.groupinside(integer, integer, character varying) OWNER TO postgres;

--
-- Name: groupinside(integer[], integer[], character varying[]); Type: FUNCTION; Schema: frange; Owner: postgres
--

CREATE FUNCTION groupinside(integer[], integer[], character varying[]) RETURNS SETOF featuregroup
    LANGUAGE plpgsql
    AS $_$
DECLARE
    mins alias for $1;
    maxs alias for $2;
    srcs alias for $3;
    f featuregroup%ROWTYPE;
    i int;
    s int;
BEGIN
    i := 1;
    FOR i in array_lower( mins, 1 ) .. array_upper( mins, 1 ) LOOP
        SELECT INTO s feature_id FROM feature WHERE uniquename = srcs[i];
        FOR f IN
            SELECT *
            FROM  featuregroup WHERE group_id IN (
                SELECT group_id FROM featuregroup
                WHERE (srcfeature_id = s OR srcfeature_id IS NULL)
                  AND fmin >= mins[i]
                  AND fmax <= maxs[i]
                  AND group_id IN (
                      SELECT group_id FROM groupoverlaps( mins[i], maxs[i] )
                      WHERE  srcfeature_id = s
                  )
            )
        LOOP
            RETURN NEXT f;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION frange.groupinside(integer[], integer[], character varying[]) OWNER TO postgres;

--
-- Name: groupoverlaps(integer, integer); Type: FUNCTION; Schema: frange; Owner: postgres
--

CREATE FUNCTION groupoverlaps(integer, integer) RETURNS SETOF featuregroup
    LANGUAGE sql
    AS $_$
  SELECT *
  FROM featuregroup
  WHERE is_root = 1
    AND boxquery($1, $2) @ boxrange(fmin,fmax)
$_$;


ALTER FUNCTION frange.groupoverlaps(integer, integer) OWNER TO postgres;

--
-- Name: groupoverlaps(integer, integer, character varying); Type: FUNCTION; Schema: frange; Owner: postgres
--

CREATE FUNCTION groupoverlaps(integer, integer, character varying) RETURNS SETOF featuregroup
    LANGUAGE sql
    AS $_$
  SELECT g2.*
  FROM  featuregroup g1,
        featuregroup g2
  WHERE g1.is_root = 1
    AND ( g1.srcfeature_id = g2.srcfeature_id OR g2.srcfeature_id IS NULL )
    AND g1.group_id = g2.group_id
    AND g1.srcfeature_id = (SELECT feature_id FROM feature WHERE uniquename = $3)
    AND boxquery($1, $2) @ boxrange(g1.fmin,g2.fmax)
$_$;


ALTER FUNCTION frange.groupoverlaps(integer, integer, character varying) OWNER TO postgres;

--
-- Name: groupoverlaps(integer[], integer[], character varying[]); Type: FUNCTION; Schema: frange; Owner: postgres
--

CREATE FUNCTION groupoverlaps(integer[], integer[], character varying[]) RETURNS SETOF featuregroup
    LANGUAGE plpgsql
    AS $_$
DECLARE
    mins alias for $1;
    maxs alias for $2;
    srcs alias for $3;
    f featuregroup%ROWTYPE;
    i int;
    s int;
BEGIN
    i := 1;
    FOR i in array_lower( mins, 1 ) .. array_upper( mins, 1 ) LOOP
        SELECT INTO s feature_id FROM feature WHERE uniquename = srcs[i];
        FOR f IN
            SELECT *
            FROM  featuregroup WHERE group_id IN (
                SELECT group_id FROM featuregroup
                WHERE (srcfeature_id = s OR srcfeature_id IS NULL)
                  AND group_id IN (
                      SELECT group_id FROM groupoverlaps( mins[i], maxs[i] )
                      WHERE  srcfeature_id = s
                  )
            )
        LOOP
            RETURN NEXT f;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION frange.groupoverlaps(integer[], integer[], character varying[]) OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- Name: _fill_cvtermpath4node(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _fill_cvtermpath4node(integer, integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    origin alias for $1;
    child_id alias for $2;
    cvid alias for $3;
    typeid alias for $4;
    depth alias for $5;
    cterm cvterm_relationship%ROWTYPE;
    exist_c int;

BEGIN

    --- RAISE NOTICE 'depth=% root=%', depth,child_id;
    --- not check type_id as it may be null and not very meaningful in cvtermpath when pathdistance > 1
    SELECT INTO exist_c count(*) FROM cvtermpath WHERE cv_id = cvid AND object_id = origin AND subject_id = child_id AND pathdistance = depth;

    IF (exist_c = 0) THEN
        INSERT INTO cvtermpath (object_id, subject_id, cv_id, type_id, pathdistance) VALUES(origin, child_id, cvid, typeid, depth);
    END IF;
    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = child_id LOOP
        PERFORM _fill_cvtermpath4node(origin, cterm.subject_id, cvid, cterm.type_id, depth+1);
    END LOOP;
    RETURN 1;
END;
$_$;


ALTER FUNCTION public._fill_cvtermpath4node(integer, integer, integer, integer, integer) OWNER TO postgres;

--
-- Name: _fill_cvtermpath4node2detect_cycle(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _fill_cvtermpath4node2detect_cycle(integer, integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    origin alias for $1;
    child_id alias for $2;
    cvid alias for $3;
    typeid alias for $4;
    depth alias for $5;
    cterm cvterm_relationship%ROWTYPE;
    exist_c int;
    ccount  int;
    ecount  int;
    rtn     int;
BEGIN

    EXECUTE 'SELECT * FROM tmpcvtermpath p1, tmpcvtermpath p2 WHERE p1.subject_id=p2.object_id AND p1.object_id=p2.subject_id AND p1.object_id = '|| origin || ' AND p2.subject_id = ' || child_id || 'AND ' || depth || '> 0';
    GET DIAGNOSTICS ccount = ROW_COUNT;
    IF (ccount > 0) THEN
        --RAISE EXCEPTION 'FOUND CYCLE: node % on cycle path',origin;
        RETURN origin;
    END IF;

    EXECUTE 'SELECT * FROM tmpcvtermpath WHERE cv_id = ' || cvid || ' AND object_id = ' || origin || ' AND subject_id = ' || child_id || ' AND ' || origin || '<>' || child_id;
    GET DIAGNOSTICS ecount = ROW_COUNT;
    IF (ecount > 0) THEN
        --RAISE NOTICE 'FOUND TWICE (node), will check root obj % subj %',origin, child_id;
        SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(child_id, cvid);
        IF (rtn > 0) THEN
            RETURN rtn;
        END IF;
    END IF;

    EXECUTE 'SELECT * FROM tmpcvtermpath WHERE cv_id = ' || cvid || ' AND object_id = ' || origin || ' AND subject_id = ' || child_id || ' AND pathdistance = ' || depth;
    GET DIAGNOSTICS exist_c = ROW_COUNT;
    IF (exist_c = 0) THEN
        EXECUTE 'INSERT INTO tmpcvtermpath (object_id, subject_id, cv_id, type_id, pathdistance) VALUES(' || origin || ', ' || child_id || ', ' || cvid || ', ' || typeid || ', ' || depth || ')';
    END IF;

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = child_id LOOP
        --RAISE NOTICE 'DOING for node, % %', origin, cterm.subject_id;
        SELECT INTO rtn _fill_cvtermpath4node2detect_cycle(origin, cterm.subject_id, cvid, cterm.type_id, depth+1);
        IF (rtn > 0) THEN
            RETURN rtn;
        END IF;
    END LOOP;
    RETURN 0;
END;
$_$;


ALTER FUNCTION public._fill_cvtermpath4node2detect_cycle(integer, integer, integer, integer, integer) OWNER TO postgres;

--
-- Name: _fill_cvtermpath4root(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _fill_cvtermpath4root(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    rootid alias for $1;
    cvid alias for $2;
    ttype int;
    cterm cvterm_relationship%ROWTYPE;
    child cvterm_relationship%ROWTYPE;

BEGIN

    SELECT INTO ttype cvterm_id FROM cvterm WHERE (name = 'isa' OR name = 'is_a');
    PERFORM _fill_cvtermpath4node(rootid, rootid, cvid, ttype, 0);
    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = rootid LOOP
        PERFORM _fill_cvtermpath4root(cterm.subject_id, cvid);
        -- RAISE NOTICE 'DONE for term, %', cterm.subject_id;
    END LOOP;
    RETURN 1;
END;
$_$;


ALTER FUNCTION public._fill_cvtermpath4root(integer, integer) OWNER TO postgres;

--
-- Name: _fill_cvtermpath4root2detect_cycle(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _fill_cvtermpath4root2detect_cycle(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    rootid alias for $1;
    cvid alias for $2;
    ttype int;
    ccount int;
    cterm cvterm_relationship%ROWTYPE;
    child cvterm_relationship%ROWTYPE;
    rtn     int;
BEGIN

    SELECT INTO ttype cvterm_id FROM cvterm WHERE (name = 'isa' OR name = 'is_a');
    SELECT INTO rtn _fill_cvtermpath4node2detect_cycle(rootid, rootid, cvid, ttype, 0);
    IF (rtn > 0) THEN
        RETURN rtn;
    END IF;
    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = rootid LOOP
        EXECUTE 'SELECT * FROM tmpcvtermpath p1, tmpcvtermpath p2 WHERE p1.subject_id=p2.object_id AND p1.object_id=p2.subject_id AND p1.object_id=' || rootid || ' AND p1.subject_id=' || cterm.subject_id;
        GET DIAGNOSTICS ccount = ROW_COUNT;
        IF (ccount > 0) THEN
            --RAISE NOTICE 'FOUND TWICE (root), will check root obj % subj %',rootid,cterm.subject_id;
            SELECT INTO rtn _fill_cvtermpath4node2detect_cycle(rootid, cterm.subject_id, cvid, ttype, 0);
            IF (rtn > 0) THEN
                RETURN rtn;
            END IF;
        ELSE
            SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(cterm.subject_id, cvid);
            IF (rtn > 0) THEN
                RETURN rtn;
            END IF;
        END IF;
    END LOOP;
    RETURN 0;
END;
$_$;


ALTER FUNCTION public._fill_cvtermpath4root2detect_cycle(integer, integer) OWNER TO postgres;

--
-- Name: _fill_cvtermpath4soi(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _fill_cvtermpath4soi(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    rootid alias for $1;
    cvid alias for $2;
    ttype int;
    cterm soi_type%ROWTYPE;

BEGIN
    
    SELECT INTO ttype cvterm_id FROM cvterm WHERE name = 'isa';
    --RAISE NOTICE 'got ttype %',ttype;
    PERFORM _fill_cvtermpath4soinode(rootid, rootid, cvid, ttype, 0);
    FOR cterm IN SELECT tmp_type AS type_id, subject_id FROM tmpcvtr WHERE object_id = rootid LOOP
        PERFORM _fill_cvtermpath4soi(cterm.subject_id, cvid);
    END LOOP;
    RETURN 1;
END;   
$_$;


ALTER FUNCTION public._fill_cvtermpath4soi(integer, integer) OWNER TO postgres;

--
-- Name: _fill_cvtermpath4soinode(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _fill_cvtermpath4soinode(integer, integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    origin alias for $1;
    child_id alias for $2;
    cvid alias for $3;
    typeid alias for $4;
    depth alias for $5;
    cterm soi_type%ROWTYPE;
    exist_c int;

BEGIN

    --RAISE NOTICE 'depth=% o=%, root=%, cv=%, t=%', depth,origin,child_id,cvid,typeid;
    SELECT INTO exist_c count(*) FROM cvtermpath WHERE cv_id = cvid AND object_id = origin AND subject_id = child_id AND pathdistance = depth;
    --- longest path
    IF (exist_c > 0) THEN
        UPDATE cvtermpath SET pathdistance = depth WHERE cv_id = cvid AND object_id = origin AND subject_id = child_id;
    ELSE
        INSERT INTO cvtermpath (object_id, subject_id, cv_id, type_id, pathdistance) VALUES(origin, child_id, cvid, typeid, depth);
    END IF;

    FOR cterm IN SELECT tmp_type AS type_id, subject_id FROM tmpcvtr WHERE object_id = child_id LOOP
        PERFORM _fill_cvtermpath4soinode(origin, cterm.subject_id, cvid, cterm.type_id, depth+1);
    END LOOP;
    RETURN 1;
END;
$_$;


ALTER FUNCTION public._fill_cvtermpath4soinode(integer, integer, integer, integer, integer) OWNER TO postgres;

--
-- Name: cvtermpath; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cvtermpath (
    cvtermpath_id integer NOT NULL,
    type_id integer,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    cv_id integer NOT NULL,
    pathdistance integer
);


ALTER TABLE public.cvtermpath OWNER TO postgres;

--
-- Name: TABLE cvtermpath; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cvtermpath IS 'The reflexive transitive closure of
the cvterm_relationship relation.';


--
-- Name: COLUMN cvtermpath.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvtermpath.type_id IS 'The relationship type that
this is a closure over. If null, then this is a closure over ALL
relationship types. If non-null, then this references a relationship
cvterm - note that the closure will apply to both this relationship
AND the OBO_REL:is_a (subclass) relationship.';


--
-- Name: COLUMN cvtermpath.cv_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvtermpath.cv_id IS 'Closures will mostly be within
one cv. If the closure of a relationship traverses a cv, then this
refers to the cv of the object_id cvterm.';


--
-- Name: COLUMN cvtermpath.pathdistance; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvtermpath.pathdistance IS 'The number of steps
required to get from the subject cvterm to the object cvterm, counting
from zero (reflexive relationship).';


--
-- Name: _get_all_object_ids(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _get_all_object_ids(integer) RETURNS SETOF cvtermpath
    LANGUAGE plpgsql
    AS $_$
DECLARE
    leaf alias for $1;
    cterm cvtermpath%ROWTYPE;
    cterm2 cvtermpath%ROWTYPE;
BEGIN

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE subject_id = leaf LOOP
        RETURN NEXT cterm;
        FOR cterm2 IN SELECT * FROM _get_all_object_ids(cterm.object_id) LOOP
            RETURN NEXT cterm2;
        END LOOP;
    END LOOP;
    RETURN;
END;   
$_$;


ALTER FUNCTION public._get_all_object_ids(integer) OWNER TO postgres;

--
-- Name: _get_all_subject_ids(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _get_all_subject_ids(integer) RETURNS SETOF cvtermpath
    LANGUAGE plpgsql
    AS $_$
DECLARE
    root alias for $1;
    cterm cvtermpath%ROWTYPE;
    cterm2 cvtermpath%ROWTYPE;
BEGIN

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = root LOOP
        RETURN NEXT cterm;
        FOR cterm2 IN SELECT * FROM _get_all_subject_ids(cterm.subject_id) LOOP
            RETURN NEXT cterm2;
        END LOOP;
    END LOOP;
    RETURN;
END;   
$_$;


ALTER FUNCTION public._get_all_subject_ids(integer) OWNER TO postgres;

--
-- Name: boxquery(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION boxquery(integer, integer) RETURNS box
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT box (create_point($1, $2), create_point($1, $2))$_$;


ALTER FUNCTION public.boxquery(integer, integer) OWNER TO postgres;

--
-- Name: boxquery(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION boxquery(integer, integer, integer) RETURNS box
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT box (create_point($1, $2), create_point($1, $3))$_$;


ALTER FUNCTION public.boxquery(integer, integer, integer) OWNER TO postgres;

--
-- Name: boxrange(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION boxrange(integer, integer) RETURNS box
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT box (create_point(0, $1), create_point($2,500000000))$_$;


ALTER FUNCTION public.boxrange(integer, integer) OWNER TO postgres;

--
-- Name: boxrange(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION boxrange(integer, integer, integer) RETURNS box
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT box (create_point($1, $2), create_point($1,$3))$_$;


ALTER FUNCTION public.boxrange(integer, integer, integer) OWNER TO postgres;

--
-- Name: complement_residues(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION complement_residues(text) RETURNS text
    LANGUAGE sql
    AS $_$SELECT (translate($1, 
                   'acgtrymkswhbvdnxACGTRYMKSWHBVDNX',
                   'tgcayrkmswdvbhnxTGCAYRKMSWDVBHNX'))$_$;


ALTER FUNCTION public.complement_residues(text) OWNER TO postgres;

--
-- Name: concat_pair(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION concat_pair(text, text) RETURNS text
    LANGUAGE sql
    AS $_$SELECT $1 || $2$_$;


ALTER FUNCTION public.concat_pair(text, text) OWNER TO postgres;

--
-- Name: create_point(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION create_point(integer, integer) RETURNS point
    LANGUAGE sql
    AS $_$SELECT point ($1, $2)$_$;


ALTER FUNCTION public.create_point(integer, integer) OWNER TO postgres;

--
-- Name: create_soi(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION create_soi() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    parent soi_type%ROWTYPE;
    isa_id cvterm.cvterm_id%TYPE;
    soi_term TEXT := 'soi';
    soi_def TEXT := 'ontology of SO feature instantiated in database';
    soi_cvid INTEGER;
    soiterm_id INTEGER;
    pcount INTEGER;
    count INTEGER := 0;
    cquery TEXT;
BEGIN

    SELECT INTO isa_id cvterm_id FROM cvterm WHERE name = 'isa';

    SELECT INTO soi_cvid cv_id FROM cv WHERE name = soi_term;
    IF (soi_cvid > 0) THEN
        DELETE FROM cvtermpath WHERE cv_id = soi_cvid;
        DELETE FROM cvterm WHERE cv_id = soi_cvid;
    ELSE
        INSERT INTO cv (name, definition) VALUES(soi_term, soi_def);
    END IF;
    SELECT INTO soi_cvid cv_id FROM cv WHERE name = soi_term;
    INSERT INTO cvterm (name, cv_id) VALUES(soi_term, soi_cvid);
    SELECT INTO soiterm_id cvterm_id FROM cvterm WHERE name = soi_term;

    CREATE TEMP TABLE tmpcvtr (tmp_type INT, type_id INT, subject_id INT, object_id INT);
    CREATE UNIQUE INDEX u_tmpcvtr ON tmpcvtr(subject_id, object_id);

    INSERT INTO tmpcvtr (tmp_type, type_id, subject_id, object_id)
        SELECT DISTINCT isa_id, soiterm_id, f.type_id, soiterm_id FROM feature f, cvterm t
        WHERE f.type_id = t.cvterm_id AND f.type_id > 0;
    EXECUTE 'select * from tmpcvtr where type_id = ' || soiterm_id || ';';
    get diagnostics pcount = row_count;
    raise notice 'all types in feature %',pcount;
--- do it hard way, delete any child feature type from above (NOT IN clause did not work)
    FOR parent IN SELECT DISTINCT 0, t.cvterm_id, 0 FROM feature c, feature_relationship fr, cvterm t
            WHERE t.cvterm_id = c.type_id AND c.feature_id = fr.subject_id LOOP
        DELETE FROM tmpcvtr WHERE type_id = soiterm_id and object_id = soiterm_id
            AND subject_id = parent.subject_id;
    END LOOP;
    EXECUTE 'select * from tmpcvtr where type_id = ' || soiterm_id || ';';
    get diagnostics pcount = row_count;
    raise notice 'all types in feature after delete child %',pcount;

    --- create feature type relationship (store in tmpcvtr)
    CREATE TEMP TABLE tmproot (cv_id INTEGER not null, cvterm_id INTEGER not null, status INTEGER DEFAULT 0);
    cquery := 'SELECT * FROM tmproot tmp WHERE tmp.status = 0;';
    ---temp use tmpcvtr to hold instantiated SO relationship for speed
    ---use soterm_id as type_id, will delete from tmpcvtr
    ---us tmproot for this as well
    INSERT INTO tmproot (cv_id, cvterm_id, status) SELECT DISTINCT soi_cvid, c.subject_id, 0 FROM tmpcvtr c
        WHERE c.object_id = soiterm_id;
    EXECUTE cquery;
    GET DIAGNOSTICS pcount = ROW_COUNT;
    WHILE (pcount > 0) LOOP
        RAISE NOTICE 'num child temp (to be inserted) in tmpcvtr: %',pcount;
        INSERT INTO tmpcvtr (tmp_type, type_id, subject_id, object_id)
            SELECT DISTINCT fr.type_id, soiterm_id, c.type_id, p.cvterm_id FROM feature c, feature_relationship fr,
            tmproot p, feature pf, cvterm t WHERE c.feature_id = fr.subject_id AND fr.object_id = pf.feature_id
            AND p.cvterm_id = pf.type_id AND t.cvterm_id = c.type_id AND p.status = 0;
        UPDATE tmproot SET status = 1 WHERE status = 0;
        INSERT INTO tmproot (cv_id, cvterm_id, status)
            SELECT DISTINCT soi_cvid, c.type_id, 0 FROM feature c, feature_relationship fr,
            tmproot tmp, feature p, cvterm t WHERE c.feature_id = fr.subject_id AND fr.object_id = p.feature_id
            AND tmp.cvterm_id = p.type_id AND t.cvterm_id = c.type_id AND tmp.status = 1;
        UPDATE tmproot SET status = 2 WHERE status = 1;
        EXECUTE cquery;
        GET DIAGNOSTICS pcount = ROW_COUNT; 
    END LOOP;
    DELETE FROM tmproot;

    ---get transitive closure for soi
    PERFORM _fill_cvtermpath4soi(soiterm_id, soi_cvid);

    DROP TABLE tmpcvtr;
    DROP TABLE tmproot;

    RETURN 1;
END;
$$;


ALTER FUNCTION public.create_soi() OWNER TO postgres;

--
-- Name: feature; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature (
    feature_id integer NOT NULL,
    dbxref_id integer,
    organism_id integer NOT NULL,
    name character varying(255),
    uniquename text NOT NULL,
    residues text,
    seqlen integer,
    md5checksum character(32),
    type_id integer NOT NULL,
    is_analysis boolean DEFAULT false NOT NULL,
    is_obsolete boolean DEFAULT false NOT NULL,
    timeaccessioned timestamp without time zone DEFAULT now() NOT NULL,
    timelastmodified timestamp without time zone DEFAULT now() NOT NULL
);
ALTER TABLE ONLY feature ALTER COLUMN residues SET STORAGE EXTERNAL;


ALTER TABLE public.feature OWNER TO postgres;

--
-- Name: TABLE feature; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature IS 'A feature is a biological sequence or a
section of a biological sequence, or a collection of such
sections. Examples include genes, exons, transcripts, regulatory
regions, polypeptides, protein domains, chromosome sequences, sequence
variations, cross-genome match regions such as hits and HSPs and so
on; see the Sequence Ontology for more. The combination of
organism_id, uniquename and type_id should be unique.';


--
-- Name: COLUMN feature.dbxref_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.dbxref_id IS 'An optional primary public stable
identifier for this feature. Secondary identifiers and external
dbxrefs go in the table feature_dbxref.';


--
-- Name: COLUMN feature.organism_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.organism_id IS 'The organism to which this feature
belongs. This column is mandatory.';


--
-- Name: COLUMN feature.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.name IS 'The optional human-readable common name for
a feature, for display purposes.';


--
-- Name: COLUMN feature.uniquename; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.uniquename IS 'The unique name for a feature; may
not be necessarily be particularly human-readable, although this is
preferred. This name must be unique for this type of feature within
this organism.';


--
-- Name: COLUMN feature.residues; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.residues IS 'A sequence of alphabetic characters
representing biological residues (nucleic acids, amino acids). This
column does not need to be manifested for all features; it is optional
for features such as exons where the residues can be derived from the
featureloc. It is recommended that the value for this column be
manifested for features which may may non-contiguous sublocations (e.g.
transcripts), since derivation at query time is non-trivial. For
expressed sequence, the DNA sequence should be used rather than the
RNA sequence. The default storage method for the residues column is
EXTERNAL, which will store it uncompressed to make substring operations
faster.';


--
-- Name: COLUMN feature.seqlen; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.seqlen IS 'The length of the residue feature. See
column:residues. This column is partially redundant with the residues
column, and also with featureloc. This column is required because the
location may be unknown and the residue sequence may not be
manifested, yet it may be desirable to store and query the length of
the feature. The seqlen should always be manifested where the length
of the sequence is known.';


--
-- Name: COLUMN feature.md5checksum; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.md5checksum IS 'The 32-character checksum of the sequence,
calculated using the MD5 algorithm. This is practically guaranteed to
be unique for any feature. This column thus acts as a unique
identifier on the mathematical sequence.';


--
-- Name: COLUMN feature.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.type_id IS 'A required reference to a table:cvterm
giving the feature type. This will typically be a Sequence Ontology
identifier. This column is thus used to subclass the feature table.';


--
-- Name: COLUMN feature.is_analysis; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.is_analysis IS 'Boolean indicating whether this
feature is annotated or the result of an automated analysis. Analysis
results also use the companalysis module. Note that the dividing line
between analysis and annotation may be fuzzy, this should be determined on
a per-project basis in a consistent manner. One requirement is that
there should only be one non-analysis version of each wild-type gene
feature in a genome, whereas the same gene feature can be predicted
multiple times in different analyses.';


--
-- Name: COLUMN feature.is_obsolete; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.is_obsolete IS 'Boolean indicating whether this
feature has been obsoleted. Some chado instances may choose to simply
remove the feature altogether, others may choose to keep an obsolete
row in the table.';


--
-- Name: COLUMN feature.timeaccessioned; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.timeaccessioned IS 'For handling object
accession or modification timestamps (as opposed to database auditing data,
handled elsewhere). The expectation is that these fields would be
available to software interacting with chado.';


--
-- Name: COLUMN feature.timelastmodified; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.timelastmodified IS 'For handling object
accession or modification timestamps (as opposed to database auditing data,
handled elsewhere). The expectation is that these fields would be
available to software interacting with chado.';


--
-- Name: feature_disjoint_from(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION feature_disjoint_from(integer) RETURNS SETOF feature
    LANGUAGE sql
    AS $_$SELECT feature.*
  FROM feature
   INNER JOIN featureloc AS x ON (x.feature_id=feature.feature_id)
   INNER JOIN featureloc AS y ON (y.feature_id = $1)
  WHERE
   x.srcfeature_id = y.srcfeature_id            AND
   ( x.fmax < y.fmin OR x.fmin > y.fmax ) $_$;


ALTER FUNCTION public.feature_disjoint_from(integer) OWNER TO postgres;

--
-- Name: feature_overlaps(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION feature_overlaps(integer) RETURNS SETOF feature
    LANGUAGE sql
    AS $_$SELECT feature.*
  FROM feature
   INNER JOIN featureloc AS x ON (x.feature_id=feature.feature_id)
   INNER JOIN featureloc AS y ON (y.feature_id = $1)
  WHERE
   x.srcfeature_id = y.srcfeature_id            AND
   ( x.fmax >= y.fmin AND x.fmin <= y.fmax ) $_$;


ALTER FUNCTION public.feature_overlaps(integer) OWNER TO postgres;

--
-- Name: featureloc; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE featureloc (
    featureloc_id integer NOT NULL,
    feature_id integer NOT NULL,
    srcfeature_id integer,
    fmin integer,
    is_fmin_partial boolean DEFAULT false NOT NULL,
    fmax integer,
    is_fmax_partial boolean DEFAULT false NOT NULL,
    strand smallint,
    phase integer,
    residue_info text,
    locgroup integer DEFAULT 0 NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    CONSTRAINT featureloc_c2 CHECK ((fmin <= fmax))
);


ALTER TABLE public.featureloc OWNER TO postgres;

--
-- Name: TABLE featureloc; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE featureloc IS 'The location of a feature relative to
another feature. Important: interbase coordinates are used. This is
vital as it allows us to represent zero-length features e.g. splice
sites, insertion points without an awkward fuzzy system. Features
typically have exactly ONE location, but this need not be the
case. Some features may not be localized (e.g. a gene that has been
characterized genetically but no sequence or molecular information is
available). Note on multiple locations: Each feature can have 0 or
more locations. Multiple locations do NOT indicate non-contiguous
locations (if a feature such as a transcript has a non-contiguous
location, then the subfeatures such as exons should always be
manifested). Instead, multiple featurelocs for a feature designate
alternate locations or grouped locations; for instance, a feature
designating a blast hit or hsp will have two locations, one on the
query feature, one on the subject feature. Features representing
sequence variation could have alternate locations instantiated on a
feature on the mutant strain. The column:rank is used to
differentiate these different locations. Reflexive locations should
never be stored - this is for -proper- (i.e. non-self) locations only; nothing should be located relative to itself.';


--
-- Name: COLUMN featureloc.feature_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.feature_id IS 'The feature that is being located. Any feature can have zero or more featurelocs.';


--
-- Name: COLUMN featureloc.srcfeature_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.srcfeature_id IS 'The source feature which this location is relative to. Every location is relative to another feature (however, this column is nullable, because the srcfeature may not be known). All locations are -proper- that is, nothing should be located relative to itself. No cycles are allowed in the featureloc graph.';


--
-- Name: COLUMN featureloc.fmin; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.fmin IS 'The leftmost/minimal boundary in the linear range represented by the featureloc. Sometimes (e.g. in Bioperl) this is called -start- although this is confusing because it does not necessarily represent the 5-prime coordinate. Important: This is space-based (interbase) coordinates, counting from zero. To convert this to the leftmost position in a base-oriented system (eg GFF, Bioperl), add 1 to fmin.';


--
-- Name: COLUMN featureloc.is_fmin_partial; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.is_fmin_partial IS 'This is typically
false, but may be true if the value for column:fmin is inaccurate or
the leftmost part of the range is unknown/unbounded.';


--
-- Name: COLUMN featureloc.fmax; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.fmax IS 'The rightmost/maximal boundary in the linear range represented by the featureloc. Sometimes (e.g. in bioperl) this is called -end- although this is confusing because it does not necessarily represent the 3-prime coordinate. Important: This is space-based (interbase) coordinates, counting from zero. No conversion is required to go from fmax to the rightmost coordinate in a base-oriented system that counts from 1 (e.g. GFF, Bioperl).';


--
-- Name: COLUMN featureloc.is_fmax_partial; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.is_fmax_partial IS 'This is typically
false, but may be true if the value for column:fmax is inaccurate or
the rightmost part of the range is unknown/unbounded.';


--
-- Name: COLUMN featureloc.strand; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.strand IS 'The orientation/directionality of the
location. Should be 0, -1 or +1.';


--
-- Name: COLUMN featureloc.phase; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.phase IS 'Phase of translation with
respect to srcfeature_id.
Values are 0, 1, 2. It may not be possible to manifest this column for
some features such as exons, because the phase is dependant on the
spliceform (the same exon can appear in multiple spliceforms). This column is mostly useful for predicted exons and CDSs.';


--
-- Name: COLUMN featureloc.residue_info; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.residue_info IS 'Alternative residues,
when these differ from feature.residues. For instance, a SNP feature
located on a wild and mutant protein would have different alternative residues.
for alignment/similarity features, the alternative residues is used to
represent the alignment string (CIGAR format). Note on variation
features; even if we do not want to instantiate a mutant
chromosome/contig feature, we can still represent a SNP etc with 2
locations, one (rank 0) on the genome, the other (rank 1) would have
most fields null, except for alternative residues.';


--
-- Name: COLUMN featureloc.locgroup; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.locgroup IS 'This is used to manifest redundant,
derivable extra locations for a feature. The default locgroup=0 is
used for the DIRECT location of a feature. Important: most Chado users may
never use featurelocs WITH logroup > 0. Transitively derived locations
are indicated with locgroup > 0. For example, the position of an exon on
a BAC and in global chromosome coordinates. This column is used to
differentiate these groupings of locations. The default locgroup 0
is used for the main or primary location, from which the others can be
derived via coordinate transformations. Another example of redundant
locations is storing ORF coordinates relative to both transcript and
genome. Redundant locations open the possibility of the database
getting into inconsistent states; this schema gives us the flexibility
of both warehouse instantiations with redundant locations (easier for
querying) and management instantiations with no redundant
locations. An example of using both locgroup and rank: imagine a
feature indicating a conserved region between the chromosomes of two
different species. We may want to keep redundant locations on both
contigs and chromosomes. We would thus have 4 locations for the single
conserved region feature - two distinct locgroups (contig level and
chromosome level) and two distinct ranks (for the two species).';


--
-- Name: COLUMN featureloc.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.rank IS 'Used when a feature has >1
location, otherwise the default rank 0 is used. Some features (e.g.
blast hits and HSPs) have two locations - one on the query and one on
the subject. Rank is used to differentiate these. Rank=0 is always
used for the query, Rank=1 for the subject. For multiple alignments,
assignment of rank is arbitrary. Rank is also used for
sequence_variant features, such as SNPs. Rank=0 indicates the wildtype
(or baseline) feature, Rank=1 indicates the mutant (or compared) feature.';


--
-- Name: feature_subalignments(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION feature_subalignments(integer) RETURNS SETOF featureloc
    LANGUAGE plpgsql
    AS $_$
DECLARE
  return_data featureloc%ROWTYPE;
  f_id ALIAS FOR $1;
  feature_data feature%rowtype;
  featureloc_data featureloc%rowtype;

  s text;

  fmin integer;
  slen integer;
BEGIN
  --RAISE NOTICE 'feature_id is %', featureloc_data.feature_id;
  SELECT INTO feature_data * FROM feature WHERE feature_id = f_id;

  FOR featureloc_data IN SELECT * FROM featureloc WHERE feature_id = f_id LOOP

    --RAISE NOTICE 'fmin is %', featureloc_data.fmin;

    return_data.feature_id      = f_id;
    return_data.srcfeature_id   = featureloc_data.srcfeature_id;
    return_data.is_fmin_partial = featureloc_data.is_fmin_partial;
    return_data.is_fmax_partial = featureloc_data.is_fmax_partial;
    return_data.strand          = featureloc_data.strand;
    return_data.phase           = featureloc_data.phase;
    return_data.residue_info    = featureloc_data.residue_info;
    return_data.locgroup        = featureloc_data.locgroup;
    return_data.rank            = featureloc_data.rank;

    s = feature_data.residues;
    fmin = featureloc_data.fmin;
    slen = char_length(s);

    WHILE char_length(s) LOOP
      --RAISE NOTICE 'residues is %', s;

      --trim off leading match
      s = trim(leading '|ATCGNatcgn' from s);
      --if leading match detected
      IF slen > char_length(s) THEN
        return_data.fmin = fmin;
        return_data.fmax = featureloc_data.fmin + (slen - char_length(s));

        --if the string started with a match, return it,
        --otherwise, trim the gaps first (ie do not return this iteration)
        RETURN NEXT return_data;
      END IF;

      --trim off leading gap
      s = trim(leading '-' from s);

      fmin = featureloc_data.fmin + (slen - char_length(s));
    END LOOP;
  END LOOP;

  RETURN;

END;
$_$;


ALTER FUNCTION public.feature_subalignments(integer) OWNER TO postgres;

--
-- Name: featureloc_slice(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION featureloc_slice(integer, integer) RETURNS SETOF featureloc
    LANGUAGE sql
    AS $_$SELECT * from featureloc where boxquery($1, $2) @ boxrange(fmin,fmax)$_$;


ALTER FUNCTION public.featureloc_slice(integer, integer) OWNER TO postgres;

--
-- Name: featureloc_slice(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION featureloc_slice(character varying, integer, integer) RETURNS SETOF featureloc
    LANGUAGE sql
    AS $_$SELECT featureloc.* 
   FROM featureloc 
   INNER JOIN feature AS srcf ON (srcf.feature_id = featureloc.srcfeature_id)
   WHERE boxquery($2, $3) @ boxrange(fmin,fmax)
   AND srcf.name = $1 $_$;


ALTER FUNCTION public.featureloc_slice(character varying, integer, integer) OWNER TO postgres;

--
-- Name: featureloc_slice(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION featureloc_slice(integer, integer, integer) RETURNS SETOF featureloc
    LANGUAGE sql
    AS $_$SELECT * 
   FROM featureloc 
   WHERE boxquery($1, $2, $3) && boxrange(srcfeature_id,fmin,fmax)$_$;


ALTER FUNCTION public.featureloc_slice(integer, integer, integer) OWNER TO postgres;

--
-- Name: featureslice(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION featureslice(integer, integer) RETURNS SETOF featureloc
    LANGUAGE sql
    AS $_$SELECT * from featureloc where boxquery($1, $2) @ boxrange(fmin,fmax)$_$;


ALTER FUNCTION public.featureslice(integer, integer) OWNER TO postgres;

--
-- Name: fill_cvtermpath(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fill_cvtermpath(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    cvid alias for $1;
    root cvterm%ROWTYPE;

BEGIN

    DELETE FROM cvtermpath WHERE cv_id = cvid;

    FOR root IN SELECT DISTINCT t.* from cvterm t LEFT JOIN cvterm_relationship r ON (t.cvterm_id = r.subject_id) INNER JOIN cvterm_relationship r2 ON (t.cvterm_id = r2.object_id) WHERE t.cv_id = cvid AND r.subject_id is null LOOP
        PERFORM _fill_cvtermpath4root(root.cvterm_id, root.cv_id);
    END LOOP;
    RETURN 1;
END;   
$_$;


ALTER FUNCTION public.fill_cvtermpath(integer) OWNER TO postgres;

--
-- Name: fill_cvtermpath(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fill_cvtermpath(character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    cvname alias for $1;
    cv_id   int;
    rtn     int;
BEGIN

    SELECT INTO cv_id cv.cv_id from cv WHERE cv.name = cvname;
    SELECT INTO rtn fill_cvtermpath(cv_id);
    RETURN rtn;
END;   
$_$;


ALTER FUNCTION public.fill_cvtermpath(character varying) OWNER TO postgres;

--
-- Name: get_all_object_ids(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_all_object_ids(integer) RETURNS SETOF cvtermpath
    LANGUAGE plpgsql
    AS $_$
DECLARE
    leaf alias for $1;
    cterm cvtermpath%ROWTYPE;
    exist_c int;
BEGIN


    SELECT INTO exist_c count(*) FROM cvtermpath WHERE object_id = leaf and pathdistance <= 0;
    IF (exist_c > 0) THEN
        FOR cterm IN SELECT * FROM cvtermpath WHERE subject_id = leaf AND pathdistance > 0 LOOP
            RETURN NEXT cterm;
        END LOOP;
    ELSE
        FOR cterm IN SELECT * FROM _get_all_object_ids(leaf) LOOP
            RETURN NEXT cterm;
        END LOOP;
    END IF;
    RETURN;
END;   
$_$;


ALTER FUNCTION public.get_all_object_ids(integer) OWNER TO postgres;

--
-- Name: get_all_subject_ids(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_all_subject_ids(integer) RETURNS SETOF cvtermpath
    LANGUAGE plpgsql
    AS $_$
DECLARE
    root alias for $1;
    cterm cvtermpath%ROWTYPE;
    exist_c int;
BEGIN

    SELECT INTO exist_c count(*) FROM cvtermpath WHERE object_id = root and pathdistance <= 0;
    IF (exist_c > 0) THEN
        FOR cterm IN SELECT * FROM cvtermpath WHERE object_id = root and pathdistance > 0 LOOP
            RETURN NEXT cterm;
        END LOOP;
    ELSE
        FOR cterm IN SELECT * FROM _get_all_subject_ids(root) LOOP
            RETURN NEXT cterm;
        END LOOP;
    END IF;
    RETURN;
END;   
$_$;


ALTER FUNCTION public.get_all_subject_ids(integer) OWNER TO postgres;

--
-- Name: get_cv_id_for_feature(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_cv_id_for_feature() RETURNS integer
    LANGUAGE sql
    AS $$SELECT cv_id FROM cv WHERE name='sequence'$$;


ALTER FUNCTION public.get_cv_id_for_feature() OWNER TO postgres;

--
-- Name: get_cv_id_for_feature_relationsgip(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_cv_id_for_feature_relationsgip() RETURNS integer
    LANGUAGE sql
    AS $$SELECT cv_id FROM cv WHERE name='relationship'$$;


ALTER FUNCTION public.get_cv_id_for_feature_relationsgip() OWNER TO postgres;

--
-- Name: get_cv_id_for_featureprop(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_cv_id_for_featureprop() RETURNS integer
    LANGUAGE sql
    AS $$SELECT cv_id FROM cv WHERE name='feature_property'$$;


ALTER FUNCTION public.get_cv_id_for_featureprop() OWNER TO postgres;

--
-- Name: get_cycle_cvterm_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_cycle_cvterm_id(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    cvid alias for $1;
    root cvterm%ROWTYPE;
    rtn     int;
BEGIN

    CREATE TEMP TABLE tmpcvtermpath(object_id int, subject_id int, cv_id int, type_id int, pathdistance int);
    CREATE INDEX tmp_cvtpath1 ON tmpcvtermpath(object_id, subject_id);

    FOR root IN SELECT DISTINCT t.* from cvterm t LEFT JOIN cvterm_relationship r ON (t.cvterm_id = r.subject_id) INNER JOIN cvterm_relationship r2 ON (t.cvterm_id = r2.object_id) WHERE t.cv_id = cvid AND r.subject_id is null LOOP
        SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(root.cvterm_id, root.cv_id);
        IF (rtn > 0) THEN
            DROP TABLE tmpcvtermpath;
            RETURN rtn;
        END IF;
    END LOOP;
    DROP TABLE tmpcvtermpath;
    RETURN 0;
END;   
$_$;


ALTER FUNCTION public.get_cycle_cvterm_id(integer) OWNER TO postgres;

--
-- Name: get_cycle_cvterm_id(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_cycle_cvterm_id(character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    cvname alias for $1;
    cv_id int;
    rtn int;
BEGIN

    SELECT INTO cv_id cv.cv_id from cv WHERE cv.name = cvname;
    SELECT INTO rtn  get_cycle_cvterm_id(cv_id);

    RETURN rtn;
END;   
$_$;


ALTER FUNCTION public.get_cycle_cvterm_id(character varying) OWNER TO postgres;

--
-- Name: get_cycle_cvterm_id(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_cycle_cvterm_id(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    cvid alias for $1;
    rootid alias for $2;
    rtn     int;
BEGIN

    CREATE TEMP TABLE tmpcvtermpath(object_id int, subject_id int, cv_id int, type_id int, pathdistance int);
    CREATE INDEX tmp_cvtpath1 ON tmpcvtermpath(object_id, subject_id);

    SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(rootid, cvid);
    IF (rtn > 0) THEN
        DROP TABLE tmpcvtermpath;
        RETURN rtn;
    END IF;
    DROP TABLE tmpcvtermpath;
    RETURN 0;
END;   
$_$;


ALTER FUNCTION public.get_cycle_cvterm_id(integer, integer) OWNER TO postgres;

--
-- Name: get_cycle_cvterm_ids(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_cycle_cvterm_ids(integer) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    cvid alias for $1;
    root cvterm%ROWTYPE;
    rtn     int;
BEGIN


    FOR root IN SELECT DISTINCT t.* from cvterm t WHERE cv_id = cvid LOOP
        SELECT INTO rtn get_cycle_cvterm_id(cvid,root.cvterm_id);
        IF (rtn > 0) THEN
            RETURN NEXT rtn;
        END IF;
    END LOOP;
    RETURN;
END;   
$_$;


ALTER FUNCTION public.get_cycle_cvterm_ids(integer) OWNER TO postgres;

--
-- Name: get_feature_id(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_feature_id(character varying, character varying, character varying) RETURNS integer
    LANGUAGE sql
    AS $_$
  SELECT feature_id 
  FROM feature
  WHERE uniquename=$1
    AND type_id=get_feature_type_id($2)
    AND organism_id=get_organism_id($3)
 $_$;


ALTER FUNCTION public.get_feature_id(character varying, character varying, character varying) OWNER TO postgres;

--
-- Name: get_feature_ids(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_feature_ids(text) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    sql alias for $1;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;
    myrc3 feature_by_fx_type%ROWTYPE;

BEGIN

    FOR myrc IN EXECUTE sql LOOP
        RETURN NEXT myrc;
        FOR myrc2 IN SELECT * FROM get_up_feature_ids(myrc.feature_id) LOOP
            RETURN NEXT myrc2;
        END LOOP;
        FOR myrc3 IN SELECT * FROM get_sub_feature_ids(myrc.feature_id) LOOP
            RETURN NEXT myrc3;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids(text) OWNER TO postgres;

--
-- Name: get_feature_ids_by_child_count(character varying, character varying, integer, character varying, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_feature_ids_by_child_count(character varying, character varying, integer, character varying, character) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    ptype alias for $1;
    ctype alias for $2;
    ccount alias for $3;
    operator alias for $4;
    is_an alias for $5;
    query TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type %ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT f.feature_id
        FROM feature f INNER join (select count(*) as c, p.feature_id FROM feature p
        INNER join cvterm pt ON (p.type_id = pt.cvterm_id) INNER join feature_relationship fr
        ON (p.feature_id = fr.object_id) INNER join feature c ON (c.feature_id = fr.subject_id)
        INNER join cvterm ct ON (c.type_id = ct.cvterm_id)
        WHERE pt.name = ' || quote_literal(ptype) || ' AND ct.name = ' || quote_literal(ctype)
        || ' AND p.is_analysis = ' || quote_literal(is_an) || ' group by p.feature_id) as cq
        ON (cq.feature_id = f.feature_id) WHERE cq.c ' || operator || ccount || ';';
    ---RAISE NOTICE '%', query; 

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_child_count(character varying, character varying, integer, character varying, character) OWNER TO postgres;

--
-- Name: get_feature_ids_by_ont(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_feature_ids_by_ont(character varying, character varying) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    aspect alias for $1;
    term alias for $2;
    query TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT fcvt.feature_id 
        FROM feature_cvterm fcvt, cv, cvterm t WHERE cv.cv_id = t.cv_id AND
        t.cvterm_id = fcvt.cvterm_id AND cv.name = ' || quote_literal(aspect) ||
        ' AND t.name = ' || quote_literal(term) || ';';
    IF (STRPOS(term, '%') > 0) THEN
        query := 'SELECT DISTINCT fcvt.feature_id 
            FROM feature_cvterm fcvt, cv, cvterm t WHERE cv.cv_id = t.cv_id AND
            t.cvterm_id = fcvt.cvterm_id AND cv.name = ' || quote_literal(aspect) ||
            ' AND t.name like ' || quote_literal(term) || ';';
    END IF;

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_ont(character varying, character varying) OWNER TO postgres;

--
-- Name: get_feature_ids_by_ont_root(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_feature_ids_by_ont_root(character varying, character varying) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    aspect alias for $1;
    term alias for $2;
    query TEXT;
    subquery TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    subquery := 'SELECT t.cvterm_id FROM cv, cvterm t WHERE cv.cv_id = t.cv_id 
        AND cv.name = ' || quote_literal(aspect) || ' AND t.name = ' || quote_literal(term) || ';';
    IF (STRPOS(term, '%') > 0) THEN
        subquery := 'SELECT t.cvterm_id FROM cv, cvterm t WHERE cv.cv_id = t.cv_id 
            AND cv.name = ' || quote_literal(aspect) || ' AND t.name like ' || quote_literal(term) || ';';
    END IF;
    query := 'SELECT DISTINCT fcvt.feature_id 
        FROM feature_cvterm fcvt INNER JOIN (SELECT cvterm_id FROM get_it_sub_cvterm_ids(' || quote_literal(subquery) || ')) AS ont ON (fcvt.cvterm_id = ont.cvterm_id);';

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_ont_root(character varying, character varying) OWNER TO postgres;

--
-- Name: get_feature_ids_by_property(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_feature_ids_by_property(character varying, character varying) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    p_type alias for $1;
    p_val alias for $2;
    query TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT fprop.feature_id 
        FROM featureprop fprop, cvterm t WHERE t.cvterm_id = fprop.type_id AND t.name = ' ||
        quote_literal(p_type) || ' AND fprop.value = ' || quote_literal(p_val) || ';';
    IF (STRPOS(p_val, '%') > 0) THEN
        query := 'SELECT DISTINCT fprop.feature_id 
            FROM featureprop fprop, cvterm t WHERE t.cvterm_id = fprop.type_id AND t.name = ' ||
            quote_literal(p_type) || ' AND fprop.value like ' || quote_literal(p_val) || ';';
    END IF;

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_property(character varying, character varying) OWNER TO postgres;

--
-- Name: get_feature_ids_by_propval(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_feature_ids_by_propval(character varying) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    p_val alias for $1;
    query TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT fprop.feature_id 
        FROM featureprop fprop WHERE fprop.value = ' || quote_literal(p_val) || ';';
    IF (STRPOS(p_val, '%') > 0) THEN
        query := 'SELECT DISTINCT fprop.feature_id 
            FROM featureprop fprop WHERE fprop.value like ' || quote_literal(p_val) || ';';
    END IF;

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_propval(character varying) OWNER TO postgres;

--
-- Name: get_feature_ids_by_type(character varying, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_feature_ids_by_type(character varying, character) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    gtype alias for $1;
    is_an alias for $2;
    query TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT f.feature_id 
        FROM feature f, cvterm t WHERE t.cvterm_id = f.type_id AND t.name = ' || quote_literal(gtype) ||
        ' AND f.is_analysis = ' || quote_literal(is_an) || ';';
    IF (STRPOS(gtype, '%') > 0) THEN
        query := 'SELECT DISTINCT f.feature_id 
            FROM feature f, cvterm t WHERE t.cvterm_id = f.type_id AND t.name like '
            || quote_literal(gtype) || ' AND f.is_analysis = ' || quote_literal(is_an) || ';';
    END IF;

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_type(character varying, character) OWNER TO postgres;

--
-- Name: get_feature_ids_by_type_name(character varying, text, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_feature_ids_by_type_name(character varying, text, character) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    gtype alias for $1;
    name alias for $2;
    is_an alias for $3;
    query TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT f.feature_id 
        FROM feature f INNER join cvterm t ON (f.type_id = t.cvterm_id)
        WHERE t.name = ' || quote_literal(gtype) || ' AND (f.uniquename = ' || quote_literal(name)
        || ' OR f.name = ' || quote_literal(name) || ') AND f.is_analysis = ' || quote_literal(is_an) || ';';
 
    IF (STRPOS(name, '%') > 0) THEN
        query := 'SELECT DISTINCT f.feature_id 
            FROM feature f INNER join cvterm t ON (f.type_id = t.cvterm_id)
            WHERE t.name = ' || quote_literal(gtype) || ' AND (f.uniquename like ' || quote_literal(name)
            || ' OR f.name like ' || quote_literal(name) || ') AND f.is_analysis = ' || quote_literal(is_an) || ';';
    END IF;

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_type_name(character varying, text, character) OWNER TO postgres;

--
-- Name: get_feature_ids_by_type_src(character varying, text, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_feature_ids_by_type_src(character varying, text, character) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    gtype alias for $1;
    src alias for $2;
    is_an alias for $3;
    query TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT f.feature_id 
        FROM feature f INNER join cvterm t ON (f.type_id = t.cvterm_id) INNER join featureloc fl
        ON (f.feature_id = fl.feature_id) INNER join feature src ON (src.feature_id = fl.srcfeature_id)
        WHERE t.name = ' || quote_literal(gtype) || ' AND src.uniquename = ' || quote_literal(src)
        || ' AND f.is_analysis = ' || quote_literal(is_an) || ';';
 
    IF (STRPOS(gtype, '%') > 0) THEN
        query := 'SELECT DISTINCT f.feature_id 
            FROM feature f INNER join cvterm t ON (f.type_id = t.cvterm_id) INNER join featureloc fl
            ON (f.feature_id = fl.feature_id) INNER join feature src ON (src.feature_id = fl.srcfeature_id)
            WHERE t.name like ' || quote_literal(gtype) || ' AND src.uniquename = ' || quote_literal(src)
            || ' AND f.is_analysis = ' || quote_literal(is_an) || ';';
    END IF;

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_type_src(character varying, text, character) OWNER TO postgres;

--
-- Name: get_feature_relationship_type_id(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_feature_relationship_type_id(character varying) RETURNS integer
    LANGUAGE sql
    AS $_$
  SELECT cvterm_id 
  FROM cv INNER JOIN cvterm USING (cv_id)
  WHERE cvterm.name=$1 AND cv.name='relationship'
 $_$;


ALTER FUNCTION public.get_feature_relationship_type_id(character varying) OWNER TO postgres;

--
-- Name: get_feature_type_id(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_feature_type_id(character varying) RETURNS integer
    LANGUAGE sql
    AS $_$ 
  SELECT cvterm_id 
  FROM cv INNER JOIN cvterm USING (cv_id)
  WHERE cvterm.name=$1 AND cv.name='sequence'
 $_$;


ALTER FUNCTION public.get_feature_type_id(character varying) OWNER TO postgres;

--
-- Name: get_featureprop_type_id(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_featureprop_type_id(character varying) RETURNS integer
    LANGUAGE sql
    AS $_$
  SELECT cvterm_id 
  FROM cv INNER JOIN cvterm USING (cv_id)
  WHERE cvterm.name=$1 AND cv.name='feature_property'
 $_$;


ALTER FUNCTION public.get_featureprop_type_id(character varying) OWNER TO postgres;

--
-- Name: get_graph_above(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_graph_above(integer) RETURNS SETOF cvtermpath
    LANGUAGE plpgsql
    AS $_$
DECLARE
    leaf alias for $1;
    cterm cvtermpath%ROWTYPE;
    cterm2 cvtermpath%ROWTYPE;

BEGIN

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE subject_id = leaf LOOP
        RETURN NEXT cterm;
        FOR cterm2 IN SELECT * FROM get_all_object_ids(cterm.object_id) LOOP
            RETURN NEXT cterm2;
        END LOOP;
    END LOOP;
    RETURN;
END;   
$_$;


ALTER FUNCTION public.get_graph_above(integer) OWNER TO postgres;

--
-- Name: get_graph_below(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_graph_below(integer) RETURNS SETOF cvtermpath
    LANGUAGE plpgsql
    AS $_$
DECLARE
    root alias for $1;
    cterm cvtermpath%ROWTYPE;
    cterm2 cvtermpath%ROWTYPE;

BEGIN

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = root LOOP
        RETURN NEXT cterm;
        FOR cterm2 IN SELECT * FROM get_all_subject_ids(cterm.subject_id) LOOP
            RETURN NEXT cterm2;
        END LOOP;
    END LOOP;
    RETURN;
END;   
$_$;


ALTER FUNCTION public.get_graph_below(integer) OWNER TO postgres;

--
-- Name: cvterm; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cvterm (
    cvterm_id integer NOT NULL,
    cv_id integer NOT NULL,
    name character varying(1024) NOT NULL,
    definition text,
    dbxref_id integer NOT NULL,
    is_obsolete integer DEFAULT 0 NOT NULL,
    is_relationshiptype integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cvterm OWNER TO postgres;

--
-- Name: TABLE cvterm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cvterm IS 'A term, class, universal or type within an
ontology or controlled vocabulary.  This table is also used for
relations and properties. cvterms constitute nodes in the graph
defined by the collection of cvterms and cvterm_relationships.';


--
-- Name: COLUMN cvterm.cv_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm.cv_id IS 'The cv or ontology or namespace to which
this cvterm belongs.';


--
-- Name: COLUMN cvterm.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm.name IS 'A concise human-readable name or
label for the cvterm. Uniquely identifies a cvterm within a cv.';


--
-- Name: COLUMN cvterm.definition; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm.definition IS 'A human-readable text
definition.';


--
-- Name: COLUMN cvterm.dbxref_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm.dbxref_id IS 'Primary identifier dbxref - The
unique global OBO identifier for this cvterm.  Note that a cvterm may
have multiple secondary dbxrefs - see also table: cvterm_dbxref.';


--
-- Name: COLUMN cvterm.is_obsolete; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm.is_obsolete IS 'Boolean 0=false,1=true; see
GO documentation for details of obsoletion. Note that two terms with
different primary dbxrefs may exist if one is obsolete.';


--
-- Name: COLUMN cvterm.is_relationshiptype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm.is_relationshiptype IS 'Boolean
0=false,1=true relations or relationship types (also known as Typedefs
in OBO format, or as properties or slots) form a cv/ontology in
themselves. We use this flag to indicate whether this cvterm is an
actual term/class/universal or a relation. Relations may be drawn from
the OBO Relations ontology, but are not exclusively drawn from there.';


--
-- Name: get_it_sub_cvterm_ids(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_it_sub_cvterm_ids(text) RETURNS SETOF cvterm
    LANGUAGE plpgsql
    AS $_$
DECLARE
    query alias for $1;
    cterm cvterm%ROWTYPE;
    cterm2 cvterm%ROWTYPE;
BEGIN
    FOR cterm IN EXECUTE query LOOP
        RETURN NEXT cterm;
        FOR cterm2 IN SELECT subject_id as cvterm_id FROM get_all_subject_ids(cterm.cvterm_id) LOOP
            RETURN NEXT cterm2;
        END LOOP;
    END LOOP;
    RETURN;
END;   
$_$;


ALTER FUNCTION public.get_it_sub_cvterm_ids(text) OWNER TO postgres;

--
-- Name: get_organism_id(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_organism_id(character varying) RETURNS integer
    LANGUAGE sql
    AS $_$ 
SELECT organism_id
  FROM organism
  WHERE genus=substring($1,1,position(' ' IN $1)-1)
    AND species=substring($1,position(' ' IN $1)+1)
 $_$;


ALTER FUNCTION public.get_organism_id(character varying) OWNER TO postgres;

--
-- Name: get_organism_id(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_organism_id(character varying, character varying) RETURNS integer
    LANGUAGE sql
    AS $_$
  SELECT organism_id 
  FROM organism
  WHERE genus=$1
    AND species=$2
 $_$;


ALTER FUNCTION public.get_organism_id(character varying, character varying) OWNER TO postgres;

--
-- Name: get_organism_id_abbrev(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_organism_id_abbrev(character varying) RETURNS integer
    LANGUAGE sql
    AS $_$
SELECT organism_id
  FROM organism
  WHERE substr(genus,1,1)=substring($1,1,1)
    AND species=substring($1,position(' ' IN $1)+1)
 $_$;


ALTER FUNCTION public.get_organism_id_abbrev(character varying) OWNER TO postgres;

--
-- Name: get_sub_feature_ids(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_sub_feature_ids(text) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    sql alias for $1;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN
    FOR myrc IN EXECUTE sql LOOP
        FOR myrc2 IN SELECT * FROM get_sub_feature_ids(myrc.feature_id) LOOP
            RETURN NEXT myrc2;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_sub_feature_ids(text) OWNER TO postgres;

--
-- Name: get_sub_feature_ids(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_sub_feature_ids(integer) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    root alias for $1;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN
    FOR myrc IN SELECT DISTINCT subject_id AS feature_id FROM feature_relationship WHERE object_id = root LOOP
        RETURN NEXT myrc;
        FOR myrc2 IN SELECT * FROM get_sub_feature_ids(myrc.feature_id) LOOP
            RETURN NEXT myrc2;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_sub_feature_ids(integer) OWNER TO postgres;

--
-- Name: get_sub_feature_ids(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_sub_feature_ids(integer, integer) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    root alias for $1;
    depth alias for $2;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN
    FOR myrc IN SELECT DISTINCT subject_id AS feature_id, depth FROM feature_relationship WHERE object_id = root LOOP
        RETURN NEXT myrc;
        FOR myrc2 IN SELECT * FROM get_sub_feature_ids(myrc.feature_id,depth+1) LOOP
            RETURN NEXT myrc2;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_sub_feature_ids(integer, integer) OWNER TO postgres;

--
-- Name: get_sub_feature_ids_by_type_src(character varying, text, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_sub_feature_ids_by_type_src(character varying, text, character) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    gtype alias for $1;
    src alias for $2;
    is_an alias for $3;
    query text;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT f.feature_id FROM feature f INNER join cvterm t ON (f.type_id = t.cvterm_id)
        INNER join featureloc fl
        ON (f.feature_id = fl.feature_id) INNER join feature src ON (src.feature_id = fl.srcfeature_id)
        WHERE t.name = ' || quote_literal(gtype) || ' AND src.uniquename = ' || quote_literal(src)
        || ' AND f.is_analysis = ' || quote_literal(is_an) || ';';
 
    IF (STRPOS(gtype, '%') > 0) THEN
        query := 'SELECT DISTINCT f.feature_id FROM feature f INNER join cvterm t ON (f.type_id = t.cvterm_id)
             INNER join featureloc fl
            ON (f.feature_id = fl.feature_id) INNER join feature src ON (src.feature_id = fl.srcfeature_id)
            WHERE t.name like ' || quote_literal(gtype) || ' AND src.uniquename = ' || quote_literal(src)
            || ' AND f.is_analysis = ' || quote_literal(is_an) || ';';
    END IF;
    FOR myrc IN SELECT * FROM get_sub_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_sub_feature_ids_by_type_src(character varying, text, character) OWNER TO postgres;

--
-- Name: get_up_feature_ids(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_up_feature_ids(text) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    sql alias for $1;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN
    FOR myrc IN EXECUTE sql LOOP
        FOR myrc2 IN SELECT * FROM get_up_feature_ids(myrc.feature_id) LOOP
            RETURN NEXT myrc2;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_up_feature_ids(text) OWNER TO postgres;

--
-- Name: get_up_feature_ids(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_up_feature_ids(integer) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    leaf alias for $1;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;
BEGIN
    FOR myrc IN SELECT DISTINCT object_id AS feature_id FROM feature_relationship WHERE subject_id = leaf LOOP
        RETURN NEXT myrc;
        FOR myrc2 IN SELECT * FROM get_up_feature_ids(myrc.feature_id) LOOP
            RETURN NEXT myrc2;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_up_feature_ids(integer) OWNER TO postgres;

--
-- Name: get_up_feature_ids(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_up_feature_ids(integer, integer) RETURNS SETOF feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    leaf alias for $1;
    depth alias for $2;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;
BEGIN
    FOR myrc IN SELECT DISTINCT object_id AS feature_id, depth FROM feature_relationship WHERE subject_id = leaf LOOP
        RETURN NEXT myrc;
        FOR myrc2 IN SELECT * FROM get_up_feature_ids(myrc.feature_id,depth+1) LOOP
            RETURN NEXT myrc2;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_up_feature_ids(integer, integer) OWNER TO postgres;

--
-- Name: gffattstring(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gffattstring(integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$DECLARE
  return_string      varchar;
  f_id               ALIAS FOR $1;
  atts_view          gffatts%ROWTYPE;
  feature_row        feature%ROWTYPE;
  name               varchar;
  uniquename         varchar;
  parent             varchar;
  escape_loc         int; 
BEGIN
  --Get name from feature.name
  --Get ID from feature.uniquename
                                                                                
  SELECT INTO feature_row * FROM feature WHERE feature_id = f_id;
  name  = feature_row.name;
  return_string = 'ID=' || feature_row.uniquename;
  IF name IS NOT NULL AND name != ''
  THEN
    return_string = return_string ||';' || 'Name=' || name;
  END IF;
                                                                                
  --Get Parent from feature_relationship
  SELECT INTO feature_row * FROM feature f, feature_relationship fr
    WHERE fr.subject_id = f_id AND fr.object_id = f.feature_id;
  IF FOUND
  THEN
    return_string = return_string||';'||'Parent='||feature_row.uniquename;
  END IF;
                                                                                
  FOR atts_view IN SELECT * FROM gff3atts WHERE feature_id = f_id  LOOP
    escape_loc = position(';' in atts_view.attribute);
    IF escape_loc > 0 THEN
      atts_view.attribute = replace(atts_view.attribute, ';', '%3B');
    END IF;
    return_string = return_string || ';'
                     || atts_view.type || '='
                     || atts_view.attribute;
  END LOOP;
                                                                                
  RETURN return_string;
END;
$_$;


ALTER FUNCTION public.gffattstring(integer) OWNER TO postgres;

--
-- Name: db; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE db (
    db_id integer NOT NULL,
    name character varying(255) NOT NULL,
    description character varying(255),
    urlprefix character varying(255),
    url character varying(255)
);


ALTER TABLE public.db OWNER TO postgres;

--
-- Name: TABLE db; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE db IS 'A database authority. Typical databases in
bioinformatics are FlyBase, GO, UniProt, NCBI, MGI, etc. The authority
is generally known by this shortened form, which is unique within the
bioinformatics and biomedical realm.  To Do - add support for URIs,
URNs (e.g. LSIDs). We can do this by treating the URL as a URI -
however, some applications may expect this to be resolvable - to be
decided.';


--
-- Name: dbxref; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE dbxref (
    dbxref_id integer NOT NULL,
    db_id integer NOT NULL,
    accession character varying(255) NOT NULL,
    version character varying(255) DEFAULT ''::character varying NOT NULL,
    description text
);


ALTER TABLE public.dbxref OWNER TO postgres;

--
-- Name: TABLE dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE dbxref IS 'A unique, global, public, stable identifier. Not necessarily an external reference - can reference data items inside the particular chado instance being used. Typically a row in a table can be uniquely identified with a primary identifier (called dbxref_id); a table may also have secondary identifiers (in a linking table <T>_dbxref). A dbxref is generally written as <DB>:<ACCESSION> or as <DB>:<ACCESSION>:<VERSION>.';


--
-- Name: COLUMN dbxref.accession; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN dbxref.accession IS 'The local part of the identifier. Guaranteed by the db authority to be unique for that db.';


--
-- Name: feature_cvterm; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_cvterm (
    feature_cvterm_id integer NOT NULL,
    feature_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_not boolean DEFAULT false NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_cvterm OWNER TO postgres;

--
-- Name: TABLE feature_cvterm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_cvterm IS 'Associate a term from a cv with a feature, for example, GO annotation.';


--
-- Name: COLUMN feature_cvterm.pub_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_cvterm.pub_id IS 'Provenance for the annotation. Each annotation should have a single primary publication (which may be of the appropriate type for computational analyses) where more details can be found. Additional provenance dbxrefs can be attached using feature_cvterm_dbxref.';


--
-- Name: COLUMN feature_cvterm.is_not; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_cvterm.is_not IS 'If this is set to true, then this annotation is interpreted as a NEGATIVE annotation - i.e. the feature does NOT have the specified function, process, component, part, etc. See GO docs for more details.';


--
-- Name: feature_dbxref; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_dbxref (
    feature_dbxref_id integer NOT NULL,
    feature_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE public.feature_dbxref OWNER TO postgres;

--
-- Name: TABLE feature_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_dbxref IS 'Links a feature to dbxrefs. This is for secondary identifiers; primary identifiers should use feature.dbxref_id.';


--
-- Name: COLUMN feature_dbxref.is_current; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_dbxref.is_current IS 'True if this secondary dbxref is the most up to date accession in the corresponding db. Retired accessions should set this field to false';


--
-- Name: feature_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_pub (
    feature_pub_id integer NOT NULL,
    feature_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.feature_pub OWNER TO postgres;

--
-- Name: TABLE feature_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_pub IS 'Provenance. Linking table between features and publications that mention them.';


--
-- Name: feature_synonym; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_synonym (
    feature_synonym_id integer NOT NULL,
    synonym_id integer NOT NULL,
    feature_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_current boolean DEFAULT false NOT NULL,
    is_internal boolean DEFAULT false NOT NULL
);


ALTER TABLE public.feature_synonym OWNER TO postgres;

--
-- Name: TABLE feature_synonym; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_synonym IS 'Linking table between feature and synonym.';


--
-- Name: COLUMN feature_synonym.pub_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_synonym.pub_id IS 'The pub_id link is for relating the usage of a given synonym to the publication in which it was used.';


--
-- Name: COLUMN feature_synonym.is_current; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_synonym.is_current IS 'The is_current boolean indicates whether the linked synonym is the  current -official- symbol for the linked feature.';


--
-- Name: COLUMN feature_synonym.is_internal; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_synonym.is_internal IS 'Typically a synonym exists so that somebody querying the db with an obsolete name can find the object theyre looking for (under its current name.  If the synonym has been used publicly and deliberately (e.g. in a paper), it may also be listed in reports as a synonym. If the synonym was not used deliberately (e.g. there was a typo which went public), then the is_internal boolean may be set to -true- so that it is known that the synonym is -internal- and should be queryable but should not be listed in reports as a valid synonym.';


--
-- Name: featureprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE featureprop (
    featureprop_id integer NOT NULL,
    feature_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.featureprop OWNER TO postgres;

--
-- Name: TABLE featureprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE featureprop IS 'A feature can have any number of slot-value property tags attached to it. This is an alternative to hardcoding a list of columns in the relational schema, and is completely extensible.';


--
-- Name: COLUMN featureprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. Certain property types will only apply to certain feature
types (e.g. the anticodon property will only apply to tRNA features) ;
the types here come from the sequence feature property ontology.';


--
-- Name: COLUMN featureprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation. This is less efficient than using native database types, but is easier to query.';


--
-- Name: COLUMN featureprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureprop.rank IS 'Property-Value ordering. Any
feature can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used';


--
-- Name: pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pub (
    pub_id integer NOT NULL,
    title text,
    volumetitle text,
    volume character varying(255),
    series_name character varying(255),
    issue character varying(255),
    pyear character varying(255),
    pages character varying(255),
    miniref character varying(255),
    uniquename text NOT NULL,
    type_id integer NOT NULL,
    is_obsolete boolean DEFAULT false,
    publisher character varying(255),
    pubplace character varying(255)
);


ALTER TABLE public.pub OWNER TO postgres;

--
-- Name: TABLE pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE pub IS 'A documented provenance artefact - publications,
documents, personal communication.';


--
-- Name: COLUMN pub.title; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pub.title IS 'Descriptive general heading.';


--
-- Name: COLUMN pub.volumetitle; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pub.volumetitle IS 'Title of part if one of a series.';


--
-- Name: COLUMN pub.series_name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pub.series_name IS 'Full name of (journal) series.';


--
-- Name: COLUMN pub.pages; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pub.pages IS 'Page number range[s], e.g. 457--459, viii + 664pp, lv--lvii.';


--
-- Name: COLUMN pub.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pub.type_id IS 'The type of the publication (book, journal, poem, graffiti, etc). Uses pub cv.';


--
-- Name: synonym; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE synonym (
    synonym_id integer NOT NULL,
    name character varying(255) NOT NULL,
    type_id integer NOT NULL,
    synonym_sgml character varying(255) NOT NULL
);


ALTER TABLE public.synonym OWNER TO postgres;

--
-- Name: TABLE synonym; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE synonym IS 'A synonym for a feature. One feature can have multiple synonyms, and the same synonym can apply to multiple features.';


--
-- Name: COLUMN synonym.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN synonym.name IS 'The synonym itself. Should be human-readable machine-searchable ascii text.';


--
-- Name: COLUMN synonym.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN synonym.type_id IS 'Types would be symbol and fullname for now.';


--
-- Name: COLUMN synonym.synonym_sgml; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN synonym.synonym_sgml IS 'The fully specified synonym, with any non-ascii characters encoded in SGML.';


--
-- Name: gffatts; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW gffatts AS
    (((SELECT fs.feature_id, 'Ontology_term'::text AS type, s.name AS attribute FROM cvterm s, feature_cvterm fs WHERE (fs.cvterm_id = s.cvterm_id) UNION ALL SELECT fs.feature_id, 'Dbxref'::text AS type, (((d.name)::text || ':'::text) || (s.accession)::text) AS attribute FROM dbxref s, feature_dbxref fs, db d WHERE ((fs.dbxref_id = s.dbxref_id) AND (s.db_id = d.db_id))) UNION ALL SELECT fs.feature_id, 'Alias'::text AS type, s.name AS attribute FROM synonym s, feature_synonym fs WHERE (fs.synonym_id = s.synonym_id)) UNION ALL SELECT fp.feature_id, cv.name AS type, fp.value AS attribute FROM featureprop fp, cvterm cv WHERE (fp.type_id = cv.cvterm_id)) UNION ALL SELECT fs.feature_id, 'pub'::text AS type, (((s.series_name)::text || ':'::text) || s.title) AS attribute FROM pub s, feature_pub fs WHERE (fs.pub_id = s.pub_id);


ALTER TABLE public.gffatts OWNER TO postgres;

--
-- Name: gfffeatureatts(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gfffeatureatts(integer) RETURNS SETOF gffatts
    LANGUAGE sql
    AS $_$
SELECT feature_id, 'Ontology_term' AS type,  s.name AS attribute
FROM cvterm s, feature_cvterm fs
WHERE fs.feature_id= $1 AND fs.cvterm_id = s.cvterm_id
UNION
SELECT feature_id, 'Dbxref' AS type, d.name || ':' || s.accession AS attribute
FROM dbxref s, feature_dbxref fs, db d
WHERE fs.feature_id= $1 AND fs.dbxref_id = s.dbxref_id AND s.db_id = d.db_id
UNION
SELECT feature_id, 'Alias' AS type, s.name AS attribute
FROM synonym s, feature_synonym fs
WHERE fs.feature_id= $1 AND fs.synonym_id = s.synonym_id
UNION
SELECT fp.feature_id,cv.name,fp.value
FROM featureprop fp, cvterm cv
WHERE fp.feature_id= $1 AND fp.type_id = cv.cvterm_id 
UNION
SELECT feature_id, 'pub' AS type, s.series_name || ':' || s.title AS attribute
FROM pub s, feature_pub fs
WHERE fs.feature_id= $1 AND fs.pub_id = s.pub_id
$_$;


ALTER FUNCTION public.gfffeatureatts(integer) OWNER TO postgres;

--
-- Name: order_exons(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION order_exons(integer) RETURNS void
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    parent_type      ALIAS FOR $1;
    exon_id          int;
    part_of          int;
    exon_type        int;
    strand           int;
    arow             RECORD;
    order_by         varchar;
    rowcount         int;
    exon_count       int;
    ordered_exons    int;    
    transcript_id    int;
    transcript_row   feature%ROWTYPE;
  BEGIN
    SELECT INTO part_of cvterm_id FROM cvterm WHERE name='part_of'
      AND cv_id IN (SELECT cv_id FROM cv WHERE name='relationship');
    --SELECT INTO exon_type cvterm_id FROM cvterm WHERE name='exon'
    --  AND cv_id IN (SELECT cv_id FROM cv WHERE name='sequence');

    --RAISE NOTICE 'part_of %, exon %',part_of,exon_type;

    FOR transcript_row IN
      SELECT * FROM feature WHERE type_id = parent_type
    LOOP
      transcript_id = transcript_row.feature_id;
      SELECT INTO rowcount count(*) FROM feature_relationship
        WHERE object_id = transcript_id
          AND rank = 0;

      --Dont modify this transcript if there are already numbered exons or
      --if there is only one exon
      IF rowcount = 1 THEN
        --RAISE NOTICE 'skipping transcript %, row count %',transcript_id,rowcount;
        CONTINUE;
      END IF;

      --need to reverse the order if the strand is negative
      SELECT INTO strand strand FROM featureloc WHERE feature_id=transcript_id;
      IF strand > 0 THEN
          order_by = 'fl.fmin';      
      ELSE
          order_by = 'fl.fmax desc';
      END IF;

      exon_count = 0;
      FOR arow IN EXECUTE 
        'SELECT fr.*, fl.fmin, fl.fmax
          FROM feature_relationship fr, featureloc fl
          WHERE fr.object_id  = '||transcript_id||'
            AND fr.subject_id = fl.feature_id
            AND fr.type_id    = '||part_of||'
            ORDER BY '||order_by
      LOOP
        --number the exons for a given transcript
        UPDATE feature_relationship
          SET rank = exon_count 
          WHERE feature_relationship_id = arow.feature_relationship_id;
        exon_count = exon_count + 1;
      END LOOP; 

    END LOOP;

  END;
$_$;


ALTER FUNCTION public.order_exons(integer) OWNER TO postgres;

--
-- Name: phylonode_depth(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION phylonode_depth(integer) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$DECLARE  id    ALIAS FOR $1;
  DECLARE  depth FLOAT := 0;
  DECLARE  curr_node phylonode%ROWTYPE;
  BEGIN
   SELECT INTO curr_node *
    FROM phylonode 
    WHERE phylonode_id=id;
   depth = depth + curr_node.distance;
   IF curr_node.parent_phylonode_id IS NULL
    THEN RETURN depth;
    ELSE RETURN depth + phylonode_depth(curr_node.parent_phylonode_id);
   END IF;
 END
$_$;


ALTER FUNCTION public.phylonode_depth(integer) OWNER TO postgres;

--
-- Name: phylonode_height(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION phylonode_height(integer) RETURNS double precision
    LANGUAGE sql
    AS $_$
  SELECT coalesce(max(phylonode_height(phylonode_id) + distance), 0.0)
    FROM phylonode
    WHERE parent_phylonode_id = $1
$_$;


ALTER FUNCTION public.phylonode_height(integer) OWNER TO postgres;

--
-- Name: project_featureloc_up(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION project_featureloc_up(integer, integer) RETURNS featureloc
    LANGUAGE plpgsql
    AS $_$
DECLARE
    in_featureloc_id alias for $1;
    up_srcfeature_id alias for $2;
    in_featureloc featureloc%ROWTYPE;
    up_featureloc featureloc%ROWTYPE;
    nu_featureloc featureloc%ROWTYPE;
    nu_fmin INT;
    nu_fmax INT;
    nu_strand INT;
BEGIN
 SELECT INTO in_featureloc
   featureloc.*
  FROM featureloc
  WHERE featureloc_id = in_featureloc_id;

 SELECT INTO up_featureloc
   up_fl.*
  FROM featureloc AS in_fl
  INNER JOIN featureloc AS up_fl
    ON (in_fl.srcfeature_id = up_fl.feature_id)
  WHERE
   in_fl.featureloc_id = in_featureloc_id AND
   up_fl.srcfeature_id = up_srcfeature_id;

  IF up_featureloc.strand IS NULL
   THEN RETURN NULL;
  END IF;
  
  IF up_featureloc.strand < 0
  THEN
   nu_fmin = project_point_up(in_featureloc.fmax,
                              up_featureloc.fmin,up_featureloc.fmax,-1);
   nu_fmax = project_point_up(in_featureloc.fmin,
                              up_featureloc.fmin,up_featureloc.fmax,-1);
   nu_strand = -in_featureloc.strand;
  ELSE
   nu_fmin = project_point_up(in_featureloc.fmin,
                              up_featureloc.fmin,up_featureloc.fmax,1);
   nu_fmax = project_point_up(in_featureloc.fmax,
                              up_featureloc.fmin,up_featureloc.fmax,1);
   nu_strand = in_featureloc.strand;
  END IF;
  in_featureloc.fmin = nu_fmin;
  in_featureloc.fmax = nu_fmax;
  in_featureloc.strand = nu_strand;
  in_featureloc.srcfeature_id = up_featureloc.srcfeature_id;
  RETURN in_featureloc;
END
$_$;


ALTER FUNCTION public.project_featureloc_up(integer, integer) OWNER TO postgres;

--
-- Name: project_point_down(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION project_point_down(integer, integer, integer, integer) RETURNS integer
    LANGUAGE sql
    AS $_$SELECT
  CASE WHEN $4<0
   THEN $3-$1
   ELSE $1+$2
  END AS p$_$;


ALTER FUNCTION public.project_point_down(integer, integer, integer, integer) OWNER TO postgres;

--
-- Name: project_point_g2t(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION project_point_g2t(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
 DECLARE
    in_p             alias for $1;
    srcf_id          alias for $2;
    t_id             alias for $3;
    e_floc           featureloc%ROWTYPE;
    out_p            INT;
    exon_cvterm_id   INT;
BEGIN
 SELECT INTO exon_cvterm_id get_feature_type_id('exon');
 SELECT INTO out_p
  CASE 
   WHEN strand<0 THEN fmax-p
   ELSE p-fmin
   END AS p
  FROM featureloc
   INNER JOIN feature USING (feature_id)
   INNER JOIN feature_relationship ON (feature.feature_id=subject_id)
  WHERE
   object_id = t_id                     AND
   feature.type_id = exon_cvterm_id     AND
   featureloc.srcfeature_id = srcf_id   AND
   in_p >= fmin                         AND
   in_p <= fmax;
  RETURN in_featureloc;
END
$_$;


ALTER FUNCTION public.project_point_g2t(integer, integer, integer) OWNER TO postgres;

--
-- Name: project_point_up(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION project_point_up(integer, integer, integer, integer) RETURNS integer
    LANGUAGE sql
    AS $_$SELECT
  CASE WHEN $4<0
   THEN $3-$1             -- rev strand
   ELSE $1-$2             -- fwd strand
  END AS p$_$;


ALTER FUNCTION public.project_point_up(integer, integer, integer, integer) OWNER TO postgres;

--
-- Name: reverse_complement(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION reverse_complement(text) RETURNS text
    LANGUAGE sql
    AS $_$SELECT reverse_string(complement_residues($1))$_$;


ALTER FUNCTION public.reverse_complement(text) OWNER TO postgres;

--
-- Name: reverse_string(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION reverse_string(text) RETURNS text
    LANGUAGE plpgsql
    AS $_$
 DECLARE 
  reversed_string TEXT;
  incoming ALIAS FOR $1;
 BEGIN
   reversed_string = '';
   FOR i IN REVERSE char_length(incoming)..1 loop
     reversed_string = reversed_string || substring(incoming FROM i FOR 1);
   END loop;
 RETURN reversed_string;
END$_$;


ALTER FUNCTION public.reverse_string(text) OWNER TO postgres;

--
-- Name: share_exons(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION share_exons() RETURNS void
    LANGUAGE plpgsql
    AS $$    
  DECLARE    
  BEGIN
    /* Generate a table of shared exons */
    CREATE temporary TABLE shared_exons AS
      SELECT gene.feature_id as gene_feature_id
           , gene.uniquename as gene_uniquename
           , transcript1.uniquename as transcript1
           , exon1.feature_id as exon1_feature_id
           , exon1.uniquename as exon1_uniquename
           , transcript2.uniquename as transcript2
           , exon2.feature_id as exon2_feature_id
           , exon2.uniquename as exon2_uniquename
           , exon1_loc.fmin /* = exon2_loc.fmin */
           , exon1_loc.fmax /* = exon2_loc.fmax */
      FROM feature gene
        JOIN cvterm gene_type ON gene.type_id = gene_type.cvterm_id
        JOIN cv gene_type_cv USING (cv_id)
        JOIN feature_relationship gene_transcript1 ON gene.feature_id = gene_transcript1.object_id
        JOIN feature transcript1 ON gene_transcript1.subject_id = transcript1.feature_id
        JOIN cvterm transcript1_type ON transcript1.type_id = transcript1_type.cvterm_id
        JOIN cv transcript1_type_cv ON transcript1_type.cv_id = transcript1_type_cv.cv_id
        JOIN feature_relationship transcript1_exon1 ON transcript1_exon1.object_id = transcript1.feature_id
        JOIN feature exon1 ON transcript1_exon1.subject_id = exon1.feature_id
        JOIN cvterm exon1_type ON exon1.type_id = exon1_type.cvterm_id
        JOIN cv exon1_type_cv ON exon1_type.cv_id = exon1_type_cv.cv_id
        JOIN featureloc exon1_loc ON exon1_loc.feature_id = exon1.feature_id
        JOIN feature_relationship gene_transcript2 ON gene.feature_id = gene_transcript2.object_id
        JOIN feature transcript2 ON gene_transcript2.subject_id = transcript2.feature_id
        JOIN cvterm transcript2_type ON transcript2.type_id = transcript2_type.cvterm_id
        JOIN cv transcript2_type_cv ON transcript2_type.cv_id = transcript2_type_cv.cv_id
        JOIN feature_relationship transcript2_exon2 ON transcript2_exon2.object_id = transcript2.feature_id
        JOIN feature exon2 ON transcript2_exon2.subject_id = exon2.feature_id
        JOIN cvterm exon2_type ON exon2.type_id = exon2_type.cvterm_id
        JOIN cv exon2_type_cv ON exon2_type.cv_id = exon2_type_cv.cv_id
        JOIN featureloc exon2_loc ON exon2_loc.feature_id = exon2.feature_id
      WHERE gene_type_cv.name = 'sequence'
        AND gene_type.name = 'gene'
        AND transcript1_type_cv.name = 'sequence'
        AND transcript1_type.name = 'mRNA'
        AND transcript2_type_cv.name = 'sequence'
        AND transcript2_type.name = 'mRNA'
        AND exon1_type_cv.name = 'sequence'
        AND exon1_type.name = 'exon'
        AND exon2_type_cv.name = 'sequence'
        AND exon2_type.name = 'exon'
        AND exon1.feature_id < exon2.feature_id
        AND exon1_loc.rank = 0
        AND exon2_loc.rank = 0
        AND exon1_loc.fmin = exon2_loc.fmin
        AND exon1_loc.fmax = exon2_loc.fmax
    ;
    
    /* Choose one of the shared exons to be the canonical representative.
       We pick the one with the smallest feature_id.
     */
    CREATE temporary TABLE canonical_exon_representatives AS
      SELECT gene_feature_id, min(exon1_feature_id) AS canonical_feature_id, fmin
      FROM shared_exons
      GROUP BY gene_feature_id,fmin
    ;
    
    CREATE temporary TABLE exon_replacements AS
      SELECT DISTINCT shared_exons.exon2_feature_id AS actual_feature_id
                    , canonical_exon_representatives.canonical_feature_id
                    , canonical_exon_representatives.fmin
      FROM shared_exons
        JOIN canonical_exon_representatives USING (gene_feature_id)
      WHERE shared_exons.exon2_feature_id <> canonical_exon_representatives.canonical_feature_id
        AND shared_exons.fmin = canonical_exon_representatives.fmin
    ;
    
    UPDATE feature_relationship 
      SET subject_id = (
            SELECT canonical_feature_id
            FROM exon_replacements
            WHERE feature_relationship.subject_id = exon_replacements.actual_feature_id)
      WHERE subject_id IN (
        SELECT actual_feature_id FROM exon_replacements
    );
    
    UPDATE feature_relationship
      SET object_id = (
            SELECT canonical_feature_id
            FROM exon_replacements
            WHERE feature_relationship.subject_id = exon_replacements.actual_feature_id)
      WHERE object_id IN (
        SELECT actual_feature_id FROM exon_replacements
    );
    
    UPDATE feature
      SET is_obsolete = true
      WHERE feature_id IN (
        SELECT actual_feature_id FROM exon_replacements
    );
  END;    
$$;


ALTER FUNCTION public.share_exons() OWNER TO postgres;

--
-- Name: store_analysis(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_analysis(character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
   v_program            ALIAS FOR $1;
   v_programversion     ALIAS FOR $2;
   v_sourcename         ALIAS FOR $3;
   pkval                INTEGER;
 BEGIN
    SELECT INTO pkval analysis_id
      FROM analysis
      WHERE program=v_program AND
            programversion=v_programversion AND
            sourcename=v_sourcename;
    IF NOT FOUND THEN
      INSERT INTO analysis 
       (program,programversion,sourcename)
         VALUES
       (v_program,v_programversion,v_sourcename);
      RETURN currval('analysis_analysis_id_seq');
    END IF;
    RETURN pkval;
 END;
$_$;


ALTER FUNCTION public.store_analysis(character varying, character varying, character varying) OWNER TO postgres;

--
-- Name: store_db(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_db(character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
   v_name             ALIAS FOR $1;

   v_db_id            INTEGER;
 BEGIN
    SELECT INTO v_db_id db_id
      FROM db
      WHERE name=v_name;
    IF NOT FOUND THEN
      INSERT INTO db
       (name)
         VALUES
       (v_name);
       RETURN currval('db_db_id_seq');
    END IF;
    RETURN v_db_id;
 END;
$_$;


ALTER FUNCTION public.store_db(character varying) OWNER TO postgres;

--
-- Name: store_dbxref(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_dbxref(character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
   v_dbname                ALIAS FOR $1;
   v_accession             ALIAS FOR $2;

   v_db_id                 INTEGER;
   v_dbxref_id             INTEGER;
 BEGIN
    SELECT INTO v_db_id
      store_db(v_dbname);
    SELECT INTO v_dbxref_id dbxref_id
      FROM dbxref
      WHERE db_id=v_db_id       AND
            accession=v_accession;
    IF NOT FOUND THEN
      INSERT INTO dbxref
       (db_id,accession)
         VALUES
       (v_db_id,v_accession);
       RETURN currval('dbxref_dbxref_id_seq');
    END IF;
    RETURN v_dbxref_id;
 END;
$_$;


ALTER FUNCTION public.store_dbxref(character varying, character varying) OWNER TO postgres;

--
-- Name: store_feature(integer, integer, integer, integer, integer, integer, character varying, character varying, integer, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_feature(integer, integer, integer, integer, integer, integer, character varying, character varying, integer, boolean) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
  v_srcfeature_id       ALIAS FOR $1;
  v_fmin                ALIAS FOR $2;
  v_fmax                ALIAS FOR $3;
  v_strand              ALIAS FOR $4;
  v_dbxref_id           ALIAS FOR $5;
  v_organism_id         ALIAS FOR $6;
  v_name                ALIAS FOR $7;
  v_uniquename          ALIAS FOR $8;
  v_type_id             ALIAS FOR $9;
  v_is_analysis         ALIAS FOR $10;
  v_feature_id          INT;
  v_featureloc_id       INT;
 BEGIN
    IF v_dbxref_id IS NULL THEN
      SELECT INTO v_feature_id feature_id
      FROM feature
      WHERE uniquename=v_uniquename     AND
            organism_id=v_organism_id   AND
            type_id=v_type_id;
    ELSE
      SELECT INTO v_feature_id feature_id
      FROM feature
      WHERE dbxref_id=v_dbxref_id;
    END IF;
    IF NOT FOUND THEN
      INSERT INTO feature
       ( dbxref_id           ,
         organism_id         ,
         name                ,
         uniquename          ,
         type_id             ,
         is_analysis         )
        VALUES
        ( v_dbxref_id           ,
          v_organism_id         ,
          v_name                ,
          v_uniquename          ,
          v_type_id             ,
          v_is_analysis         );
      v_feature_id = currval('feature_feature_id_seq');
    ELSE
      UPDATE feature SET
        dbxref_id   =  v_dbxref_id           ,
        organism_id =  v_organism_id         ,
        name        =  v_name                ,
        uniquename  =  v_uniquename          ,
        type_id     =  v_type_id             ,
        is_analysis =  v_is_analysis
      WHERE
        feature_id=v_feature_id;
    END IF;
  PERFORM store_featureloc(v_feature_id,
                           v_srcfeature_id,
                           v_fmin,
                           v_fmax,
                           v_strand,
                           0,
                           0);
  RETURN v_feature_id;
 END;
$_$;


ALTER FUNCTION public.store_feature(integer, integer, integer, integer, integer, integer, character varying, character varying, integer, boolean) OWNER TO postgres;

--
-- Name: store_feature_synonym(integer, character varying, integer, boolean, boolean, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_feature_synonym(integer, character varying, integer, boolean, boolean, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
  v_feature_id          ALIAS FOR $1;
  v_syn                 ALIAS FOR $2;
  v_type_id             ALIAS FOR $3;
  v_is_current          ALIAS FOR $4;
  v_is_internal         ALIAS FOR $5;
  v_pub_id              ALIAS FOR $6;
  v_synonym_id          INT;
  v_feature_synonym_id  INT;
 BEGIN
    IF v_feature_id IS NULL THEN RAISE EXCEPTION 'feature_id cannot be null';
    END IF;
    SELECT INTO v_synonym_id synonym_id
      FROM synonym
      WHERE name=v_syn                  AND
            type_id=v_type_id;
    IF NOT FOUND THEN
      INSERT INTO synonym
        ( name,
          synonym_sgml,
          type_id)
        VALUES
        ( v_syn,
          v_syn,
          v_type_id);
      v_synonym_id = currval('synonym_synonym_id_seq');
    END IF;
    SELECT INTO v_feature_synonym_id feature_synonym_id
        FROM feature_synonym
        WHERE feature_id=v_feature_id   AND
              synonym_id=v_synonym_id   AND
              pub_id=v_pub_id;
    IF NOT FOUND THEN
      INSERT INTO feature_synonym
        ( feature_id,
          synonym_id,
          pub_id,
          is_current,
          is_internal)
        VALUES
        ( v_feature_id,
          v_synonym_id,
          v_pub_id,
          v_is_current,
          v_is_internal);
      v_feature_synonym_id = currval('feature_synonym_feature_synonym_id_seq');
    ELSE
      UPDATE feature_synonym
        SET is_current=v_is_current, is_internal=v_is_internal
        WHERE feature_synonym_id=v_feature_synonym_id;
    END IF;
  RETURN v_feature_synonym_id;
 END;
$_$;


ALTER FUNCTION public.store_feature_synonym(integer, character varying, integer, boolean, boolean, integer) OWNER TO postgres;

--
-- Name: store_featureloc(integer, integer, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_featureloc(integer, integer, integer, integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
  v_feature_id          ALIAS FOR $1;
  v_srcfeature_id       ALIAS FOR $2;
  v_fmin                ALIAS FOR $3;
  v_fmax                ALIAS FOR $4;
  v_strand              ALIAS FOR $5;
  v_rank                ALIAS FOR $6;
  v_locgroup            ALIAS FOR $7;
  v_featureloc_id       INT;
 BEGIN
    IF v_feature_id IS NULL THEN RAISE EXCEPTION 'feature_id cannot be null';
    END IF;
    SELECT INTO v_featureloc_id featureloc_id
      FROM featureloc
      WHERE feature_id=v_feature_id     AND
            rank=v_rank                 AND
            locgroup=v_locgroup;
    IF NOT FOUND THEN
      INSERT INTO featureloc
        ( feature_id,
          srcfeature_id,
          fmin,
          fmax,
          strand,
          rank,
          locgroup)
        VALUES
        (  v_feature_id,
           v_srcfeature_id,
           v_fmin,
           v_fmax,
           v_strand,
           v_rank,
           v_locgroup);
      v_featureloc_id = currval('featureloc_featureloc_id_seq');
    ELSE
      UPDATE featureloc SET
        feature_id    =  v_feature_id,
        srcfeature_id =  v_srcfeature_id,
        fmin          =  v_fmin,
        fmax          =  v_fmax,
        strand        =  v_strand,
        rank          =  v_rank,
        locgroup      =  v_locgroup
      WHERE
        featureloc_id=v_featureloc_id;
    END IF;
  RETURN v_featureloc_id;
 END;
$_$;


ALTER FUNCTION public.store_featureloc(integer, integer, integer, integer, integer, integer, integer) OWNER TO postgres;

--
-- Name: store_organism(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_organism(character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
   v_genus            ALIAS FOR $1;
   v_species          ALIAS FOR $2;
   v_common_name      ALIAS FOR $3;

   v_organism_id      INTEGER;
 BEGIN
    SELECT INTO v_organism_id organism_id
      FROM organism
      WHERE genus=v_genus               AND
            species=v_species;
    IF NOT FOUND THEN
      INSERT INTO organism
       (genus,species,common_name)
         VALUES
       (v_genus,v_species,v_common_name);
       RETURN currval('organism_organism_id_seq');
    ELSE
      UPDATE organism
       SET common_name=v_common_name
      WHERE organism_id = v_organism_id;
    END IF;
    RETURN v_organism_id;
 END;
$_$;


ALTER FUNCTION public.store_organism(character varying, character varying, character varying) OWNER TO postgres;

--
-- Name: subsequence(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION subsequence(integer, integer, integer, integer) RETURNS text
    LANGUAGE sql
    AS $_$SELECT 
  CASE WHEN $4<0 
   THEN reverse_complement(substring(srcf.residues,$2+1,($3-$2)))
   ELSE substring(residues,$2+1,($3-$2))
  END AS residues
  FROM feature AS srcf
  WHERE
   srcf.feature_id=$1$_$;


ALTER FUNCTION public.subsequence(integer, integer, integer, integer) OWNER TO postgres;

--
-- Name: subsequence_by_feature(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION subsequence_by_feature(integer) RETURNS text
    LANGUAGE sql
    AS $_$SELECT subsequence_by_feature($1,0,0)$_$;


ALTER FUNCTION public.subsequence_by_feature(integer) OWNER TO postgres;

--
-- Name: subsequence_by_feature(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION subsequence_by_feature(integer, integer, integer) RETURNS text
    LANGUAGE sql
    AS $_$SELECT 
  CASE WHEN strand<0 
   THEN reverse_complement(substring(srcf.residues,fmin+1,(fmax-fmin)))
   ELSE substring(srcf.residues,fmin+1,(fmax-fmin))
  END AS residues
  FROM feature AS srcf
   INNER JOIN featureloc ON (srcf.feature_id=featureloc.srcfeature_id)
  WHERE
   featureloc.feature_id=$1 AND
   featureloc.rank=$2 AND
   featureloc.locgroup=$3$_$;


ALTER FUNCTION public.subsequence_by_feature(integer, integer, integer) OWNER TO postgres;

--
-- Name: subsequence_by_featureloc(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION subsequence_by_featureloc(integer) RETURNS text
    LANGUAGE sql
    AS $_$SELECT 
  CASE WHEN strand<0 
   THEN reverse_complement(substring(srcf.residues,fmin+1,(fmax-fmin)))
   ELSE substring(srcf.residues,fmin+1,(fmax-fmin))
  END AS residues
  FROM feature AS srcf
   INNER JOIN featureloc ON (srcf.feature_id=featureloc.srcfeature_id)
  WHERE
   featureloc_id=$1$_$;


ALTER FUNCTION public.subsequence_by_featureloc(integer) OWNER TO postgres;

--
-- Name: subsequence_by_subfeatures(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION subsequence_by_subfeatures(integer) RETURNS text
    LANGUAGE sql
    AS $_$
SELECT subsequence_by_subfeatures($1,get_feature_relationship_type_id('part_of'),0,0)
$_$;


ALTER FUNCTION public.subsequence_by_subfeatures(integer) OWNER TO postgres;

--
-- Name: subsequence_by_subfeatures(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION subsequence_by_subfeatures(integer, integer) RETURNS text
    LANGUAGE sql
    AS $_$SELECT subsequence_by_subfeatures($1,$2,0,0)$_$;


ALTER FUNCTION public.subsequence_by_subfeatures(integer, integer) OWNER TO postgres;

--
-- Name: subsequence_by_subfeatures(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION subsequence_by_subfeatures(integer, integer, integer, integer) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE v_feature_id ALIAS FOR $1;
DECLARE v_rtype_id   ALIAS FOR $2;
DECLARE v_rank       ALIAS FOR $3;
DECLARE v_locgroup   ALIAS FOR $4;
DECLARE subseq       TEXT;
DECLARE seqrow       RECORD;
BEGIN 
  subseq = '';
 FOR seqrow IN
   SELECT
    CASE WHEN strand<0 
     THEN reverse_complement(substring(srcf.residues,fmin+1,(fmax-fmin)))
     ELSE substring(srcf.residues,fmin+1,(fmax-fmin))
    END AS residues
    FROM feature AS srcf
     INNER JOIN featureloc ON (srcf.feature_id=featureloc.srcfeature_id)
     INNER JOIN feature_relationship AS fr
       ON (fr.subject_id=featureloc.feature_id)
    WHERE
     fr.object_id=v_feature_id AND
     fr.type_id=v_rtype_id AND
     featureloc.rank=v_rank AND
     featureloc.locgroup=v_locgroup
    ORDER BY fr.rank
  LOOP
   subseq = subseq  || seqrow.residues;
  END LOOP;
 RETURN subseq;
END
$_$;


ALTER FUNCTION public.subsequence_by_subfeatures(integer, integer, integer, integer) OWNER TO postgres;

--
-- Name: subsequence_by_typed_subfeatures(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION subsequence_by_typed_subfeatures(integer, integer) RETURNS text
    LANGUAGE sql
    AS $_$SELECT subsequence_by_typed_subfeatures($1,$2,0,0)$_$;


ALTER FUNCTION public.subsequence_by_typed_subfeatures(integer, integer) OWNER TO postgres;

--
-- Name: subsequence_by_typed_subfeatures(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION subsequence_by_typed_subfeatures(integer, integer, integer, integer) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE v_feature_id ALIAS FOR $1;
DECLARE v_ftype_id   ALIAS FOR $2;
DECLARE v_rank       ALIAS FOR $3;
DECLARE v_locgroup   ALIAS FOR $4;
DECLARE subseq       TEXT;
DECLARE seqrow       RECORD;
BEGIN 
  subseq = '';
 FOR seqrow IN
   SELECT
    CASE WHEN strand<0 
     THEN reverse_complement(substring(srcf.residues,fmin+1,(fmax-fmin)))
     ELSE substring(srcf.residues,fmin+1,(fmax-fmin))
    END AS residues
  FROM feature AS srcf
   INNER JOIN featureloc ON (srcf.feature_id=featureloc.srcfeature_id)
   INNER JOIN feature AS subf ON (subf.feature_id=featureloc.feature_id)
   INNER JOIN feature_relationship AS fr ON (fr.subject_id=subf.feature_id)
  WHERE
     fr.object_id=v_feature_id AND
     subf.type_id=v_ftype_id AND
     featureloc.rank=v_rank AND
     featureloc.locgroup=v_locgroup
  ORDER BY fr.rank
   LOOP
   subseq = subseq  || seqrow.residues;
  END LOOP;
 RETURN subseq;
END
$_$;


ALTER FUNCTION public.subsequence_by_typed_subfeatures(integer, integer, integer, integer) OWNER TO postgres;

--
-- Name: translate_codon(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION translate_codon(text, integer) RETURNS character
    LANGUAGE sql
    AS $_$SELECT aa FROM genetic_code.gencode_codon_aa WHERE codon=$1 AND gencode_id=$2$_$;


ALTER FUNCTION public.translate_codon(text, integer) OWNER TO postgres;

--
-- Name: translate_dna(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION translate_dna(text) RETURNS text
    LANGUAGE sql
    AS $_$SELECT translate_dna($1,1)$_$;


ALTER FUNCTION public.translate_dna(text) OWNER TO postgres;

--
-- Name: translate_dna(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION translate_dna(text, integer) RETURNS text
    LANGUAGE plpgsql
    AS $_$
 DECLARE 
  dnaseq ALIAS FOR $1;
  gcode ALIAS FOR $2;
  translation TEXT;
  dnaseqlen INT;
  codon CHAR(3);
  aa CHAR(1);
  i INT;
 BEGIN
   translation = '';
   dnaseqlen = char_length(dnaseq);
   i=1;
   WHILE i+1 < dnaseqlen loop
     codon = substring(dnaseq,i,3);
     aa = translate_codon(codon,gcode);
     translation = translation || aa;
     i = i+3;
   END loop;
 RETURN translation;
END$_$;


ALTER FUNCTION public.translate_dna(text, integer) OWNER TO postgres;

--
-- Name: concat(text); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE concat(text) (
    SFUNC = concat_pair,
    STYPE = text,
    INITCOND = ''
);


ALTER AGGREGATE public.concat(text) OWNER TO postgres;

SET search_path = frange, pg_catalog;

--
-- Name: featuregroup_featuregroup_id_seq; Type: SEQUENCE; Schema: frange; Owner: postgres
--

CREATE SEQUENCE featuregroup_featuregroup_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE frange.featuregroup_featuregroup_id_seq OWNER TO postgres;

--
-- Name: featuregroup_featuregroup_id_seq; Type: SEQUENCE OWNED BY; Schema: frange; Owner: postgres
--

ALTER SEQUENCE featuregroup_featuregroup_id_seq OWNED BY featuregroup.featuregroup_id;


SET search_path = genetic_code, pg_catalog;

--
-- Name: gencode; Type: TABLE; Schema: genetic_code; Owner: postgres; Tablespace: 
--

CREATE TABLE gencode (
    gencode_id integer NOT NULL,
    organismstr character varying(512) NOT NULL
);


ALTER TABLE genetic_code.gencode OWNER TO postgres;

--
-- Name: gencode_codon_aa; Type: TABLE; Schema: genetic_code; Owner: postgres; Tablespace: 
--

CREATE TABLE gencode_codon_aa (
    gencode_id integer NOT NULL,
    codon character(3) NOT NULL,
    aa character(1) NOT NULL
);


ALTER TABLE genetic_code.gencode_codon_aa OWNER TO postgres;

--
-- Name: gencode_startcodon; Type: TABLE; Schema: genetic_code; Owner: postgres; Tablespace: 
--

CREATE TABLE gencode_startcodon (
    gencode_id integer NOT NULL,
    codon character(3)
);


ALTER TABLE genetic_code.gencode_startcodon OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- Name: acquisition; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE acquisition (
    acquisition_id integer NOT NULL,
    assay_id integer NOT NULL,
    protocol_id integer,
    channel_id integer,
    acquisitiondate timestamp without time zone DEFAULT now(),
    name text,
    uri text
);


ALTER TABLE public.acquisition OWNER TO postgres;

--
-- Name: TABLE acquisition; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE acquisition IS 'This represents the scanning of hybridized material. The output of this process is typically a digital image of an array.';


--
-- Name: acquisition_acquisition_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE acquisition_acquisition_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.acquisition_acquisition_id_seq OWNER TO postgres;

--
-- Name: acquisition_acquisition_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE acquisition_acquisition_id_seq OWNED BY acquisition.acquisition_id;


--
-- Name: acquisition_relationship; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE acquisition_relationship (
    acquisition_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    type_id integer NOT NULL,
    object_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.acquisition_relationship OWNER TO postgres;

--
-- Name: TABLE acquisition_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE acquisition_relationship IS 'Multiple monochrome images may be merged to form a multi-color image. Red-green images of 2-channel hybridizations are an example of this.';


--
-- Name: acquisition_relationship_acquisition_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE acquisition_relationship_acquisition_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.acquisition_relationship_acquisition_relationship_id_seq OWNER TO postgres;

--
-- Name: acquisition_relationship_acquisition_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE acquisition_relationship_acquisition_relationship_id_seq OWNED BY acquisition_relationship.acquisition_relationship_id;


--
-- Name: acquisitionprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE acquisitionprop (
    acquisitionprop_id integer NOT NULL,
    acquisition_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.acquisitionprop OWNER TO postgres;

--
-- Name: TABLE acquisitionprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE acquisitionprop IS 'Parameters associated with image acquisition.';


--
-- Name: acquisitionprop_acquisitionprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE acquisitionprop_acquisitionprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.acquisitionprop_acquisitionprop_id_seq OWNER TO postgres;

--
-- Name: acquisitionprop_acquisitionprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE acquisitionprop_acquisitionprop_id_seq OWNED BY acquisitionprop.acquisitionprop_id;


--
-- Name: all_feature_names; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW all_feature_names AS
    (((SELECT feature.feature_id, ("substring"(feature.uniquename, 0, 255))::character varying(255) AS name, feature.organism_id FROM feature UNION SELECT feature.feature_id, feature.name, feature.organism_id FROM feature WHERE (feature.name IS NOT NULL)) UNION SELECT fs.feature_id, s.name, f.organism_id FROM feature_synonym fs, synonym s, feature f WHERE ((fs.synonym_id = s.synonym_id) AND (fs.feature_id = f.feature_id))) UNION SELECT fp.feature_id, ("substring"(fp.value, 0, 255))::character varying(255) AS name, f.organism_id FROM featureprop fp, feature f WHERE (f.feature_id = fp.feature_id)) UNION SELECT fd.feature_id, d.accession AS name, f.organism_id FROM feature_dbxref fd, dbxref d, feature f WHERE ((fd.dbxref_id = d.dbxref_id) AND (fd.feature_id = f.feature_id));


ALTER TABLE public.all_feature_names OWNER TO postgres;

--
-- Name: analysis; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE analysis (
    analysis_id integer NOT NULL,
    name character varying(255),
    description text,
    program character varying(255) NOT NULL,
    programversion character varying(255) NOT NULL,
    algorithm character varying(255),
    sourcename character varying(255),
    sourceversion character varying(255),
    sourceuri text,
    timeexecuted timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.analysis OWNER TO postgres;

--
-- Name: TABLE analysis; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE analysis IS 'An analysis is a particular type of a
    computational analysis; it may be a blast of one sequence against
    another, or an all by all blast, or a different kind of analysis
    altogether. It is a single unit of computation.';


--
-- Name: COLUMN analysis.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN analysis.name IS 'A way of grouping analyses. This
    should be a handy short identifier that can help people find an
    analysis they want. For instance "tRNAscan", "cDNA", "FlyPep",
    "SwissProt", and it should not be assumed to be unique. For instance, there may be lots of separate analyses done against a cDNA database.';


--
-- Name: COLUMN analysis.program; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN analysis.program IS 'Program name, e.g. blastx, blastp, sim4, genscan.';


--
-- Name: COLUMN analysis.programversion; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN analysis.programversion IS 'Version description, e.g. TBLASTX 2.0MP-WashU [09-Nov-2000].';


--
-- Name: COLUMN analysis.algorithm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN analysis.algorithm IS 'Algorithm name, e.g. blast.';


--
-- Name: COLUMN analysis.sourcename; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN analysis.sourcename IS 'Source name, e.g. cDNA, SwissProt.';


--
-- Name: COLUMN analysis.sourceuri; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN analysis.sourceuri IS 'This is an optional, permanent URL or URI for the source of the  analysis. The idea is that someone could recreate the analysis directly by going to this URI and fetching the source data (e.g. the blast database, or the training model).';


--
-- Name: analysis_analysis_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE analysis_analysis_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.analysis_analysis_id_seq OWNER TO postgres;

--
-- Name: analysis_analysis_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE analysis_analysis_id_seq OWNED BY analysis.analysis_id;


--
-- Name: analysisfeature; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE analysisfeature (
    analysisfeature_id integer NOT NULL,
    feature_id integer NOT NULL,
    analysis_id integer NOT NULL,
    rawscore double precision,
    normscore double precision,
    significance double precision,
    identity double precision
);


ALTER TABLE public.analysisfeature OWNER TO postgres;

--
-- Name: TABLE analysisfeature; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE analysisfeature IS 'Computational analyses generate features (e.g. Genscan generates transcripts and exons; sim4 alignments generate similarity/match features). analysisfeatures are stored using the feature table from the sequence module. The analysisfeature table is used to decorate these features, with analysis specific attributes. A feature is an analysisfeature if and only if there is a corresponding entry in the analysisfeature table. analysisfeatures will have two or more featureloc entries,
 with rank indicating query/subject';


--
-- Name: COLUMN analysisfeature.rawscore; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN analysisfeature.rawscore IS 'This is the native score generated by the program; for example, the bitscore generated by blast, sim4 or genscan scores. One should not assume that high is necessarily better than low.';


--
-- Name: COLUMN analysisfeature.normscore; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN analysisfeature.normscore IS 'This is the rawscore but
    semi-normalized. Complete normalization to allow comparison of
    features generated by different programs would be nice but too
    difficult. Instead the normalization should strive to enforce the
    following semantics: * normscores are floating point numbers >= 0,
    * high normscores are better than low one. For most programs, it would be sufficient to make the normscore the same as this rawscore, providing these semantics are satisfied.';


--
-- Name: COLUMN analysisfeature.significance; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN analysisfeature.significance IS 'This is some kind of expectation or probability metric, representing the probability that the analysis would appear randomly given the model. As such, any program or person querying this table can assume the following semantics:
   * 0 <= significance <= n, where n is a positive number, theoretically unbounded but unlikely to be more than 10
  * low numbers are better than high numbers.';


--
-- Name: COLUMN analysisfeature.identity; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN analysisfeature.identity IS 'Percent identity between the locations compared.  Note that these 4 metrics do not cover the full range of scores possible; it would be undesirable to list every score possible, as this should be kept extensible. instead, for non-standard scores, use the analysisprop table.';


--
-- Name: analysisfeature_analysisfeature_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE analysisfeature_analysisfeature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.analysisfeature_analysisfeature_id_seq OWNER TO postgres;

--
-- Name: analysisfeature_analysisfeature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE analysisfeature_analysisfeature_id_seq OWNED BY analysisfeature.analysisfeature_id;


--
-- Name: analysisfeatureprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE analysisfeatureprop (
    analysisfeatureprop_id integer NOT NULL,
    analysisfeature_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer NOT NULL
);


ALTER TABLE public.analysisfeatureprop OWNER TO postgres;

--
-- Name: analysisfeatureprop_analysisfeatureprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE analysisfeatureprop_analysisfeatureprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.analysisfeatureprop_analysisfeatureprop_id_seq OWNER TO postgres;

--
-- Name: analysisfeatureprop_analysisfeatureprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE analysisfeatureprop_analysisfeatureprop_id_seq OWNED BY analysisfeatureprop.analysisfeatureprop_id;


--
-- Name: analysisprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE analysisprop (
    analysisprop_id integer NOT NULL,
    analysis_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.analysisprop OWNER TO postgres;

--
-- Name: analysisprop_analysisprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE analysisprop_analysisprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.analysisprop_analysisprop_id_seq OWNER TO postgres;

--
-- Name: analysisprop_analysisprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE analysisprop_analysisprop_id_seq OWNED BY analysisprop.analysisprop_id;


--
-- Name: arraydesign; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE arraydesign (
    arraydesign_id integer NOT NULL,
    manufacturer_id integer NOT NULL,
    platformtype_id integer NOT NULL,
    substratetype_id integer,
    protocol_id integer,
    dbxref_id integer,
    name text NOT NULL,
    version text,
    description text,
    array_dimensions text,
    element_dimensions text,
    num_of_elements integer,
    num_array_columns integer,
    num_array_rows integer,
    num_grid_columns integer,
    num_grid_rows integer,
    num_sub_columns integer,
    num_sub_rows integer
);


ALTER TABLE public.arraydesign OWNER TO postgres;

--
-- Name: TABLE arraydesign; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE arraydesign IS 'General properties about an array.
An array is a template used to generate physical slides, etc.  It
contains layout information, as well as global array properties, such
as material (glass, nylon) and spot dimensions (in rows/columns).';


--
-- Name: arraydesign_arraydesign_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE arraydesign_arraydesign_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.arraydesign_arraydesign_id_seq OWNER TO postgres;

--
-- Name: arraydesign_arraydesign_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE arraydesign_arraydesign_id_seq OWNED BY arraydesign.arraydesign_id;


--
-- Name: arraydesignprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE arraydesignprop (
    arraydesignprop_id integer NOT NULL,
    arraydesign_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.arraydesignprop OWNER TO postgres;

--
-- Name: TABLE arraydesignprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE arraydesignprop IS 'Extra array design properties that are not accounted for in arraydesign.';


--
-- Name: arraydesignprop_arraydesignprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE arraydesignprop_arraydesignprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.arraydesignprop_arraydesignprop_id_seq OWNER TO postgres;

--
-- Name: arraydesignprop_arraydesignprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE arraydesignprop_arraydesignprop_id_seq OWNED BY arraydesignprop.arraydesignprop_id;


--
-- Name: assay; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE assay (
    assay_id integer NOT NULL,
    arraydesign_id integer NOT NULL,
    protocol_id integer,
    assaydate timestamp without time zone DEFAULT now(),
    arrayidentifier text,
    arraybatchidentifier text,
    operator_id integer NOT NULL,
    dbxref_id integer,
    name text,
    description text
);


ALTER TABLE public.assay OWNER TO postgres;

--
-- Name: TABLE assay; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE assay IS 'An assay consists of a physical instance of
an array, combined with the conditions used to create the array
(protocols, technician information). The assay can be thought of as a hybridization.';


--
-- Name: assay_assay_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE assay_assay_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.assay_assay_id_seq OWNER TO postgres;

--
-- Name: assay_assay_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE assay_assay_id_seq OWNED BY assay.assay_id;


--
-- Name: assay_biomaterial; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE assay_biomaterial (
    assay_biomaterial_id integer NOT NULL,
    assay_id integer NOT NULL,
    biomaterial_id integer NOT NULL,
    channel_id integer,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.assay_biomaterial OWNER TO postgres;

--
-- Name: TABLE assay_biomaterial; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE assay_biomaterial IS 'A biomaterial can be hybridized many times (technical replicates), or combined with other biomaterials in a single hybridization (for two-channel arrays).';


--
-- Name: assay_biomaterial_assay_biomaterial_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE assay_biomaterial_assay_biomaterial_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.assay_biomaterial_assay_biomaterial_id_seq OWNER TO postgres;

--
-- Name: assay_biomaterial_assay_biomaterial_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE assay_biomaterial_assay_biomaterial_id_seq OWNED BY assay_biomaterial.assay_biomaterial_id;


--
-- Name: assay_project; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE assay_project (
    assay_project_id integer NOT NULL,
    assay_id integer NOT NULL,
    project_id integer NOT NULL
);


ALTER TABLE public.assay_project OWNER TO postgres;

--
-- Name: TABLE assay_project; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE assay_project IS 'Link assays to projects.';


--
-- Name: assay_project_assay_project_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE assay_project_assay_project_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.assay_project_assay_project_id_seq OWNER TO postgres;

--
-- Name: assay_project_assay_project_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE assay_project_assay_project_id_seq OWNED BY assay_project.assay_project_id;


--
-- Name: assayprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE assayprop (
    assayprop_id integer NOT NULL,
    assay_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.assayprop OWNER TO postgres;

--
-- Name: TABLE assayprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE assayprop IS 'Extra assay properties that are not accounted for in assay.';


--
-- Name: assayprop_assayprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE assayprop_assayprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.assayprop_assayprop_id_seq OWNER TO postgres;

--
-- Name: assayprop_assayprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE assayprop_assayprop_id_seq OWNED BY assayprop.assayprop_id;


--
-- Name: biomaterial; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE biomaterial (
    biomaterial_id integer NOT NULL,
    taxon_id integer,
    biosourceprovider_id integer,
    dbxref_id integer,
    name text,
    description text
);


ALTER TABLE public.biomaterial OWNER TO postgres;

--
-- Name: TABLE biomaterial; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE biomaterial IS 'A biomaterial represents the MAGE concept of BioSource, BioSample, and LabeledExtract. It is essentially some biological material (tissue, cells, serum) that may have been processed. Processed biomaterials should be traceable back to raw biomaterials via the biomaterialrelationship table.';


--
-- Name: biomaterial_biomaterial_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE biomaterial_biomaterial_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.biomaterial_biomaterial_id_seq OWNER TO postgres;

--
-- Name: biomaterial_biomaterial_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE biomaterial_biomaterial_id_seq OWNED BY biomaterial.biomaterial_id;


--
-- Name: biomaterial_dbxref; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE biomaterial_dbxref (
    biomaterial_dbxref_id integer NOT NULL,
    biomaterial_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.biomaterial_dbxref OWNER TO postgres;

--
-- Name: biomaterial_dbxref_biomaterial_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE biomaterial_dbxref_biomaterial_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.biomaterial_dbxref_biomaterial_dbxref_id_seq OWNER TO postgres;

--
-- Name: biomaterial_dbxref_biomaterial_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE biomaterial_dbxref_biomaterial_dbxref_id_seq OWNED BY biomaterial_dbxref.biomaterial_dbxref_id;


--
-- Name: biomaterial_relationship; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE biomaterial_relationship (
    biomaterial_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    type_id integer NOT NULL,
    object_id integer NOT NULL
);


ALTER TABLE public.biomaterial_relationship OWNER TO postgres;

--
-- Name: TABLE biomaterial_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE biomaterial_relationship IS 'Relate biomaterials to one another. This is a way to track a series of treatments or material splits/merges, for instance.';


--
-- Name: biomaterial_relationship_biomaterial_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE biomaterial_relationship_biomaterial_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.biomaterial_relationship_biomaterial_relationship_id_seq OWNER TO postgres;

--
-- Name: biomaterial_relationship_biomaterial_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE biomaterial_relationship_biomaterial_relationship_id_seq OWNED BY biomaterial_relationship.biomaterial_relationship_id;


--
-- Name: biomaterial_treatment; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE biomaterial_treatment (
    biomaterial_treatment_id integer NOT NULL,
    biomaterial_id integer NOT NULL,
    treatment_id integer NOT NULL,
    unittype_id integer,
    value real,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.biomaterial_treatment OWNER TO postgres;

--
-- Name: TABLE biomaterial_treatment; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE biomaterial_treatment IS 'Link biomaterials to treatments. Treatments have an order of operations (rank), and associated measurements (unittype_id, value).';


--
-- Name: biomaterial_treatment_biomaterial_treatment_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE biomaterial_treatment_biomaterial_treatment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.biomaterial_treatment_biomaterial_treatment_id_seq OWNER TO postgres;

--
-- Name: biomaterial_treatment_biomaterial_treatment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE biomaterial_treatment_biomaterial_treatment_id_seq OWNED BY biomaterial_treatment.biomaterial_treatment_id;


--
-- Name: biomaterialprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE biomaterialprop (
    biomaterialprop_id integer NOT NULL,
    biomaterial_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.biomaterialprop OWNER TO postgres;

--
-- Name: TABLE biomaterialprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE biomaterialprop IS 'Extra biomaterial properties that are not accounted for in biomaterial.';


--
-- Name: biomaterialprop_biomaterialprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE biomaterialprop_biomaterialprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.biomaterialprop_biomaterialprop_id_seq OWNER TO postgres;

--
-- Name: biomaterialprop_biomaterialprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE biomaterialprop_biomaterialprop_id_seq OWNED BY biomaterialprop.biomaterialprop_id;


--
-- Name: cell_line; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cell_line (
    cell_line_id integer NOT NULL,
    name character varying(255),
    uniquename character varying(255) NOT NULL,
    organism_id integer NOT NULL,
    timeaccessioned timestamp without time zone DEFAULT now() NOT NULL,
    timelastmodified timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.cell_line OWNER TO postgres;

--
-- Name: cell_line_cell_line_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cell_line_cell_line_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_cell_line_id_seq OWNER TO postgres;

--
-- Name: cell_line_cell_line_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cell_line_cell_line_id_seq OWNED BY cell_line.cell_line_id;


--
-- Name: cell_line_cvterm; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cell_line_cvterm (
    cell_line_cvterm_id integer NOT NULL,
    cell_line_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cell_line_cvterm OWNER TO postgres;

--
-- Name: cell_line_cvterm_cell_line_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cell_line_cvterm_cell_line_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_cvterm_cell_line_cvterm_id_seq OWNER TO postgres;

--
-- Name: cell_line_cvterm_cell_line_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cell_line_cvterm_cell_line_cvterm_id_seq OWNED BY cell_line_cvterm.cell_line_cvterm_id;


--
-- Name: cell_line_cvtermprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cell_line_cvtermprop (
    cell_line_cvtermprop_id integer NOT NULL,
    cell_line_cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cell_line_cvtermprop OWNER TO postgres;

--
-- Name: cell_line_cvtermprop_cell_line_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cell_line_cvtermprop_cell_line_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_cvtermprop_cell_line_cvtermprop_id_seq OWNER TO postgres;

--
-- Name: cell_line_cvtermprop_cell_line_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cell_line_cvtermprop_cell_line_cvtermprop_id_seq OWNED BY cell_line_cvtermprop.cell_line_cvtermprop_id;


--
-- Name: cell_line_dbxref; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cell_line_dbxref (
    cell_line_dbxref_id integer NOT NULL,
    cell_line_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE public.cell_line_dbxref OWNER TO postgres;

--
-- Name: cell_line_dbxref_cell_line_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cell_line_dbxref_cell_line_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_dbxref_cell_line_dbxref_id_seq OWNER TO postgres;

--
-- Name: cell_line_dbxref_cell_line_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cell_line_dbxref_cell_line_dbxref_id_seq OWNED BY cell_line_dbxref.cell_line_dbxref_id;


--
-- Name: cell_line_feature; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cell_line_feature (
    cell_line_feature_id integer NOT NULL,
    cell_line_id integer NOT NULL,
    feature_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.cell_line_feature OWNER TO postgres;

--
-- Name: cell_line_feature_cell_line_feature_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cell_line_feature_cell_line_feature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_feature_cell_line_feature_id_seq OWNER TO postgres;

--
-- Name: cell_line_feature_cell_line_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cell_line_feature_cell_line_feature_id_seq OWNED BY cell_line_feature.cell_line_feature_id;


--
-- Name: cell_line_library; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cell_line_library (
    cell_line_library_id integer NOT NULL,
    cell_line_id integer NOT NULL,
    library_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.cell_line_library OWNER TO postgres;

--
-- Name: cell_line_library_cell_line_library_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cell_line_library_cell_line_library_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_library_cell_line_library_id_seq OWNER TO postgres;

--
-- Name: cell_line_library_cell_line_library_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cell_line_library_cell_line_library_id_seq OWNED BY cell_line_library.cell_line_library_id;


--
-- Name: cell_line_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cell_line_pub (
    cell_line_pub_id integer NOT NULL,
    cell_line_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.cell_line_pub OWNER TO postgres;

--
-- Name: cell_line_pub_cell_line_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cell_line_pub_cell_line_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_pub_cell_line_pub_id_seq OWNER TO postgres;

--
-- Name: cell_line_pub_cell_line_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cell_line_pub_cell_line_pub_id_seq OWNED BY cell_line_pub.cell_line_pub_id;


--
-- Name: cell_line_relationship; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cell_line_relationship (
    cell_line_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.cell_line_relationship OWNER TO postgres;

--
-- Name: cell_line_relationship_cell_line_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cell_line_relationship_cell_line_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_relationship_cell_line_relationship_id_seq OWNER TO postgres;

--
-- Name: cell_line_relationship_cell_line_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cell_line_relationship_cell_line_relationship_id_seq OWNED BY cell_line_relationship.cell_line_relationship_id;


--
-- Name: cell_line_synonym; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cell_line_synonym (
    cell_line_synonym_id integer NOT NULL,
    cell_line_id integer NOT NULL,
    synonym_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_current boolean DEFAULT false NOT NULL,
    is_internal boolean DEFAULT false NOT NULL
);


ALTER TABLE public.cell_line_synonym OWNER TO postgres;

--
-- Name: cell_line_synonym_cell_line_synonym_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cell_line_synonym_cell_line_synonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_synonym_cell_line_synonym_id_seq OWNER TO postgres;

--
-- Name: cell_line_synonym_cell_line_synonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cell_line_synonym_cell_line_synonym_id_seq OWNED BY cell_line_synonym.cell_line_synonym_id;


--
-- Name: cell_lineprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cell_lineprop (
    cell_lineprop_id integer NOT NULL,
    cell_line_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cell_lineprop OWNER TO postgres;

--
-- Name: cell_lineprop_cell_lineprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cell_lineprop_cell_lineprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_lineprop_cell_lineprop_id_seq OWNER TO postgres;

--
-- Name: cell_lineprop_cell_lineprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cell_lineprop_cell_lineprop_id_seq OWNED BY cell_lineprop.cell_lineprop_id;


--
-- Name: cell_lineprop_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cell_lineprop_pub (
    cell_lineprop_pub_id integer NOT NULL,
    cell_lineprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.cell_lineprop_pub OWNER TO postgres;

--
-- Name: cell_lineprop_pub_cell_lineprop_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cell_lineprop_pub_cell_lineprop_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_lineprop_pub_cell_lineprop_pub_id_seq OWNER TO postgres;

--
-- Name: cell_lineprop_pub_cell_lineprop_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cell_lineprop_pub_cell_lineprop_pub_id_seq OWNED BY cell_lineprop_pub.cell_lineprop_pub_id;


--
-- Name: chadoprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE chadoprop (
    chadoprop_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.chadoprop OWNER TO postgres;

--
-- Name: TABLE chadoprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE chadoprop IS 'This table is different from other prop tables in the database, as it is for storing information about the database itself, like schema version';


--
-- Name: COLUMN chadoprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN chadoprop.type_id IS 'The name of the property or slot is a cvterm. The meaning of the property is defined in that cvterm.';


--
-- Name: COLUMN chadoprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN chadoprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation.';


--
-- Name: COLUMN chadoprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN chadoprop.rank IS 'Property-Value ordering. Any
cv can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used.';


--
-- Name: chadoprop_chadoprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE chadoprop_chadoprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.chadoprop_chadoprop_id_seq OWNER TO postgres;

--
-- Name: chadoprop_chadoprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE chadoprop_chadoprop_id_seq OWNED BY chadoprop.chadoprop_id;


--
-- Name: channel; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE channel (
    channel_id integer NOT NULL,
    name text NOT NULL,
    definition text NOT NULL
);


ALTER TABLE public.channel OWNER TO postgres;

--
-- Name: TABLE channel; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE channel IS 'Different array platforms can record signals from one or more channels (cDNA arrays typically use two CCD, but Affymetrix uses only one).';


--
-- Name: channel_channel_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE channel_channel_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.channel_channel_id_seq OWNER TO postgres;

--
-- Name: channel_channel_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE channel_channel_id_seq OWNED BY channel.channel_id;


--
-- Name: common_ancestor_cvterm; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW common_ancestor_cvterm AS
    SELECT p1.subject_id AS cvterm1_id, p2.subject_id AS cvterm2_id, p1.object_id AS ancestor_cvterm_id, p1.pathdistance AS pathdistance1, p2.pathdistance AS pathdistance2, (p1.pathdistance + p2.pathdistance) AS total_pathdistance FROM cvtermpath p1, cvtermpath p2 WHERE (p1.object_id = p2.object_id);


ALTER TABLE public.common_ancestor_cvterm OWNER TO postgres;

--
-- Name: VIEW common_ancestor_cvterm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW common_ancestor_cvterm IS 'The common ancestor of any
two terms is the intersection of both terms ancestors. Two terms can
have multiple common ancestors. Use total_pathdistance to get the
least common ancestor';


--
-- Name: common_descendant_cvterm; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW common_descendant_cvterm AS
    SELECT p1.object_id AS cvterm1_id, p2.object_id AS cvterm2_id, p1.subject_id AS ancestor_cvterm_id, p1.pathdistance AS pathdistance1, p2.pathdistance AS pathdistance2, (p1.pathdistance + p2.pathdistance) AS total_pathdistance FROM cvtermpath p1, cvtermpath p2 WHERE (p1.subject_id = p2.subject_id);


ALTER TABLE public.common_descendant_cvterm OWNER TO postgres;

--
-- Name: VIEW common_descendant_cvterm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW common_descendant_cvterm IS 'The common descendant of
any two terms is the intersection of both terms descendants. Two terms
can have multiple common descendants. Use total_pathdistance to get
the least common ancestor';


--
-- Name: contact; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE contact (
    contact_id integer NOT NULL,
    type_id integer,
    name character varying(255) NOT NULL,
    description character varying(255)
);


ALTER TABLE public.contact OWNER TO postgres;

--
-- Name: TABLE contact; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE contact IS 'Model persons, institutes, groups, organizations, etc.';


--
-- Name: COLUMN contact.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN contact.type_id IS 'What type of contact is this?  E.g. "person", "lab".';


--
-- Name: contact_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE contact_contact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contact_contact_id_seq OWNER TO postgres;

--
-- Name: contact_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE contact_contact_id_seq OWNED BY contact.contact_id;


--
-- Name: contact_relationship; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE contact_relationship (
    contact_relationship_id integer NOT NULL,
    type_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL
);


ALTER TABLE public.contact_relationship OWNER TO postgres;

--
-- Name: TABLE contact_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE contact_relationship IS 'Model relationships between contacts';


--
-- Name: COLUMN contact_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN contact_relationship.type_id IS 'Relationship type between subject and object. This is a cvterm, typically from the OBO relationship ontology, although other relationship types are allowed.';


--
-- Name: COLUMN contact_relationship.subject_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN contact_relationship.subject_id IS 'The subject of the subj-predicate-obj sentence. In a DAG, this corresponds to the child node.';


--
-- Name: COLUMN contact_relationship.object_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN contact_relationship.object_id IS 'The object of the subj-predicate-obj sentence. In a DAG, this corresponds to the parent node.';


--
-- Name: contact_relationship_contact_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE contact_relationship_contact_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contact_relationship_contact_relationship_id_seq OWNER TO postgres;

--
-- Name: contact_relationship_contact_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE contact_relationship_contact_relationship_id_seq OWNED BY contact_relationship.contact_relationship_id;


--
-- Name: control; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE control (
    control_id integer NOT NULL,
    type_id integer NOT NULL,
    assay_id integer NOT NULL,
    tableinfo_id integer NOT NULL,
    row_id integer NOT NULL,
    name text,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.control OWNER TO postgres;

--
-- Name: control_control_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE control_control_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.control_control_id_seq OWNER TO postgres;

--
-- Name: control_control_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE control_control_id_seq OWNED BY control.control_id;


--
-- Name: cv; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cv (
    cv_id integer NOT NULL,
    name character varying(255) NOT NULL,
    definition text
);


ALTER TABLE public.cv OWNER TO postgres;

--
-- Name: TABLE cv; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cv IS 'A controlled vocabulary or ontology. A cv is
composed of cvterms (AKA terms, classes, types, universals - relations
and properties are also stored in cvterm) and the relationships
between them.';


--
-- Name: COLUMN cv.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cv.name IS 'The name of the ontology. This
corresponds to the obo-format -namespace-. cv names uniquely identify
the cv. In OBO file format, the cv.name is known as the namespace.';


--
-- Name: COLUMN cv.definition; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cv.definition IS 'A text description of the criteria for
membership of this ontology.';


--
-- Name: cv_cv_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cv_cv_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cv_cv_id_seq OWNER TO postgres;

--
-- Name: cv_cv_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cv_cv_id_seq OWNED BY cv.cv_id;


--
-- Name: cv_cvterm_count; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW cv_cvterm_count AS
    SELECT cv.name, count(*) AS num_terms_excl_obs FROM (cv JOIN cvterm USING (cv_id)) WHERE (cvterm.is_obsolete = 0) GROUP BY cv.name;


ALTER TABLE public.cv_cvterm_count OWNER TO postgres;

--
-- Name: VIEW cv_cvterm_count; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW cv_cvterm_count IS 'per-cv terms counts (excludes obsoletes)';


--
-- Name: cv_cvterm_count_with_obs; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW cv_cvterm_count_with_obs AS
    SELECT cv.name, count(*) AS num_terms_incl_obs FROM (cv JOIN cvterm USING (cv_id)) GROUP BY cv.name;


ALTER TABLE public.cv_cvterm_count_with_obs OWNER TO postgres;

--
-- Name: VIEW cv_cvterm_count_with_obs; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW cv_cvterm_count_with_obs IS 'per-cv terms counts (includes obsoletes)';


--
-- Name: cvterm_relationship; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cvterm_relationship (
    cvterm_relationship_id integer NOT NULL,
    type_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL
);


ALTER TABLE public.cvterm_relationship OWNER TO postgres;

--
-- Name: TABLE cvterm_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cvterm_relationship IS 'A relationship linking two
cvterms. Each cvterm_relationship constitutes an edge in the graph
defined by the collection of cvterms and cvterm_relationships. The
meaning of the cvterm_relationship depends on the definition of the
cvterm R refered to by type_id. However, in general the definitions
are such that the statement "all SUBJs REL some OBJ" is true. The
cvterm_relationship statement is about the subject, not the
object. For example "insect wing part_of thorax".';


--
-- Name: COLUMN cvterm_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm_relationship.type_id IS 'The nature of the
relationship between subject and object. Note that relations are also
housed in the cvterm table, typically from the OBO relationship
ontology, although other relationship types are allowed.';


--
-- Name: COLUMN cvterm_relationship.subject_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm_relationship.subject_id IS 'The subject of
the subj-predicate-obj sentence. The cvterm_relationship is about the
subject. In a graph, this typically corresponds to the child node.';


--
-- Name: COLUMN cvterm_relationship.object_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm_relationship.object_id IS 'The object of the
subj-predicate-obj sentence. The cvterm_relationship refers to the
object. In a graph, this typically corresponds to the parent node.';


--
-- Name: cv_leaf; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW cv_leaf AS
    SELECT cvterm.cv_id, cvterm.cvterm_id FROM cvterm WHERE (NOT (cvterm.cvterm_id IN (SELECT cvterm_relationship.object_id FROM cvterm_relationship)));


ALTER TABLE public.cv_leaf OWNER TO postgres;

--
-- Name: VIEW cv_leaf; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW cv_leaf IS 'the leaves of a cv are the set of terms
which have no children (terms that are not the object of a
relation). All cvs will have at least 1 leaf';


--
-- Name: cv_link_count; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW cv_link_count AS
    SELECT cv.name AS cv_name, relation.name AS relation_name, relation_cv.name AS relation_cv_name, count(*) AS num_links FROM ((((cv JOIN cvterm ON ((cvterm.cv_id = cv.cv_id))) JOIN cvterm_relationship ON ((cvterm.cvterm_id = cvterm_relationship.subject_id))) JOIN cvterm relation ON ((cvterm_relationship.type_id = relation.cvterm_id))) JOIN cv relation_cv ON ((relation.cv_id = relation_cv.cv_id))) GROUP BY cv.name, relation.name, relation_cv.name;


ALTER TABLE public.cv_link_count OWNER TO postgres;

--
-- Name: VIEW cv_link_count; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW cv_link_count IS 'per-cv summary of number of
links (cvterm_relationships) broken down by
relationship_type. num_links is the total # of links of the specified
type in which the subject_id of the link is in the named cv';


--
-- Name: cv_path_count; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW cv_path_count AS
    SELECT cv.name AS cv_name, relation.name AS relation_name, relation_cv.name AS relation_cv_name, count(*) AS num_paths FROM ((((cv JOIN cvterm ON ((cvterm.cv_id = cv.cv_id))) JOIN cvtermpath ON ((cvterm.cvterm_id = cvtermpath.subject_id))) JOIN cvterm relation ON ((cvtermpath.type_id = relation.cvterm_id))) JOIN cv relation_cv ON ((relation.cv_id = relation_cv.cv_id))) GROUP BY cv.name, relation.name, relation_cv.name;


ALTER TABLE public.cv_path_count OWNER TO postgres;

--
-- Name: VIEW cv_path_count; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW cv_path_count IS 'per-cv summary of number of
paths (cvtermpaths) broken down by relationship_type. num_paths is the
total # of paths of the specified type in which the subject_id of the
path is in the named cv. See also: cv_distinct_relations';


--
-- Name: cv_root; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW cv_root AS
    SELECT cvterm.cv_id, cvterm.cvterm_id AS root_cvterm_id FROM cvterm WHERE ((NOT (cvterm.cvterm_id IN (SELECT cvterm_relationship.subject_id FROM cvterm_relationship))) AND (cvterm.is_obsolete = 0));


ALTER TABLE public.cv_root OWNER TO postgres;

--
-- Name: VIEW cv_root; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW cv_root IS 'the roots of a cv are the set of terms
which have no parents (terms that are not the subject of a
relation). Most cvs will have a single root, some may have >1. All
will have at least 1';


--
-- Name: cvprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cvprop (
    cvprop_id integer NOT NULL,
    cv_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cvprop OWNER TO postgres;

--
-- Name: TABLE cvprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cvprop IS 'Additional extensible properties can be attached to a cv using this table.  A notable example would be the cv version';


--
-- Name: COLUMN cvprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvprop.type_id IS 'The name of the property or slot is a cvterm. The meaning of the property is defined in that cvterm.';


--
-- Name: COLUMN cvprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation.';


--
-- Name: COLUMN cvprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvprop.rank IS 'Property-Value ordering. Any
cv can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used.';


--
-- Name: cvprop_cvprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cvprop_cvprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvprop_cvprop_id_seq OWNER TO postgres;

--
-- Name: cvprop_cvprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cvprop_cvprop_id_seq OWNED BY cvprop.cvprop_id;


--
-- Name: cvterm_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cvterm_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvterm_cvterm_id_seq OWNER TO postgres;

--
-- Name: cvterm_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cvterm_cvterm_id_seq OWNED BY cvterm.cvterm_id;


--
-- Name: cvterm_dbxref; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cvterm_dbxref (
    cvterm_dbxref_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_for_definition integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cvterm_dbxref OWNER TO postgres;

--
-- Name: TABLE cvterm_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cvterm_dbxref IS 'In addition to the primary
identifier (cvterm.dbxref_id) a cvterm can have zero or more secondary
identifiers/dbxrefs, which may refer to records in external
databases. The exact semantics of cvterm_dbxref are not fixed. For
example: the dbxref could be a pubmed ID that is pertinent to the
cvterm, or it could be an equivalent or similar term in another
ontology. For example, GO cvterms are typically linked to InterPro
IDs, even though the nature of the relationship between them is
largely one of statistical association. The dbxref may be have data
records attached in the same database instance, or it could be a
"hanging" dbxref pointing to some external database. NOTE: If the
desired objective is to link two cvterms together, and the nature of
the relation is known and holds for all instances of the subject
cvterm then consider instead using cvterm_relationship together with a
well-defined relation.';


--
-- Name: COLUMN cvterm_dbxref.is_for_definition; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm_dbxref.is_for_definition IS 'A
cvterm.definition should be supported by one or more references. If
this column is true, the dbxref is not for a term in an external database -
it is a dbxref for provenance information for the definition.';


--
-- Name: cvterm_dbxref_cvterm_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cvterm_dbxref_cvterm_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvterm_dbxref_cvterm_dbxref_id_seq OWNER TO postgres;

--
-- Name: cvterm_dbxref_cvterm_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cvterm_dbxref_cvterm_dbxref_id_seq OWNED BY cvterm_dbxref.cvterm_dbxref_id;


--
-- Name: cvterm_relationship_cvterm_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cvterm_relationship_cvterm_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvterm_relationship_cvterm_relationship_id_seq OWNER TO postgres;

--
-- Name: cvterm_relationship_cvterm_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cvterm_relationship_cvterm_relationship_id_seq OWNED BY cvterm_relationship.cvterm_relationship_id;


--
-- Name: cvtermpath_cvtermpath_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cvtermpath_cvtermpath_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvtermpath_cvtermpath_id_seq OWNER TO postgres;

--
-- Name: cvtermpath_cvtermpath_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cvtermpath_cvtermpath_id_seq OWNED BY cvtermpath.cvtermpath_id;


--
-- Name: cvtermprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cvtermprop (
    cvtermprop_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text DEFAULT ''::text NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cvtermprop OWNER TO postgres;

--
-- Name: TABLE cvtermprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cvtermprop IS 'Additional extensible properties can be attached to a cvterm using this table. Corresponds to -AnnotationProperty- in W3C OWL format.';


--
-- Name: COLUMN cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvtermprop.type_id IS 'The name of the property or slot is a cvterm. The meaning of the property is defined in that cvterm.';


--
-- Name: COLUMN cvtermprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvtermprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation.';


--
-- Name: COLUMN cvtermprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvtermprop.rank IS 'Property-Value ordering. Any
cvterm can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used.';


--
-- Name: cvtermprop_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cvtermprop_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvtermprop_cvtermprop_id_seq OWNER TO postgres;

--
-- Name: cvtermprop_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cvtermprop_cvtermprop_id_seq OWNED BY cvtermprop.cvtermprop_id;


--
-- Name: cvtermsynonym; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cvtermsynonym (
    cvtermsynonym_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    synonym character varying(1024) NOT NULL,
    type_id integer
);


ALTER TABLE public.cvtermsynonym OWNER TO postgres;

--
-- Name: TABLE cvtermsynonym; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cvtermsynonym IS 'A cvterm actually represents a
distinct class or concept. A concept can be refered to by different
phrases or names. In addition to the primary name (cvterm.name) there
can be a number of alternative aliases or synonyms. For example, "T
cell" as a synonym for "T lymphocyte".';


--
-- Name: COLUMN cvtermsynonym.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvtermsynonym.type_id IS 'A synonym can be exact,
narrower, or broader than.';


--
-- Name: cvtermsynonym_cvtermsynonym_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cvtermsynonym_cvtermsynonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvtermsynonym_cvtermsynonym_id_seq OWNER TO postgres;

--
-- Name: cvtermsynonym_cvtermsynonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cvtermsynonym_cvtermsynonym_id_seq OWNED BY cvtermsynonym.cvtermsynonym_id;


--
-- Name: db_db_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE db_db_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.db_db_id_seq OWNER TO postgres;

--
-- Name: db_db_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE db_db_id_seq OWNED BY db.db_id;


--
-- Name: db_dbxref_count; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW db_dbxref_count AS
    SELECT db.name, count(*) AS num_dbxrefs FROM (db JOIN dbxref USING (db_id)) GROUP BY db.name;


ALTER TABLE public.db_dbxref_count OWNER TO postgres;

--
-- Name: VIEW db_dbxref_count; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW db_dbxref_count IS 'per-db dbxref counts';


--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE dbxref_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dbxref_dbxref_id_seq OWNER TO postgres;

--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE dbxref_dbxref_id_seq OWNED BY dbxref.dbxref_id;


--
-- Name: dbxrefprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE dbxrefprop (
    dbxrefprop_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    type_id integer NOT NULL,
    value text DEFAULT ''::text NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.dbxrefprop OWNER TO postgres;

--
-- Name: TABLE dbxrefprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE dbxrefprop IS 'Metadata about a dbxref. Note that this is not defined in the dbxref module, as it depends on the cvterm table. This table has a structure analagous to cvtermprop.';


--
-- Name: dbxrefprop_dbxrefprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE dbxrefprop_dbxrefprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dbxrefprop_dbxrefprop_id_seq OWNER TO postgres;

--
-- Name: dbxrefprop_dbxrefprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE dbxrefprop_dbxrefprop_id_seq OWNED BY dbxrefprop.dbxrefprop_id;


--
-- Name: dfeatureloc; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW dfeatureloc AS
    SELECT featureloc.featureloc_id, featureloc.feature_id, featureloc.srcfeature_id, featureloc.fmin AS nbeg, featureloc.is_fmin_partial AS is_nbeg_partial, featureloc.fmax AS nend, featureloc.is_fmax_partial AS is_nend_partial, featureloc.strand, featureloc.phase, featureloc.residue_info, featureloc.locgroup, featureloc.rank FROM featureloc WHERE ((featureloc.strand < 0) OR (featureloc.phase < 0)) UNION SELECT featureloc.featureloc_id, featureloc.feature_id, featureloc.srcfeature_id, featureloc.fmax AS nbeg, featureloc.is_fmax_partial AS is_nbeg_partial, featureloc.fmin AS nend, featureloc.is_fmin_partial AS is_nend_partial, featureloc.strand, featureloc.phase, featureloc.residue_info, featureloc.locgroup, featureloc.rank FROM featureloc WHERE (((featureloc.strand IS NULL) OR (featureloc.strand >= 0)) OR (featureloc.phase >= 0));


ALTER TABLE public.dfeatureloc OWNER TO postgres;

--
-- Name: eimage; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE eimage (
    eimage_id integer NOT NULL,
    eimage_data text,
    eimage_type character varying(255) NOT NULL,
    image_uri character varying(255)
);


ALTER TABLE public.eimage OWNER TO postgres;

--
-- Name: COLUMN eimage.eimage_data; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN eimage.eimage_data IS 'We expect images in eimage_data (e.g. JPEGs) to be uuencoded.';


--
-- Name: COLUMN eimage.eimage_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN eimage.eimage_type IS 'Describes the type of data in eimage_data.';


--
-- Name: eimage_eimage_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE eimage_eimage_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.eimage_eimage_id_seq OWNER TO postgres;

--
-- Name: eimage_eimage_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE eimage_eimage_id_seq OWNED BY eimage.eimage_id;


--
-- Name: element; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE element (
    element_id integer NOT NULL,
    feature_id integer,
    arraydesign_id integer NOT NULL,
    type_id integer,
    dbxref_id integer
);


ALTER TABLE public.element OWNER TO postgres;

--
-- Name: TABLE element; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE element IS 'Represents a feature of the array. This is typically a region of the array coated or bound to DNA.';


--
-- Name: element_element_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE element_element_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.element_element_id_seq OWNER TO postgres;

--
-- Name: element_element_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE element_element_id_seq OWNED BY element.element_id;


--
-- Name: element_relationship; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE element_relationship (
    element_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    type_id integer NOT NULL,
    object_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.element_relationship OWNER TO postgres;

--
-- Name: TABLE element_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE element_relationship IS 'Sometimes we want to combine measurements from multiple elements to get a composite value. Affymetrix combines many probes to form a probeset measurement, for instance.';


--
-- Name: element_relationship_element_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE element_relationship_element_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.element_relationship_element_relationship_id_seq OWNER TO postgres;

--
-- Name: element_relationship_element_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE element_relationship_element_relationship_id_seq OWNED BY element_relationship.element_relationship_id;


--
-- Name: elementresult; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elementresult (
    elementresult_id integer NOT NULL,
    element_id integer NOT NULL,
    quantification_id integer NOT NULL,
    signal double precision NOT NULL
);


ALTER TABLE public.elementresult OWNER TO postgres;

--
-- Name: TABLE elementresult; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE elementresult IS 'An element on an array produces a measurement when hybridized to a biomaterial (traceable through quantification_id). This is the base data from which tables that actually contain data inherit.';


--
-- Name: elementresult_elementresult_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE elementresult_elementresult_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.elementresult_elementresult_id_seq OWNER TO postgres;

--
-- Name: elementresult_elementresult_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE elementresult_elementresult_id_seq OWNED BY elementresult.elementresult_id;


--
-- Name: elementresult_relationship; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elementresult_relationship (
    elementresult_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    type_id integer NOT NULL,
    object_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.elementresult_relationship OWNER TO postgres;

--
-- Name: TABLE elementresult_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE elementresult_relationship IS 'Sometimes we want to combine measurements from multiple elements to get a composite value. Affymetrix combines many probes to form a probeset measurement, for instance.';


--
-- Name: elementresult_relationship_elementresult_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE elementresult_relationship_elementresult_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.elementresult_relationship_elementresult_relationship_id_seq OWNER TO postgres;

--
-- Name: elementresult_relationship_elementresult_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE elementresult_relationship_elementresult_relationship_id_seq OWNED BY elementresult_relationship.elementresult_relationship_id;


--
-- Name: environment; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE environment (
    environment_id integer NOT NULL,
    uniquename text NOT NULL,
    description text
);


ALTER TABLE public.environment OWNER TO postgres;

--
-- Name: TABLE environment; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE environment IS 'The environmental component of a phenotype description.';


--
-- Name: environment_cvterm; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE environment_cvterm (
    environment_cvterm_id integer NOT NULL,
    environment_id integer NOT NULL,
    cvterm_id integer NOT NULL
);


ALTER TABLE public.environment_cvterm OWNER TO postgres;

--
-- Name: environment_cvterm_environment_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE environment_cvterm_environment_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.environment_cvterm_environment_cvterm_id_seq OWNER TO postgres;

--
-- Name: environment_cvterm_environment_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE environment_cvterm_environment_cvterm_id_seq OWNED BY environment_cvterm.environment_cvterm_id;


--
-- Name: environment_environment_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE environment_environment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.environment_environment_id_seq OWNER TO postgres;

--
-- Name: environment_environment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE environment_environment_id_seq OWNED BY environment.environment_id;


--
-- Name: expression; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE expression (
    expression_id integer NOT NULL,
    uniquename text NOT NULL,
    md5checksum character(32),
    description text
);


ALTER TABLE public.expression OWNER TO postgres;

--
-- Name: TABLE expression; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE expression IS 'The expression table is essentially a bridge table.';


--
-- Name: expression_cvterm; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE expression_cvterm (
    expression_cvterm_id integer NOT NULL,
    expression_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    cvterm_type_id integer NOT NULL
);


ALTER TABLE public.expression_cvterm OWNER TO postgres;

--
-- Name: expression_cvterm_expression_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE expression_cvterm_expression_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.expression_cvterm_expression_cvterm_id_seq OWNER TO postgres;

--
-- Name: expression_cvterm_expression_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE expression_cvterm_expression_cvterm_id_seq OWNED BY expression_cvterm.expression_cvterm_id;


--
-- Name: expression_cvtermprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE expression_cvtermprop (
    expression_cvtermprop_id integer NOT NULL,
    expression_cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.expression_cvtermprop OWNER TO postgres;

--
-- Name: TABLE expression_cvtermprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE expression_cvtermprop IS 'Extensible properties for
expression to cvterm associations. Examples: qualifiers.';


--
-- Name: COLUMN expression_cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN expression_cvtermprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. For example, cvterms may come from the FlyBase miscellaneous cv.';


--
-- Name: COLUMN expression_cvtermprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN expression_cvtermprop.value IS 'The value of the
property, represented as text. Numeric values are converted to their
text representation. This is less efficient than using native database
types, but is easier to query.';


--
-- Name: COLUMN expression_cvtermprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN expression_cvtermprop.rank IS 'Property-Value
ordering. Any expression_cvterm can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used.';


--
-- Name: expression_cvtermprop_expression_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE expression_cvtermprop_expression_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.expression_cvtermprop_expression_cvtermprop_id_seq OWNER TO postgres;

--
-- Name: expression_cvtermprop_expression_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE expression_cvtermprop_expression_cvtermprop_id_seq OWNED BY expression_cvtermprop.expression_cvtermprop_id;


--
-- Name: expression_expression_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE expression_expression_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.expression_expression_id_seq OWNER TO postgres;

--
-- Name: expression_expression_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE expression_expression_id_seq OWNED BY expression.expression_id;


--
-- Name: expression_image; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE expression_image (
    expression_image_id integer NOT NULL,
    expression_id integer NOT NULL,
    eimage_id integer NOT NULL
);


ALTER TABLE public.expression_image OWNER TO postgres;

--
-- Name: expression_image_expression_image_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE expression_image_expression_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.expression_image_expression_image_id_seq OWNER TO postgres;

--
-- Name: expression_image_expression_image_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE expression_image_expression_image_id_seq OWNED BY expression_image.expression_image_id;


--
-- Name: expression_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE expression_pub (
    expression_pub_id integer NOT NULL,
    expression_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.expression_pub OWNER TO postgres;

--
-- Name: expression_pub_expression_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE expression_pub_expression_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.expression_pub_expression_pub_id_seq OWNER TO postgres;

--
-- Name: expression_pub_expression_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE expression_pub_expression_pub_id_seq OWNED BY expression_pub.expression_pub_id;


--
-- Name: expressionprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE expressionprop (
    expressionprop_id integer NOT NULL,
    expression_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.expressionprop OWNER TO postgres;

--
-- Name: expressionprop_expressionprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE expressionprop_expressionprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.expressionprop_expressionprop_id_seq OWNER TO postgres;

--
-- Name: expressionprop_expressionprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE expressionprop_expressionprop_id_seq OWNED BY expressionprop.expressionprop_id;


--
-- Name: f_type; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW f_type AS
    SELECT f.feature_id, f.name, f.dbxref_id, c.name AS type, f.residues, f.seqlen, f.md5checksum, f.type_id, f.timeaccessioned, f.timelastmodified FROM feature f, cvterm c WHERE (f.type_id = c.cvterm_id);


ALTER TABLE public.f_type OWNER TO postgres;

--
-- Name: f_loc; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW f_loc AS
    SELECT f.feature_id, f.name, f.dbxref_id, fl.nbeg, fl.nend, fl.strand FROM dfeatureloc fl, f_type f WHERE (f.feature_id = fl.feature_id);


ALTER TABLE public.f_loc OWNER TO postgres;

--
-- Name: feature_contains; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW feature_contains AS
    SELECT x.feature_id AS subject_id, y.feature_id AS object_id FROM featureloc x, featureloc y WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((y.fmin >= x.fmin) AND (y.fmin <= x.fmax)));


ALTER TABLE public.feature_contains OWNER TO postgres;

--
-- Name: VIEW feature_contains; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW feature_contains IS 'subject intervals contains (or is
same as) object interval. transitive,reflexive';


--
-- Name: feature_cvterm_dbxref; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_cvterm_dbxref (
    feature_cvterm_dbxref_id integer NOT NULL,
    feature_cvterm_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.feature_cvterm_dbxref OWNER TO postgres;

--
-- Name: TABLE feature_cvterm_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_cvterm_dbxref IS 'Additional dbxrefs for an association. Rows in the feature_cvterm table may be backed up by dbxrefs. For example, a feature_cvterm association that was inferred via a protein-protein interaction may be backed by by refering to the dbxref for the alternate protein. Corresponds to the WITH column in a GO gene association file (but can also be used for other analagous associations). See http://www.geneontology.org/doc/GO.annotation.shtml#file for more details.';


--
-- Name: feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq OWNER TO postgres;

--
-- Name: feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq OWNED BY feature_cvterm_dbxref.feature_cvterm_dbxref_id;


--
-- Name: feature_cvterm_feature_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_cvterm_feature_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_cvterm_feature_cvterm_id_seq OWNER TO postgres;

--
-- Name: feature_cvterm_feature_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_cvterm_feature_cvterm_id_seq OWNED BY feature_cvterm.feature_cvterm_id;


--
-- Name: feature_cvterm_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_cvterm_pub (
    feature_cvterm_pub_id integer NOT NULL,
    feature_cvterm_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.feature_cvterm_pub OWNER TO postgres;

--
-- Name: TABLE feature_cvterm_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_cvterm_pub IS 'Secondary pubs for an
association. Each feature_cvterm association is supported by a single
primary publication. Additional secondary pubs can be added using this
linking table (in a GO gene association file, these corresponding to
any IDs after the pipe symbol in the publications column.';


--
-- Name: feature_cvterm_pub_feature_cvterm_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_cvterm_pub_feature_cvterm_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_cvterm_pub_feature_cvterm_pub_id_seq OWNER TO postgres;

--
-- Name: feature_cvterm_pub_feature_cvterm_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_cvterm_pub_feature_cvterm_pub_id_seq OWNED BY feature_cvterm_pub.feature_cvterm_pub_id;


--
-- Name: feature_cvtermprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_cvtermprop (
    feature_cvtermprop_id integer NOT NULL,
    feature_cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_cvtermprop OWNER TO postgres;

--
-- Name: TABLE feature_cvtermprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_cvtermprop IS 'Extensible properties for
feature to cvterm associations. Examples: GO evidence codes;
qualifiers; metadata such as the date on which the entry was curated
and the source of the association. See the featureprop table for
meanings of type_id, value and rank.';


--
-- Name: COLUMN feature_cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_cvtermprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. cvterms may come from the OBO evidence code cv.';


--
-- Name: COLUMN feature_cvtermprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_cvtermprop.value IS 'The value of the
property, represented as text. Numeric values are converted to their
text representation. This is less efficient than using native database
types, but is easier to query.';


--
-- Name: COLUMN feature_cvtermprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_cvtermprop.rank IS 'Property-Value
ordering. Any feature_cvterm can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used.';


--
-- Name: feature_cvtermprop_feature_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_cvtermprop_feature_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_cvtermprop_feature_cvtermprop_id_seq OWNER TO postgres;

--
-- Name: feature_cvtermprop_feature_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_cvtermprop_feature_cvtermprop_id_seq OWNED BY feature_cvtermprop.feature_cvtermprop_id;


--
-- Name: feature_dbxref_feature_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_dbxref_feature_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_dbxref_feature_dbxref_id_seq OWNER TO postgres;

--
-- Name: feature_dbxref_feature_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_dbxref_feature_dbxref_id_seq OWNED BY feature_dbxref.feature_dbxref_id;


--
-- Name: feature_difference; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW feature_difference AS
    SELECT x.feature_id AS subject_id, y.feature_id AS object_id, x.strand AS srcfeature_id, x.srcfeature_id AS fmin, x.fmin AS fmax, y.fmin AS strand FROM featureloc x, featureloc y WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmin < y.fmin) AND (x.fmax >= y.fmax))) UNION SELECT x.feature_id AS subject_id, y.feature_id AS object_id, x.strand AS srcfeature_id, x.srcfeature_id AS fmin, y.fmax, x.fmax AS strand FROM featureloc x, featureloc y WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax > y.fmax) AND (x.fmin <= y.fmin)));


ALTER TABLE public.feature_difference OWNER TO postgres;

--
-- Name: VIEW feature_difference; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW feature_difference IS 'size of gap between two features. must be abutting or disjoint';


--
-- Name: feature_disjoint; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW feature_disjoint AS
    SELECT x.feature_id AS subject_id, y.feature_id AS object_id FROM featureloc x, featureloc y WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax < y.fmin) AND (x.fmin > y.fmax)));


ALTER TABLE public.feature_disjoint OWNER TO postgres;

--
-- Name: VIEW feature_disjoint; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW feature_disjoint IS 'featurelocs do not meet. symmetric';


--
-- Name: feature_distance; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW feature_distance AS
    SELECT x.feature_id AS subject_id, y.feature_id AS object_id, x.srcfeature_id, x.strand AS subject_strand, y.strand AS object_strand, CASE WHEN (x.fmax <= y.fmin) THEN (x.fmax - y.fmin) ELSE (y.fmax - x.fmin) END AS distance FROM featureloc x, featureloc y WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax <= y.fmin) OR (x.fmin >= y.fmax)));


ALTER TABLE public.feature_distance OWNER TO postgres;

--
-- Name: feature_expression; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_expression (
    feature_expression_id integer NOT NULL,
    expression_id integer NOT NULL,
    feature_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.feature_expression OWNER TO postgres;

--
-- Name: feature_expression_feature_expression_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_expression_feature_expression_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_expression_feature_expression_id_seq OWNER TO postgres;

--
-- Name: feature_expression_feature_expression_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_expression_feature_expression_id_seq OWNED BY feature_expression.feature_expression_id;


--
-- Name: feature_expressionprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_expressionprop (
    feature_expressionprop_id integer NOT NULL,
    feature_expression_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_expressionprop OWNER TO postgres;

--
-- Name: TABLE feature_expressionprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_expressionprop IS 'Extensible properties for
feature_expression (comments, for example). Modeled on feature_cvtermprop.';


--
-- Name: feature_expressionprop_feature_expressionprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_expressionprop_feature_expressionprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_expressionprop_feature_expressionprop_id_seq OWNER TO postgres;

--
-- Name: feature_expressionprop_feature_expressionprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_expressionprop_feature_expressionprop_id_seq OWNED BY feature_expressionprop.feature_expressionprop_id;


--
-- Name: feature_feature_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_feature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_feature_id_seq OWNER TO postgres;

--
-- Name: feature_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_feature_id_seq OWNED BY feature.feature_id;


--
-- Name: feature_genotype; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_genotype (
    feature_genotype_id integer NOT NULL,
    feature_id integer NOT NULL,
    genotype_id integer NOT NULL,
    chromosome_id integer,
    rank integer NOT NULL,
    cgroup integer NOT NULL,
    cvterm_id integer NOT NULL
);


ALTER TABLE public.feature_genotype OWNER TO postgres;

--
-- Name: COLUMN feature_genotype.chromosome_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_genotype.chromosome_id IS 'A feature of SO type "chromosome".';


--
-- Name: COLUMN feature_genotype.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_genotype.rank IS 'rank can be used for
n-ploid organisms or to preserve order.';


--
-- Name: COLUMN feature_genotype.cgroup; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_genotype.cgroup IS 'Spatially distinguishable
group. group can be used for distinguishing the chromosomal groups,
for example (RNAi products and so on can be treated as different
groups, as they do not fall on a particular chromosome).';


--
-- Name: feature_genotype_feature_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_genotype_feature_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_genotype_feature_genotype_id_seq OWNER TO postgres;

--
-- Name: feature_genotype_feature_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_genotype_feature_genotype_id_seq OWNED BY feature_genotype.feature_genotype_id;


--
-- Name: feature_intersection; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW feature_intersection AS
    SELECT x.feature_id AS subject_id, y.feature_id AS object_id, x.srcfeature_id, x.strand AS subject_strand, y.strand AS object_strand, CASE WHEN (x.fmin < y.fmin) THEN y.fmin ELSE x.fmin END AS fmin, CASE WHEN (x.fmax > y.fmax) THEN y.fmax ELSE x.fmax END AS fmax FROM featureloc x, featureloc y WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));


ALTER TABLE public.feature_intersection OWNER TO postgres;

--
-- Name: VIEW feature_intersection; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW feature_intersection IS 'set-intersection on interval defined by featureloc. featurelocs must meet';


--
-- Name: feature_meets; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW feature_meets AS
    SELECT x.feature_id AS subject_id, y.feature_id AS object_id FROM featureloc x, featureloc y WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));


ALTER TABLE public.feature_meets OWNER TO postgres;

--
-- Name: VIEW feature_meets; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW feature_meets IS 'intervals have at least one
interbase point in common (ie overlap OR abut). symmetric,reflexive';


--
-- Name: feature_meets_on_same_strand; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW feature_meets_on_same_strand AS
    SELECT x.feature_id AS subject_id, y.feature_id AS object_id FROM featureloc x, featureloc y WHERE (((x.srcfeature_id = y.srcfeature_id) AND (x.strand = y.strand)) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));


ALTER TABLE public.feature_meets_on_same_strand OWNER TO postgres;

--
-- Name: VIEW feature_meets_on_same_strand; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW feature_meets_on_same_strand IS 'as feature_meets, but
featurelocs must be on the same strand. symmetric,reflexive';


--
-- Name: feature_phenotype; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_phenotype (
    feature_phenotype_id integer NOT NULL,
    feature_id integer NOT NULL,
    phenotype_id integer NOT NULL
);


ALTER TABLE public.feature_phenotype OWNER TO postgres;

--
-- Name: feature_phenotype_feature_phenotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_phenotype_feature_phenotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_phenotype_feature_phenotype_id_seq OWNER TO postgres;

--
-- Name: feature_phenotype_feature_phenotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_phenotype_feature_phenotype_id_seq OWNED BY feature_phenotype.feature_phenotype_id;


--
-- Name: feature_pub_feature_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_pub_feature_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_pub_feature_pub_id_seq OWNER TO postgres;

--
-- Name: feature_pub_feature_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_pub_feature_pub_id_seq OWNED BY feature_pub.feature_pub_id;


--
-- Name: feature_pubprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_pubprop (
    feature_pubprop_id integer NOT NULL,
    feature_pub_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_pubprop OWNER TO postgres;

--
-- Name: TABLE feature_pubprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_pubprop IS 'Property or attribute of a feature_pub link.';


--
-- Name: feature_pubprop_feature_pubprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_pubprop_feature_pubprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_pubprop_feature_pubprop_id_seq OWNER TO postgres;

--
-- Name: feature_pubprop_feature_pubprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_pubprop_feature_pubprop_id_seq OWNED BY feature_pubprop.feature_pubprop_id;


--
-- Name: feature_relationship; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_relationship (
    feature_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_relationship OWNER TO postgres;

--
-- Name: TABLE feature_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_relationship IS 'Features can be arranged in
graphs, e.g. "exon part_of transcript part_of gene"; If type is
thought of as a verb, the each arc or edge makes a statement
[Subject Verb Object]. The object can also be thought of as parent
(containing feature), and subject as child (contained feature or
subfeature). We include the relationship rank/order, because even
though most of the time we can order things implicitly by sequence
coordinates, we can not always do this - e.g. transpliced genes. It is also
useful for quickly getting implicit introns.';


--
-- Name: COLUMN feature_relationship.subject_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationship.subject_id IS 'The subject of the subj-predicate-obj sentence. This is typically the subfeature.';


--
-- Name: COLUMN feature_relationship.object_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationship.object_id IS 'The object of the subj-predicate-obj sentence. This is typically the container feature.';


--
-- Name: COLUMN feature_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationship.type_id IS 'Relationship type between subject and object. This is a cvterm, typically from the OBO relationship ontology, although other relationship types are allowed. The most common relationship type is OBO_REL:part_of. Valid relationship types are constrained by the Sequence Ontology.';


--
-- Name: COLUMN feature_relationship.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationship.value IS 'Additional notes or comments.';


--
-- Name: COLUMN feature_relationship.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationship.rank IS 'The ordering of subject features with respect to the object feature may be important (for example, exon ordering on a transcript - not always derivable if you take trans spliced genes into consideration). Rank is used to order these; starts from zero.';


--
-- Name: feature_relationship_feature_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_relationship_feature_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_relationship_feature_relationship_id_seq OWNER TO postgres;

--
-- Name: feature_relationship_feature_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_relationship_feature_relationship_id_seq OWNED BY feature_relationship.feature_relationship_id;


--
-- Name: feature_relationship_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_relationship_pub (
    feature_relationship_pub_id integer NOT NULL,
    feature_relationship_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.feature_relationship_pub OWNER TO postgres;

--
-- Name: TABLE feature_relationship_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_relationship_pub IS 'Provenance. Attach optional evidence to a feature_relationship in the form of a publication.';


--
-- Name: feature_relationship_pub_feature_relationship_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_relationship_pub_feature_relationship_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_relationship_pub_feature_relationship_pub_id_seq OWNER TO postgres;

--
-- Name: feature_relationship_pub_feature_relationship_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_relationship_pub_feature_relationship_pub_id_seq OWNED BY feature_relationship_pub.feature_relationship_pub_id;


--
-- Name: feature_relationshipprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_relationshipprop (
    feature_relationshipprop_id integer NOT NULL,
    feature_relationship_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_relationshipprop OWNER TO postgres;

--
-- Name: TABLE feature_relationshipprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_relationshipprop IS 'Extensible properties
for feature_relationships. Analagous structure to featureprop. This
table is largely optional and not used with a high frequency. Typical
scenarios may be if one wishes to attach additional data to a
feature_relationship - for example to say that the
feature_relationship is only true in certain contexts.';


--
-- Name: COLUMN feature_relationshipprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationshipprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. Currently there is no standard ontology for
feature_relationship property types.';


--
-- Name: COLUMN feature_relationshipprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationshipprop.value IS 'The value of the
property, represented as text. Numeric values are converted to their
text representation. This is less efficient than using native database
types, but is easier to query.';


--
-- Name: COLUMN feature_relationshipprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationshipprop.rank IS 'Property-Value
ordering. Any feature_relationship can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used.';


--
-- Name: feature_relationshipprop_feature_relationshipprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_relationshipprop_feature_relationshipprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_relationshipprop_feature_relationshipprop_id_seq OWNER TO postgres;

--
-- Name: feature_relationshipprop_feature_relationshipprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_relationshipprop_feature_relationshipprop_id_seq OWNED BY feature_relationshipprop.feature_relationshipprop_id;


--
-- Name: feature_relationshipprop_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feature_relationshipprop_pub (
    feature_relationshipprop_pub_id integer NOT NULL,
    feature_relationshipprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.feature_relationshipprop_pub OWNER TO postgres;

--
-- Name: TABLE feature_relationshipprop_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_relationshipprop_pub IS 'Provenance for feature_relationshipprop.';


--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq OWNER TO postgres;

--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq OWNED BY feature_relationshipprop_pub.feature_relationshipprop_pub_id;


--
-- Name: feature_synonym_feature_synonym_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_synonym_feature_synonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_synonym_feature_synonym_id_seq OWNER TO postgres;

--
-- Name: feature_synonym_feature_synonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_synonym_feature_synonym_id_seq OWNED BY feature_synonym.feature_synonym_id;


--
-- Name: feature_union; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW feature_union AS
    SELECT x.feature_id AS subject_id, y.feature_id AS object_id, x.srcfeature_id, x.strand AS subject_strand, y.strand AS object_strand, CASE WHEN (x.fmin < y.fmin) THEN x.fmin ELSE y.fmin END AS fmin, CASE WHEN (x.fmax > y.fmax) THEN x.fmax ELSE y.fmax END AS fmax FROM featureloc x, featureloc y WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));


ALTER TABLE public.feature_union OWNER TO postgres;

--
-- Name: VIEW feature_union; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW feature_union IS 'set-union on interval defined by featureloc. featurelocs must meet';


--
-- Name: feature_uniquename_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_uniquename_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_uniquename_seq OWNER TO postgres;

--
-- Name: featureloc_featureloc_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE featureloc_featureloc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featureloc_featureloc_id_seq OWNER TO postgres;

--
-- Name: featureloc_featureloc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE featureloc_featureloc_id_seq OWNED BY featureloc.featureloc_id;


--
-- Name: featureloc_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE featureloc_pub (
    featureloc_pub_id integer NOT NULL,
    featureloc_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.featureloc_pub OWNER TO postgres;

--
-- Name: TABLE featureloc_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE featureloc_pub IS 'Provenance of featureloc. Linking table between featurelocs and publications that mention them.';


--
-- Name: featureloc_pub_featureloc_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE featureloc_pub_featureloc_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featureloc_pub_featureloc_pub_id_seq OWNER TO postgres;

--
-- Name: featureloc_pub_featureloc_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE featureloc_pub_featureloc_pub_id_seq OWNED BY featureloc_pub.featureloc_pub_id;


--
-- Name: featuremap; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE featuremap (
    featuremap_id integer NOT NULL,
    name character varying(255),
    description text,
    unittype_id integer
);


ALTER TABLE public.featuremap OWNER TO postgres;

--
-- Name: featuremap_featuremap_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE featuremap_featuremap_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featuremap_featuremap_id_seq OWNER TO postgres;

--
-- Name: featuremap_featuremap_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE featuremap_featuremap_id_seq OWNED BY featuremap.featuremap_id;


--
-- Name: featuremap_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE featuremap_pub (
    featuremap_pub_id integer NOT NULL,
    featuremap_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.featuremap_pub OWNER TO postgres;

--
-- Name: featuremap_pub_featuremap_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE featuremap_pub_featuremap_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featuremap_pub_featuremap_pub_id_seq OWNER TO postgres;

--
-- Name: featuremap_pub_featuremap_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE featuremap_pub_featuremap_pub_id_seq OWNED BY featuremap_pub.featuremap_pub_id;


--
-- Name: featurepos; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE featurepos (
    featurepos_id integer NOT NULL,
    featuremap_id integer NOT NULL,
    feature_id integer NOT NULL,
    map_feature_id integer NOT NULL,
    mappos double precision NOT NULL
);


ALTER TABLE public.featurepos OWNER TO postgres;

--
-- Name: COLUMN featurepos.map_feature_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featurepos.map_feature_id IS 'map_feature_id
links to the feature (map) upon which the feature is being localized.';


--
-- Name: featurepos_featuremap_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE featurepos_featuremap_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featurepos_featuremap_id_seq OWNER TO postgres;

--
-- Name: featurepos_featuremap_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE featurepos_featuremap_id_seq OWNED BY featurepos.featuremap_id;


--
-- Name: featurepos_featurepos_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE featurepos_featurepos_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featurepos_featurepos_id_seq OWNER TO postgres;

--
-- Name: featurepos_featurepos_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE featurepos_featurepos_id_seq OWNED BY featurepos.featurepos_id;


--
-- Name: featureprop_featureprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE featureprop_featureprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featureprop_featureprop_id_seq OWNER TO postgres;

--
-- Name: featureprop_featureprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE featureprop_featureprop_id_seq OWNED BY featureprop.featureprop_id;


--
-- Name: featureprop_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE featureprop_pub (
    featureprop_pub_id integer NOT NULL,
    featureprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.featureprop_pub OWNER TO postgres;

--
-- Name: TABLE featureprop_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE featureprop_pub IS 'Provenance. Any featureprop assignment can optionally be supported by a publication.';


--
-- Name: featureprop_pub_featureprop_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE featureprop_pub_featureprop_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featureprop_pub_featureprop_pub_id_seq OWNER TO postgres;

--
-- Name: featureprop_pub_featureprop_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE featureprop_pub_featureprop_pub_id_seq OWNED BY featureprop_pub.featureprop_pub_id;


--
-- Name: featurerange; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE featurerange (
    featurerange_id integer NOT NULL,
    featuremap_id integer NOT NULL,
    feature_id integer NOT NULL,
    leftstartf_id integer NOT NULL,
    leftendf_id integer,
    rightstartf_id integer,
    rightendf_id integer NOT NULL,
    rangestr character varying(255)
);


ALTER TABLE public.featurerange OWNER TO postgres;

--
-- Name: TABLE featurerange; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE featurerange IS 'In cases where the start and end of a mapped feature is a range, leftendf and rightstartf are populated. leftstartf_id, leftendf_id, rightstartf_id, rightendf_id are the ids of features with respect to which the feature is being mapped. These may be cytological bands.';


--
-- Name: COLUMN featurerange.featuremap_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featurerange.featuremap_id IS 'featuremap_id is the id of the feature being mapped.';


--
-- Name: featurerange_featurerange_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE featurerange_featurerange_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featurerange_featurerange_id_seq OWNER TO postgres;

--
-- Name: featurerange_featurerange_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE featurerange_featurerange_id_seq OWNED BY featurerange.featurerange_id;


--
-- Name: featureset_meets; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW featureset_meets AS
    SELECT x.object_id AS subject_id, y.object_id FROM ((feature_meets r JOIN feature_relationship x ON ((r.subject_id = x.subject_id))) JOIN feature_relationship y ON ((r.object_id = y.subject_id)));


ALTER TABLE public.featureset_meets OWNER TO postgres;

--
-- Name: fnr_type; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW fnr_type AS
    SELECT f.feature_id, f.name, f.dbxref_id, c.name AS type, f.residues, f.seqlen, f.md5checksum, f.type_id, f.timeaccessioned, f.timelastmodified FROM (feature f LEFT JOIN analysisfeature af ON ((f.feature_id = af.feature_id))), cvterm c WHERE ((f.type_id = c.cvterm_id) AND (af.feature_id IS NULL));


ALTER TABLE public.fnr_type OWNER TO postgres;

--
-- Name: fp_key; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW fp_key AS
    SELECT fp.feature_id, c.name AS pkey, fp.value FROM featureprop fp, cvterm c WHERE (fp.featureprop_id = c.cvterm_id);


ALTER TABLE public.fp_key OWNER TO postgres;

--
-- Name: genotype; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE genotype (
    genotype_id integer NOT NULL,
    name text,
    uniquename text NOT NULL,
    description character varying(255),
    type_id integer NOT NULL
);


ALTER TABLE public.genotype OWNER TO postgres;

--
-- Name: TABLE genotype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE genotype IS 'Genetic context. A genotype is defined by a collection of features, mutations, balancers, deficiencies, haplotype blocks, or engineered constructs.';


--
-- Name: COLUMN genotype.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN genotype.name IS 'Optional alternative name for a genotype, 
for display purposes.';


--
-- Name: COLUMN genotype.uniquename; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN genotype.uniquename IS 'The unique name for a genotype; 
typically derived from the features making up the genotype.';


--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE genotype_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.genotype_genotype_id_seq OWNER TO postgres;

--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE genotype_genotype_id_seq OWNED BY genotype.genotype_id;


--
-- Name: genotypeprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE genotypeprop (
    genotypeprop_id integer NOT NULL,
    genotype_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.genotypeprop OWNER TO postgres;

--
-- Name: genotypeprop_genotypeprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE genotypeprop_genotypeprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.genotypeprop_genotypeprop_id_seq OWNER TO postgres;

--
-- Name: genotypeprop_genotypeprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE genotypeprop_genotypeprop_id_seq OWNED BY genotypeprop.genotypeprop_id;


--
-- Name: gff3atts; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW gff3atts AS
    (((((((((SELECT fs.feature_id, 'Ontology_term'::text AS type, CASE WHEN ((db.name)::text ~~ '%Gene Ontology%'::text) THEN (('GO:'::text || (dbx.accession)::text))::character varying WHEN ((db.name)::text ~~ 'Sequence Ontology%'::text) THEN (('SO:'::text || (dbx.accession)::text))::character varying ELSE ((((db.name)::text || ':'::text) || (dbx.accession)::text))::character varying END AS attribute FROM cvterm s, dbxref dbx, feature_cvterm fs, db WHERE (((fs.cvterm_id = s.cvterm_id) AND (s.dbxref_id = dbx.dbxref_id)) AND (db.db_id = dbx.db_id)) UNION ALL SELECT fs.feature_id, 'Dbxref'::text AS type, (((d.name)::text || ':'::text) || (s.accession)::text) AS attribute FROM dbxref s, feature_dbxref fs, db d WHERE (((fs.dbxref_id = s.dbxref_id) AND (s.db_id = d.db_id)) AND ((d.name)::text <> 'GFF_source'::text))) UNION ALL SELECT f.feature_id, 'Alias'::text AS type, s.name AS attribute FROM synonym s, feature_synonym fs, feature f WHERE ((((fs.synonym_id = s.synonym_id) AND (f.feature_id = fs.feature_id)) AND ((f.name)::text <> (s.name)::text)) AND (f.uniquename <> (s.name)::text))) UNION ALL SELECT fp.feature_id, cv.name AS type, fp.value AS attribute FROM featureprop fp, cvterm cv WHERE (fp.type_id = cv.cvterm_id)) UNION ALL SELECT fs.feature_id, 'pub'::text AS type, (((s.series_name)::text || ':'::text) || s.title) AS attribute FROM pub s, feature_pub fs WHERE (fs.pub_id = s.pub_id)) UNION ALL SELECT fr.subject_id AS feature_id, 'Parent'::text AS type, parent.uniquename AS attribute FROM feature_relationship fr, feature parent WHERE ((fr.object_id = parent.feature_id) AND (fr.type_id = (SELECT cvterm.cvterm_id FROM cvterm WHERE (((cvterm.name)::text = 'part_of'::text) AND (cvterm.cv_id IN (SELECT cv.cv_id FROM cv WHERE ((cv.name)::text = 'relationship'::text)))))))) UNION ALL SELECT fr.subject_id AS feature_id, 'Derives_from'::text AS type, parent.uniquename AS attribute FROM feature_relationship fr, feature parent WHERE ((fr.object_id = parent.feature_id) AND (fr.type_id = (SELECT cvterm.cvterm_id FROM cvterm WHERE (((cvterm.name)::text = 'derives_from'::text) AND (cvterm.cv_id IN (SELECT cv.cv_id FROM cv WHERE ((cv.name)::text = 'relationship'::text)))))))) UNION ALL SELECT fl.feature_id, 'Target'::text AS type, (((((((target.name)::text || ' '::text) || (fl.fmin + 1)) || ' '::text) || fl.fmax) || ' '::text) || fl.strand) AS attribute FROM featureloc fl, feature target WHERE ((fl.srcfeature_id = target.feature_id) AND (fl.rank <> 0))) UNION ALL SELECT feature.feature_id, 'ID'::text AS type, feature.uniquename AS attribute FROM feature WHERE (NOT (feature.type_id IN (SELECT cvterm.cvterm_id FROM cvterm WHERE ((cvterm.name)::text = 'CDS'::text))))) UNION ALL SELECT feature.feature_id, 'chado_feature_id'::text AS type, (feature.feature_id)::character varying AS attribute FROM feature) UNION ALL SELECT feature.feature_id, 'Name'::text AS type, feature.name AS attribute FROM feature;


ALTER TABLE public.gff3atts OWNER TO postgres;

--
-- Name: gff3view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW gff3view AS
    SELECT f.feature_id, sf.name AS ref, COALESCE(gffdbx.accession, '.'::character varying(255)) AS source, cv.name AS type, (fl.fmin + 1) AS fstart, fl.fmax AS fend, COALESCE((af.significance)::text, '.'::text) AS score, CASE WHEN (fl.strand = (-1)) THEN '-'::text WHEN (fl.strand = 1) THEN '+'::text ELSE '.'::text END AS strand, COALESCE((fl.phase)::text, '.'::text) AS phase, f.seqlen, f.name, f.organism_id FROM (((((feature f LEFT JOIN featureloc fl ON ((f.feature_id = fl.feature_id))) LEFT JOIN feature sf ON ((fl.srcfeature_id = sf.feature_id))) LEFT JOIN (SELECT fd.feature_id, d.accession FROM ((feature_dbxref fd JOIN dbxref d USING (dbxref_id)) JOIN db USING (db_id)) WHERE ((db.name)::text = 'GFF_source'::text)) gffdbx ON ((f.feature_id = gffdbx.feature_id))) LEFT JOIN cvterm cv ON ((f.type_id = cv.cvterm_id))) LEFT JOIN analysisfeature af ON ((f.feature_id = af.feature_id)));


ALTER TABLE public.gff3view OWNER TO postgres;

--
-- Name: intron_combined_view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW intron_combined_view AS
    SELECT x1.feature_id AS exon1_id, x2.feature_id AS exon2_id, CASE WHEN (l1.strand = (-1)) THEN l2.fmax ELSE l1.fmax END AS fmin, CASE WHEN (l1.strand = (-1)) THEN l1.fmin ELSE l2.fmin END AS fmax, l1.strand, l1.srcfeature_id, r1.rank AS intron_rank, r1.object_id AS transcript_id FROM ((((((cvterm JOIN feature x1 ON ((x1.type_id = cvterm.cvterm_id))) JOIN feature_relationship r1 ON ((x1.feature_id = r1.subject_id))) JOIN featureloc l1 ON ((x1.feature_id = l1.feature_id))) JOIN feature x2 ON ((x2.type_id = cvterm.cvterm_id))) JOIN feature_relationship r2 ON ((x2.feature_id = r2.subject_id))) JOIN featureloc l2 ON ((x2.feature_id = l2.feature_id))) WHERE ((((((((cvterm.name)::text = 'exon'::text) AND ((r2.rank - r1.rank) = 1)) AND (r1.object_id = r2.object_id)) AND (l1.strand = l2.strand)) AND (l1.srcfeature_id = l2.srcfeature_id)) AND (l1.locgroup = 0)) AND (l2.locgroup = 0));


ALTER TABLE public.intron_combined_view OWNER TO postgres;

--
-- Name: intronloc_view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW intronloc_view AS
    SELECT DISTINCT intron_combined_view.exon1_id, intron_combined_view.exon2_id, intron_combined_view.fmin, intron_combined_view.fmax, intron_combined_view.strand, intron_combined_view.srcfeature_id FROM intron_combined_view;


ALTER TABLE public.intronloc_view OWNER TO postgres;

--
-- Name: library; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE library (
    library_id integer NOT NULL,
    organism_id integer NOT NULL,
    name character varying(255),
    uniquename text NOT NULL,
    type_id integer NOT NULL,
    is_obsolete integer DEFAULT 0 NOT NULL,
    timeaccessioned timestamp without time zone DEFAULT now() NOT NULL,
    timelastmodified timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.library OWNER TO postgres;

--
-- Name: COLUMN library.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN library.type_id IS 'The type_id foreign key links
to a controlled vocabulary of library types. Examples of this would be: "cDNA_library" or "genomic_library"';


--
-- Name: library_cvterm; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE library_cvterm (
    library_cvterm_id integer NOT NULL,
    library_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.library_cvterm OWNER TO postgres;

--
-- Name: TABLE library_cvterm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE library_cvterm IS 'The table library_cvterm links a library to controlled vocabularies which describe the library.  For instance, there might be a link to the anatomy cv for "head" or "testes" for a head or testes library.';


--
-- Name: library_cvterm_library_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE library_cvterm_library_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.library_cvterm_library_cvterm_id_seq OWNER TO postgres;

--
-- Name: library_cvterm_library_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE library_cvterm_library_cvterm_id_seq OWNED BY library_cvterm.library_cvterm_id;


--
-- Name: library_dbxref; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE library_dbxref (
    library_dbxref_id integer NOT NULL,
    library_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE public.library_dbxref OWNER TO postgres;

--
-- Name: library_dbxref_library_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE library_dbxref_library_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.library_dbxref_library_dbxref_id_seq OWNER TO postgres;

--
-- Name: library_dbxref_library_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE library_dbxref_library_dbxref_id_seq OWNED BY library_dbxref.library_dbxref_id;


--
-- Name: library_feature; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE library_feature (
    library_feature_id integer NOT NULL,
    library_id integer NOT NULL,
    feature_id integer NOT NULL
);


ALTER TABLE public.library_feature OWNER TO postgres;

--
-- Name: TABLE library_feature; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE library_feature IS 'library_feature links a library to the clones which are contained in the library.  Examples of such linked features might be "cDNA_clone" or  "genomic_clone".';


--
-- Name: library_feature_library_feature_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE library_feature_library_feature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.library_feature_library_feature_id_seq OWNER TO postgres;

--
-- Name: library_feature_library_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE library_feature_library_feature_id_seq OWNED BY library_feature.library_feature_id;


--
-- Name: library_library_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE library_library_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.library_library_id_seq OWNER TO postgres;

--
-- Name: library_library_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE library_library_id_seq OWNED BY library.library_id;


--
-- Name: library_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE library_pub (
    library_pub_id integer NOT NULL,
    library_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.library_pub OWNER TO postgres;

--
-- Name: library_pub_library_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE library_pub_library_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.library_pub_library_pub_id_seq OWNER TO postgres;

--
-- Name: library_pub_library_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE library_pub_library_pub_id_seq OWNED BY library_pub.library_pub_id;


--
-- Name: library_synonym; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE library_synonym (
    library_synonym_id integer NOT NULL,
    synonym_id integer NOT NULL,
    library_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL,
    is_internal boolean DEFAULT false NOT NULL
);


ALTER TABLE public.library_synonym OWNER TO postgres;

--
-- Name: COLUMN library_synonym.pub_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN library_synonym.pub_id IS 'The pub_id link is for
relating the usage of a given synonym to the publication in which it was used.';


--
-- Name: COLUMN library_synonym.is_current; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN library_synonym.is_current IS 'The is_current bit indicates whether the linked synonym is the current -official- symbol for the linked library.';


--
-- Name: COLUMN library_synonym.is_internal; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN library_synonym.is_internal IS 'Typically a synonym
exists so that somebody querying the database with an obsolete name
can find the object they are looking for under its current name.  If
the synonym has been used publicly and deliberately (e.g. in a paper), it my also be listed in reports as a synonym.   If the synonym was not used deliberately (e.g., there was a typo which went public), then the is_internal bit may be set to "true" so that it is known that the synonym is "internal" and should be queryable but should not be listed in reports as a valid synonym.';


--
-- Name: library_synonym_library_synonym_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE library_synonym_library_synonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.library_synonym_library_synonym_id_seq OWNER TO postgres;

--
-- Name: library_synonym_library_synonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE library_synonym_library_synonym_id_seq OWNED BY library_synonym.library_synonym_id;


--
-- Name: libraryprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE libraryprop (
    libraryprop_id integer NOT NULL,
    library_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.libraryprop OWNER TO postgres;

--
-- Name: libraryprop_libraryprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE libraryprop_libraryprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.libraryprop_libraryprop_id_seq OWNER TO postgres;

--
-- Name: libraryprop_libraryprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE libraryprop_libraryprop_id_seq OWNED BY libraryprop.libraryprop_id;


--
-- Name: libraryprop_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE libraryprop_pub (
    libraryprop_pub_id integer NOT NULL,
    libraryprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.libraryprop_pub OWNER TO postgres;

--
-- Name: libraryprop_pub_libraryprop_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE libraryprop_pub_libraryprop_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.libraryprop_pub_libraryprop_pub_id_seq OWNER TO postgres;

--
-- Name: libraryprop_pub_libraryprop_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE libraryprop_pub_libraryprop_pub_id_seq OWNED BY libraryprop_pub.libraryprop_pub_id;


--
-- Name: magedocumentation; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE magedocumentation (
    magedocumentation_id integer NOT NULL,
    mageml_id integer NOT NULL,
    tableinfo_id integer NOT NULL,
    row_id integer NOT NULL,
    mageidentifier text NOT NULL
);


ALTER TABLE public.magedocumentation OWNER TO postgres;

--
-- Name: magedocumentation_magedocumentation_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE magedocumentation_magedocumentation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.magedocumentation_magedocumentation_id_seq OWNER TO postgres;

--
-- Name: magedocumentation_magedocumentation_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE magedocumentation_magedocumentation_id_seq OWNED BY magedocumentation.magedocumentation_id;


--
-- Name: mageml; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE mageml (
    mageml_id integer NOT NULL,
    mage_package text NOT NULL,
    mage_ml text NOT NULL
);


ALTER TABLE public.mageml OWNER TO postgres;

--
-- Name: TABLE mageml; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE mageml IS 'This table is for storing extra bits of MAGEml in a denormalized form. More normalization would require many more tables.';


--
-- Name: mageml_mageml_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE mageml_mageml_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mageml_mageml_id_seq OWNER TO postgres;

--
-- Name: mageml_mageml_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE mageml_mageml_id_seq OWNED BY mageml.mageml_id;


--
-- Name: materialized_view; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE materialized_view (
    materialized_view_id integer NOT NULL,
    last_update timestamp without time zone,
    refresh_time integer,
    name character varying(64),
    mv_schema character varying(64),
    mv_table character varying(128),
    mv_specs text,
    indexed text,
    query text,
    special_index text
);


ALTER TABLE public.materialized_view OWNER TO postgres;

--
-- Name: materialized_view_materialized_view_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE materialized_view_materialized_view_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.materialized_view_materialized_view_id_seq OWNER TO postgres;

--
-- Name: materialized_view_materialized_view_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE materialized_view_materialized_view_id_seq OWNED BY materialized_view.materialized_view_id;


--
-- Name: nd_experiment; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_experiment (
    nd_experiment_id integer NOT NULL,
    nd_geolocation_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.nd_experiment OWNER TO postgres;

--
-- Name: nd_experiment_contact; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_experiment_contact (
    nd_experiment_contact_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    contact_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_contact OWNER TO postgres;

--
-- Name: nd_experiment_contact_nd_experiment_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_contact_nd_experiment_contact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_contact_nd_experiment_contact_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_contact_nd_experiment_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_contact_nd_experiment_contact_id_seq OWNED BY nd_experiment_contact.nd_experiment_contact_id;


--
-- Name: nd_experiment_dbxref; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_experiment_dbxref (
    nd_experiment_dbxref_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_dbxref OWNER TO postgres;

--
-- Name: TABLE nd_experiment_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_dbxref IS 'Cross-reference experiment to accessions, images, etc';


--
-- Name: nd_experiment_dbxref_nd_experiment_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_dbxref_nd_experiment_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_dbxref_nd_experiment_dbxref_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_dbxref_nd_experiment_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_dbxref_nd_experiment_dbxref_id_seq OWNED BY nd_experiment_dbxref.nd_experiment_dbxref_id;


--
-- Name: nd_experiment_genotype; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_experiment_genotype (
    nd_experiment_genotype_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    genotype_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_genotype OWNER TO postgres;

--
-- Name: TABLE nd_experiment_genotype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_genotype IS 'Linking table: experiments to the genotypes they produce. There is a one-to-one relationship between an experiment and a genotype since each genotype record should point to one experiment. Add a new experiment_id for each genotype record.';


--
-- Name: nd_experiment_genotype_nd_experiment_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_genotype_nd_experiment_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_genotype_nd_experiment_genotype_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_genotype_nd_experiment_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_genotype_nd_experiment_genotype_id_seq OWNED BY nd_experiment_genotype.nd_experiment_genotype_id;


--
-- Name: nd_experiment_nd_experiment_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_nd_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_nd_experiment_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_nd_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_nd_experiment_id_seq OWNED BY nd_experiment.nd_experiment_id;


--
-- Name: nd_experiment_phenotype; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_experiment_phenotype (
    nd_experiment_phenotype_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    phenotype_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_phenotype OWNER TO postgres;

--
-- Name: TABLE nd_experiment_phenotype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_phenotype IS 'Linking table: experiments to the phenotypes they produce. There is a one-to-one relationship between an experiment and a phenotype since each phenotype record should point to one experiment. Add a new experiment_id for each phenotype record.';


--
-- Name: nd_experiment_phenotype_nd_experiment_phenotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_phenotype_nd_experiment_phenotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_phenotype_nd_experiment_phenotype_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_phenotype_nd_experiment_phenotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_phenotype_nd_experiment_phenotype_id_seq OWNED BY nd_experiment_phenotype.nd_experiment_phenotype_id;


--
-- Name: nd_experiment_project; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_experiment_project (
    nd_experiment_project_id integer NOT NULL,
    project_id integer NOT NULL,
    nd_experiment_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_project OWNER TO postgres;

--
-- Name: nd_experiment_project_nd_experiment_project_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_project_nd_experiment_project_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_project_nd_experiment_project_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_project_nd_experiment_project_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_project_nd_experiment_project_id_seq OWNED BY nd_experiment_project.nd_experiment_project_id;


--
-- Name: nd_experiment_protocol; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_experiment_protocol (
    nd_experiment_protocol_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    nd_protocol_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_protocol OWNER TO postgres;

--
-- Name: TABLE nd_experiment_protocol; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_protocol IS 'Linking table: experiments to the protocols they involve.';


--
-- Name: nd_experiment_protocol_nd_experiment_protocol_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_protocol_nd_experiment_protocol_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_protocol_nd_experiment_protocol_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_protocol_nd_experiment_protocol_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_protocol_nd_experiment_protocol_id_seq OWNED BY nd_experiment_protocol.nd_experiment_protocol_id;


--
-- Name: nd_experiment_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_experiment_pub (
    nd_experiment_pub_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_pub OWNER TO postgres;

--
-- Name: TABLE nd_experiment_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_pub IS 'Linking nd_experiment(s) to publication(s)';


--
-- Name: nd_experiment_pub_nd_experiment_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_pub_nd_experiment_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_pub_nd_experiment_pub_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_pub_nd_experiment_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_pub_nd_experiment_pub_id_seq OWNED BY nd_experiment_pub.nd_experiment_pub_id;


--
-- Name: nd_experiment_stock; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_experiment_stock (
    nd_experiment_stock_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    stock_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_stock OWNER TO postgres;

--
-- Name: TABLE nd_experiment_stock; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_stock IS 'Part of a stock or a clone of a stock that is used in an experiment';


--
-- Name: COLUMN nd_experiment_stock.stock_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_experiment_stock.stock_id IS 'stock used in the extraction or the corresponding stock for the clone';


--
-- Name: nd_experiment_stock_dbxref; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_experiment_stock_dbxref (
    nd_experiment_stock_dbxref_id integer NOT NULL,
    nd_experiment_stock_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_stock_dbxref OWNER TO postgres;

--
-- Name: TABLE nd_experiment_stock_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_stock_dbxref IS 'Cross-reference experiment_stock to accessions, images, etc';


--
-- Name: nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq OWNED BY nd_experiment_stock_dbxref.nd_experiment_stock_dbxref_id;


--
-- Name: nd_experiment_stock_nd_experiment_stock_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_stock_nd_experiment_stock_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_stock_nd_experiment_stock_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_stock_nd_experiment_stock_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_stock_nd_experiment_stock_id_seq OWNED BY nd_experiment_stock.nd_experiment_stock_id;


--
-- Name: nd_experiment_stockprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_experiment_stockprop (
    nd_experiment_stockprop_id integer NOT NULL,
    nd_experiment_stock_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.nd_experiment_stockprop OWNER TO postgres;

--
-- Name: TABLE nd_experiment_stockprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_stockprop IS 'Property/value associations for experiment_stocks. This table can store the properties such as treatment';


--
-- Name: COLUMN nd_experiment_stockprop.nd_experiment_stock_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_experiment_stockprop.nd_experiment_stock_id IS 'The experiment_stock to which the property applies.';


--
-- Name: COLUMN nd_experiment_stockprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_experiment_stockprop.type_id IS 'The name of the property as a reference to a controlled vocabulary term.';


--
-- Name: COLUMN nd_experiment_stockprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_experiment_stockprop.value IS 'The value of the property.';


--
-- Name: COLUMN nd_experiment_stockprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_experiment_stockprop.rank IS 'The rank of the property value, if the property has an array of values.';


--
-- Name: nd_experiment_stockprop_nd_experiment_stockprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_stockprop_nd_experiment_stockprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_stockprop_nd_experiment_stockprop_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_stockprop_nd_experiment_stockprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_stockprop_nd_experiment_stockprop_id_seq OWNED BY nd_experiment_stockprop.nd_experiment_stockprop_id;


--
-- Name: nd_experimentprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_experimentprop (
    nd_experimentprop_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.nd_experimentprop OWNER TO postgres;

--
-- Name: nd_experimentprop_nd_experimentprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experimentprop_nd_experimentprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experimentprop_nd_experimentprop_id_seq OWNER TO postgres;

--
-- Name: nd_experimentprop_nd_experimentprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experimentprop_nd_experimentprop_id_seq OWNED BY nd_experimentprop.nd_experimentprop_id;


--
-- Name: nd_geolocation; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_geolocation (
    nd_geolocation_id integer NOT NULL,
    description character varying(255),
    latitude real,
    longitude real,
    geodetic_datum character varying(32),
    altitude real
);


ALTER TABLE public.nd_geolocation OWNER TO postgres;

--
-- Name: TABLE nd_geolocation; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_geolocation IS 'The geo-referencable location of the stock. NOTE: This entity is subject to change as a more general and possibly more OpenGIS-compliant geolocation module may be introduced into Chado.';


--
-- Name: COLUMN nd_geolocation.description; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocation.description IS 'A textual representation of the location, if this is the original georeference. Optional if the original georeference is available in lat/long coordinates.';


--
-- Name: COLUMN nd_geolocation.latitude; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocation.latitude IS 'The decimal latitude coordinate of the georeference, using positive and negative sign to indicate N and S, respectively.';


--
-- Name: COLUMN nd_geolocation.longitude; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocation.longitude IS 'The decimal longitude coordinate of the georeference, using positive and negative sign to indicate E and W, respectively.';


--
-- Name: COLUMN nd_geolocation.geodetic_datum; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocation.geodetic_datum IS 'The geodetic system on which the geo-reference coordinates are based. For geo-references measured between 1984 and 2010, this will typically be WGS84.';


--
-- Name: COLUMN nd_geolocation.altitude; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocation.altitude IS 'The altitude (elevation) of the location in meters. If the altitude is only known as a range, this is the average, and altitude_dev will hold half of the width of the range.';


--
-- Name: nd_geolocation_nd_geolocation_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_geolocation_nd_geolocation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_geolocation_nd_geolocation_id_seq OWNER TO postgres;

--
-- Name: nd_geolocation_nd_geolocation_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_geolocation_nd_geolocation_id_seq OWNED BY nd_geolocation.nd_geolocation_id;


--
-- Name: nd_geolocationprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_geolocationprop (
    nd_geolocationprop_id integer NOT NULL,
    nd_geolocation_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.nd_geolocationprop OWNER TO postgres;

--
-- Name: TABLE nd_geolocationprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_geolocationprop IS 'Property/value associations for geolocations. This table can store the properties such as location and environment';


--
-- Name: COLUMN nd_geolocationprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocationprop.type_id IS 'The name of the property as a reference to a controlled vocabulary term.';


--
-- Name: COLUMN nd_geolocationprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocationprop.value IS 'The value of the property.';


--
-- Name: COLUMN nd_geolocationprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocationprop.rank IS 'The rank of the property value, if the property has an array of values.';


--
-- Name: nd_geolocationprop_nd_geolocationprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_geolocationprop_nd_geolocationprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_geolocationprop_nd_geolocationprop_id_seq OWNER TO postgres;

--
-- Name: nd_geolocationprop_nd_geolocationprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_geolocationprop_nd_geolocationprop_id_seq OWNED BY nd_geolocationprop.nd_geolocationprop_id;


--
-- Name: nd_protocol; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_protocol (
    nd_protocol_id integer NOT NULL,
    name character varying(255) NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.nd_protocol OWNER TO postgres;

--
-- Name: TABLE nd_protocol; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_protocol IS 'A protocol can be anything that is done as part of the experiment.';


--
-- Name: COLUMN nd_protocol.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_protocol.name IS 'The protocol name.';


--
-- Name: nd_protocol_nd_protocol_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_protocol_nd_protocol_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_protocol_nd_protocol_id_seq OWNER TO postgres;

--
-- Name: nd_protocol_nd_protocol_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_protocol_nd_protocol_id_seq OWNED BY nd_protocol.nd_protocol_id;


--
-- Name: nd_protocol_reagent; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_protocol_reagent (
    nd_protocol_reagent_id integer NOT NULL,
    nd_protocol_id integer NOT NULL,
    reagent_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.nd_protocol_reagent OWNER TO postgres;

--
-- Name: nd_protocol_reagent_nd_protocol_reagent_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_protocol_reagent_nd_protocol_reagent_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_protocol_reagent_nd_protocol_reagent_id_seq OWNER TO postgres;

--
-- Name: nd_protocol_reagent_nd_protocol_reagent_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_protocol_reagent_nd_protocol_reagent_id_seq OWNED BY nd_protocol_reagent.nd_protocol_reagent_id;


--
-- Name: nd_protocolprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_protocolprop (
    nd_protocolprop_id integer NOT NULL,
    nd_protocol_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.nd_protocolprop OWNER TO postgres;

--
-- Name: TABLE nd_protocolprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_protocolprop IS 'Property/value associations for protocol.';


--
-- Name: COLUMN nd_protocolprop.nd_protocol_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_protocolprop.nd_protocol_id IS 'The protocol to which the property applies.';


--
-- Name: COLUMN nd_protocolprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_protocolprop.type_id IS 'The name of the property as a reference to a controlled vocabulary term.';


--
-- Name: COLUMN nd_protocolprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_protocolprop.value IS 'The value of the property.';


--
-- Name: COLUMN nd_protocolprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_protocolprop.rank IS 'The rank of the property value, if the property has an array of values.';


--
-- Name: nd_protocolprop_nd_protocolprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_protocolprop_nd_protocolprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_protocolprop_nd_protocolprop_id_seq OWNER TO postgres;

--
-- Name: nd_protocolprop_nd_protocolprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_protocolprop_nd_protocolprop_id_seq OWNED BY nd_protocolprop.nd_protocolprop_id;


--
-- Name: nd_reagent; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_reagent (
    nd_reagent_id integer NOT NULL,
    name character varying(80) NOT NULL,
    type_id integer NOT NULL,
    feature_id integer
);


ALTER TABLE public.nd_reagent OWNER TO postgres;

--
-- Name: TABLE nd_reagent; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_reagent IS 'A reagent such as a primer, an enzyme, an adapter oligo, a linker oligo. Reagents are used in genotyping experiments, or in any other kind of experiment.';


--
-- Name: COLUMN nd_reagent.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_reagent.name IS 'The name of the reagent. The name should be unique for a given type.';


--
-- Name: COLUMN nd_reagent.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_reagent.type_id IS 'The type of the reagent, for example linker oligomer, or forward primer.';


--
-- Name: COLUMN nd_reagent.feature_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_reagent.feature_id IS 'If the reagent is a primer, the feature that it corresponds to. More generally, the corresponding feature for any reagent that has a sequence that maps to another sequence.';


--
-- Name: nd_reagent_nd_reagent_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_reagent_nd_reagent_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_reagent_nd_reagent_id_seq OWNER TO postgres;

--
-- Name: nd_reagent_nd_reagent_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_reagent_nd_reagent_id_seq OWNED BY nd_reagent.nd_reagent_id;


--
-- Name: nd_reagent_relationship; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_reagent_relationship (
    nd_reagent_relationship_id integer NOT NULL,
    subject_reagent_id integer NOT NULL,
    object_reagent_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.nd_reagent_relationship OWNER TO postgres;

--
-- Name: TABLE nd_reagent_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_reagent_relationship IS 'Relationships between reagents. Some reagents form a group. i.e., they are used all together or not at all. Examples are adapter/linker/enzyme experiment reagents.';


--
-- Name: COLUMN nd_reagent_relationship.subject_reagent_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_reagent_relationship.subject_reagent_id IS 'The subject reagent in the relationship. In parent/child terminology, the subject is the child. For example, in "linkerA 3prime-overhang-linker enzymeA" linkerA is the subject, 3prime-overhand-linker is the type, and enzymeA is the object.';


--
-- Name: COLUMN nd_reagent_relationship.object_reagent_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_reagent_relationship.object_reagent_id IS 'The object reagent in the relationship. In parent/child terminology, the object is the parent. For example, in "linkerA 3prime-overhang-linker enzymeA" linkerA is the subject, 3prime-overhand-linker is the type, and enzymeA is the object.';


--
-- Name: COLUMN nd_reagent_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_reagent_relationship.type_id IS 'The type (or predicate) of the relationship. For example, in "linkerA 3prime-overhang-linker enzymeA" linkerA is the subject, 3prime-overhand-linker is the type, and enzymeA is the object.';


--
-- Name: nd_reagent_relationship_nd_reagent_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_reagent_relationship_nd_reagent_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_reagent_relationship_nd_reagent_relationship_id_seq OWNER TO postgres;

--
-- Name: nd_reagent_relationship_nd_reagent_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_reagent_relationship_nd_reagent_relationship_id_seq OWNED BY nd_reagent_relationship.nd_reagent_relationship_id;


--
-- Name: nd_reagentprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nd_reagentprop (
    nd_reagentprop_id integer NOT NULL,
    nd_reagent_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.nd_reagentprop OWNER TO postgres;

--
-- Name: nd_reagentprop_nd_reagentprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_reagentprop_nd_reagentprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_reagentprop_nd_reagentprop_id_seq OWNER TO postgres;

--
-- Name: nd_reagentprop_nd_reagentprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_reagentprop_nd_reagentprop_id_seq OWNED BY nd_reagentprop.nd_reagentprop_id;


--
-- Name: organism; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE organism (
    organism_id integer NOT NULL,
    abbreviation character varying(255),
    genus character varying(255) NOT NULL,
    species character varying(255) NOT NULL,
    common_name character varying(255),
    comment text
);


ALTER TABLE public.organism OWNER TO postgres;

--
-- Name: TABLE organism; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE organism IS 'The organismal taxonomic
classification. Note that phylogenies are represented using the
phylogeny module, and taxonomies can be represented using the cvterm
module or the phylogeny module.';


--
-- Name: COLUMN organism.species; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN organism.species IS 'A type of organism is always
uniquely identified by genus and species. When mapping from the NCBI
taxonomy names.dmp file, this column must be used where it
is present, as the common_name column is not always unique (e.g. environmental
samples). If a particular strain or subspecies is to be represented,
this is appended onto the species name. Follows standard NCBI taxonomy
pattern.';


--
-- Name: organism_dbxref; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE organism_dbxref (
    organism_dbxref_id integer NOT NULL,
    organism_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.organism_dbxref OWNER TO postgres;

--
-- Name: organism_dbxref_organism_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE organism_dbxref_organism_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organism_dbxref_organism_dbxref_id_seq OWNER TO postgres;

--
-- Name: organism_dbxref_organism_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE organism_dbxref_organism_dbxref_id_seq OWNED BY organism_dbxref.organism_dbxref_id;


--
-- Name: organism_organism_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE organism_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organism_organism_id_seq OWNER TO postgres;

--
-- Name: organism_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE organism_organism_id_seq OWNED BY organism.organism_id;


--
-- Name: organismprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE organismprop (
    organismprop_id integer NOT NULL,
    organism_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.organismprop OWNER TO postgres;

--
-- Name: TABLE organismprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE organismprop IS 'Tag-value properties - follows standard chado model.';


--
-- Name: organismprop_organismprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE organismprop_organismprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organismprop_organismprop_id_seq OWNER TO postgres;

--
-- Name: organismprop_organismprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE organismprop_organismprop_id_seq OWNED BY organismprop.organismprop_id;


--
-- Name: phendesc; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE phendesc (
    phendesc_id integer NOT NULL,
    genotype_id integer NOT NULL,
    environment_id integer NOT NULL,
    description text NOT NULL,
    type_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.phendesc OWNER TO postgres;

--
-- Name: TABLE phendesc; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phendesc IS 'A summary of a _set_ of phenotypic statements for any one gcontext made in any one publication.';


--
-- Name: phendesc_phendesc_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phendesc_phendesc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phendesc_phendesc_id_seq OWNER TO postgres;

--
-- Name: phendesc_phendesc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phendesc_phendesc_id_seq OWNED BY phendesc.phendesc_id;


--
-- Name: phenotype; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE phenotype (
    phenotype_id integer NOT NULL,
    uniquename text NOT NULL,
    name text,
    observable_id integer,
    attr_id integer,
    value text,
    cvalue_id integer,
    assay_id integer
);


ALTER TABLE public.phenotype OWNER TO postgres;

--
-- Name: TABLE phenotype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phenotype IS 'A phenotypic statement, or a single
atomic phenotypic observation, is a controlled sentence describing
observable effects of non-wild type function. E.g. Obs=eye, attribute=color, cvalue=red.';


--
-- Name: COLUMN phenotype.observable_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phenotype.observable_id IS 'The entity: e.g. anatomy_part, biological_process.';


--
-- Name: COLUMN phenotype.attr_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phenotype.attr_id IS 'Phenotypic attribute (quality, property, attribute, character) - drawn from PATO.';


--
-- Name: COLUMN phenotype.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phenotype.value IS 'Value of attribute - unconstrained free text. Used only if cvalue_id is not appropriate.';


--
-- Name: COLUMN phenotype.cvalue_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phenotype.cvalue_id IS 'Phenotype attribute value (state).';


--
-- Name: COLUMN phenotype.assay_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phenotype.assay_id IS 'Evidence type.';


--
-- Name: phenotype_comparison; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE phenotype_comparison (
    phenotype_comparison_id integer NOT NULL,
    genotype1_id integer NOT NULL,
    environment1_id integer NOT NULL,
    genotype2_id integer NOT NULL,
    environment2_id integer NOT NULL,
    phenotype1_id integer NOT NULL,
    phenotype2_id integer,
    pub_id integer NOT NULL,
    organism_id integer NOT NULL
);


ALTER TABLE public.phenotype_comparison OWNER TO postgres;

--
-- Name: TABLE phenotype_comparison; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phenotype_comparison IS 'Comparison of phenotypes e.g., genotype1/environment1/phenotype1 "non-suppressible" with respect to genotype2/environment2/phenotype2.';


--
-- Name: phenotype_comparison_cvterm; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE phenotype_comparison_cvterm (
    phenotype_comparison_cvterm_id integer NOT NULL,
    phenotype_comparison_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.phenotype_comparison_cvterm OWNER TO postgres;

--
-- Name: phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq OWNER TO postgres;

--
-- Name: phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq OWNED BY phenotype_comparison_cvterm.phenotype_comparison_cvterm_id;


--
-- Name: phenotype_comparison_phenotype_comparison_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phenotype_comparison_phenotype_comparison_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenotype_comparison_phenotype_comparison_id_seq OWNER TO postgres;

--
-- Name: phenotype_comparison_phenotype_comparison_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phenotype_comparison_phenotype_comparison_id_seq OWNED BY phenotype_comparison.phenotype_comparison_id;


--
-- Name: phenotype_cvterm; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE phenotype_cvterm (
    phenotype_cvterm_id integer NOT NULL,
    phenotype_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.phenotype_cvterm OWNER TO postgres;

--
-- Name: phenotype_cvterm_phenotype_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phenotype_cvterm_phenotype_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenotype_cvterm_phenotype_cvterm_id_seq OWNER TO postgres;

--
-- Name: phenotype_cvterm_phenotype_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phenotype_cvterm_phenotype_cvterm_id_seq OWNED BY phenotype_cvterm.phenotype_cvterm_id;


--
-- Name: phenotype_phenotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phenotype_phenotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenotype_phenotype_id_seq OWNER TO postgres;

--
-- Name: phenotype_phenotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phenotype_phenotype_id_seq OWNED BY phenotype.phenotype_id;


--
-- Name: phenstatement; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE phenstatement (
    phenstatement_id integer NOT NULL,
    genotype_id integer NOT NULL,
    environment_id integer NOT NULL,
    phenotype_id integer NOT NULL,
    type_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.phenstatement OWNER TO postgres;

--
-- Name: TABLE phenstatement; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phenstatement IS 'Phenotypes are things like "larval lethal".  Phenstatements are things like "dpp-1 is recessive larval lethal". So essentially phenstatement is a linking table expressing the relationship between genotype, environment, and phenotype.';


--
-- Name: phenstatement_phenstatement_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phenstatement_phenstatement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenstatement_phenstatement_id_seq OWNER TO postgres;

--
-- Name: phenstatement_phenstatement_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phenstatement_phenstatement_id_seq OWNED BY phenstatement.phenstatement_id;


--
-- Name: phylonode; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE phylonode (
    phylonode_id integer NOT NULL,
    phylotree_id integer NOT NULL,
    parent_phylonode_id integer,
    left_idx integer NOT NULL,
    right_idx integer NOT NULL,
    type_id integer,
    feature_id integer,
    label character varying(255),
    distance double precision
);


ALTER TABLE public.phylonode OWNER TO postgres;

--
-- Name: TABLE phylonode; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phylonode IS 'This is the most pervasive
       element in the phylogeny module, cataloging the "phylonodes" of
       tree graphs. Edges are implied by the parent_phylonode_id
       reflexive closure. For all nodes in a nested set implementation the left and right index will be *between* the parents left and right indexes.';


--
-- Name: COLUMN phylonode.parent_phylonode_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phylonode.parent_phylonode_id IS 'Root phylonode can have null parent_phylonode_id value.';


--
-- Name: COLUMN phylonode.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phylonode.type_id IS 'Type: e.g. root, interior, leaf.';


--
-- Name: COLUMN phylonode.feature_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phylonode.feature_id IS 'Phylonodes can have optional features attached to them e.g. a protein or nucleotide sequence usually attached to a leaf of the phylotree for non-leaf nodes, the feature may be a feature that is an instance of SO:match; this feature is the alignment of all leaf features beneath it.';


--
-- Name: phylonode_dbxref; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE phylonode_dbxref (
    phylonode_dbxref_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.phylonode_dbxref OWNER TO postgres;

--
-- Name: TABLE phylonode_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phylonode_dbxref IS 'For example, for orthology, paralogy group identifiers; could also be used for NCBI taxonomy; for sequences, refer to phylonode_feature, feature associated dbxrefs.';


--
-- Name: phylonode_dbxref_phylonode_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylonode_dbxref_phylonode_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonode_dbxref_phylonode_dbxref_id_seq OWNER TO postgres;

--
-- Name: phylonode_dbxref_phylonode_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylonode_dbxref_phylonode_dbxref_id_seq OWNED BY phylonode_dbxref.phylonode_dbxref_id;


--
-- Name: phylonode_organism; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE phylonode_organism (
    phylonode_organism_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    organism_id integer NOT NULL
);


ALTER TABLE public.phylonode_organism OWNER TO postgres;

--
-- Name: TABLE phylonode_organism; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phylonode_organism IS 'This linking table should only be used for nodes in taxonomy trees; it provides a mapping between the node and an organism. One node can have zero or one organisms, one organism can have zero or more nodes (although typically it should only have one in the standard NCBI taxonomy tree).';


--
-- Name: COLUMN phylonode_organism.phylonode_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phylonode_organism.phylonode_id IS 'One phylonode cannot refer to >1 organism.';


--
-- Name: phylonode_organism_phylonode_organism_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylonode_organism_phylonode_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonode_organism_phylonode_organism_id_seq OWNER TO postgres;

--
-- Name: phylonode_organism_phylonode_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylonode_organism_phylonode_organism_id_seq OWNED BY phylonode_organism.phylonode_organism_id;


--
-- Name: phylonode_phylonode_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylonode_phylonode_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonode_phylonode_id_seq OWNER TO postgres;

--
-- Name: phylonode_phylonode_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylonode_phylonode_id_seq OWNED BY phylonode.phylonode_id;


--
-- Name: phylonode_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE phylonode_pub (
    phylonode_pub_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.phylonode_pub OWNER TO postgres;

--
-- Name: phylonode_pub_phylonode_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylonode_pub_phylonode_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonode_pub_phylonode_pub_id_seq OWNER TO postgres;

--
-- Name: phylonode_pub_phylonode_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylonode_pub_phylonode_pub_id_seq OWNED BY phylonode_pub.phylonode_pub_id;


--
-- Name: phylonode_relationship; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE phylonode_relationship (
    phylonode_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL,
    rank integer,
    phylotree_id integer NOT NULL
);


ALTER TABLE public.phylonode_relationship OWNER TO postgres;

--
-- Name: TABLE phylonode_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phylonode_relationship IS 'This is for 
relationships that are not strictly hierarchical; for example,
horizontal gene transfer. Most phylogenetic trees are strictly
hierarchical, nevertheless it is here for completeness.';


--
-- Name: phylonode_relationship_phylonode_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylonode_relationship_phylonode_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonode_relationship_phylonode_relationship_id_seq OWNER TO postgres;

--
-- Name: phylonode_relationship_phylonode_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylonode_relationship_phylonode_relationship_id_seq OWNED BY phylonode_relationship.phylonode_relationship_id;


--
-- Name: phylonodeprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE phylonodeprop (
    phylonodeprop_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    type_id integer NOT NULL,
    value text DEFAULT ''::text NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.phylonodeprop OWNER TO postgres;

--
-- Name: COLUMN phylonodeprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phylonodeprop.type_id IS 'type_id could designate phylonode hierarchy relationships, for example: species taxonomy (kingdom, order, family, genus, species), "ortholog/paralog", "fold/superfold", etc.';


--
-- Name: phylonodeprop_phylonodeprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylonodeprop_phylonodeprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonodeprop_phylonodeprop_id_seq OWNER TO postgres;

--
-- Name: phylonodeprop_phylonodeprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylonodeprop_phylonodeprop_id_seq OWNED BY phylonodeprop.phylonodeprop_id;


--
-- Name: phylotree; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE phylotree (
    phylotree_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    name character varying(255),
    type_id integer,
    analysis_id integer,
    comment text
);


ALTER TABLE public.phylotree OWNER TO postgres;

--
-- Name: TABLE phylotree; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phylotree IS 'Global anchor for phylogenetic tree.';


--
-- Name: COLUMN phylotree.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phylotree.type_id IS 'Type: protein, nucleotide, taxonomy, for example. The type should be any SO type, or "taxonomy".';


--
-- Name: phylotree_phylotree_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylotree_phylotree_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylotree_phylotree_id_seq OWNER TO postgres;

--
-- Name: phylotree_phylotree_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylotree_phylotree_id_seq OWNED BY phylotree.phylotree_id;


--
-- Name: phylotree_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE phylotree_pub (
    phylotree_pub_id integer NOT NULL,
    phylotree_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.phylotree_pub OWNER TO postgres;

--
-- Name: TABLE phylotree_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phylotree_pub IS 'Tracks citations global to the tree e.g. multiple sequence alignment supporting tree construction.';


--
-- Name: phylotree_pub_phylotree_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylotree_pub_phylotree_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylotree_pub_phylotree_pub_id_seq OWNER TO postgres;

--
-- Name: phylotree_pub_phylotree_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylotree_pub_phylotree_pub_id_seq OWNED BY phylotree_pub.phylotree_pub_id;


--
-- Name: project; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE project (
    project_id integer NOT NULL,
    name character varying(255) NOT NULL,
    description character varying(255) NOT NULL
);


ALTER TABLE public.project OWNER TO postgres;

--
-- Name: project_contact; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE project_contact (
    project_contact_id integer NOT NULL,
    project_id integer NOT NULL,
    contact_id integer NOT NULL
);


ALTER TABLE public.project_contact OWNER TO postgres;

--
-- Name: TABLE project_contact; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE project_contact IS 'Linking project(s) to contact(s)';


--
-- Name: project_contact_project_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE project_contact_project_contact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.project_contact_project_contact_id_seq OWNER TO postgres;

--
-- Name: project_contact_project_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE project_contact_project_contact_id_seq OWNED BY project_contact.project_contact_id;


--
-- Name: project_project_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE project_project_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.project_project_id_seq OWNER TO postgres;

--
-- Name: project_project_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE project_project_id_seq OWNED BY project.project_id;


--
-- Name: project_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE project_pub (
    project_pub_id integer NOT NULL,
    project_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.project_pub OWNER TO postgres;

--
-- Name: TABLE project_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE project_pub IS 'Linking project(s) to publication(s)';


--
-- Name: project_pub_project_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE project_pub_project_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.project_pub_project_pub_id_seq OWNER TO postgres;

--
-- Name: project_pub_project_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE project_pub_project_pub_id_seq OWNED BY project_pub.project_pub_id;


--
-- Name: project_relationship; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE project_relationship (
    project_relationship_id integer NOT NULL,
    subject_project_id integer NOT NULL,
    object_project_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.project_relationship OWNER TO postgres;

--
-- Name: TABLE project_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE project_relationship IS 'A project can be composed of several smaller scale projects';


--
-- Name: COLUMN project_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN project_relationship.type_id IS 'The type of relationship being stated, such as "is part of".';


--
-- Name: project_relationship_project_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE project_relationship_project_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.project_relationship_project_relationship_id_seq OWNER TO postgres;

--
-- Name: project_relationship_project_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE project_relationship_project_relationship_id_seq OWNED BY project_relationship.project_relationship_id;


--
-- Name: projectprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE projectprop (
    projectprop_id integer NOT NULL,
    project_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.projectprop OWNER TO postgres;

--
-- Name: projectprop_projectprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE projectprop_projectprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.projectprop_projectprop_id_seq OWNER TO postgres;

--
-- Name: projectprop_projectprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE projectprop_projectprop_id_seq OWNED BY projectprop.projectprop_id;


SET search_path = so, pg_catalog;

--
-- Name: mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mrna AS
    SELECT feature.feature_id AS mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((cvterm.name)::text = 'mRNA_with_frameshift'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'mRNA'::text));


ALTER TABLE so.mrna OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- Name: protein_coding_gene; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW protein_coding_gene AS
    SELECT DISTINCT gene.feature_id, gene.dbxref_id, gene.organism_id, gene.name, gene.uniquename, gene.residues, gene.seqlen, gene.md5checksum, gene.type_id, gene.is_analysis, gene.is_obsolete, gene.timeaccessioned, gene.timelastmodified FROM ((feature gene JOIN feature_relationship fr ON ((gene.feature_id = fr.object_id))) JOIN so.mrna ON ((mrna.feature_id = fr.subject_id)));


ALTER TABLE public.protein_coding_gene OWNER TO postgres;

--
-- Name: protocol; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE protocol (
    protocol_id integer NOT NULL,
    type_id integer NOT NULL,
    pub_id integer,
    dbxref_id integer,
    name text NOT NULL,
    uri text,
    protocoldescription text,
    hardwaredescription text,
    softwaredescription text
);


ALTER TABLE public.protocol OWNER TO postgres;

--
-- Name: TABLE protocol; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE protocol IS 'Procedural notes on how data was prepared and processed.';


--
-- Name: protocol_protocol_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE protocol_protocol_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.protocol_protocol_id_seq OWNER TO postgres;

--
-- Name: protocol_protocol_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE protocol_protocol_id_seq OWNED BY protocol.protocol_id;


--
-- Name: protocolparam; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE protocolparam (
    protocolparam_id integer NOT NULL,
    protocol_id integer NOT NULL,
    name text NOT NULL,
    datatype_id integer,
    unittype_id integer,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.protocolparam OWNER TO postgres;

--
-- Name: TABLE protocolparam; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE protocolparam IS 'Parameters related to a
protocol. For example, if the protocol is a soak, this might include attributes of bath temperature and duration.';


--
-- Name: protocolparam_protocolparam_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE protocolparam_protocolparam_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.protocolparam_protocolparam_id_seq OWNER TO postgres;

--
-- Name: protocolparam_protocolparam_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE protocolparam_protocolparam_id_seq OWNED BY protocolparam.protocolparam_id;


--
-- Name: pub_dbxref; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pub_dbxref (
    pub_dbxref_id integer NOT NULL,
    pub_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE public.pub_dbxref OWNER TO postgres;

--
-- Name: TABLE pub_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE pub_dbxref IS 'Handle links to repositories,
e.g. Pubmed, Biosis, zoorec, OCLC, Medline, ISSN, coden...';


--
-- Name: pub_dbxref_pub_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE pub_dbxref_pub_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pub_dbxref_pub_dbxref_id_seq OWNER TO postgres;

--
-- Name: pub_dbxref_pub_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE pub_dbxref_pub_dbxref_id_seq OWNED BY pub_dbxref.pub_dbxref_id;


--
-- Name: pub_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE pub_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pub_pub_id_seq OWNER TO postgres;

--
-- Name: pub_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE pub_pub_id_seq OWNED BY pub.pub_id;


--
-- Name: pub_relationship; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pub_relationship (
    pub_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.pub_relationship OWNER TO postgres;

--
-- Name: TABLE pub_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE pub_relationship IS 'Handle relationships between
publications, e.g. when one publication makes others obsolete, when one
publication contains errata with respect to other publication(s), or
when one publication also appears in another pub.';


--
-- Name: pub_relationship_pub_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE pub_relationship_pub_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pub_relationship_pub_relationship_id_seq OWNER TO postgres;

--
-- Name: pub_relationship_pub_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE pub_relationship_pub_relationship_id_seq OWNED BY pub_relationship.pub_relationship_id;


--
-- Name: pubauthor; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pubauthor (
    pubauthor_id integer NOT NULL,
    pub_id integer NOT NULL,
    rank integer NOT NULL,
    editor boolean DEFAULT false,
    surname character varying(100) NOT NULL,
    givennames character varying(100),
    suffix character varying(100)
);


ALTER TABLE public.pubauthor OWNER TO postgres;

--
-- Name: TABLE pubauthor; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE pubauthor IS 'An author for a publication. Note the denormalisation (hence lack of _ in table name) - this is deliberate as it is in general too hard to assign IDs to authors.';


--
-- Name: COLUMN pubauthor.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pubauthor.rank IS 'Order of author in author list for this pub - order is important.';


--
-- Name: COLUMN pubauthor.editor; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pubauthor.editor IS 'Indicates whether the author is an editor for linked publication. Note: this is a boolean field but does not follow the normal chado convention for naming booleans.';


--
-- Name: COLUMN pubauthor.givennames; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pubauthor.givennames IS 'First name, initials';


--
-- Name: COLUMN pubauthor.suffix; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pubauthor.suffix IS 'Jr., Sr., etc';


--
-- Name: pubauthor_pubauthor_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE pubauthor_pubauthor_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pubauthor_pubauthor_id_seq OWNER TO postgres;

--
-- Name: pubauthor_pubauthor_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE pubauthor_pubauthor_id_seq OWNED BY pubauthor.pubauthor_id;


--
-- Name: pubprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pubprop (
    pubprop_id integer NOT NULL,
    pub_id integer NOT NULL,
    type_id integer NOT NULL,
    value text NOT NULL,
    rank integer
);


ALTER TABLE public.pubprop OWNER TO postgres;

--
-- Name: TABLE pubprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE pubprop IS 'Property-value pairs for a pub. Follows standard chado pattern.';


--
-- Name: pubprop_pubprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE pubprop_pubprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pubprop_pubprop_id_seq OWNER TO postgres;

--
-- Name: pubprop_pubprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE pubprop_pubprop_id_seq OWNED BY pubprop.pubprop_id;


--
-- Name: quantification; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE quantification (
    quantification_id integer NOT NULL,
    acquisition_id integer NOT NULL,
    operator_id integer,
    protocol_id integer,
    analysis_id integer NOT NULL,
    quantificationdate timestamp without time zone DEFAULT now(),
    name text,
    uri text
);


ALTER TABLE public.quantification OWNER TO postgres;

--
-- Name: TABLE quantification; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE quantification IS 'Quantification is the transformation of an image acquisition to numeric data. This typically involves statistical procedures.';


--
-- Name: quantification_quantification_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE quantification_quantification_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.quantification_quantification_id_seq OWNER TO postgres;

--
-- Name: quantification_quantification_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE quantification_quantification_id_seq OWNED BY quantification.quantification_id;


--
-- Name: quantification_relationship; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE quantification_relationship (
    quantification_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    type_id integer NOT NULL,
    object_id integer NOT NULL
);


ALTER TABLE public.quantification_relationship OWNER TO postgres;

--
-- Name: TABLE quantification_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE quantification_relationship IS 'There may be multiple rounds of quantification, this allows us to keep an audit trail of what values went where.';


--
-- Name: quantification_relationship_quantification_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE quantification_relationship_quantification_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.quantification_relationship_quantification_relationship_id_seq OWNER TO postgres;

--
-- Name: quantification_relationship_quantification_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE quantification_relationship_quantification_relationship_id_seq OWNED BY quantification_relationship.quantification_relationship_id;


--
-- Name: quantificationprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE quantificationprop (
    quantificationprop_id integer NOT NULL,
    quantification_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.quantificationprop OWNER TO postgres;

--
-- Name: TABLE quantificationprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE quantificationprop IS 'Extra quantification properties that are not accounted for in quantification.';


--
-- Name: quantificationprop_quantificationprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE quantificationprop_quantificationprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.quantificationprop_quantificationprop_id_seq OWNER TO postgres;

--
-- Name: quantificationprop_quantificationprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE quantificationprop_quantificationprop_id_seq OWNED BY quantificationprop.quantificationprop_id;


--
-- Name: stats_paths_to_root; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW stats_paths_to_root AS
    SELECT cvtermpath.subject_id AS cvterm_id, count(DISTINCT cvtermpath.cvtermpath_id) AS total_paths, avg(cvtermpath.pathdistance) AS avg_distance, min(cvtermpath.pathdistance) AS min_distance, max(cvtermpath.pathdistance) AS max_distance FROM (cvtermpath JOIN cv_root ON ((cvtermpath.object_id = cv_root.root_cvterm_id))) GROUP BY cvtermpath.subject_id;


ALTER TABLE public.stats_paths_to_root OWNER TO postgres;

--
-- Name: VIEW stats_paths_to_root; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW stats_paths_to_root IS 'per-cvterm statistics on its
placement in the DAG relative to the root. There may be multiple paths
from any term to the root. This gives the total number of paths, and
the average minimum and maximum distances. Here distance is defined by
cvtermpath.pathdistance';


--
-- Name: stock; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stock (
    stock_id integer NOT NULL,
    dbxref_id integer,
    organism_id integer,
    name character varying(255),
    uniquename text NOT NULL,
    description text,
    type_id integer NOT NULL,
    is_obsolete boolean DEFAULT false NOT NULL
);


ALTER TABLE public.stock OWNER TO postgres;

--
-- Name: TABLE stock; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock IS 'Any stock can be globally identified by the
combination of organism, uniquename and stock type. A stock is the physical entities, either living or preserved, held by collections. Stocks belong to a collection; they have IDs, type, organism, description and may have a genotype.';


--
-- Name: COLUMN stock.dbxref_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock.dbxref_id IS 'The dbxref_id is an optional primary stable identifier for this stock. Secondary indentifiers and external dbxrefs go in table: stock_dbxref.';


--
-- Name: COLUMN stock.organism_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock.organism_id IS 'The organism_id is the organism to which the stock belongs. This column should only be left blank if the organism cannot be determined.';


--
-- Name: COLUMN stock.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock.name IS 'The name is a human-readable local name for a stock.';


--
-- Name: COLUMN stock.description; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock.description IS 'The description is the genetic description provided in the stock list.';


--
-- Name: COLUMN stock.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock.type_id IS 'The type_id foreign key links to a controlled vocabulary of stock types. The would include living stock, genomic DNA, preserved specimen. Secondary cvterms for stocks would go in stock_cvterm.';


--
-- Name: stock_cvterm; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stock_cvterm (
    stock_cvterm_id integer NOT NULL,
    stock_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_not boolean DEFAULT false NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stock_cvterm OWNER TO postgres;

--
-- Name: TABLE stock_cvterm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_cvterm IS 'stock_cvterm links a stock to cvterms. This is for secondary cvterms; primary cvterms should use stock.type_id.';


--
-- Name: stock_cvterm_stock_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_cvterm_stock_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_cvterm_stock_cvterm_id_seq OWNER TO postgres;

--
-- Name: stock_cvterm_stock_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_cvterm_stock_cvterm_id_seq OWNED BY stock_cvterm.stock_cvterm_id;


--
-- Name: stock_cvtermprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stock_cvtermprop (
    stock_cvtermprop_id integer NOT NULL,
    stock_cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stock_cvtermprop OWNER TO postgres;

--
-- Name: TABLE stock_cvtermprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_cvtermprop IS 'Extensible properties for
stock to cvterm associations. Examples: GO evidence codes;
qualifiers; metadata such as the date on which the entry was curated
and the source of the association. See the stockprop table for
meanings of type_id, value and rank.';


--
-- Name: COLUMN stock_cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_cvtermprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. cvterms may come from the OBO evidence code cv.';


--
-- Name: COLUMN stock_cvtermprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_cvtermprop.value IS 'The value of the
property, represented as text. Numeric values are converted to their
text representation. This is less efficient than using native database
types, but is easier to query.';


--
-- Name: COLUMN stock_cvtermprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_cvtermprop.rank IS 'Property-Value
ordering. Any stock_cvterm can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used.';


--
-- Name: stock_cvtermprop_stock_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_cvtermprop_stock_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_cvtermprop_stock_cvtermprop_id_seq OWNER TO postgres;

--
-- Name: stock_cvtermprop_stock_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_cvtermprop_stock_cvtermprop_id_seq OWNED BY stock_cvtermprop.stock_cvtermprop_id;


--
-- Name: stock_dbxref; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stock_dbxref (
    stock_dbxref_id integer NOT NULL,
    stock_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE public.stock_dbxref OWNER TO postgres;

--
-- Name: TABLE stock_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_dbxref IS 'stock_dbxref links a stock to dbxrefs. This is for secondary identifiers; primary identifiers should use stock.dbxref_id.';


--
-- Name: COLUMN stock_dbxref.is_current; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_dbxref.is_current IS 'The is_current boolean indicates whether the linked dbxref is the current -official- dbxref for the linked stock.';


--
-- Name: stock_dbxref_stock_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_dbxref_stock_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_dbxref_stock_dbxref_id_seq OWNER TO postgres;

--
-- Name: stock_dbxref_stock_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_dbxref_stock_dbxref_id_seq OWNED BY stock_dbxref.stock_dbxref_id;


--
-- Name: stock_dbxrefprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stock_dbxrefprop (
    stock_dbxrefprop_id integer NOT NULL,
    stock_dbxref_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stock_dbxrefprop OWNER TO postgres;

--
-- Name: TABLE stock_dbxrefprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_dbxrefprop IS 'A stock_dbxref can have any number of
slot-value property tags attached to it. This is useful for storing properties related to dbxref annotations of stocks, such as evidence codes, and references, and metadata, such as create/modify dates. This is an alternative to
hardcoding a list of columns in the relational schema, and is
completely extensible. There is a unique constraint, stock_dbxrefprop_c1, for
the combination of stock_dbxref_id, rank, and type_id. Multivalued property-value pairs must be differentiated by rank.';


--
-- Name: stock_dbxrefprop_stock_dbxrefprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_dbxrefprop_stock_dbxrefprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_dbxrefprop_stock_dbxrefprop_id_seq OWNER TO postgres;

--
-- Name: stock_dbxrefprop_stock_dbxrefprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_dbxrefprop_stock_dbxrefprop_id_seq OWNED BY stock_dbxrefprop.stock_dbxrefprop_id;


--
-- Name: stock_genotype; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stock_genotype (
    stock_genotype_id integer NOT NULL,
    stock_id integer NOT NULL,
    genotype_id integer NOT NULL
);


ALTER TABLE public.stock_genotype OWNER TO postgres;

--
-- Name: TABLE stock_genotype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_genotype IS 'Simple table linking a stock to
a genotype. Features with genotypes can be linked to stocks thru feature_genotype -> genotype -> stock_genotype -> stock.';


--
-- Name: stock_genotype_stock_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_genotype_stock_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_genotype_stock_genotype_id_seq OWNER TO postgres;

--
-- Name: stock_genotype_stock_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_genotype_stock_genotype_id_seq OWNED BY stock_genotype.stock_genotype_id;


--
-- Name: stock_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stock_pub (
    stock_pub_id integer NOT NULL,
    stock_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.stock_pub OWNER TO postgres;

--
-- Name: TABLE stock_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_pub IS 'Provenance. Linking table between stocks and, for example, a stocklist computer file.';


--
-- Name: stock_pub_stock_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_pub_stock_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_pub_stock_pub_id_seq OWNER TO postgres;

--
-- Name: stock_pub_stock_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_pub_stock_pub_id_seq OWNED BY stock_pub.stock_pub_id;


--
-- Name: stock_relationship; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stock_relationship (
    stock_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stock_relationship OWNER TO postgres;

--
-- Name: COLUMN stock_relationship.subject_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_relationship.subject_id IS 'stock_relationship.subject_id is the subject of the subj-predicate-obj sentence. This is typically the substock.';


--
-- Name: COLUMN stock_relationship.object_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_relationship.object_id IS 'stock_relationship.object_id is the object of the subj-predicate-obj sentence. This is typically the container stock.';


--
-- Name: COLUMN stock_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_relationship.type_id IS 'stock_relationship.type_id is relationship type between subject and object. This is a cvterm, typically from the OBO relationship ontology, although other relationship types are allowed.';


--
-- Name: COLUMN stock_relationship.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_relationship.value IS 'stock_relationship.value is for additional notes or comments.';


--
-- Name: COLUMN stock_relationship.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_relationship.rank IS 'stock_relationship.rank is the ordering of subject stocks with respect to the object stock may be important where rank is used to order these; starts from zero.';


--
-- Name: stock_relationship_cvterm; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stock_relationship_cvterm (
    stock_relationship_cvterm_id integer NOT NULL,
    stock_relationship_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer
);


ALTER TABLE public.stock_relationship_cvterm OWNER TO postgres;

--
-- Name: TABLE stock_relationship_cvterm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_relationship_cvterm IS 'For germplasm maintenance and pedigree data, stock_relationship. type_id will record cvterms such as "is a female parent of", "a parent for mutation", "is a group_id of", "is a source_id of", etc The cvterms for higher categories such as "generative", "derivative" or "maintenance" can be stored in table stock_relationship_cvterm';


--
-- Name: stock_relationship_cvterm_stock_relationship_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_relationship_cvterm_stock_relationship_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_relationship_cvterm_stock_relationship_cvterm_id_seq OWNER TO postgres;

--
-- Name: stock_relationship_cvterm_stock_relationship_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_relationship_cvterm_stock_relationship_cvterm_id_seq OWNED BY stock_relationship_cvterm.stock_relationship_cvterm_id;


--
-- Name: stock_relationship_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stock_relationship_pub (
    stock_relationship_pub_id integer NOT NULL,
    stock_relationship_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.stock_relationship_pub OWNER TO postgres;

--
-- Name: TABLE stock_relationship_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_relationship_pub IS 'Provenance. Attach optional evidence to a stock_relationship in the form of a publication.';


--
-- Name: stock_relationship_pub_stock_relationship_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_relationship_pub_stock_relationship_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_relationship_pub_stock_relationship_pub_id_seq OWNER TO postgres;

--
-- Name: stock_relationship_pub_stock_relationship_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_relationship_pub_stock_relationship_pub_id_seq OWNED BY stock_relationship_pub.stock_relationship_pub_id;


--
-- Name: stock_relationship_stock_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_relationship_stock_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_relationship_stock_relationship_id_seq OWNER TO postgres;

--
-- Name: stock_relationship_stock_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_relationship_stock_relationship_id_seq OWNED BY stock_relationship.stock_relationship_id;


--
-- Name: stock_stock_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_stock_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_stock_id_seq OWNER TO postgres;

--
-- Name: stock_stock_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_stock_id_seq OWNED BY stock.stock_id;


--
-- Name: stockcollection; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stockcollection (
    stockcollection_id integer NOT NULL,
    type_id integer NOT NULL,
    contact_id integer,
    name character varying(255),
    uniquename text NOT NULL
);


ALTER TABLE public.stockcollection OWNER TO postgres;

--
-- Name: TABLE stockcollection; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stockcollection IS 'The lab or stock center distributing the stocks in their collection.';


--
-- Name: COLUMN stockcollection.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stockcollection.type_id IS 'type_id is the collection type cv.';


--
-- Name: COLUMN stockcollection.contact_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stockcollection.contact_id IS 'contact_id links to the contact information for the collection.';


--
-- Name: COLUMN stockcollection.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stockcollection.name IS 'name is the collection.';


--
-- Name: COLUMN stockcollection.uniquename; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stockcollection.uniquename IS 'uniqename is the value of the collection cv.';


--
-- Name: stockcollection_stock; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stockcollection_stock (
    stockcollection_stock_id integer NOT NULL,
    stockcollection_id integer NOT NULL,
    stock_id integer NOT NULL
);


ALTER TABLE public.stockcollection_stock OWNER TO postgres;

--
-- Name: TABLE stockcollection_stock; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stockcollection_stock IS 'stockcollection_stock links
a stock collection to the stocks which are contained in the collection.';


--
-- Name: stockcollection_stock_stockcollection_stock_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stockcollection_stock_stockcollection_stock_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stockcollection_stock_stockcollection_stock_id_seq OWNER TO postgres;

--
-- Name: stockcollection_stock_stockcollection_stock_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stockcollection_stock_stockcollection_stock_id_seq OWNED BY stockcollection_stock.stockcollection_stock_id;


--
-- Name: stockcollection_stockcollection_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stockcollection_stockcollection_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stockcollection_stockcollection_id_seq OWNER TO postgres;

--
-- Name: stockcollection_stockcollection_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stockcollection_stockcollection_id_seq OWNED BY stockcollection.stockcollection_id;


--
-- Name: stockcollectionprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stockcollectionprop (
    stockcollectionprop_id integer NOT NULL,
    stockcollection_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stockcollectionprop OWNER TO postgres;

--
-- Name: TABLE stockcollectionprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stockcollectionprop IS 'The table stockcollectionprop
contains the value of the stock collection such as website/email URLs;
the value of the stock collection order URLs.';


--
-- Name: COLUMN stockcollectionprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stockcollectionprop.type_id IS 'The cv for the type_id is "stockcollection property type".';


--
-- Name: stockcollectionprop_stockcollectionprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stockcollectionprop_stockcollectionprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stockcollectionprop_stockcollectionprop_id_seq OWNER TO postgres;

--
-- Name: stockcollectionprop_stockcollectionprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stockcollectionprop_stockcollectionprop_id_seq OWNED BY stockcollectionprop.stockcollectionprop_id;


--
-- Name: stockprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stockprop (
    stockprop_id integer NOT NULL,
    stock_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stockprop OWNER TO postgres;

--
-- Name: TABLE stockprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stockprop IS 'A stock can have any number of
slot-value property tags attached to it. This is an alternative to
hardcoding a list of columns in the relational schema, and is
completely extensible. There is a unique constraint, stockprop_c1, for
the combination of stock_id, rank, and type_id. Multivalued property-value pairs must be differentiated by rank.';


--
-- Name: stockprop_pub; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE stockprop_pub (
    stockprop_pub_id integer NOT NULL,
    stockprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.stockprop_pub OWNER TO postgres;

--
-- Name: TABLE stockprop_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stockprop_pub IS 'Provenance. Any stockprop assignment can optionally be supported by a publication.';


--
-- Name: stockprop_pub_stockprop_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stockprop_pub_stockprop_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stockprop_pub_stockprop_pub_id_seq OWNER TO postgres;

--
-- Name: stockprop_pub_stockprop_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stockprop_pub_stockprop_pub_id_seq OWNED BY stockprop_pub.stockprop_pub_id;


--
-- Name: stockprop_stockprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stockprop_stockprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stockprop_stockprop_id_seq OWNER TO postgres;

--
-- Name: stockprop_stockprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stockprop_stockprop_id_seq OWNED BY stockprop.stockprop_id;


--
-- Name: study; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE study (
    study_id integer NOT NULL,
    contact_id integer NOT NULL,
    pub_id integer,
    dbxref_id integer,
    name text NOT NULL,
    description text
);


ALTER TABLE public.study OWNER TO postgres;

--
-- Name: study_assay; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE study_assay (
    study_assay_id integer NOT NULL,
    study_id integer NOT NULL,
    assay_id integer NOT NULL
);


ALTER TABLE public.study_assay OWNER TO postgres;

--
-- Name: study_assay_study_assay_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE study_assay_study_assay_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.study_assay_study_assay_id_seq OWNER TO postgres;

--
-- Name: study_assay_study_assay_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE study_assay_study_assay_id_seq OWNED BY study_assay.study_assay_id;


--
-- Name: study_study_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE study_study_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.study_study_id_seq OWNER TO postgres;

--
-- Name: study_study_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE study_study_id_seq OWNED BY study.study_id;


--
-- Name: studydesign; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE studydesign (
    studydesign_id integer NOT NULL,
    study_id integer NOT NULL,
    description text
);


ALTER TABLE public.studydesign OWNER TO postgres;

--
-- Name: studydesign_studydesign_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE studydesign_studydesign_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studydesign_studydesign_id_seq OWNER TO postgres;

--
-- Name: studydesign_studydesign_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE studydesign_studydesign_id_seq OWNED BY studydesign.studydesign_id;


--
-- Name: studydesignprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE studydesignprop (
    studydesignprop_id integer NOT NULL,
    studydesign_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.studydesignprop OWNER TO postgres;

--
-- Name: studydesignprop_studydesignprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE studydesignprop_studydesignprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studydesignprop_studydesignprop_id_seq OWNER TO postgres;

--
-- Name: studydesignprop_studydesignprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE studydesignprop_studydesignprop_id_seq OWNED BY studydesignprop.studydesignprop_id;


--
-- Name: studyfactor; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE studyfactor (
    studyfactor_id integer NOT NULL,
    studydesign_id integer NOT NULL,
    type_id integer,
    name text NOT NULL,
    description text
);


ALTER TABLE public.studyfactor OWNER TO postgres;

--
-- Name: studyfactor_studyfactor_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE studyfactor_studyfactor_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studyfactor_studyfactor_id_seq OWNER TO postgres;

--
-- Name: studyfactor_studyfactor_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE studyfactor_studyfactor_id_seq OWNED BY studyfactor.studyfactor_id;


--
-- Name: studyfactorvalue; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE studyfactorvalue (
    studyfactorvalue_id integer NOT NULL,
    studyfactor_id integer NOT NULL,
    assay_id integer NOT NULL,
    factorvalue text,
    name text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.studyfactorvalue OWNER TO postgres;

--
-- Name: studyfactorvalue_studyfactorvalue_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE studyfactorvalue_studyfactorvalue_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studyfactorvalue_studyfactorvalue_id_seq OWNER TO postgres;

--
-- Name: studyfactorvalue_studyfactorvalue_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE studyfactorvalue_studyfactorvalue_id_seq OWNED BY studyfactorvalue.studyfactorvalue_id;


--
-- Name: studyprop; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE studyprop (
    studyprop_id integer NOT NULL,
    study_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.studyprop OWNER TO postgres;

--
-- Name: studyprop_feature; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE studyprop_feature (
    studyprop_feature_id integer NOT NULL,
    studyprop_id integer NOT NULL,
    feature_id integer NOT NULL,
    type_id integer
);


ALTER TABLE public.studyprop_feature OWNER TO postgres;

--
-- Name: studyprop_feature_studyprop_feature_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE studyprop_feature_studyprop_feature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studyprop_feature_studyprop_feature_id_seq OWNER TO postgres;

--
-- Name: studyprop_feature_studyprop_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE studyprop_feature_studyprop_feature_id_seq OWNED BY studyprop_feature.studyprop_feature_id;


--
-- Name: studyprop_studyprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE studyprop_studyprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studyprop_studyprop_id_seq OWNER TO postgres;

--
-- Name: studyprop_studyprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE studyprop_studyprop_id_seq OWNED BY studyprop.studyprop_id;


--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE synonym_synonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.synonym_synonym_id_seq OWNER TO postgres;

--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE synonym_synonym_id_seq OWNED BY synonym.synonym_id;


--
-- Name: tableinfo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tableinfo (
    tableinfo_id integer NOT NULL,
    name character varying(30) NOT NULL,
    primary_key_column character varying(30),
    is_view integer DEFAULT 0 NOT NULL,
    view_on_table_id integer,
    superclass_table_id integer,
    is_updateable integer DEFAULT 1 NOT NULL,
    modification_date date DEFAULT now() NOT NULL
);


ALTER TABLE public.tableinfo OWNER TO postgres;

--
-- Name: tableinfo_tableinfo_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE tableinfo_tableinfo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tableinfo_tableinfo_id_seq OWNER TO postgres;

--
-- Name: tableinfo_tableinfo_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE tableinfo_tableinfo_id_seq OWNED BY tableinfo.tableinfo_id;


--
-- Name: treatment; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE treatment (
    treatment_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    biomaterial_id integer NOT NULL,
    type_id integer NOT NULL,
    protocol_id integer,
    name text
);


ALTER TABLE public.treatment OWNER TO postgres;

--
-- Name: TABLE treatment; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE treatment IS 'A biomaterial may undergo multiple
treatments. Examples of treatments: apoxia, fluorophore and biotin labeling.';


--
-- Name: treatment_treatment_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE treatment_treatment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.treatment_treatment_id_seq OWNER TO postgres;

--
-- Name: treatment_treatment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE treatment_treatment_id_seq OWNED BY treatment.treatment_id;


--
-- Name: type_feature_count; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW type_feature_count AS
    SELECT t.name AS type, count(*) AS num_features FROM (cvterm t JOIN feature ON ((feature.type_id = t.cvterm_id))) GROUP BY t.name;


ALTER TABLE public.type_feature_count OWNER TO postgres;

--
-- Name: VIEW type_feature_count; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW type_feature_count IS 'per-feature-type feature counts';


SET search_path = so, pg_catalog;

--
-- Name: a_box; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW a_box AS
    SELECT feature.feature_id AS a_box_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'A_box_type_1'::text) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'A_box'::text));


ALTER TABLE so.a_box OWNER TO postgres;

--
-- Name: a_box_type_1; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW a_box_type_1 AS
    SELECT feature.feature_id AS a_box_type_1_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'A_box_type_1'::text);


ALTER TABLE so.a_box_type_1 OWNER TO postgres;

--
-- Name: a_box_type_2; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW a_box_type_2 AS
    SELECT feature.feature_id AS a_box_type_2_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'A_box_type_2'::text);


ALTER TABLE so.a_box_type_2 OWNER TO postgres;

--
-- Name: a_minor_rna_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW a_minor_rna_motif AS
    SELECT feature.feature_id AS a_minor_rna_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'A_minor_RNA_motif'::text);


ALTER TABLE so.a_minor_rna_motif OWNER TO postgres;

--
-- Name: a_to_c_transversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW a_to_c_transversion AS
    SELECT feature.feature_id AS a_to_c_transversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'A_to_C_transversion'::text);


ALTER TABLE so.a_to_c_transversion OWNER TO postgres;

--
-- Name: a_to_g_transition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW a_to_g_transition AS
    SELECT feature.feature_id AS a_to_g_transition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'A_to_G_transition'::text);


ALTER TABLE so.a_to_g_transition OWNER TO postgres;

--
-- Name: a_to_t_transversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW a_to_t_transversion AS
    SELECT feature.feature_id AS a_to_t_transversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'A_to_T_transversion'::text);


ALTER TABLE so.a_to_t_transversion OWNER TO postgres;

--
-- Name: aberrant_processed_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW aberrant_processed_transcript AS
    SELECT feature.feature_id AS aberrant_processed_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'aberrant_processed_transcript'::text);


ALTER TABLE so.aberrant_processed_transcript OWNER TO postgres;

--
-- Name: active_peptide; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW active_peptide AS
    SELECT feature.feature_id AS active_peptide_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'active_peptide'::text);


ALTER TABLE so.active_peptide OWNER TO postgres;

--
-- Name: adaptive_island; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW adaptive_island AS
    SELECT feature.feature_id AS adaptive_island_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'adaptive_island'::text);


ALTER TABLE so.adaptive_island OWNER TO postgres;

--
-- Name: alanine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW alanine AS
    SELECT feature.feature_id AS alanine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'alanine'::text);


ALTER TABLE so.alanine OWNER TO postgres;

--
-- Name: alanine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW alanine_trna_primary_transcript AS
    SELECT feature.feature_id AS alanine_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text);


ALTER TABLE so.alanine_trna_primary_transcript OWNER TO postgres;

--
-- Name: alanyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW alanyl_trna AS
    SELECT feature.feature_id AS alanyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'alanyl_tRNA'::text);


ALTER TABLE so.alanyl_trna OWNER TO postgres;

--
-- Name: allele; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW allele AS
    SELECT feature.feature_id AS allele_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'polymorphic_sequence_variant'::text) OR ((cvterm.name)::text = 'allele'::text));


ALTER TABLE so.allele OWNER TO postgres;

--
-- Name: allelically_excluded; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW allelically_excluded AS
    SELECT feature.feature_id AS allelically_excluded_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'allelically_excluded'::text);


ALTER TABLE so.allelically_excluded OWNER TO postgres;

--
-- Name: allelically_excluded_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW allelically_excluded_gene AS
    SELECT feature.feature_id AS allelically_excluded_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'allelically_excluded_gene'::text);


ALTER TABLE so.allelically_excluded_gene OWNER TO postgres;

--
-- Name: allopolyploid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW allopolyploid AS
    SELECT feature.feature_id AS allopolyploid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'allopolyploid'::text);


ALTER TABLE so.allopolyploid OWNER TO postgres;

--
-- Name: alpha_beta_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW alpha_beta_motif AS
    SELECT feature.feature_id AS alpha_beta_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'alpha_beta_motif'::text);


ALTER TABLE so.alpha_beta_motif OWNER TO postgres;

--
-- Name: alpha_helix; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW alpha_helix AS
    SELECT feature.feature_id AS alpha_helix_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'alpha_helix'::text);


ALTER TABLE so.alpha_helix OWNER TO postgres;

--
-- Name: alteration_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW alteration_attribute AS
    SELECT feature.feature_id AS alteration_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((cvterm.name)::text = 'chromosomal_variation_attribute'::text) OR ((cvterm.name)::text = 'insertion_attribute'::text)) OR ((cvterm.name)::text = 'inversion_attribute'::text)) OR ((cvterm.name)::text = 'translocaton_attribute'::text)) OR ((cvterm.name)::text = 'duplication_attribute'::text)) OR ((cvterm.name)::text = 'intrachromosomal'::text)) OR ((cvterm.name)::text = 'interchromosomal'::text)) OR ((cvterm.name)::text = 'tandem'::text)) OR ((cvterm.name)::text = 'direct'::text)) OR ((cvterm.name)::text = 'inverted'::text)) OR ((cvterm.name)::text = 'pericentric'::text)) OR ((cvterm.name)::text = 'paracentric'::text)) OR ((cvterm.name)::text = 'reciprocal'::text)) OR ((cvterm.name)::text = 'insertional'::text)) OR ((cvterm.name)::text = 'free'::text)) OR ((cvterm.name)::text = 'alteration_attribute'::text));


ALTER TABLE so.alteration_attribute OWNER TO postgres;

--
-- Name: alternate_sequence_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW alternate_sequence_site AS
    SELECT feature.feature_id AS alternate_sequence_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'alternate_sequence_site'::text);


ALTER TABLE so.alternate_sequence_site OWNER TO postgres;

--
-- Name: alternatively_spliced; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW alternatively_spliced AS
    SELECT feature.feature_id AS alternatively_spliced_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'alternatively_spliced'::text);


ALTER TABLE so.alternatively_spliced OWNER TO postgres;

--
-- Name: alternatively_spliced_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW alternatively_spliced_transcript AS
    SELECT feature.feature_id AS alternatively_spliced_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'alternatively_spliced_transcript'::text);


ALTER TABLE so.alternatively_spliced_transcript OWNER TO postgres;

--
-- Name: ambisense_ssrna_viral_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ambisense_ssrna_viral_sequence AS
    SELECT feature.feature_id AS ambisense_ssrna_viral_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text);


ALTER TABLE so.ambisense_ssrna_viral_sequence OWNER TO postgres;

--
-- Name: amino_acid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW amino_acid AS
    SELECT feature.feature_id AS amino_acid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'catalytic_residue'::text) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text)) OR ((cvterm.name)::text = 'alanine'::text)) OR ((cvterm.name)::text = 'valine'::text)) OR ((cvterm.name)::text = 'leucine'::text)) OR ((cvterm.name)::text = 'isoleucine'::text)) OR ((cvterm.name)::text = 'proline'::text)) OR ((cvterm.name)::text = 'tryptophan'::text)) OR ((cvterm.name)::text = 'phenylalanine'::text)) OR ((cvterm.name)::text = 'methionine'::text)) OR ((cvterm.name)::text = 'glycine'::text)) OR ((cvterm.name)::text = 'serine'::text)) OR ((cvterm.name)::text = 'threonine'::text)) OR ((cvterm.name)::text = 'tyrosine'::text)) OR ((cvterm.name)::text = 'cysteine'::text)) OR ((cvterm.name)::text = 'glutamine'::text)) OR ((cvterm.name)::text = 'asparagine'::text)) OR ((cvterm.name)::text = 'lysine'::text)) OR ((cvterm.name)::text = 'arginine'::text)) OR ((cvterm.name)::text = 'histidine'::text)) OR ((cvterm.name)::text = 'aspartic_acid'::text)) OR ((cvterm.name)::text = 'glutamic_acid'::text)) OR ((cvterm.name)::text = 'selenocysteine'::text)) OR ((cvterm.name)::text = 'pyrrolysine'::text)) OR ((cvterm.name)::text = 'modified_glycine'::text)) OR ((cvterm.name)::text = 'modified_L_alanine'::text)) OR ((cvterm.name)::text = 'modified_L_asparagine'::text)) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_cysteine'::text)) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_threonine'::text)) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text)) OR ((cvterm.name)::text = 'modified_L_glutamine'::text)) OR ((cvterm.name)::text = 'modified_L_methionine'::text)) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text)) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text)) OR ((cvterm.name)::text = 'modified_L_histidine'::text)) OR ((cvterm.name)::text = 'modified_L_serine'::text)) OR ((cvterm.name)::text = 'modified_L_lysine'::text)) OR ((cvterm.name)::text = 'modified_L_leucine'::text)) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text)) OR ((cvterm.name)::text = 'modified_L_valine'::text)) OR ((cvterm.name)::text = 'modified_L_proline'::text)) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text)) OR ((cvterm.name)::text = 'modified_L_arginine'::text)) OR ((cvterm.name)::text = 'amino_acid'::text));


ALTER TABLE so.amino_acid OWNER TO postgres;

--
-- Name: amino_acid_deletion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW amino_acid_deletion AS
    SELECT feature.feature_id AS amino_acid_deletion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'amino_acid_deletion'::text);


ALTER TABLE so.amino_acid_deletion OWNER TO postgres;

--
-- Name: amino_acid_insertion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW amino_acid_insertion AS
    SELECT feature.feature_id AS amino_acid_insertion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'amino_acid_insertion'::text);


ALTER TABLE so.amino_acid_insertion OWNER TO postgres;

--
-- Name: amino_acid_substitution; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW amino_acid_substitution AS
    SELECT feature.feature_id AS amino_acid_substitution_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'conservative_amino_acid_substitution'::text) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text));


ALTER TABLE so.amino_acid_substitution OWNER TO postgres;

--
-- Name: amplification_origin; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW amplification_origin AS
    SELECT feature.feature_id AS amplification_origin_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'amplification_origin'::text);


ALTER TABLE so.amplification_origin OWNER TO postgres;

--
-- Name: anchor_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW anchor_binding_site AS
    SELECT feature.feature_id AS anchor_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'anchor_binding_site'::text);


ALTER TABLE so.anchor_binding_site OWNER TO postgres;

--
-- Name: anchor_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW anchor_region AS
    SELECT feature.feature_id AS anchor_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'anchor_region'::text);


ALTER TABLE so.anchor_region OWNER TO postgres;

--
-- Name: aneuploid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW aneuploid AS
    SELECT feature.feature_id AS aneuploid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'hyperploid'::text) OR ((cvterm.name)::text = 'hypoploid'::text)) OR ((cvterm.name)::text = 'aneuploid'::text));


ALTER TABLE so.aneuploid OWNER TO postgres;

--
-- Name: aneuploid_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW aneuploid_chromosome AS
    SELECT feature.feature_id AS aneuploid_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text));


ALTER TABLE so.aneuploid_chromosome OWNER TO postgres;

--
-- Name: annotation_directed_improved_draft; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW annotation_directed_improved_draft AS
    SELECT feature.feature_id AS annotation_directed_improved_draft_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'annotation_directed_improved_draft'::text);


ALTER TABLE so.annotation_directed_improved_draft OWNER TO postgres;

--
-- Name: anticodon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW anticodon AS
    SELECT feature.feature_id AS anticodon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'anticodon'::text);


ALTER TABLE so.anticodon OWNER TO postgres;

--
-- Name: anticodon_loop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW anticodon_loop AS
    SELECT feature.feature_id AS anticodon_loop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'anticodon_loop'::text);


ALTER TABLE so.anticodon_loop OWNER TO postgres;

--
-- Name: antiparallel_beta_strand; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW antiparallel_beta_strand AS
    SELECT feature.feature_id AS antiparallel_beta_strand_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'antiparallel_beta_strand'::text);


ALTER TABLE so.antiparallel_beta_strand OWNER TO postgres;

--
-- Name: antisense; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW antisense AS
    SELECT feature.feature_id AS antisense_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'antisense'::text);


ALTER TABLE so.antisense OWNER TO postgres;

--
-- Name: antisense_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW antisense_primary_transcript AS
    SELECT feature.feature_id AS antisense_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'antisense_primary_transcript'::text);


ALTER TABLE so.antisense_primary_transcript OWNER TO postgres;

--
-- Name: antisense_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW antisense_rna AS
    SELECT feature.feature_id AS antisense_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'MicF_RNA'::text) OR ((cvterm.name)::text = 'antisense_RNA'::text));


ALTER TABLE so.antisense_rna OWNER TO postgres;

--
-- Name: apicoplast_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW apicoplast_chromosome AS
    SELECT feature.feature_id AS apicoplast_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'apicoplast_chromosome'::text);


ALTER TABLE so.apicoplast_chromosome OWNER TO postgres;

--
-- Name: apicoplast_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW apicoplast_gene AS
    SELECT feature.feature_id AS apicoplast_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'apicoplast_gene'::text);


ALTER TABLE so.apicoplast_gene OWNER TO postgres;

--
-- Name: apicoplast_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW apicoplast_sequence AS
    SELECT feature.feature_id AS apicoplast_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'apicoplast_sequence'::text);


ALTER TABLE so.apicoplast_sequence OWNER TO postgres;

--
-- Name: aptamer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW aptamer AS
    SELECT feature.feature_id AS aptamer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'DNA_aptamer'::text) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'aptamer'::text));


ALTER TABLE so.aptamer OWNER TO postgres;

--
-- Name: archaeal_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW archaeal_intron AS
    SELECT feature.feature_id AS archaeal_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'archaeal_intron'::text);


ALTER TABLE so.archaeal_intron OWNER TO postgres;

--
-- Name: archaeosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW archaeosine AS
    SELECT feature.feature_id AS archaeosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'archaeosine'::text);


ALTER TABLE so.archaeosine OWNER TO postgres;

--
-- Name: arg_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW arg_trna_primary_transcript AS
    SELECT feature.feature_id AS arg_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text);


ALTER TABLE so.arg_trna_primary_transcript OWNER TO postgres;

--
-- Name: arginine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW arginine AS
    SELECT feature.feature_id AS arginine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'arginine'::text);


ALTER TABLE so.arginine OWNER TO postgres;

--
-- Name: arginyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW arginyl_trna AS
    SELECT feature.feature_id AS arginyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'arginyl_tRNA'::text);


ALTER TABLE so.arginyl_trna OWNER TO postgres;

--
-- Name: ars; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ars AS
    SELECT feature.feature_id AS ars_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'ARS'::text);


ALTER TABLE so.ars OWNER TO postgres;

--
-- Name: asparagine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW asparagine AS
    SELECT feature.feature_id AS asparagine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'asparagine'::text);


ALTER TABLE so.asparagine OWNER TO postgres;

--
-- Name: asparagine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW asparagine_trna_primary_transcript AS
    SELECT feature.feature_id AS asparagine_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text);


ALTER TABLE so.asparagine_trna_primary_transcript OWNER TO postgres;

--
-- Name: asparaginyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW asparaginyl_trna AS
    SELECT feature.feature_id AS asparaginyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'asparaginyl_tRNA'::text);


ALTER TABLE so.asparaginyl_trna OWNER TO postgres;

--
-- Name: aspartic_acid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW aspartic_acid AS
    SELECT feature.feature_id AS aspartic_acid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'aspartic_acid'::text);


ALTER TABLE so.aspartic_acid OWNER TO postgres;

--
-- Name: aspartic_acid_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW aspartic_acid_trna_primary_transcript AS
    SELECT feature.feature_id AS aspartic_acid_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text);


ALTER TABLE so.aspartic_acid_trna_primary_transcript OWNER TO postgres;

--
-- Name: aspartyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW aspartyl_trna AS
    SELECT feature.feature_id AS aspartyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'aspartyl_tRNA'::text);


ALTER TABLE so.aspartyl_trna OWNER TO postgres;

--
-- Name: aspe_primer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW aspe_primer AS
    SELECT feature.feature_id AS aspe_primer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'ASPE_primer'::text);


ALTER TABLE so.aspe_primer OWNER TO postgres;

--
-- Name: assembly; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW assembly AS
    SELECT feature.feature_id AS assembly_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((cvterm.name)::text = 'sequence_assembly'::text) OR ((cvterm.name)::text = 'fragment_assembly'::text)) OR ((cvterm.name)::text = 'supercontig'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'tiling_path'::text)) OR ((cvterm.name)::text = 'virtual_sequence'::text)) OR ((cvterm.name)::text = 'golden_path'::text)) OR ((cvterm.name)::text = 'ultracontig'::text)) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text)) OR ((cvterm.name)::text = 'fingerprint_map'::text)) OR ((cvterm.name)::text = 'STS_map'::text)) OR ((cvterm.name)::text = 'RH_map'::text)) OR ((cvterm.name)::text = 'assembly'::text));


ALTER TABLE so.assembly OWNER TO postgres;

--
-- Name: assembly_component; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW assembly_component AS
    SELECT feature.feature_id AS assembly_component_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((cvterm.name)::text = 'contig'::text) OR ((cvterm.name)::text = 'read'::text)) OR ((cvterm.name)::text = 'restriction_fragment'::text)) OR ((cvterm.name)::text = 'golden_path_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_fragment'::text)) OR ((cvterm.name)::text = 'gap'::text)) OR ((cvterm.name)::text = 'sonicate_fragment'::text)) OR ((cvterm.name)::text = 'paired_end_fragment'::text)) OR ((cvterm.name)::text = 'read_pair'::text)) OR ((cvterm.name)::text = 'contig_read'::text)) OR ((cvterm.name)::text = 'BAC_end'::text)) OR ((cvterm.name)::text = 'dye_terminator_read'::text)) OR ((cvterm.name)::text = 'pyrosequenced_read'::text)) OR ((cvterm.name)::text = 'ligation_based_read'::text)) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text)) OR ((cvterm.name)::text = 'PAC_end'::text)) OR ((cvterm.name)::text = 'YAC_end'::text)) OR ((cvterm.name)::text = 'clone_end'::text)) OR ((cvterm.name)::text = 'RFLP_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'assembly_component'::text));


ALTER TABLE so.assembly_component OWNER TO postgres;

--
-- Name: assembly_error_correction; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW assembly_error_correction AS
    SELECT feature.feature_id AS assembly_error_correction_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'assembly_error_correction'::text);


ALTER TABLE so.assembly_error_correction OWNER TO postgres;

--
-- Name: assortment_derived_aneuploid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW assortment_derived_aneuploid AS
    SELECT feature.feature_id AS assortment_derived_aneuploid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'assortment_derived_aneuploid'::text);


ALTER TABLE so.assortment_derived_aneuploid OWNER TO postgres;

--
-- Name: assortment_derived_deficiency; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW assortment_derived_deficiency AS
    SELECT feature.feature_id AS assortment_derived_deficiency_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'assortment_derived_deficiency'::text);


ALTER TABLE so.assortment_derived_deficiency OWNER TO postgres;

--
-- Name: assortment_derived_deficiency_plus_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW assortment_derived_deficiency_plus_duplication AS
    SELECT feature.feature_id AS assortment_derived_deficiency_plus_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text);


ALTER TABLE so.assortment_derived_deficiency_plus_duplication OWNER TO postgres;

--
-- Name: assortment_derived_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW assortment_derived_duplication AS
    SELECT feature.feature_id AS assortment_derived_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'assortment_derived_duplication'::text);


ALTER TABLE so.assortment_derived_duplication OWNER TO postgres;

--
-- Name: assortment_derived_variation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW assortment_derived_variation AS
    SELECT feature.feature_id AS assortment_derived_variation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'assortment_derived_duplication'::text) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text)) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text)) OR ((cvterm.name)::text = 'assortment_derived_variation'::text));


ALTER TABLE so.assortment_derived_variation OWNER TO postgres;

--
-- Name: asx_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW asx_motif AS
    SELECT feature.feature_id AS asx_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'asx_motif'::text);


ALTER TABLE so.asx_motif OWNER TO postgres;

--
-- Name: asx_turn; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW asx_turn AS
    SELECT feature.feature_id AS asx_turn_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn'::text));


ALTER TABLE so.asx_turn OWNER TO postgres;

--
-- Name: asx_turn_left_handed_type_one; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW asx_turn_left_handed_type_one AS
    SELECT feature.feature_id AS asx_turn_left_handed_type_one_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text);


ALTER TABLE so.asx_turn_left_handed_type_one OWNER TO postgres;

--
-- Name: asx_turn_left_handed_type_two; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW asx_turn_left_handed_type_two AS
    SELECT feature.feature_id AS asx_turn_left_handed_type_two_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text);


ALTER TABLE so.asx_turn_left_handed_type_two OWNER TO postgres;

--
-- Name: asx_turn_right_handed_type_one; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW asx_turn_right_handed_type_one AS
    SELECT feature.feature_id AS asx_turn_right_handed_type_one_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text);


ALTER TABLE so.asx_turn_right_handed_type_one OWNER TO postgres;

--
-- Name: asx_turn_right_handed_type_two; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW asx_turn_right_handed_type_two AS
    SELECT feature.feature_id AS asx_turn_right_handed_type_two_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text);


ALTER TABLE so.asx_turn_right_handed_type_two OWNER TO postgres;

--
-- Name: asymmetric_rna_internal_loop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW asymmetric_rna_internal_loop AS
    SELECT feature.feature_id AS asymmetric_rna_internal_loop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'K_turn_RNA_motif'::text) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text));


ALTER TABLE so.asymmetric_rna_internal_loop OWNER TO postgres;

--
-- Name: attb_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW attb_site AS
    SELECT feature.feature_id AS attb_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'attB_site'::text);


ALTER TABLE so.attb_site OWNER TO postgres;

--
-- Name: attc_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW attc_site AS
    SELECT feature.feature_id AS attc_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'attC_site'::text);


ALTER TABLE so.attc_site OWNER TO postgres;

--
-- Name: attctn_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW attctn_site AS
    SELECT feature.feature_id AS attctn_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'attCtn_site'::text);


ALTER TABLE so.attctn_site OWNER TO postgres;

--
-- Name: attenuator; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW attenuator AS
    SELECT feature.feature_id AS attenuator_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'attenuator'::text);


ALTER TABLE so.attenuator OWNER TO postgres;

--
-- Name: atti_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW atti_site AS
    SELECT feature.feature_id AS atti_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'attI_site'::text);


ALTER TABLE so.atti_site OWNER TO postgres;

--
-- Name: attl_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW attl_site AS
    SELECT feature.feature_id AS attl_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'attL_site'::text);


ALTER TABLE so.attl_site OWNER TO postgres;

--
-- Name: attp_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW attp_site AS
    SELECT feature.feature_id AS attp_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'attP_site'::text);


ALTER TABLE so.attp_site OWNER TO postgres;

--
-- Name: attr_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW attr_site AS
    SELECT feature.feature_id AS attr_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'attR_site'::text);


ALTER TABLE so.attr_site OWNER TO postgres;

--
-- Name: au_rich_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW au_rich_element AS
    SELECT feature.feature_id AS au_rich_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'AU_rich_element'::text);


ALTER TABLE so.au_rich_element OWNER TO postgres;

--
-- Name: autocatalytically_spliced_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW autocatalytically_spliced_intron AS
    SELECT feature.feature_id AS autocatalytically_spliced_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'group_I_intron'::text) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text));


ALTER TABLE so.autocatalytically_spliced_intron OWNER TO postgres;

--
-- Name: autopolyploid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW autopolyploid AS
    SELECT feature.feature_id AS autopolyploid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'autopolyploid'::text);


ALTER TABLE so.autopolyploid OWNER TO postgres;

--
-- Name: autoregulated; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW autoregulated AS
    SELECT feature.feature_id AS autoregulated_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'autoregulated'::text));


ALTER TABLE so.autoregulated OWNER TO postgres;

--
-- Name: autosynaptic_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW autosynaptic_chromosome AS
    SELECT feature.feature_id AS autosynaptic_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text));


ALTER TABLE so.autosynaptic_chromosome OWNER TO postgres;

--
-- Name: b_box; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW b_box AS
    SELECT feature.feature_id AS b_box_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'B_box'::text);


ALTER TABLE so.b_box OWNER TO postgres;

--
-- Name: bac; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW bac AS
    SELECT feature.feature_id AS bac_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'BAC'::text);


ALTER TABLE so.bac OWNER TO postgres;

--
-- Name: bac_cloned_genomic_insert; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW bac_cloned_genomic_insert AS
    SELECT feature.feature_id AS bac_cloned_genomic_insert_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text);


ALTER TABLE so.bac_cloned_genomic_insert OWNER TO postgres;

--
-- Name: bac_end; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW bac_end AS
    SELECT feature.feature_id AS bac_end_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'BAC_end'::text);


ALTER TABLE so.bac_end OWNER TO postgres;

--
-- Name: bacterial_rnapol_promoter; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW bacterial_rnapol_promoter AS
    SELECT feature.feature_id AS bacterial_rnapol_promoter_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text));


ALTER TABLE so.bacterial_rnapol_promoter OWNER TO postgres;

--
-- Name: bacterial_rnapol_promoter_sigma54; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW bacterial_rnapol_promoter_sigma54 AS
    SELECT feature.feature_id AS bacterial_rnapol_promoter_sigma54_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text);


ALTER TABLE so.bacterial_rnapol_promoter_sigma54 OWNER TO postgres;

--
-- Name: bacterial_rnapol_promoter_sigma_70; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW bacterial_rnapol_promoter_sigma_70 AS
    SELECT feature.feature_id AS bacterial_rnapol_promoter_sigma_70_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text);


ALTER TABLE so.bacterial_rnapol_promoter_sigma_70 OWNER TO postgres;

--
-- Name: bacterial_terminator; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW bacterial_terminator AS
    SELECT feature.feature_id AS bacterial_terminator_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text));


ALTER TABLE so.bacterial_terminator OWNER TO postgres;

--
-- Name: base; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW base AS
    SELECT feature.feature_id AS base_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'modified_RNA_base_feature'::text) OR ((cvterm.name)::text = 'inosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanine'::text)) OR ((cvterm.name)::text = 'ribothymidine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text)) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'one_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'three_methylcytidine'::text)) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'dihydrouridine'::text)) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'base'::text));


ALTER TABLE so.base OWNER TO postgres;

--
-- Name: base_call_error_correction; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW base_call_error_correction AS
    SELECT feature.feature_id AS base_call_error_correction_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'base_call_error_correction'::text);


ALTER TABLE so.base_call_error_correction OWNER TO postgres;

--
-- Name: base_pair; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW base_pair AS
    SELECT feature.feature_id AS base_pair_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'WC_base_pair'::text) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text)) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'wobble_base_pair'::text)) OR ((cvterm.name)::text = 'base_pair'::text));


ALTER TABLE so.base_pair OWNER TO postgres;

--
-- Name: benign_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW benign_variant AS
    SELECT feature.feature_id AS benign_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'benign_variant'::text);


ALTER TABLE so.benign_variant OWNER TO postgres;

--
-- Name: beta_bulge; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_bulge AS
    SELECT feature.feature_id AS beta_bulge_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'beta_bulge'::text);


ALTER TABLE so.beta_bulge OWNER TO postgres;

--
-- Name: beta_bulge_loop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_bulge_loop AS
    SELECT feature.feature_id AS beta_bulge_loop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'beta_bulge_loop_five'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text));


ALTER TABLE so.beta_bulge_loop OWNER TO postgres;

--
-- Name: beta_bulge_loop_five; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_bulge_loop_five AS
    SELECT feature.feature_id AS beta_bulge_loop_five_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'beta_bulge_loop_five'::text);


ALTER TABLE so.beta_bulge_loop_five OWNER TO postgres;

--
-- Name: beta_bulge_loop_six; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_bulge_loop_six AS
    SELECT feature.feature_id AS beta_bulge_loop_six_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'beta_bulge_loop_six'::text);


ALTER TABLE so.beta_bulge_loop_six OWNER TO postgres;

--
-- Name: beta_strand; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_strand AS
    SELECT feature.feature_id AS beta_strand_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'antiparallel_beta_strand'::text) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'beta_strand'::text));


ALTER TABLE so.beta_strand OWNER TO postgres;

--
-- Name: beta_turn; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_turn AS
    SELECT feature.feature_id AS beta_turn_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'beta_turn'::text));


ALTER TABLE so.beta_turn OWNER TO postgres;

--
-- Name: beta_turn_left_handed_type_one; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_turn_left_handed_type_one AS
    SELECT feature.feature_id AS beta_turn_left_handed_type_one_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text);


ALTER TABLE so.beta_turn_left_handed_type_one OWNER TO postgres;

--
-- Name: beta_turn_left_handed_type_two; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_turn_left_handed_type_two AS
    SELECT feature.feature_id AS beta_turn_left_handed_type_two_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text);


ALTER TABLE so.beta_turn_left_handed_type_two OWNER TO postgres;

--
-- Name: beta_turn_right_handed_type_one; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_turn_right_handed_type_one AS
    SELECT feature.feature_id AS beta_turn_right_handed_type_one_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text);


ALTER TABLE so.beta_turn_right_handed_type_one OWNER TO postgres;

--
-- Name: beta_turn_right_handed_type_two; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_turn_right_handed_type_two AS
    SELECT feature.feature_id AS beta_turn_right_handed_type_two_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text);


ALTER TABLE so.beta_turn_right_handed_type_two OWNER TO postgres;

--
-- Name: beta_turn_type_eight; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_turn_type_eight AS
    SELECT feature.feature_id AS beta_turn_type_eight_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'beta_turn_type_eight'::text);


ALTER TABLE so.beta_turn_type_eight OWNER TO postgres;

--
-- Name: beta_turn_type_six; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_turn_type_six AS
    SELECT feature.feature_id AS beta_turn_type_six_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'beta_turn_type_six_a'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text));


ALTER TABLE so.beta_turn_type_six OWNER TO postgres;

--
-- Name: beta_turn_type_six_a; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_turn_type_six_a AS
    SELECT feature.feature_id AS beta_turn_type_six_a_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'beta_turn_type_six_a_one'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text));


ALTER TABLE so.beta_turn_type_six_a OWNER TO postgres;

--
-- Name: beta_turn_type_six_a_one; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_turn_type_six_a_one AS
    SELECT feature.feature_id AS beta_turn_type_six_a_one_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text);


ALTER TABLE so.beta_turn_type_six_a_one OWNER TO postgres;

--
-- Name: beta_turn_type_six_a_two; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_turn_type_six_a_two AS
    SELECT feature.feature_id AS beta_turn_type_six_a_two_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text);


ALTER TABLE so.beta_turn_type_six_a_two OWNER TO postgres;

--
-- Name: beta_turn_type_six_b; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW beta_turn_type_six_b AS
    SELECT feature.feature_id AS beta_turn_type_six_b_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'beta_turn_type_six_b'::text);


ALTER TABLE so.beta_turn_type_six_b OWNER TO postgres;

--
-- Name: bidirectional_promoter; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW bidirectional_promoter AS
    SELECT feature.feature_id AS bidirectional_promoter_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'bidirectional_promoter'::text);


ALTER TABLE so.bidirectional_promoter OWNER TO postgres;

--
-- Name: binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW binding_site AS
    SELECT feature.feature_id AS binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'protein_binding_site'::text) OR ((cvterm.name)::text = 'epitope'::text)) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text)) OR ((cvterm.name)::text = 'metal_binding_site'::text)) OR ((cvterm.name)::text = 'ligand_binding_site'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'miRNA_target_site'::text)) OR ((cvterm.name)::text = 'DNA_binding_site'::text)) OR ((cvterm.name)::text = 'primer_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'binding_site'::text));


ALTER TABLE so.binding_site OWNER TO postgres;

--
-- Name: biochemical_region_of_peptide; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW biochemical_region_of_peptide AS
    SELECT feature.feature_id AS biochemical_region_of_peptide_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'post_translationally_modified_region'::text) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text));


ALTER TABLE so.biochemical_region_of_peptide OWNER TO postgres;

--
-- Name: biological_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW biological_region AS
    SELECT feature.feature_id AS biological_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_idcvterm.name)::text = 'sequence_secondary_structure'::text) OR ((cvterm.name)::text = 'linkage_group'::text)) OR ((cvterm.name)::text = 'polypeptide'::text)) OR ((cvterm.name)::text = 'deletion'::text)) OR ((cvterm.name)::text = 'origin_of_replication'::text)) OR ((cvterm.name)::text = 'recombination_feature'::text)) OR ((cvterm.name)::text = 'CpG_island'::text)) OR ((cvterm.name)::text = 'pseudogene'::text)) OR ((cvterm.name)::text = 'binding_site'::text)) OR ((cvterm.name)::text = 'pseudogenic_region'::text)) OR ((cvterm.name)::text = 'cap'::text)) OR ((cvterm.name)::text = 'intergenic_region'::text)) OR ((cvterm.name)::text = 'oligo_U_tail'::text)) OR ((cvterm.name)::text = 'polyA_sequence'::text)) OR ((cvterm.name)::text = 'repeat_region'::text)) OR ((cvterm.name)::text = 'insertion'::text)) OR ((cvterm.name)::text = 'gene'::text)) OR ((cvterm.name)::text = 'repeat_unit'::text)) OR ((cvterm.name)::text = 'QTL'::text)) OR ((cvterm.name)::text = 'chromosome_part'::text)) OR ((cvterm.name)::text = 'gene_member_region'::text)) OR ((cvterm.name)::text = 'transcript_region'::text)) OR ((cvterm.name)::text = 'polypeptide_region'::text)) OR ((cvterm.name)::text = 'gene_component_region'::text)) OR ((cvterm.name)::text = 'mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'replicon'::text)) OR ((cvterm.name)::text = 'base'::text)) OR ((cvterm.name)::text = 'amino_acid'::text)) OR ((cvterm.name)::text = 'genetic_marker'::text)) OR ((cvterm.name)::text = 'sequence_motif'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text)) OR ((cvterm.name)::text = 'open_chromatin_region'::text)) OR ((cvterm.name)::text = 'gene_group'::text)) OR ((cvterm.name)::text = 'substitution'::text)) OR ((cvterm.name)::text = 'inversion'::text)) OR ((cvterm.name)::text = 'retron'::text)) OR ((cvterm.name)::text = 'G_quartet'::text)) OR ((cvterm.name)::text = 'base_pair'::text)) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'pseudoknot'::text)) OR ((cvterm.name)::text = 'WC_base_pair'::text)) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text)) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'wobble_base_pair'::text)) OR ((cvterm.name)::text = 'stem_loop'::text)) OR ((cvterm.name)::text = 'tetraloop'::text)) OR ((cvterm.name)::text = 'i_motif'::text)) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text)) OR ((cvterm.name)::text = 'H_pseudoknot'::text)) OR ((cvterm.name)::text = 'D_loop'::text)) OR ((cvterm.name)::text = 'ARS'::text)) OR ((cvterm.name)::text = 'oriT'::text)) OR ((cvterm.name)::text = 'amplification_origin'::text)) OR ((cvterm.name)::text = 'oriV'::text)) OR ((cvterm.name)::text = 'oriC'::text)) OR ((cvterm.name)::text = 'recombination_hotspot'::text)) OR ((cvterm.name)::text = 'haplotype_block'::text)) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text)) OR ((cvterm.name)::text = 'iDNA'::text)) OR ((cvterm.name)::text = 'specific_recombination_site'::text)) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text)) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text)) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'processed_pseudogene'::text)) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text)) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text)) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text)) OR ((cvterm.name)::text = 'cassette_pseudogene'::text)) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text)) OR ((cvterm.name)::text = 'unitary_pseudogene'::text)) OR ((cvterm.name)::text = 'protein_binding_site'::text)) OR ((cvterm.name)::text = 'epitope'::text)) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text)) OR ((cvterm.name)::text = 'metal_binding_site'::text)) OR ((cvterm.name)::text = 'ligand_binding_site'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'miRNA_target_site'::text)) OR ((cvterm.name)::text = 'DNA_binding_site'::text)) OR ((cvterm.name)::text = 'primer_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'decayed_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text)) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text)) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text)) OR ((cvterm.name)::text = 'long_terminal_repeat'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'inverted_repeat'::text)) OR ((cvterm.name)::text = 'direct_repeat'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'dispersed_repeat'::text)) OR ((cvterm.name)::text = 'tandem_repeat'::text)) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text)) OR ((cvterm.name)::text = 'Y_prime_element'::text)) OR ((cvterm.name)::text = 'telomeric_repeat'::text)) OR ((cvterm.name)::text = 'nested_repeat'::text)) OR ((cvterm.name)::text = 'centromeric_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_LTR'::text)) OR ((cvterm.name)::text = 'three_prime_LTR'::text)) OR ((cvterm.name)::text = 'solo_LTR'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'target_site_duplication'::text)) OR ((cvterm.name)::text = 'CRISPR'::text)) OR ((cvterm.name)::text = 'satellite_DNA'::text)) OR ((cvterm.name)::text = 'microsatellite'::text)) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text)) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text)) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text)) OR ((cvterm.name)::text = 'transgenic_insertion'::text)) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'nuclear_gene'::text)) OR ((cvterm.name)::text = 'mt_gene'::text)) OR ((cvterm.name)::text = 'plastid_gene'::text)) OR ((cvterm.name)::text = 'nucleomorph_gene'::text)) OR ((cvterm.name)::text = 'plasmid_gene'::text)) OR ((cvterm.name)::text = 'proviral_gene'::text)) OR ((cvterm.name)::text = 'transposable_element_gene'::text)) OR ((cvterm.name)::text = 'silenced_gene'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'foreign_gene'::text)) OR ((cvterm.name)::text = 'fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text)) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'rescue_gene'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'transgene'::text)) OR ((cvterm.name)::text = 'predicted_gene'::text)) OR ((cvterm.name)::text = 'protein_coding_gene'::text)) OR ((cvterm.name)::text = 'retrogene'::text)) OR ((cvterm.name)::text = 'ncRNA_gene'::text)) OR ((cvterm.name)::text = 'cryptic_gene'::text)) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'gene_cassette'::text)) OR ((cvterm.name)::text = 'kinetoplast_gene'::text)) OR ((cvterm.name)::text = 'maxicircle_gene'::text)) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'apicoplast_gene'::text)) OR ((cvterm.name)::text = 'ct_gene'::text)) OR ((cvterm.name)::text = 'chromoplast_gene'::text)) OR ((cvterm.name)::text = 'cyanelle_gene'::text)) OR ((cvterm.name)::text = 'leucoplast_gene'::text)) OR ((cvterm.name)::text = 'proplastid_gene'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'floxed_gene'::text)) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gRNA_gene'::text)) OR ((cvterm.name)::text = 'miRNA_gene'::text)) OR ((cvterm.name)::text = 'scRNA_gene'::text)) OR ((cvterm.name)::text = 'snoRNA_gene'::text)) OR ((cvterm.name)::text = 'snRNA_gene'::text)) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'stRNA_gene'::text)) OR ((cvterm.name)::text = 'tmRNA_gene'::text)) OR ((cvterm.name)::text = 'tRNA_gene'::text)) OR ((cvterm.name)::text = 'rRNA_gene'::text)) OR ((cvterm.name)::text = 'piRNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'lincRNA_gene'::text)) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text)) OR ((cvterm.name)::text = 'chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosome_band'::text)) OR ((cvterm.name)::text = 'interband'::text)) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text)) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text)) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text)) OR ((cvterm.name)::text = 'matrix_attachment_site'::text)) OR ((cvterm.name)::text = 'centromere'::text)) OR ((cvterm.name)::text = 'telomere'::text)) OR ((cvterm.name)::text = 'point_centromere'::text)) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'transcript'::text)) OR ((cvterm.name)::text = 'regulatory_region'::text)) OR ((cvterm.name)::text = 'polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text)) OR ((cvterm.name)::text = 'enzymatic_RNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text)) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text)) OR ((cvterm.name)::text = 'processed_transcript'::text)) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mRNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ribozyme'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text)) OR ((cvterm.name)::text = 'translation_regulatory_region'::text)) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text)) OR ((cvterm.name)::text = 'replication_regulatory_region'::text)) OR ((cvterm.name)::text = 'terminator'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'attenuator'::text)) OR ((cvterm.name)::text = 'exon'::text)) OR ((cvterm.name)::text = 'edited_transcript_feature'::text)) OR ((cvterm.name)::text = 'mature_transcript_region'::text)) OR ((cvterm.name)::text = 'primary_transcript_region'::text)) OR ((cvterm.name)::text = 'exon_region'::text)) OR ((cvterm.name)::text = 'anchor_binding_site'::text)) OR ((cvterm.name)::text = 'coding_exon'::text)) OR ((cvterm.name)::text = 'noncoding_exon'::text)) OR ((cvterm.name)::text = 'interior_exon'::text)) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text)) OR ((cvterm.name)::text = 'interior_coding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'pre_edited_region'::text)) OR ((cvterm.name)::text = 'editing_block'::text)) OR ((cvterm.name)::text = 'editing_domain'::text)) OR ((cvterm.name)::text = 'unedited_region'::text)) OR ((cvterm.name)::text = 'mRNA_region'::text)) OR ((cvterm.name)::text = 'tmRNA_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text)) OR ((cvterm.name)::text = 'riboswitch'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'anchor_region'::text)) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'anticodon_loop'::text)) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'splice_site'::text)) OR ((cvterm.name)::text = 'intron'::text)) OR ((cvterm.name)::text = 'clip'::text)) OR ((cvterm.name)::text = 'TSS'::text)) OR ((cvterm.name)::text = 'transcription_end_site'::text)) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text)) OR ((cvterm.name)::text = 'intron_domain'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'outron'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'five_prime_intron'::text)) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'five_prime_clip'::text)) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'major_TSS'::text)) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'internal_guide_sequence'::text)) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'pre_miRNA'::text)) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text)) OR ((cvterm.name)::text = 'coding_region_of_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'mature_protein_region'::text)) OR ((cvterm.name)::text = 'immature_peptide_region'::text)) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text)) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text)) OR ((cvterm.name)::text = 'peptide_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text)) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text)) OR ((cvterm.name)::text = 'active_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'membrane_structure'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text)) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text)) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text)) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'asx_motif'::text)) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'coiled_coil'::text)) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'natural_variant_site'::text)) OR ((cvterm.name)::text = 'mutated_variant_site'::text)) OR ((cvterm.name)::text = 'alternate_sequence_site'::text)) OR ((cvterm.name)::text = 'signal_peptide'::text)) OR ((cvterm.name)::text = 'transit_peptide'::text)) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text)) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'nuclear_export_signal'::text)) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text)) OR ((cvterm.name)::text = 'intein'::text)) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text)) OR ((cvterm.name)::text = 'propeptide'::text)) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text)) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text)) OR ((cvterm.name)::text = 'n_terminal_region'::text)) OR ((cvterm.name)::text = 'c_terminal_region'::text)) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'polypeptide_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_repeat'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'non_transcribed_region'::text)) OR ((cvterm.name)::text = 'gene_fragment'::text)) OR ((cvterm.name)::text = 'TSS_region'::text)) OR ((cvterm.name)::text = 'gene_segment'::text)) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'transposable_element'::text)) OR ((cvterm.name)::text = 'proviral_region'::text)) OR ((cvterm.name)::text = 'integron'::text)) OR ((cvterm.name)::text = 'genomic_island'::text)) OR ((cvterm.name)::text = 'integrated_plasmid'::text)) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'prophage'::text)) OR ((cvterm.name)::text = 'pathogenic_island'::text)) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'plasmid'::text)) OR ((cvterm.name)::text = 'chromosome'::text)) OR ((cvterm.name)::text = 'vector_replicon'::text)) OR ((cvterm.name)::text = 'maxicircle'::text)) OR ((cvterm.name)::text = 'minicircle'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'episome'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text)) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text)) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text)) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text)) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text)) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text)) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'YAC'::text)) OR ((cvterm.name)::text = 'BAC'::text)) OR ((cvterm.name)::text = 'PAC'::text)) OR ((cvterm.name)::text = 'cosmid'::text)) OR ((cvterm.name)::text = 'phagemid'::text)) OR ((cvterm.name)::text = 'fosmid'::text)) OR ((cvterm.name)::text = 'lambda_vector'::text)) OR ((cvterm.name)::text = 'plasmid_vector'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text)) OR ((cvterm.name)::text = 'inosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanine'::text)) OR ((cvterm.name)::text = 'ribothymidine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text)) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'one_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'three_methylcytidine'::text)) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'dihydrouridine'::text)) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'catalytic_residue'::text)) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text)) OR ((cvterm.name)::text = 'alanine'::text)) OR ((cvterm.name)::text = 'valine'::text)) OR ((cvterm.name)::text = 'leucine'::text)) OR ((cvterm.name)::text = 'isoleucine'::text)) OR ((cvterm.name)::text = 'proline'::text)) OR ((cvterm.name)::text = 'tryptophan'::text)) OR ((cvterm.name)::text = 'phenylalanine'::text)) OR ((cvterm.name)::text = 'methionine'::text)) OR ((cvterm.name)::text = 'glycine'::text)) OR ((cvterm.name)::text = 'serine'::text)) OR ((cvterm.name)::text = 'threonine'::text)) OR ((cvterm.name)::text = 'tyrosine'::text)) OR ((cvterm.name)::text = 'cysteine'::text)) OR ((cvterm.name)::text = 'glutamine'::text)) OR ((cvterm.name)::text = 'asparagine'::text)) OR ((cvterm.name)::text = 'lysine'::text)) OR ((cvterm.name)::text = 'arginine'::text)) OR ((cvterm.name)::text = 'histidine'::text)) OR ((cvterm.name)::text = 'aspartic_acid'::text)) OR ((cvterm.name)::text = 'glutamic_acid'::text)) OR ((cvterm.name)::text = 'selenocysteine'::text)) OR ((cvterm.name)::text = 'pyrrolysine'::text)) OR ((cvterm.name)::text = 'modified_glycine'::text)) OR ((cvterm.name)::text = 'modified_L_alanine'::text)) OR ((cvterm.name)::text = 'modified_L_asparagine'::text)) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_cysteine'::text)) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_threonine'::text)) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text)) OR ((cvterm.name)::text = 'modified_L_glutamine'::text)) OR ((cvterm.name)::text = 'modified_L_methionine'::text)) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text)) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text)) OR ((cvterm.name)::text = 'modified_L_histidine'::text)) OR ((cvterm.name)::text = 'modified_L_serine'::text)) OR ((cvterm.name)::text = 'modified_L_lysine'::text)) OR ((cvterm.name)::text = 'modified_L_leucine'::text)) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text)) OR ((cvterm.name)::text = 'modified_L_valine'::text)) OR ((cvterm.name)::text = 'modified_L_proline'::text)) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text)) OR ((cvterm.name)::text = 'modified_L_arginine'::text)) OR ((cvterm.name)::text = 'heritable_phenotypic_marker'::text)) OR ((cvterm.name)::text = 'DArT_marker'::text)) OR ((cvterm.name)::text = 'nucleotide_motif'::text)) OR ((cvterm.name)::text = 'DNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_motif'::text)) OR ((cvterm.name)::text = 'PSE_motif'::text)) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'modified_base'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'methylated_base_feature'::text)) OR ((cvterm.name)::text = 'methylated_C'::text)) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'operon'::text)) OR ((cvterm.name)::text = 'mating_type_region'::text)) OR ((cvterm.name)::text = 'gene_array'::text)) OR ((cvterm.name)::text = 'gene_subarray'::text)) OR ((cvterm.name)::text = 'gene_cassette_array'::text)) OR ((cvterm.name)::text = 'regulon'::text)) OR ((cvterm.name)::text = 'sequence_length_variation'::text)) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'biological_region'::text));


ALTER TABLE so.biological_region OWNER TO postgres;

--
-- Name: biomaterial_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW biomaterial_region AS
    SELECT feature.feature_id AS biomaterial_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'reagent'::text) OR ((cvterm.name)::text = 'engineered_region'::text)) OR ((cvterm.name)::text = 'PCR_product'::text)) OR ((cvterm.name)::text = 'clone'::text)) OR ((cvterm.name)::text = 'rescue_region'::text)) OR ((cvterm.name)::text = 'oligo'::text)) OR ((cvterm.name)::text = 'clone_insert'::text)) OR ((cvterm.name)::text = 'cloned_region'::text)) OR ((cvterm.name)::text = 'databank_entry'::text)) OR ((cvterm.name)::text = 'RAPD'::text)) OR ((cvterm.name)::text = 'genomic_clone'::text)) OR ((cvterm.name)::text = 'cDNA_clone'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'aptamer'::text)) OR ((cvterm.name)::text = 'probe'::text)) OR ((cvterm.name)::text = 'tag'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text)) OR ((cvterm.name)::text = 'DNAzyme'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text)) OR ((cvterm.name)::text = 'DNA_aptamer'::text)) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'microarray_oligo'::text)) OR ((cvterm.name)::text = 'SAGE_tag'::text)) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'primer'::text)) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'RNAi_reagent'::text)) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'morpholino_oligo'::text)) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text)) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_region'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'biomaterial_region'::text));


ALTER TABLE so.biomaterial_region OWNER TO postgres;

--
-- Name: bipartite_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW bipartite_duplication AS
    SELECT feature.feature_id AS bipartite_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'bipartite_duplication'::text);


ALTER TABLE so.bipartite_duplication OWNER TO postgres;

--
-- Name: bipartite_inversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW bipartite_inversion AS
    SELECT feature.feature_id AS bipartite_inversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'bipartite_inversion'::text);


ALTER TABLE so.bipartite_inversion OWNER TO postgres;

--
-- Name: blocked_reading_frame; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW blocked_reading_frame AS
    SELECT feature.feature_id AS blocked_reading_frame_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'blocked_reading_frame'::text);


ALTER TABLE so.blocked_reading_frame OWNER TO postgres;

--
-- Name: blunt_end_restriction_enzyme_cleavage_junction; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW blunt_end_restriction_enzyme_cleavage_junction AS
    SELECT feature.feature_id AS blunt_end_restriction_enzyme_cleavage_junction_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text);


ALTER TABLE so.blunt_end_restriction_enzyme_cleavage_junction OWNER TO postgres;

--
-- Name: blunt_end_restriction_enzyme_cleavage_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW blunt_end_restriction_enzyme_cleavage_site AS
    SELECT feature.feature_id AS blunt_end_restriction_enzyme_cleavage_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text);


ALTER TABLE so.blunt_end_restriction_enzyme_cleavage_site OWNER TO postgres;

--
-- Name: bound_by_factor; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW bound_by_factor AS
    SELECT feature.feature_id AS bound_by_factor_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'bound_by_protein'::text) OR ((cvterm.name)::text = 'bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'bound_by_factor'::text));


ALTER TABLE so.bound_by_factor OWNER TO postgres;

--
-- Name: bound_by_nucleic_acid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW bound_by_nucleic_acid AS
    SELECT feature.feature_id AS bound_by_nucleic_acid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'bound_by_nucleic_acid'::text);


ALTER TABLE so.bound_by_nucleic_acid OWNER TO postgres;

--
-- Name: bound_by_protein; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW bound_by_protein AS
    SELECT feature.feature_id AS bound_by_protein_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'bound_by_protein'::text);


ALTER TABLE so.bound_by_protein OWNER TO postgres;

--
-- Name: branch_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW branch_site AS
    SELECT feature.feature_id AS branch_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'branch_site'::text);


ALTER TABLE so.branch_site OWNER TO postgres;

--
-- Name: bred_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW bred_motif AS
    SELECT feature.feature_id AS bred_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'BREd_motif'::text);


ALTER TABLE so.bred_motif OWNER TO postgres;

--
-- Name: breu_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW breu_motif AS
    SELECT feature.feature_id AS breu_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'BREu_motif'::text);


ALTER TABLE so.breu_motif OWNER TO postgres;

--
-- Name: bruno_response_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW bruno_response_element AS
    SELECT feature.feature_id AS bruno_response_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'Bruno_response_element'::text);


ALTER TABLE so.bruno_response_element OWNER TO postgres;

--
-- Name: c_box; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW c_box AS
    SELECT feature.feature_id AS c_box_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'C_box'::text);


ALTER TABLE so.c_box OWNER TO postgres;

--
-- Name: c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW c_cluster AS
    SELECT feature.feature_id AS c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'C_cluster'::text);


ALTER TABLE so.c_cluster OWNER TO postgres;

--
-- Name: c_d_box_snorna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW c_d_box_snorna AS
    SELECT feature.feature_id AS c_d_box_snorna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'U14_snoRNA'::text) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text));


ALTER TABLE so.c_d_box_snorna OWNER TO postgres;

--
-- Name: c_d_box_snorna_encoding; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW c_d_box_snorna_encoding AS
    SELECT feature.feature_id AS c_d_box_snorna_encoding_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text);


ALTER TABLE so.c_d_box_snorna_encoding OWNER TO postgres;

--
-- Name: c_d_box_snorna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW c_d_box_snorna_primary_transcript AS
    SELECT feature.feature_id AS c_d_box_snorna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text);


ALTER TABLE so.c_d_box_snorna_primary_transcript OWNER TO postgres;

--
-- Name: c_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW c_gene AS
    SELECT feature.feature_id AS c_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'C_gene'::text);


ALTER TABLE so.c_gene OWNER TO postgres;

--
-- Name: c_terminal_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW c_terminal_region AS
    SELECT feature.feature_id AS c_terminal_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'c_terminal_region'::text);


ALTER TABLE so.c_terminal_region OWNER TO postgres;

--
-- Name: c_to_a_transversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW c_to_a_transversion AS
    SELECT feature.feature_id AS c_to_a_transversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'C_to_A_transversion'::text);


ALTER TABLE so.c_to_a_transversion OWNER TO postgres;

--
-- Name: c_to_g_transversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW c_to_g_transversion AS
    SELECT feature.feature_id AS c_to_g_transversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'C_to_G_transversion'::text);


ALTER TABLE so.c_to_g_transversion OWNER TO postgres;

--
-- Name: c_to_t_transition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW c_to_t_transition AS
    SELECT feature.feature_id AS c_to_t_transition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text) OR ((cvterm.name)::text = 'C_to_T_transition'::text));


ALTER TABLE so.c_to_t_transition OWNER TO postgres;

--
-- Name: c_to_t_transition_at_pcpg_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW c_to_t_transition_at_pcpg_site AS
    SELECT feature.feature_id AS c_to_t_transition_at_pcpg_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text);


ALTER TABLE so.c_to_t_transition_at_pcpg_site OWNER TO postgres;

--
-- Name: caat_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW caat_signal AS
    SELECT feature.feature_id AS caat_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'CAAT_signal'::text);


ALTER TABLE so.caat_signal OWNER TO postgres;

--
-- Name: canonical_five_prime_splice_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW canonical_five_prime_splice_site AS
    SELECT feature.feature_id AS canonical_five_prime_splice_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text);


ALTER TABLE so.canonical_five_prime_splice_site OWNER TO postgres;

--
-- Name: canonical_three_prime_splice_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW canonical_three_prime_splice_site AS
    SELECT feature.feature_id AS canonical_three_prime_splice_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text);


ALTER TABLE so.canonical_three_prime_splice_site OWNER TO postgres;

--
-- Name: cap; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cap AS
    SELECT feature.feature_id AS cap_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cap'::text);


ALTER TABLE so.cap OWNER TO postgres;

--
-- Name: capped; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW capped AS
    SELECT feature.feature_id AS capped_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'capped'::text);


ALTER TABLE so.capped OWNER TO postgres;

--
-- Name: capped_mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW capped_mrna AS
    SELECT feature.feature_id AS capped_mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'capped_mRNA'::text);


ALTER TABLE so.capped_mrna OWNER TO postgres;

--
-- Name: capped_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW capped_primary_transcript AS
    SELECT feature.feature_id AS capped_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'capped_primary_transcript'::text);


ALTER TABLE so.capped_primary_transcript OWNER TO postgres;

--
-- Name: cassette_array_member; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cassette_array_member AS
    SELECT feature.feature_id AS cassette_array_member_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cassette_array_member'::text);


ALTER TABLE so.cassette_array_member OWNER TO postgres;

--
-- Name: cassette_pseudogene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cassette_pseudogene AS
    SELECT feature.feature_id AS cassette_pseudogene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cassette_pseudogene'::text);


ALTER TABLE so.cassette_pseudogene OWNER TO postgres;

--
-- Name: catalytic_residue; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW catalytic_residue AS
    SELECT feature.feature_id AS catalytic_residue_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'catalytic_residue'::text);


ALTER TABLE so.catalytic_residue OWNER TO postgres;

--
-- Name: catmat_left_handed_four; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW catmat_left_handed_four AS
    SELECT feature.feature_id AS catmat_left_handed_four_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'catmat_left_handed_four'::text);


ALTER TABLE so.catmat_left_handed_four OWNER TO postgres;

--
-- Name: catmat_left_handed_three; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW catmat_left_handed_three AS
    SELECT feature.feature_id AS catmat_left_handed_three_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'catmat_left_handed_three'::text);


ALTER TABLE so.catmat_left_handed_three OWNER TO postgres;

--
-- Name: catmat_right_handed_four; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW catmat_right_handed_four AS
    SELECT feature.feature_id AS catmat_right_handed_four_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'catmat_right_handed_four'::text);


ALTER TABLE so.catmat_right_handed_four OWNER TO postgres;

--
-- Name: catmat_right_handed_three; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW catmat_right_handed_three AS
    SELECT feature.feature_id AS catmat_right_handed_three_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'catmat_right_handed_three'::text);


ALTER TABLE so.catmat_right_handed_three OWNER TO postgres;

--
-- Name: cca_tail; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cca_tail AS
    SELECT feature.feature_id AS cca_tail_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'CCA_tail'::text);


ALTER TABLE so.cca_tail OWNER TO postgres;

--
-- Name: cdna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cdna AS
    SELECT feature.feature_id AS cdna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'single_stranded_cDNA'::text) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'cDNA'::text));


ALTER TABLE so.cdna OWNER TO postgres;

--
-- Name: cdna_clone; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cdna_clone AS
    SELECT feature.feature_id AS cdna_clone_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'validated_cDNA_clone'::text) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'cDNA_clone'::text));


ALTER TABLE so.cdna_clone OWNER TO postgres;

--
-- Name: cdna_match; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cdna_match AS
    SELECT feature.feature_id AS cdna_match_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cDNA_match'::text);


ALTER TABLE so.cdna_match OWNER TO postgres;

--
-- Name: cds; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cds AS
    SELECT feature.feature_id AS cds_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((cvterm.name)::text = 'edited_CDS'::text) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'CDS'::text));


ALTER TABLE so.cds OWNER TO postgres;

--
-- Name: cds_fragment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cds_fragment AS
    SELECT feature.feature_id AS cds_fragment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'CDS_fragment'::text);


ALTER TABLE so.cds_fragment OWNER TO postgres;

--
-- Name: cds_independently_known; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cds_independently_known AS
    SELECT feature.feature_id AS cds_independently_known_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'CDS_independently_known'::text);


ALTER TABLE so.cds_independently_known OWNER TO postgres;

--
-- Name: cds_predicted; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cds_predicted AS
    SELECT feature.feature_id AS cds_predicted_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'orphan_CDS'::text) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text));


ALTER TABLE so.cds_predicted OWNER TO postgres;

--
-- Name: cds_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cds_region AS
    SELECT feature.feature_id AS cds_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((cvterm.name)::text = 'coding_start'::text) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'CDS_region'::text));


ALTER TABLE so.cds_region OWNER TO postgres;

--
-- Name: cds_supported_by_domain_match_data; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cds_supported_by_domain_match_data AS
    SELECT feature.feature_id AS cds_supported_by_domain_match_data_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text);


ALTER TABLE so.cds_supported_by_domain_match_data OWNER TO postgres;

--
-- Name: cds_supported_by_est_or_cdna_data; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cds_supported_by_est_or_cdna_data AS
    SELECT feature.feature_id AS cds_supported_by_est_or_cdna_data_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text);


ALTER TABLE so.cds_supported_by_est_or_cdna_data OWNER TO postgres;

--
-- Name: cds_supported_by_sequence_similarity_data; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cds_supported_by_sequence_similarity_data AS
    SELECT feature.feature_id AS cds_supported_by_sequence_similarity_data_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text));


ALTER TABLE so.cds_supported_by_sequence_similarity_data OWNER TO postgres;

--
-- Name: central_hydrophobic_region_of_signal_peptide; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW central_hydrophobic_region_of_signal_peptide AS
    SELECT feature.feature_id AS central_hydrophobic_region_of_signal_peptide_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text);


ALTER TABLE so.central_hydrophobic_region_of_signal_peptide OWNER TO postgres;

--
-- Name: centromere; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW centromere AS
    SELECT feature.feature_id AS centromere_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'point_centromere'::text) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'centromere'::text));


ALTER TABLE so.centromere OWNER TO postgres;

--
-- Name: centromere_dna_element_i; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW centromere_dna_element_i AS
    SELECT feature.feature_id AS centromere_dna_element_i_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'centromere_DNA_Element_I'::text);


ALTER TABLE so.centromere_dna_element_i OWNER TO postgres;

--
-- Name: centromere_dna_element_ii; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW centromere_dna_element_ii AS
    SELECT feature.feature_id AS centromere_dna_element_ii_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'centromere_DNA_Element_II'::text);


ALTER TABLE so.centromere_dna_element_ii OWNER TO postgres;

--
-- Name: centromere_dna_element_iii; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW centromere_dna_element_iii AS
    SELECT feature.feature_id AS centromere_dna_element_iii_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'centromere_DNA_Element_III'::text);


ALTER TABLE so.centromere_dna_element_iii OWNER TO postgres;

--
-- Name: centromeric_repeat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW centromeric_repeat AS
    SELECT feature.feature_id AS centromeric_repeat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text)) OR ((cvterm.name)::text = 'centromeric_repeat'::text));


ALTER TABLE so.centromeric_repeat OWNER TO postgres;

--
-- Name: chimeric_cdna_clone; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chimeric_cdna_clone AS
    SELECT feature.feature_id AS chimeric_cdna_clone_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'chimeric_cDNA_clone'::text);


ALTER TABLE so.chimeric_cdna_clone OWNER TO postgres;

--
-- Name: chip_seq_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chip_seq_region AS
    SELECT feature.feature_id AS chip_seq_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'CHiP_seq_region'::text);


ALTER TABLE so.chip_seq_region OWNER TO postgres;

--
-- Name: chloroplast_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chloroplast_chromosome AS
    SELECT feature.feature_id AS chloroplast_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'chloroplast_chromosome'::text);


ALTER TABLE so.chloroplast_chromosome OWNER TO postgres;

--
-- Name: chloroplast_dna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chloroplast_dna AS
    SELECT feature.feature_id AS chloroplast_dna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'chloroplast_DNA'::text);


ALTER TABLE so.chloroplast_dna OWNER TO postgres;

--
-- Name: chloroplast_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chloroplast_sequence AS
    SELECT feature.feature_id AS chloroplast_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'chloroplast_DNA'::text) OR ((cvterm.name)::text = 'chloroplast_sequence'::text));


ALTER TABLE so.chloroplast_sequence OWNER TO postgres;

--
-- Name: chromoplast_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromoplast_chromosome AS
    SELECT feature.feature_id AS chromoplast_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'chromoplast_chromosome'::text);


ALTER TABLE so.chromoplast_chromosome OWNER TO postgres;

--
-- Name: chromoplast_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromoplast_gene AS
    SELECT feature.feature_id AS chromoplast_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'chromoplast_gene'::text);


ALTER TABLE so.chromoplast_gene OWNER TO postgres;

--
-- Name: chromoplast_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromoplast_sequence AS
    SELECT feature.feature_id AS chromoplast_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'chromoplast_sequence'::text);


ALTER TABLE so.chromoplast_sequence OWNER TO postgres;

--
-- Name: chromosomal_deletion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosomal_deletion AS
    SELECT feature.feature_id AS chromosomal_deletion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'chromosomal_deletion'::text));


ALTER TABLE so.chromosomal_deletion OWNER TO postgres;

--
-- Name: chromosomal_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosomal_duplication AS
    SELECT feature.feature_id AS chromosomal_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((cvterm.name)::text = 'interchromosomal_duplication'::text) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'free_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'chromosomal_duplication'::text));


ALTER TABLE so.chromosomal_duplication OWNER TO postgres;

--
-- Name: chromosomal_inversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosomal_inversion AS
    SELECT feature.feature_id AS chromosomal_inversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'chromosomal_inversion'::text));


ALTER TABLE so.chromosomal_inversion OWNER TO postgres;

--
-- Name: chromosomal_regulatory_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosomal_regulatory_element AS
    SELECT feature.feature_id AS chromosomal_regulatory_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'matrix_attachment_site'::text) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text));


ALTER TABLE so.chromosomal_regulatory_element OWNER TO postgres;

--
-- Name: chromosomal_structural_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosomal_structural_element AS
    SELECT feature.feature_id AS chromosomal_structural_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'centromere'::text) OR ((cvterm.name)::text = 'telomere'::text)) OR ((cvterm.name)::text = 'point_centromere'::text)) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text));


ALTER TABLE so.chromosomal_structural_element OWNER TO postgres;

--
-- Name: chromosomal_translocation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosomal_translocation AS
    SELECT feature.feature_id AS chromosomal_translocation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'translocation_element'::text) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'chromosomal_translocation'::text));


ALTER TABLE so.chromosomal_translocation OWNER TO postgres;

--
-- Name: chromosomal_transposition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosomal_transposition AS
    SELECT feature.feature_id AS chromosomal_transposition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'chromosomal_transposition'::text));


ALTER TABLE so.chromosomal_transposition OWNER TO postgres;

--
-- Name: chromosomal_variation_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosomal_variation_attribute AS
    SELECT feature.feature_id AS chromosomal_variation_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'intrachromosomal'::text) OR ((cvterm.name)::text = 'interchromosomal'::text)) OR ((cvterm.name)::text = 'chromosomal_variation_attribute'::text));


ALTER TABLE so.chromosomal_variation_attribute OWNER TO postgres;

--
-- Name: chromosomally_aberrant_genome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosomally_aberrant_genome AS
    SELECT feature.feature_id AS chromosomally_aberrant_genome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'chromosomally_aberrant_genome'::text);


ALTER TABLE so.chromosomally_aberrant_genome OWNER TO postgres;

--
-- Name: chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosome AS
    SELECT feature.feature_id AS chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((cvterm.name)::text = 'mitochondrial_chromosome'::text) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text)) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text)) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text)) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text)) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text)) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome'::text));


ALTER TABLE so.chromosome OWNER TO postgres;

--
-- Name: chromosome_arm; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosome_arm AS
    SELECT feature.feature_id AS chromosome_arm_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'chromosome_arm'::text);


ALTER TABLE so.chromosome_arm OWNER TO postgres;

--
-- Name: chromosome_band; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosome_band AS
    SELECT feature.feature_id AS chromosome_band_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'chromosome_band'::text);


ALTER TABLE so.chromosome_band OWNER TO postgres;

--
-- Name: chromosome_breakage_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosome_breakage_sequence AS
    SELECT feature.feature_id AS chromosome_breakage_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'chromosome_breakage_sequence'::text);


ALTER TABLE so.chromosome_breakage_sequence OWNER TO postgres;

--
-- Name: chromosome_breakpoint; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosome_breakpoint AS
    SELECT feature.feature_id AS chromosome_breakpoint_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'inversion_breakpoint'::text) OR ((cvterm.name)::text = 'translocation_breakpoint'::text)) OR ((cvterm.name)::text = 'insertion_breakpoint'::text)) OR ((cvterm.name)::text = 'deletion_breakpoint'::text)) OR ((cvterm.name)::text = 'chromosome_breakpoint'::text));


ALTER TABLE so.chromosome_breakpoint OWNER TO postgres;

--
-- Name: chromosome_fission; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosome_fission AS
    SELECT feature.feature_id AS chromosome_fission_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'chromosome_fission'::text);


ALTER TABLE so.chromosome_fission OWNER TO postgres;

--
-- Name: chromosome_number_variation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosome_number_variation AS
    SELECT feature.feature_id AS chromosome_number_variation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'aneuploid'::text) OR ((cvterm.name)::text = 'polyploid'::text)) OR ((cvterm.name)::text = 'hyperploid'::text)) OR ((cvterm.name)::text = 'hypoploid'::text)) OR ((cvterm.name)::text = 'autopolyploid'::text)) OR ((cvterm.name)::text = 'allopolyploid'::text)) OR ((cvterm.name)::text = 'chromosome_number_variation'::text));


ALTER TABLE so.chromosome_number_variation OWNER TO postgres;

--
-- Name: chromosome_part; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosome_part AS
    SELECT feature.feature_id AS chromosome_part_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((cvterm.name)::text = 'chromosome_arm'::text) OR ((cvterm.name)::text = 'chromosome_band'::text)) OR ((cvterm.name)::text = 'interband'::text)) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text)) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text)) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text)) OR ((cvterm.name)::text = 'matrix_attachment_site'::text)) OR ((cvterm.name)::text = 'centromere'::text)) OR ((cvterm.name)::text = 'telomere'::text)) OR ((cvterm.name)::text = 'point_centromere'::text)) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'chromosome_part'::text));


ALTER TABLE so.chromosome_part OWNER TO postgres;

--
-- Name: chromosome_structure_variation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosome_structure_variation AS
    SELECT feature.feature_id AS chromosome_structure_variation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'free_chromosome_arm'::text) OR ((cvterm.name)::text = 'chromosomal_transposition'::text)) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text)) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosomal_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome'::text)) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'chromosomal_deletion'::text)) OR ((cvterm.name)::text = 'chromosomal_inversion'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome_fission'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'translocation_element'::text)) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'free_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text)) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text)) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text)) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text));


ALTER TABLE so.chromosome_structure_variation OWNER TO postgres;

--
-- Name: chromosome_variation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW chromosome_variation AS
    SELECT feature.feature_id AS chromosome_variation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'assortment_derived_variation'::text) OR ((cvterm.name)::text = 'chromosome_number_variation'::text)) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text)) OR ((cvterm.name)::text = 'assortment_derived_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text)) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text)) OR ((cvterm.name)::text = 'aneuploid'::text)) OR ((cvterm.name)::text = 'polyploid'::text)) OR ((cvterm.name)::text = 'hyperploid'::text)) OR ((cvterm.name)::text = 'hypoploid'::text)) OR ((cvterm.name)::text = 'autopolyploid'::text)) OR ((cvterm.name)::text = 'allopolyploid'::text)) OR ((cvterm.name)::text = 'free_chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosomal_transposition'::text)) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text)) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosomal_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome'::text)) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'chromosomal_deletion'::text)) OR ((cvterm.name)::text = 'chromosomal_inversion'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome_fission'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'translocation_element'::text)) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'free_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text)) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text)) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text)) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosome_variation'::text));


ALTER TABLE so.chromosome_variation OWNER TO postgres;

--
-- Name: circular; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW circular AS
    SELECT feature.feature_id AS circular_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'circular'::text);


ALTER TABLE so.circular OWNER TO postgres;

--
-- Name: circular_double_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW circular_double_stranded_dna_chromosome AS
    SELECT feature.feature_id AS circular_double_stranded_dna_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text);


ALTER TABLE so.circular_double_stranded_dna_chromosome OWNER TO postgres;

--
-- Name: circular_double_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW circular_double_stranded_rna_chromosome AS
    SELECT feature.feature_id AS circular_double_stranded_rna_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text);


ALTER TABLE so.circular_double_stranded_rna_chromosome OWNER TO postgres;

--
-- Name: circular_single_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW circular_single_stranded_dna_chromosome AS
    SELECT feature.feature_id AS circular_single_stranded_dna_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text);


ALTER TABLE so.circular_single_stranded_dna_chromosome OWNER TO postgres;

--
-- Name: circular_single_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW circular_single_stranded_rna_chromosome AS
    SELECT feature.feature_id AS circular_single_stranded_rna_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text);


ALTER TABLE so.circular_single_stranded_rna_chromosome OWNER TO postgres;

--
-- Name: cis_regulatory_frameshift_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cis_regulatory_frameshift_element AS
    SELECT feature.feature_id AS cis_regulatory_frameshift_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text);


ALTER TABLE so.cis_regulatory_frameshift_element OWNER TO postgres;

--
-- Name: cis_splice_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cis_splice_site AS
    SELECT feature.feature_id AS cis_splice_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'five_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text));


ALTER TABLE so.cis_splice_site OWNER TO postgres;

--
-- Name: class_i_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW class_i_rna AS
    SELECT feature.feature_id AS class_i_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'class_I_RNA'::text);


ALTER TABLE so.class_i_rna OWNER TO postgres;

--
-- Name: class_ii_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW class_ii_rna AS
    SELECT feature.feature_id AS class_ii_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'class_II_RNA'::text);


ALTER TABLE so.class_ii_rna OWNER TO postgres;

--
-- Name: cleaved_for_gpi_anchor_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cleaved_for_gpi_anchor_region AS
    SELECT feature.feature_id AS cleaved_for_gpi_anchor_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text);


ALTER TABLE so.cleaved_for_gpi_anchor_region OWNER TO postgres;

--
-- Name: cleaved_initiator_methionine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cleaved_initiator_methionine AS
    SELECT feature.feature_id AS cleaved_initiator_methionine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cleaved_initiator_methionine'::text);


ALTER TABLE so.cleaved_initiator_methionine OWNER TO postgres;

--
-- Name: cleaved_peptide_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cleaved_peptide_region AS
    SELECT feature.feature_id AS cleaved_peptide_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((cvterm.name)::text = 'cleaved_initiator_methionine'::text) OR ((cvterm.name)::text = 'intein'::text)) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text)) OR ((cvterm.name)::text = 'propeptide'::text)) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text)) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text)) OR ((cvterm.name)::text = 'n_terminal_region'::text)) OR ((cvterm.name)::text = 'c_terminal_region'::text)) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text)) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text));


ALTER TABLE so.cleaved_peptide_region OWNER TO postgres;

--
-- Name: clip; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW clip AS
    SELECT feature.feature_id AS clip_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'five_prime_clip'::text) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'clip'::text));


ALTER TABLE so.clip OWNER TO postgres;

--
-- Name: clone; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW clone AS
    SELECT feature.feature_id AS clone_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((cvterm.name)::text = 'genomic_clone'::text) OR ((cvterm.name)::text = 'cDNA_clone'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'clone'::text));


ALTER TABLE so.clone OWNER TO postgres;

--
-- Name: clone_end; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW clone_end AS
    SELECT feature.feature_id AS clone_end_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'clone_end'::text);


ALTER TABLE so.clone_end OWNER TO postgres;

--
-- Name: clone_insert; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW clone_insert AS
    SELECT feature.feature_id AS clone_insert_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'cloned_cDNA_insert'::text) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'clone_insert'::text));


ALTER TABLE so.clone_insert OWNER TO postgres;

--
-- Name: clone_insert_end; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW clone_insert_end AS
    SELECT feature.feature_id AS clone_insert_end_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'clone_insert_end'::text);


ALTER TABLE so.clone_insert_end OWNER TO postgres;

--
-- Name: clone_insert_start; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW clone_insert_start AS
    SELECT feature.feature_id AS clone_insert_start_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'clone_insert_start'::text);


ALTER TABLE so.clone_insert_start OWNER TO postgres;

--
-- Name: cloned_cdna_insert; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cloned_cdna_insert AS
    SELECT feature.feature_id AS cloned_cdna_insert_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cloned_cDNA_insert'::text);


ALTER TABLE so.cloned_cdna_insert OWNER TO postgres;

--
-- Name: cloned_genomic_insert; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cloned_genomic_insert AS
    SELECT feature.feature_id AS cloned_genomic_insert_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text));


ALTER TABLE so.cloned_genomic_insert OWNER TO postgres;

--
-- Name: cloned_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cloned_region AS
    SELECT feature.feature_id AS cloned_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cloned_region'::text);


ALTER TABLE so.cloned_region OWNER TO postgres;

--
-- Name: coding_conserved_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW coding_conserved_region AS
    SELECT feature.feature_id AS coding_conserved_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'coding_conserved_region'::text);


ALTER TABLE so.coding_conserved_region OWNER TO postgres;

--
-- Name: coding_end; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW coding_end AS
    SELECT feature.feature_id AS coding_end_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'coding_end'::text);


ALTER TABLE so.coding_end OWNER TO postgres;

--
-- Name: coding_exon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW coding_exon AS
    SELECT feature.feature_id AS coding_exon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'interior_coding_exon'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'coding_exon'::text));


ALTER TABLE so.coding_exon OWNER TO postgres;

--
-- Name: coding_region_of_exon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW coding_region_of_exon AS
    SELECT feature.feature_id AS coding_region_of_exon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'coding_region_of_exon'::text));


ALTER TABLE so.coding_region_of_exon OWNER TO postgres;

--
-- Name: coding_sequence_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW coding_sequence_variant AS
    SELECT feature.feature_id AS coding_sequence_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((cvterm.name)::text = 'codon_variant'::text) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = 'coding_sequence_variant'::text));


ALTER TABLE so.coding_sequence_variant OWNER TO postgres;

--
-- Name: coding_start; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW coding_start AS
    SELECT feature.feature_id AS coding_start_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'coding_start'::text);


ALTER TABLE so.coding_start OWNER TO postgres;

--
-- Name: codon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW codon AS
    SELECT feature.feature_id AS codon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((cvterm.name)::text = 'recoded_codon'::text) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'codon'::text));


ALTER TABLE so.codon OWNER TO postgres;

--
-- Name: codon_redefined; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW codon_redefined AS
    SELECT feature.feature_id AS codon_redefined_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'codon_redefined'::text);


ALTER TABLE so.codon_redefined OWNER TO postgres;

--
-- Name: codon_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW codon_variant AS
    SELECT feature.feature_id AS codon_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((cvterm.name)::text = 'initiator_codon_change'::text) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'codon_variant'::text));


ALTER TABLE so.codon_variant OWNER TO postgres;

--
-- Name: coiled_coil; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW coiled_coil AS
    SELECT feature.feature_id AS coiled_coil_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'coiled_coil'::text);


ALTER TABLE so.coiled_coil OWNER TO postgres;

--
-- Name: cointegrated_plasmid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cointegrated_plasmid AS
    SELECT feature.feature_id AS cointegrated_plasmid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cointegrated_plasmid'::text);


ALTER TABLE so.cointegrated_plasmid OWNER TO postgres;

--
-- Name: common_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW common_variant AS
    SELECT feature.feature_id AS common_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'common_variant'::text);


ALTER TABLE so.common_variant OWNER TO postgres;

--
-- Name: compensatory_transcript_secondary_structure_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW compensatory_transcript_secondary_structure_variant AS
    SELECT feature.feature_id AS compensatory_transcript_secondary_structure_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text);


ALTER TABLE so.compensatory_transcript_secondary_structure_variant OWNER TO postgres;

--
-- Name: complex_3d_structural_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW complex_3d_structural_variant AS
    SELECT feature.feature_id AS complex_3d_structural_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'complex_3D_structural_variant'::text);


ALTER TABLE so.complex_3d_structural_variant OWNER TO postgres;

--
-- Name: complex_change_in_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW complex_change_in_transcript AS
    SELECT feature.feature_id AS complex_change_in_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'complex_change_in_transcript'::text);


ALTER TABLE so.complex_change_in_transcript OWNER TO postgres;

--
-- Name: complex_change_of_translational_product_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW complex_change_of_translational_product_variant AS
    SELECT feature.feature_id AS complex_change_of_translational_product_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text);


ALTER TABLE so.complex_change_of_translational_product_variant OWNER TO postgres;

--
-- Name: complex_chromosomal_mutation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW complex_chromosomal_mutation AS
    SELECT feature.feature_id AS complex_chromosomal_mutation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'complex_chromosomal_mutation'::text);


ALTER TABLE so.complex_chromosomal_mutation OWNER TO postgres;

--
-- Name: complex_structural_alteration; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW complex_structural_alteration AS
    SELECT feature.feature_id AS complex_structural_alteration_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'complex_structural_alteration'::text);


ALTER TABLE so.complex_structural_alteration OWNER TO postgres;

--
-- Name: complex_substitution; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW complex_substitution AS
    SELECT feature.feature_id AS complex_substitution_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'complex_substitution'::text);


ALTER TABLE so.complex_substitution OWNER TO postgres;

--
-- Name: compositionally_biased_region_of_peptide; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW compositionally_biased_region_of_peptide AS
    SELECT feature.feature_id AS compositionally_biased_region_of_peptide_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text);


ALTER TABLE so.compositionally_biased_region_of_peptide OWNER TO postgres;

--
-- Name: compound_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW compound_chromosome AS
    SELECT feature.feature_id AS compound_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'compound_chromosome_arm'::text) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text)) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text)) OR ((cvterm.name)::text = 'compound_chromosome'::text));


ALTER TABLE so.compound_chromosome OWNER TO postgres;

--
-- Name: compound_chromosome_arm; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW compound_chromosome_arm AS
    SELECT feature.feature_id AS compound_chromosome_arm_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'compound_chromosome_arm'::text);


ALTER TABLE so.compound_chromosome_arm OWNER TO postgres;

--
-- Name: conformational_change_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW conformational_change_variant AS
    SELECT feature.feature_id AS conformational_change_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'conformational_change_variant'::text);


ALTER TABLE so.conformational_change_variant OWNER TO postgres;

--
-- Name: conformational_switch; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW conformational_switch AS
    SELECT feature.feature_id AS conformational_switch_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'conformational_switch'::text);


ALTER TABLE so.conformational_switch OWNER TO postgres;

--
-- Name: conjugative_transposon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW conjugative_transposon AS
    SELECT feature.feature_id AS conjugative_transposon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'conjugative_transposon'::text);


ALTER TABLE so.conjugative_transposon OWNER TO postgres;

--
-- Name: consensus; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW consensus AS
    SELECT feature.feature_id AS consensus_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'consensus'::text);


ALTER TABLE so.consensus OWNER TO postgres;

--
-- Name: consensus_mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW consensus_mrna AS
    SELECT feature.feature_id AS consensus_mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'consensus_mRNA'::text);


ALTER TABLE so.consensus_mrna OWNER TO postgres;

--
-- Name: consensus_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW consensus_region AS
    SELECT feature.feature_id AS consensus_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'consensus_mRNA'::text) OR ((cvterm.name)::text = 'consensus_region'::text));


ALTER TABLE so.consensus_region OWNER TO postgres;

--
-- Name: conservative_amino_acid_substitution; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW conservative_amino_acid_substitution AS
    SELECT feature.feature_id AS conservative_amino_acid_substitution_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text);


ALTER TABLE so.conservative_amino_acid_substitution OWNER TO postgres;

--
-- Name: conservative_missense_codon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW conservative_missense_codon AS
    SELECT feature.feature_id AS conservative_missense_codon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'conservative_missense_codon'::text);


ALTER TABLE so.conservative_missense_codon OWNER TO postgres;

--
-- Name: conserved; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW conserved AS
    SELECT feature.feature_id AS conserved_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'homologous'::text) OR ((cvterm.name)::text = 'syntenic'::text)) OR ((cvterm.name)::text = 'orthologous'::text)) OR ((cvterm.name)::text = 'paralogous'::text)) OR ((cvterm.name)::text = 'conserved'::text));


ALTER TABLE so.conserved OWNER TO postgres;

--
-- Name: conserved_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW conserved_region AS
    SELECT feature.feature_id AS conserved_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((cvterm.name)::text = 'coding_conserved_region'::text) OR ((cvterm.name)::text = 'nc_conserved_region'::text)) OR ((cvterm.name)::text = 'RR_tract'::text)) OR ((cvterm.name)::text = 'homologous_region'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text)) OR ((cvterm.name)::text = 'X_element'::text)) OR ((cvterm.name)::text = 'U_box'::text)) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text)) OR ((cvterm.name)::text = 'syntenic_region'::text)) OR ((cvterm.name)::text = 'paralogous_region'::text)) OR ((cvterm.name)::text = 'orthologous_region'::text)) OR ((cvterm.name)::text = 'conserved_region'::text));


ALTER TABLE so.conserved_region OWNER TO postgres;

--
-- Name: contig; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW contig AS
    SELECT feature.feature_id AS contig_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'contig'::text);


ALTER TABLE so.contig OWNER TO postgres;

--
-- Name: contig_collection; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW contig_collection AS
    SELECT feature.feature_id AS contig_collection_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'contig_collection'::text);


ALTER TABLE so.contig_collection OWNER TO postgres;

--
-- Name: contig_read; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW contig_read AS
    SELECT feature.feature_id AS contig_read_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'contig_read'::text);


ALTER TABLE so.contig_read OWNER TO postgres;

--
-- Name: copy_number_change; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW copy_number_change AS
    SELECT feature.feature_id AS copy_number_change_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'copy_number_change'::text);


ALTER TABLE so.copy_number_change OWNER TO postgres;

--
-- Name: copy_number_gain; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW copy_number_gain AS
    SELECT feature.feature_id AS copy_number_gain_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'copy_number_gain'::text);


ALTER TABLE so.copy_number_gain OWNER TO postgres;

--
-- Name: copy_number_loss; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW copy_number_loss AS
    SELECT feature.feature_id AS copy_number_loss_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'copy_number_loss'::text);


ALTER TABLE so.copy_number_loss OWNER TO postgres;

--
-- Name: copy_number_variation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW copy_number_variation AS
    SELECT feature.feature_id AS copy_number_variation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'copy_number_gain'::text) OR ((cvterm.name)::text = 'copy_number_loss'::text)) OR ((cvterm.name)::text = 'copy_number_variation'::text));


ALTER TABLE so.copy_number_variation OWNER TO postgres;

--
-- Name: core_promoter_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW core_promoter_element AS
    SELECT feature.feature_id AS core_promoter_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((cvterm.name)::text = 'INR_motif'::text) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text));


ALTER TABLE so.core_promoter_element OWNER TO postgres;

--
-- Name: cosmid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cosmid AS
    SELECT feature.feature_id AS cosmid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cosmid'::text);


ALTER TABLE so.cosmid OWNER TO postgres;

--
-- Name: cpg_island; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cpg_island AS
    SELECT feature.feature_id AS cpg_island_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'CpG_island'::text);


ALTER TABLE so.cpg_island OWNER TO postgres;

--
-- Name: crispr; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW crispr AS
    SELECT feature.feature_id AS crispr_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'CRISPR'::text);


ALTER TABLE so.crispr OWNER TO postgres;

--
-- Name: crm; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW crm AS
    SELECT feature.feature_id AS crm_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'locus_control_region'::text) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'CRM'::text));


ALTER TABLE so.crm OWNER TO postgres;

--
-- Name: cross_genome_match; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cross_genome_match AS
    SELECT feature.feature_id AS cross_genome_match_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cross_genome_match'::text);


ALTER TABLE so.cross_genome_match OWNER TO postgres;

--
-- Name: cryptic; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cryptic AS
    SELECT feature.feature_id AS cryptic_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cryptic'::text);


ALTER TABLE so.cryptic OWNER TO postgres;

--
-- Name: cryptic_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cryptic_gene AS
    SELECT feature.feature_id AS cryptic_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'cryptic_gene'::text));


ALTER TABLE so.cryptic_gene OWNER TO postgres;

--
-- Name: cryptic_prophage; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cryptic_prophage AS
    SELECT feature.feature_id AS cryptic_prophage_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cryptic_prophage'::text);


ALTER TABLE so.cryptic_prophage OWNER TO postgres;

--
-- Name: cryptic_splice_acceptor; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cryptic_splice_acceptor AS
    SELECT feature.feature_id AS cryptic_splice_acceptor_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cryptic_splice_acceptor'::text);


ALTER TABLE so.cryptic_splice_acceptor OWNER TO postgres;

--
-- Name: cryptic_splice_donor; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cryptic_splice_donor AS
    SELECT feature.feature_id AS cryptic_splice_donor_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cryptic_splice_donor'::text);


ALTER TABLE so.cryptic_splice_donor OWNER TO postgres;

--
-- Name: cryptic_splice_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cryptic_splice_site AS
    SELECT feature.feature_id AS cryptic_splice_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cryptic_splice_site'::text);


ALTER TABLE so.cryptic_splice_site OWNER TO postgres;

--
-- Name: cryptic_splice_site_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cryptic_splice_site_variant AS
    SELECT feature.feature_id AS cryptic_splice_site_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'cryptic_splice_acceptor'::text) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text));


ALTER TABLE so.cryptic_splice_site_variant OWNER TO postgres;

--
-- Name: cryptogene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cryptogene AS
    SELECT feature.feature_id AS cryptogene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cryptogene'::text);


ALTER TABLE so.cryptogene OWNER TO postgres;

--
-- Name: csrb_rsmb_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW csrb_rsmb_rna AS
    SELECT feature.feature_id AS csrb_rsmb_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text);


ALTER TABLE so.csrb_rsmb_rna OWNER TO postgres;

--
-- Name: ct_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ct_gene AS
    SELECT feature.feature_id AS ct_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'ct_gene'::text);


ALTER TABLE so.ct_gene OWNER TO postgres;

--
-- Name: ctg_start_codon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ctg_start_codon AS
    SELECT feature.feature_id AS ctg_start_codon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'CTG_start_codon'::text);


ALTER TABLE so.ctg_start_codon OWNER TO postgres;

--
-- Name: cyanelle_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cyanelle_chromosome AS
    SELECT feature.feature_id AS cyanelle_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cyanelle_chromosome'::text);


ALTER TABLE so.cyanelle_chromosome OWNER TO postgres;

--
-- Name: cyanelle_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cyanelle_gene AS
    SELECT feature.feature_id AS cyanelle_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cyanelle_gene'::text);


ALTER TABLE so.cyanelle_gene OWNER TO postgres;

--
-- Name: cyanelle_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cyanelle_sequence AS
    SELECT feature.feature_id AS cyanelle_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cyanelle_sequence'::text);


ALTER TABLE so.cyanelle_sequence OWNER TO postgres;

--
-- Name: cyclic_translocation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cyclic_translocation AS
    SELECT feature.feature_id AS cyclic_translocation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cyclic_translocation'::text);


ALTER TABLE so.cyclic_translocation OWNER TO postgres;

--
-- Name: cysteine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cysteine AS
    SELECT feature.feature_id AS cysteine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cysteine'::text);


ALTER TABLE so.cysteine OWNER TO postgres;

--
-- Name: cysteine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cysteine_trna_primary_transcript AS
    SELECT feature.feature_id AS cysteine_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text);


ALTER TABLE so.cysteine_trna_primary_transcript OWNER TO postgres;

--
-- Name: cysteinyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cysteinyl_trna AS
    SELECT feature.feature_id AS cysteinyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cysteinyl_tRNA'::text);


ALTER TABLE so.cysteinyl_trna OWNER TO postgres;

--
-- Name: cytoplasmic_polypeptide_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW cytoplasmic_polypeptide_region AS
    SELECT feature.feature_id AS cytoplasmic_polypeptide_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text);


ALTER TABLE so.cytoplasmic_polypeptide_region OWNER TO postgres;

--
-- Name: d_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW d_cluster AS
    SELECT feature.feature_id AS d_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'D_cluster'::text);


ALTER TABLE so.d_cluster OWNER TO postgres;

--
-- Name: d_dj_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW d_dj_c_cluster AS
    SELECT feature.feature_id AS d_dj_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'D_DJ_C_cluster'::text);


ALTER TABLE so.d_dj_c_cluster OWNER TO postgres;

--
-- Name: d_dj_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW d_dj_cluster AS
    SELECT feature.feature_id AS d_dj_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'D_DJ_cluster'::text);


ALTER TABLE so.d_dj_cluster OWNER TO postgres;

--
-- Name: d_dj_j_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW d_dj_j_c_cluster AS
    SELECT feature.feature_id AS d_dj_j_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text);


ALTER TABLE so.d_dj_j_c_cluster OWNER TO postgres;

--
-- Name: d_dj_j_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW d_dj_j_cluster AS
    SELECT feature.feature_id AS d_dj_j_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'D_DJ_J_cluster'::text);


ALTER TABLE so.d_dj_j_cluster OWNER TO postgres;

--
-- Name: d_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW d_gene AS
    SELECT feature.feature_id AS d_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'D_gene'::text);


ALTER TABLE so.d_gene OWNER TO postgres;

--
-- Name: d_gene_recombination_feature; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW d_gene_recombination_feature AS
    SELECT feature.feature_id AS d_gene_recombination_feature_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text));


ALTER TABLE so.d_gene_recombination_feature OWNER TO postgres;

--
-- Name: d_interchr_transposition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW d_interchr_transposition AS
    SELECT feature.feature_id AS d_interchr_transposition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text);


ALTER TABLE so.d_interchr_transposition OWNER TO postgres;

--
-- Name: d_intrachr_transposition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW d_intrachr_transposition AS
    SELECT feature.feature_id AS d_intrachr_transposition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text);


ALTER TABLE so.d_intrachr_transposition OWNER TO postgres;

--
-- Name: d_j_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW d_j_c_cluster AS
    SELECT feature.feature_id AS d_j_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'D_J_C_cluster'::text);


ALTER TABLE so.d_j_c_cluster OWNER TO postgres;

--
-- Name: d_j_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW d_j_cluster AS
    SELECT feature.feature_id AS d_j_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'D_J_cluster'::text);


ALTER TABLE so.d_j_cluster OWNER TO postgres;

--
-- Name: d_loop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW d_loop AS
    SELECT feature.feature_id AS d_loop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'D_loop'::text);


ALTER TABLE so.d_loop OWNER TO postgres;

--
-- Name: dart_marker; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dart_marker AS
    SELECT feature.feature_id AS dart_marker_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DArT_marker'::text);


ALTER TABLE so.dart_marker OWNER TO postgres;

--
-- Name: databank_entry; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW databank_entry AS
    SELECT feature.feature_id AS databank_entry_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'databank_entry'::text);


ALTER TABLE so.databank_entry OWNER TO postgres;

--
-- Name: dcaps_primer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dcaps_primer AS
    SELECT feature.feature_id AS dcaps_primer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'dCAPS_primer'::text);


ALTER TABLE so.dcaps_primer OWNER TO postgres;

--
-- Name: dce; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dce AS
    SELECT feature.feature_id AS dce_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DCE'::text);


ALTER TABLE so.dce OWNER TO postgres;

--
-- Name: dce_si; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dce_si AS
    SELECT feature.feature_id AS dce_si_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DCE_SI'::text);


ALTER TABLE so.dce_si OWNER TO postgres;

--
-- Name: dce_sii; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dce_sii AS
    SELECT feature.feature_id AS dce_sii_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DCE_SII'::text);


ALTER TABLE so.dce_sii OWNER TO postgres;

--
-- Name: dce_siii; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dce_siii AS
    SELECT feature.feature_id AS dce_siii_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DCE_SIII'::text);


ALTER TABLE so.dce_siii OWNER TO postgres;

--
-- Name: de_novo_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW de_novo_variant AS
    SELECT feature.feature_id AS de_novo_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'de_novo_variant'::text);


ALTER TABLE so.de_novo_variant OWNER TO postgres;

--
-- Name: decayed_exon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW decayed_exon AS
    SELECT feature.feature_id AS decayed_exon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'decayed_exon'::text);


ALTER TABLE so.decayed_exon OWNER TO postgres;

--
-- Name: decreased_polyadenylation_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW decreased_polyadenylation_variant AS
    SELECT feature.feature_id AS decreased_polyadenylation_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text);


ALTER TABLE so.decreased_polyadenylation_variant OWNER TO postgres;

--
-- Name: decreased_transcript_level_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW decreased_transcript_level_variant AS
    SELECT feature.feature_id AS decreased_transcript_level_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'decreased_transcript_level_variant'::text);


ALTER TABLE so.decreased_transcript_level_variant OWNER TO postgres;

--
-- Name: decreased_transcript_stability_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW decreased_transcript_stability_variant AS
    SELECT feature.feature_id AS decreased_transcript_stability_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text);


ALTER TABLE so.decreased_transcript_stability_variant OWNER TO postgres;

--
-- Name: decreased_transcription_rate_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW decreased_transcription_rate_variant AS
    SELECT feature.feature_id AS decreased_transcription_rate_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text);


ALTER TABLE so.decreased_transcription_rate_variant OWNER TO postgres;

--
-- Name: decreased_translational_product_level; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW decreased_translational_product_level AS
    SELECT feature.feature_id AS decreased_translational_product_level_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'decreased_translational_product_level'::text);


ALTER TABLE so.decreased_translational_product_level OWNER TO postgres;

--
-- Name: defective_conjugative_transposon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW defective_conjugative_transposon AS
    SELECT feature.feature_id AS defective_conjugative_transposon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'defective_conjugative_transposon'::text);


ALTER TABLE so.defective_conjugative_transposon OWNER TO postgres;

--
-- Name: deficient_inversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW deficient_inversion AS
    SELECT feature.feature_id AS deficient_inversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'deficient_inversion'::text);


ALTER TABLE so.deficient_inversion OWNER TO postgres;

--
-- Name: deficient_translocation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW deficient_translocation AS
    SELECT feature.feature_id AS deficient_translocation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'deficient_translocation'::text);


ALTER TABLE so.deficient_translocation OWNER TO postgres;

--
-- Name: deletion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW deletion AS
    SELECT feature.feature_id AS deletion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'deletion'::text);


ALTER TABLE so.deletion OWNER TO postgres;

--
-- Name: deletion_breakpoint; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW deletion_breakpoint AS
    SELECT feature.feature_id AS deletion_breakpoint_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'deletion_breakpoint'::text);


ALTER TABLE so.deletion_breakpoint OWNER TO postgres;

--
-- Name: deletion_junction; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW deletion_junction AS
    SELECT feature.feature_id AS deletion_junction_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'deletion_junction'::text);


ALTER TABLE so.deletion_junction OWNER TO postgres;

--
-- Name: designed_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW designed_sequence AS
    SELECT feature.feature_id AS designed_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'designed_sequence'::text);


ALTER TABLE so.designed_sequence OWNER TO postgres;

--
-- Name: dexstrosynaptic_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dexstrosynaptic_chromosome AS
    SELECT feature.feature_id AS dexstrosynaptic_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text);


ALTER TABLE so.dexstrosynaptic_chromosome OWNER TO postgres;

--
-- Name: dhu_loop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dhu_loop AS
    SELECT feature.feature_id AS dhu_loop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DHU_loop'::text);


ALTER TABLE so.dhu_loop OWNER TO postgres;

--
-- Name: dicistronic; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dicistronic AS
    SELECT feature.feature_id AS dicistronic_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'dicistronic'::text);


ALTER TABLE so.dicistronic OWNER TO postgres;

--
-- Name: dicistronic_mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dicistronic_mrna AS
    SELECT feature.feature_id AS dicistronic_mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'dicistronic_mRNA'::text);


ALTER TABLE so.dicistronic_mrna OWNER TO postgres;

--
-- Name: dicistronic_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dicistronic_primary_transcript AS
    SELECT feature.feature_id AS dicistronic_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'dicistronic_primary_transcript'::text);


ALTER TABLE so.dicistronic_primary_transcript OWNER TO postgres;

--
-- Name: dicistronic_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dicistronic_transcript AS
    SELECT feature.feature_id AS dicistronic_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text));


ALTER TABLE so.dicistronic_transcript OWNER TO postgres;

--
-- Name: dif_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dif_site AS
    SELECT feature.feature_id AS dif_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'dif_site'::text);


ALTER TABLE so.dif_site OWNER TO postgres;

--
-- Name: dihydrouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dihydrouridine AS
    SELECT feature.feature_id AS dihydrouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'dihydrouridine'::text);


ALTER TABLE so.dihydrouridine OWNER TO postgres;

--
-- Name: dinucleotide_repeat_microsatellite_feature; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dinucleotide_repeat_microsatellite_feature AS
    SELECT feature.feature_id AS dinucleotide_repeat_microsatellite_feature_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text);


ALTER TABLE so.dinucleotide_repeat_microsatellite_feature OWNER TO postgres;

--
-- Name: diplotype; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW diplotype AS
    SELECT feature.feature_id AS diplotype_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'diplotype'::text);


ALTER TABLE so.diplotype OWNER TO postgres;

--
-- Name: direct; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW direct AS
    SELECT feature.feature_id AS direct_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'direct'::text);


ALTER TABLE so.direct OWNER TO postgres;

--
-- Name: direct_repeat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW direct_repeat AS
    SELECT feature.feature_id AS direct_repeat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'target_site_duplication'::text) OR ((cvterm.name)::text = 'CRISPR'::text)) OR ((cvterm.name)::text = 'direct_repeat'::text));


ALTER TABLE so.direct_repeat OWNER TO postgres;

--
-- Name: direct_tandem_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW direct_tandem_duplication AS
    SELECT feature.feature_id AS direct_tandem_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'direct_tandem_duplication'::text);


ALTER TABLE so.direct_tandem_duplication OWNER TO postgres;

--
-- Name: direction_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW direction_attribute AS
    SELECT feature.feature_id AS direction_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'forward'::text) OR ((cvterm.name)::text = 'reverse'::text)) OR ((cvterm.name)::text = 'direction_attribute'::text));


ALTER TABLE so.direction_attribute OWNER TO postgres;

--
-- Name: disease_associated_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW disease_associated_variant AS
    SELECT feature.feature_id AS disease_associated_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'disease_associated_variant'::text);


ALTER TABLE so.disease_associated_variant OWNER TO postgres;

--
-- Name: disease_causing_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW disease_causing_variant AS
    SELECT feature.feature_id AS disease_causing_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'disease_causing_variant'::text);


ALTER TABLE so.disease_causing_variant OWNER TO postgres;

--
-- Name: dispersed_repeat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dispersed_repeat AS
    SELECT feature.feature_id AS dispersed_repeat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'dispersed_repeat'::text);


ALTER TABLE so.dispersed_repeat OWNER TO postgres;

--
-- Name: distal_promoter_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW distal_promoter_element AS
    SELECT feature.feature_id AS distal_promoter_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'distal_promoter_element'::text);


ALTER TABLE so.distal_promoter_element OWNER TO postgres;

--
-- Name: distant_three_prime_recoding_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW distant_three_prime_recoding_signal AS
    SELECT feature.feature_id AS distant_three_prime_recoding_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text);


ALTER TABLE so.distant_three_prime_recoding_signal OWNER TO postgres;

--
-- Name: dj_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dj_c_cluster AS
    SELECT feature.feature_id AS dj_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DJ_C_cluster'::text);


ALTER TABLE so.dj_c_cluster OWNER TO postgres;

--
-- Name: dj_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dj_gene AS
    SELECT feature.feature_id AS dj_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DJ_gene'::text);


ALTER TABLE so.dj_gene OWNER TO postgres;

--
-- Name: dj_j_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dj_j_c_cluster AS
    SELECT feature.feature_id AS dj_j_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DJ_J_C_cluster'::text);


ALTER TABLE so.dj_j_c_cluster OWNER TO postgres;

--
-- Name: dj_j_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dj_j_cluster AS
    SELECT feature.feature_id AS dj_j_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DJ_J_cluster'::text);


ALTER TABLE so.dj_j_cluster OWNER TO postgres;

--
-- Name: dmv1_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dmv1_motif AS
    SELECT feature.feature_id AS dmv1_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DMv1_motif'::text);


ALTER TABLE so.dmv1_motif OWNER TO postgres;

--
-- Name: dmv2_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dmv2_motif AS
    SELECT feature.feature_id AS dmv2_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DMv2_motif'::text);


ALTER TABLE so.dmv2_motif OWNER TO postgres;

--
-- Name: dmv3_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dmv3_motif AS
    SELECT feature.feature_id AS dmv3_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DMv3_motif'::text);


ALTER TABLE so.dmv3_motif OWNER TO postgres;

--
-- Name: dmv4_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dmv4_motif AS
    SELECT feature.feature_id AS dmv4_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DMv4_motif'::text);


ALTER TABLE so.dmv4_motif OWNER TO postgres;

--
-- Name: dmv5_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dmv5_motif AS
    SELECT feature.feature_id AS dmv5_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DMv5_motif'::text);


ALTER TABLE so.dmv5_motif OWNER TO postgres;

--
-- Name: dna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dna AS
    SELECT feature.feature_id AS dna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'cDNA'::text) OR ((cvterm.name)::text = 'genomic_DNA'::text)) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'DNA'::text));


ALTER TABLE so.dna OWNER TO postgres;

--
-- Name: dna_aptamer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dna_aptamer AS
    SELECT feature.feature_id AS dna_aptamer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DNA_aptamer'::text);


ALTER TABLE so.dna_aptamer OWNER TO postgres;

--
-- Name: dna_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dna_binding_site AS
    SELECT feature.feature_id AS dna_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'DNA_binding_site'::text));


ALTER TABLE so.dna_binding_site OWNER TO postgres;

--
-- Name: dna_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dna_chromosome AS
    SELECT feature.feature_id AS dna_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text));


ALTER TABLE so.dna_chromosome OWNER TO postgres;

--
-- Name: dna_constraint_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dna_constraint_sequence AS
    SELECT feature.feature_id AS dna_constraint_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DNA_constraint_sequence'::text);


ALTER TABLE so.dna_constraint_sequence OWNER TO postgres;

--
-- Name: dna_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dna_motif AS
    SELECT feature.feature_id AS dna_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'PSE_motif'::text) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'DNA_motif'::text));


ALTER TABLE so.dna_motif OWNER TO postgres;

--
-- Name: dna_sequence_secondary_structure; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dna_sequence_secondary_structure AS
    SELECT feature.feature_id AS dna_sequence_secondary_structure_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'i_motif'::text) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text));


ALTER TABLE so.dna_sequence_secondary_structure OWNER TO postgres;

--
-- Name: dna_transposon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dna_transposon AS
    SELECT feature.feature_id AS dna_transposon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((cvterm.name)::text = 'terminal_inverted_repeat_element'::text) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text));


ALTER TABLE so.dna_transposon OWNER TO postgres;

--
-- Name: dnasei_hypersensitive_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dnasei_hypersensitive_site AS
    SELECT feature.feature_id AS dnasei_hypersensitive_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text);


ALTER TABLE so.dnasei_hypersensitive_site OWNER TO postgres;

--
-- Name: dnazyme; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dnazyme AS
    SELECT feature.feature_id AS dnazyme_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DNAzyme'::text);


ALTER TABLE so.dnazyme OWNER TO postgres;

--
-- Name: double; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW double AS
    SELECT feature.feature_id AS double_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'double'::text);


ALTER TABLE so.double OWNER TO postgres;

--
-- Name: double_stranded_cdna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW double_stranded_cdna AS
    SELECT feature.feature_id AS double_stranded_cdna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'double_stranded_cDNA'::text);


ALTER TABLE so.double_stranded_cdna OWNER TO postgres;

--
-- Name: double_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW double_stranded_dna_chromosome AS
    SELECT feature.feature_id AS double_stranded_dna_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text));


ALTER TABLE so.double_stranded_dna_chromosome OWNER TO postgres;

--
-- Name: double_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW double_stranded_rna_chromosome AS
    SELECT feature.feature_id AS double_stranded_rna_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text));


ALTER TABLE so.double_stranded_rna_chromosome OWNER TO postgres;

--
-- Name: downstream_gene_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW downstream_gene_variant AS
    SELECT feature.feature_id AS downstream_gene_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = '5KB_downstream_variant'::text) OR ((cvterm.name)::text = '500B_downstream_variant'::text)) OR ((cvterm.name)::text = 'downstream_gene_variant'::text));


ALTER TABLE so.downstream_gene_variant OWNER TO postgres;

--
-- Name: dpe1_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dpe1_motif AS
    SELECT feature.feature_id AS dpe1_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DPE1_motif'::text);


ALTER TABLE so.dpe1_motif OWNER TO postgres;

--
-- Name: dpe_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dpe_motif AS
    SELECT feature.feature_id AS dpe_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DPE_motif'::text);


ALTER TABLE so.dpe_motif OWNER TO postgres;

--
-- Name: dre_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dre_motif AS
    SELECT feature.feature_id AS dre_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'DRE_motif'::text);


ALTER TABLE so.dre_motif OWNER TO postgres;

--
-- Name: ds_dna_viral_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ds_dna_viral_sequence AS
    SELECT feature.feature_id AS ds_dna_viral_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text);


ALTER TABLE so.ds_dna_viral_sequence OWNER TO postgres;

--
-- Name: ds_oligo; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ds_oligo AS
    SELECT feature.feature_id AS ds_oligo_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'RNAi_reagent'::text) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text));


ALTER TABLE so.ds_oligo OWNER TO postgres;

--
-- Name: ds_rna_viral_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ds_rna_viral_sequence AS
    SELECT feature.feature_id AS ds_rna_viral_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text);


ALTER TABLE so.ds_rna_viral_sequence OWNER TO postgres;

--
-- Name: dsra_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dsra_rna AS
    SELECT feature.feature_id AS dsra_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'GcvB_RNA'::text) OR ((cvterm.name)::text = 'DsrA_RNA'::text));


ALTER TABLE so.dsra_rna OWNER TO postgres;

--
-- Name: duplicated_pseudogene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW duplicated_pseudogene AS
    SELECT feature.feature_id AS duplicated_pseudogene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'duplicated_pseudogene'::text);


ALTER TABLE so.duplicated_pseudogene OWNER TO postgres;

--
-- Name: duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW duplication AS
    SELECT feature.feature_id AS duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'tandem_duplication'::text) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'duplication'::text));


ALTER TABLE so.duplication OWNER TO postgres;

--
-- Name: duplication_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW duplication_attribute AS
    SELECT feature.feature_id AS duplication_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'free'::text) OR ((cvterm.name)::text = 'duplication_attribute'::text));


ALTER TABLE so.duplication_attribute OWNER TO postgres;

--
-- Name: dye_terminator_read; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW dye_terminator_read AS
    SELECT feature.feature_id AS dye_terminator_read_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'dye_terminator_read'::text);


ALTER TABLE so.dye_terminator_read OWNER TO postgres;

--
-- Name: e_box_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW e_box_motif AS
    SELECT feature.feature_id AS e_box_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'E_box_motif'::text);


ALTER TABLE so.e_box_motif OWNER TO postgres;

--
-- Name: edited; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW edited AS
    SELECT feature.feature_id AS edited_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'edited'::text);


ALTER TABLE so.edited OWNER TO postgres;

--
-- Name: edited_cds; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW edited_cds AS
    SELECT feature.feature_id AS edited_cds_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'edited_CDS'::text);


ALTER TABLE so.edited_cds OWNER TO postgres;

--
-- Name: edited_mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW edited_mrna AS
    SELECT feature.feature_id AS edited_mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'edited_mRNA'::text);


ALTER TABLE so.edited_mrna OWNER TO postgres;

--
-- Name: edited_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW edited_transcript AS
    SELECT feature.feature_id AS edited_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text));


ALTER TABLE so.edited_transcript OWNER TO postgres;

--
-- Name: edited_transcript_by_a_to_i_substitution; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW edited_transcript_by_a_to_i_substitution AS
    SELECT feature.feature_id AS edited_transcript_by_a_to_i_substitution_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text);


ALTER TABLE so.edited_transcript_by_a_to_i_substitution OWNER TO postgres;

--
-- Name: edited_transcript_feature; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW edited_transcript_feature AS
    SELECT feature.feature_id AS edited_transcript_feature_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'pre_edited_region'::text) OR ((cvterm.name)::text = 'editing_block'::text)) OR ((cvterm.name)::text = 'editing_domain'::text)) OR ((cvterm.name)::text = 'unedited_region'::text)) OR ((cvterm.name)::text = 'edited_transcript_feature'::text));


ALTER TABLE so.edited_transcript_feature OWNER TO postgres;

--
-- Name: editing_block; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW editing_block AS
    SELECT feature.feature_id AS editing_block_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'editing_block'::text);


ALTER TABLE so.editing_block OWNER TO postgres;

--
-- Name: editing_domain; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW editing_domain AS
    SELECT feature.feature_id AS editing_domain_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'editing_domain'::text);


ALTER TABLE so.editing_domain OWNER TO postgres;

--
-- Name: editing_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW editing_variant AS
    SELECT feature.feature_id AS editing_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'editing_variant'::text);


ALTER TABLE so.editing_variant OWNER TO postgres;

--
-- Name: elongated_in_frame_polypeptide_c_terminal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW elongated_in_frame_polypeptide_c_terminal AS
    SELECT feature.feature_id AS elongated_in_frame_polypeptide_c_terminal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text);


ALTER TABLE so.elongated_in_frame_polypeptide_c_terminal OWNER TO postgres;

--
-- Name: elongated_in_frame_polypeptide_n_terminal_elongation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW elongated_in_frame_polypeptide_n_terminal_elongation AS
    SELECT feature.feature_id AS elongated_in_frame_polypeptide_n_terminal_elongation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text);


ALTER TABLE so.elongated_in_frame_polypeptide_n_terminal_elongation OWNER TO postgres;

--
-- Name: elongated_out_of_frame_polypeptide_c_terminal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW elongated_out_of_frame_polypeptide_c_terminal AS
    SELECT feature.feature_id AS elongated_out_of_frame_polypeptide_c_terminal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text);


ALTER TABLE so.elongated_out_of_frame_polypeptide_c_terminal OWNER TO postgres;

--
-- Name: elongated_out_of_frame_polypeptide_n_terminal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW elongated_out_of_frame_polypeptide_n_terminal AS
    SELECT feature.feature_id AS elongated_out_of_frame_polypeptide_n_terminal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text);


ALTER TABLE so.elongated_out_of_frame_polypeptide_n_terminal OWNER TO postgres;

--
-- Name: elongated_polypeptide; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW elongated_polypeptide AS
    SELECT feature.feature_id AS elongated_polypeptide_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text));


ALTER TABLE so.elongated_polypeptide OWNER TO postgres;

--
-- Name: elongated_polypeptide_c_terminal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW elongated_polypeptide_c_terminal AS
    SELECT feature.feature_id AS elongated_polypeptide_c_terminal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text));


ALTER TABLE so.elongated_polypeptide_c_terminal OWNER TO postgres;

--
-- Name: elongated_polypeptide_n_terminal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW elongated_polypeptide_n_terminal AS
    SELECT feature.feature_id AS elongated_polypeptide_n_terminal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text));


ALTER TABLE so.elongated_polypeptide_n_terminal OWNER TO postgres;

--
-- Name: encodes_1_polypeptide; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW encodes_1_polypeptide AS
    SELECT feature.feature_id AS encodes_1_polypeptide_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'encodes_1_polypeptide'::text);


ALTER TABLE so.encodes_1_polypeptide OWNER TO postgres;

--
-- Name: encodes_alternate_transcription_start_sites; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW encodes_alternate_transcription_start_sites AS
    SELECT feature.feature_id AS encodes_alternate_transcription_start_sites_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text);


ALTER TABLE so.encodes_alternate_transcription_start_sites OWNER TO postgres;

--
-- Name: encodes_alternately_spliced_transcripts; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW encodes_alternately_spliced_transcripts AS
    SELECT feature.feature_id AS encodes_alternately_spliced_transcripts_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'encodes_1_polypeptide'::text) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text)) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text));


ALTER TABLE so.encodes_alternately_spliced_transcripts OWNER TO postgres;

--
-- Name: encodes_different_polypeptides_different_stop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW encodes_different_polypeptides_different_stop AS
    SELECT feature.feature_id AS encodes_different_polypeptides_different_stop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text);


ALTER TABLE so.encodes_different_polypeptides_different_stop OWNER TO postgres;

--
-- Name: encodes_disjoint_polypeptides; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW encodes_disjoint_polypeptides AS
    SELECT feature.feature_id AS encodes_disjoint_polypeptides_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text);


ALTER TABLE so.encodes_disjoint_polypeptides OWNER TO postgres;

--
-- Name: encodes_greater_than_1_polypeptide; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW encodes_greater_than_1_polypeptide AS
    SELECT feature.feature_id AS encodes_greater_than_1_polypeptide_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text)) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text));


ALTER TABLE so.encodes_greater_than_1_polypeptide OWNER TO postgres;

--
-- Name: encodes_overlapping_peptides; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW encodes_overlapping_peptides AS
    SELECT feature.feature_id AS encodes_overlapping_peptides_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text));


ALTER TABLE so.encodes_overlapping_peptides OWNER TO postgres;

--
-- Name: encodes_overlapping_peptides_different_start; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW encodes_overlapping_peptides_different_start AS
    SELECT feature.feature_id AS encodes_overlapping_peptides_different_start_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text);


ALTER TABLE so.encodes_overlapping_peptides_different_start OWNER TO postgres;

--
-- Name: encodes_overlapping_polypeptides_different_start_and_stop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW encodes_overlapping_polypeptides_different_start_and_stop AS
    SELECT feature.feature_id AS encodes_overlapping_polypeptides_different_start_and_stop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text);


ALTER TABLE so.encodes_overlapping_polypeptides_different_start_and_stop OWNER TO postgres;

--
-- Name: endogenous_retroviral_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW endogenous_retroviral_gene AS
    SELECT feature.feature_id AS endogenous_retroviral_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'endogenous_retroviral_gene'::text);


ALTER TABLE so.endogenous_retroviral_gene OWNER TO postgres;

--
-- Name: endogenous_retroviral_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW endogenous_retroviral_sequence AS
    SELECT feature.feature_id AS endogenous_retroviral_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'endogenous_retroviral_sequence'::text);


ALTER TABLE so.endogenous_retroviral_sequence OWNER TO postgres;

--
-- Name: endonuclease_spliced_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW endonuclease_spliced_intron AS
    SELECT feature.feature_id AS endonuclease_spliced_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'archaeal_intron'::text) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text));


ALTER TABLE so.endonuclease_spliced_intron OWNER TO postgres;

--
-- Name: endosomal_localization_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW endosomal_localization_signal AS
    SELECT feature.feature_id AS endosomal_localization_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'endosomal_localization_signal'::text);


ALTER TABLE so.endosomal_localization_signal OWNER TO postgres;

--
-- Name: engineered; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW engineered AS
    SELECT feature.feature_id AS engineered_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'engineered'::text);


ALTER TABLE so.engineered OWNER TO postgres;

--
-- Name: engineered_episome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW engineered_episome AS
    SELECT feature.feature_id AS engineered_episome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'engineered_episome'::text);


ALTER TABLE so.engineered_episome OWNER TO postgres;

--
-- Name: engineered_foreign_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW engineered_foreign_gene AS
    SELECT feature.feature_id AS engineered_foreign_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text));


ALTER TABLE so.engineered_foreign_gene OWNER TO postgres;

--
-- Name: engineered_foreign_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW engineered_foreign_region AS
    SELECT feature.feature_id AS engineered_foreign_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_region'::text));


ALTER TABLE so.engineered_foreign_region OWNER TO postgres;

--
-- Name: engineered_foreign_repetitive_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW engineered_foreign_repetitive_element AS
    SELECT feature.feature_id AS engineered_foreign_repetitive_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text);


ALTER TABLE so.engineered_foreign_repetitive_element OWNER TO postgres;

--
-- Name: engineered_foreign_transposable_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW engineered_foreign_transposable_element AS
    SELECT feature.feature_id AS engineered_foreign_transposable_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text);


ALTER TABLE so.engineered_foreign_transposable_element OWNER TO postgres;

--
-- Name: engineered_foreign_transposable_element_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW engineered_foreign_transposable_element_gene AS
    SELECT feature.feature_id AS engineered_foreign_transposable_element_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text);


ALTER TABLE so.engineered_foreign_transposable_element_gene OWNER TO postgres;

--
-- Name: engineered_fusion_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW engineered_fusion_gene AS
    SELECT feature.feature_id AS engineered_fusion_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'engineered_fusion_gene'::text);


ALTER TABLE so.engineered_fusion_gene OWNER TO postgres;

--
-- Name: engineered_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW engineered_gene AS
    SELECT feature.feature_id AS engineered_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text));


ALTER TABLE so.engineered_gene OWNER TO postgres;

--
-- Name: engineered_insert; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW engineered_insert AS
    SELECT feature.feature_id AS engineered_insert_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'engineered_insert'::text);


ALTER TABLE so.engineered_insert OWNER TO postgres;

--
-- Name: engineered_plasmid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW engineered_plasmid AS
    SELECT feature.feature_id AS engineered_plasmid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text));


ALTER TABLE so.engineered_plasmid OWNER TO postgres;

--
-- Name: engineered_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW engineered_region AS
    SELECT feature.feature_id AS engineered_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((cvterm.name)::text = 'engineered_gene'::text) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_region'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_region'::text));


ALTER TABLE so.engineered_region OWNER TO postgres;

--
-- Name: engineered_rescue_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW engineered_rescue_region AS
    SELECT feature.feature_id AS engineered_rescue_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'engineered_rescue_region'::text);


ALTER TABLE so.engineered_rescue_region OWNER TO postgres;

--
-- Name: engineered_tag; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW engineered_tag AS
    SELECT feature.feature_id AS engineered_tag_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'engineered_tag'::text);


ALTER TABLE so.engineered_tag OWNER TO postgres;

--
-- Name: engineered_transposable_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW engineered_transposable_element AS
    SELECT feature.feature_id AS engineered_transposable_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_transposable_element'::text));


ALTER TABLE so.engineered_transposable_element OWNER TO postgres;

--
-- Name: enhancer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW enhancer AS
    SELECT feature.feature_id AS enhancer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'enhancer_bound_by_factor'::text) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'enhancer'::text));


ALTER TABLE so.enhancer OWNER TO postgres;

--
-- Name: enhancer_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW enhancer_binding_site AS
    SELECT feature.feature_id AS enhancer_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'enhancer_binding_site'::text);


ALTER TABLE so.enhancer_binding_site OWNER TO postgres;

--
-- Name: enhancer_bound_by_factor; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW enhancer_bound_by_factor AS
    SELECT feature.feature_id AS enhancer_bound_by_factor_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'enhancer_bound_by_factor'::text);


ALTER TABLE so.enhancer_bound_by_factor OWNER TO postgres;

--
-- Name: enhancer_trap_construct; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW enhancer_trap_construct AS
    SELECT feature.feature_id AS enhancer_trap_construct_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'enhancer_trap_construct'::text);


ALTER TABLE so.enhancer_trap_construct OWNER TO postgres;

--
-- Name: enzymatic; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW enzymatic AS
    SELECT feature.feature_id AS enzymatic_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'ribozymic'::text) OR ((cvterm.name)::text = 'enzymatic'::text));


ALTER TABLE so.enzymatic OWNER TO postgres;

--
-- Name: enzymatic_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW enzymatic_rna AS
    SELECT feature.feature_id AS enzymatic_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'ribozyme'::text) OR ((cvterm.name)::text = 'enzymatic_RNA'::text));


ALTER TABLE so.enzymatic_rna OWNER TO postgres;

--
-- Name: epigenetically_modified; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW epigenetically_modified AS
    SELECT feature.feature_id AS epigenetically_modified_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'imprinted'::text) OR ((cvterm.name)::text = 'allelically_excluded'::text)) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'epigenetically_modified'::text));


ALTER TABLE so.epigenetically_modified OWNER TO postgres;

--
-- Name: epigenetically_modified_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW epigenetically_modified_gene AS
    SELECT feature.feature_id AS epigenetically_modified_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text));


ALTER TABLE so.epigenetically_modified_gene OWNER TO postgres;

--
-- Name: epigenetically_modified_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW epigenetically_modified_region AS
    SELECT feature.feature_id AS epigenetically_modified_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'modified_base'::text) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'methylated_base_feature'::text)) OR ((cvterm.name)::text = 'methylated_C'::text)) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text));


ALTER TABLE so.epigenetically_modified_region OWNER TO postgres;

--
-- Name: episome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW episome AS
    SELECT feature.feature_id AS episome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'episome'::text));


ALTER TABLE so.episome OWNER TO postgres;

--
-- Name: epitope; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW epitope AS
    SELECT feature.feature_id AS epitope_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'epitope'::text);


ALTER TABLE so.epitope OWNER TO postgres;

--
-- Name: epoxyqueuosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW epoxyqueuosine AS
    SELECT feature.feature_id AS epoxyqueuosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'epoxyqueuosine'::text);


ALTER TABLE so.epoxyqueuosine OWNER TO postgres;

--
-- Name: est; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW est AS
    SELECT feature.feature_id AS est_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((cvterm.name)::text = 'five_prime_EST'::text) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'EST'::text));


ALTER TABLE so.est OWNER TO postgres;

--
-- Name: est_match; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW est_match AS
    SELECT feature.feature_id AS est_match_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'EST_match'::text);


ALTER TABLE so.est_match OWNER TO postgres;

--
-- Name: eukaryotic_terminator; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW eukaryotic_terminator AS
    SELECT feature.feature_id AS eukaryotic_terminator_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text));


ALTER TABLE so.eukaryotic_terminator OWNER TO postgres;

--
-- Name: exemplar; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW exemplar AS
    SELECT feature.feature_id AS exemplar_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'exemplar'::text);


ALTER TABLE so.exemplar OWNER TO postgres;

--
-- Name: exemplar_mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW exemplar_mrna AS
    SELECT feature.feature_id AS exemplar_mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'exemplar_mRNA'::text);


ALTER TABLE so.exemplar_mrna OWNER TO postgres;

--
-- Name: exon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW exon AS
    SELECT feature.feature_id AS exon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((cvterm.name)::text = 'coding_exon'::text) OR ((cvterm.name)::text = 'noncoding_exon'::text)) OR ((cvterm.name)::text = 'interior_exon'::text)) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text)) OR ((cvterm.name)::text = 'interior_coding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'exon'::text));


ALTER TABLE so.exon OWNER TO postgres;

--
-- Name: exon_junction; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW exon_junction AS
    SELECT feature.feature_id AS exon_junction_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'exon_junction'::text);


ALTER TABLE so.exon_junction OWNER TO postgres;

--
-- Name: exon_loss; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW exon_loss AS
    SELECT feature.feature_id AS exon_loss_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'exon_loss'::text);


ALTER TABLE so.exon_loss OWNER TO postgres;

--
-- Name: exon_of_single_exon_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW exon_of_single_exon_gene AS
    SELECT feature.feature_id AS exon_of_single_exon_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'exon_of_single_exon_gene'::text);


ALTER TABLE so.exon_of_single_exon_gene OWNER TO postgres;

--
-- Name: exon_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW exon_region AS
    SELECT feature.feature_id AS exon_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'noncoding_region_of_exon'::text) OR ((cvterm.name)::text = 'coding_region_of_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'exon_region'::text));


ALTER TABLE so.exon_region OWNER TO postgres;

--
-- Name: exon_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW exon_variant AS
    SELECT feature.feature_id AS exon_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((cvterm.name)::text = 'coding_sequence_variant'::text) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text)) OR ((cvterm.name)::text = 'codon_variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = 'exon_variant'::text));


ALTER TABLE so.exon_variant OWNER TO postgres;

--
-- Name: exonic_splice_enhancer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW exonic_splice_enhancer AS
    SELECT feature.feature_id AS exonic_splice_enhancer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'exonic_splice_enhancer'::text);


ALTER TABLE so.exonic_splice_enhancer OWNER TO postgres;

--
-- Name: experimental_feature; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW experimental_feature AS
    SELECT feature.feature_id AS experimental_feature_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'match_part'::text) OR ((cvterm.name)::text = 'assembly_component'::text)) OR ((cvterm.name)::text = 'conserved_region'::text)) OR ((cvterm.name)::text = 'match'::text)) OR ((cvterm.name)::text = 'remark'::text)) OR ((cvterm.name)::text = 'reading_frame'::text)) OR ((cvterm.name)::text = 'consensus_region'::text)) OR ((cvterm.name)::text = 'low_complexity_region'::text)) OR ((cvterm.name)::text = 'assembly'::text)) OR ((cvterm.name)::text = 'transcribed_fragment'::text)) OR ((cvterm.name)::text = 'transcribed_cluster'::text)) OR ((cvterm.name)::text = 'high_identity_region'::text)) OR ((cvterm.name)::text = 'mathematically_defined_repeat'::text)) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'read'::text)) OR ((cvterm.name)::text = 'restriction_fragment'::text)) OR ((cvterm.name)::text = 'golden_path_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_fragment'::text)) OR ((cvterm.name)::text = 'gap'::text)) OR ((cvterm.name)::text = 'sonicate_fragment'::text)) OR ((cvterm.name)::text = 'paired_end_fragment'::text)) OR ((cvterm.name)::text = 'read_pair'::text)) OR ((cvterm.name)::text = 'contig_read'::text)) OR ((cvterm.name)::text = 'BAC_end'::text)) OR ((cvterm.name)::text = 'dye_terminator_read'::text)) OR ((cvterm.name)::text = 'pyrosequenced_read'::text)) OR ((cvterm.name)::text = 'ligation_based_read'::text)) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text)) OR ((cvterm.name)::text = 'PAC_end'::text)) OR ((cvterm.name)::text = 'YAC_end'::text)) OR ((cvterm.name)::text = 'clone_end'::text)) OR ((cvterm.name)::text = 'RFLP_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'coding_conserved_region'::text)) OR ((cvterm.name)::text = 'nc_conserved_region'::text)) OR ((cvterm.name)::text = 'RR_tract'::text)) OR ((cvterm.name)::text = 'homologous_region'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text)) OR ((cvterm.name)::text = 'X_element'::text)) OR ((cvterm.name)::text = 'U_box'::text)) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text)) OR ((cvterm.name)::text = 'syntenic_region'::text)) OR ((cvterm.name)::text = 'paralogous_region'::text)) OR ((cvterm.name)::text = 'orthologous_region'::text)) OR ((cvterm.name)::text = 'nucleotide_match'::text)) OR ((cvterm.name)::text = 'protein_match'::text)) OR ((cvterm.name)::text = 'expressed_sequence_match'::text)) OR ((cvterm.name)::text = 'cross_genome_match'::text)) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text)) OR ((cvterm.name)::text = 'primer_match'::text)) OR ((cvterm.name)::text = 'EST_match'::text)) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'sequence_difference'::text)) OR ((cvterm.name)::text = 'experimental_result_region'::text)) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text)) OR ((cvterm.name)::text = 'possible_base_call_error'::text)) OR ((cvterm.name)::text = 'possible_assembly_error'::text)) OR ((cvterm.name)::text = 'assembly_error_correction'::text)) OR ((cvterm.name)::text = 'base_call_error_correction'::text)) OR ((cvterm.name)::text = 'overlapping_feature_set'::text)) OR ((cvterm.name)::text = 'no_output'::text)) OR ((cvterm.name)::text = 'overlapping_EST_set'::text)) OR ((cvterm.name)::text = 'non_adjacent_residues'::text)) OR ((cvterm.name)::text = 'non_terminal_residue'::text)) OR ((cvterm.name)::text = 'sequence_conflict'::text)) OR ((cvterm.name)::text = 'sequence_uncertainty'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'ORF'::text)) OR ((cvterm.name)::text = 'blocked_reading_frame'::text)) OR ((cvterm.name)::text = 'mini_gene'::text)) OR ((cvterm.name)::text = 'rescue_mini_gene'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'sequence_assembly'::text)) OR ((cvterm.name)::text = 'fragment_assembly'::text)) OR ((cvterm.name)::text = 'supercontig'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'tiling_path'::text)) OR ((cvterm.name)::text = 'virtual_sequence'::text)) OR ((cvterm.name)::text = 'golden_path'::text)) OR ((cvterm.name)::text = 'ultracontig'::text)) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text)) OR ((cvterm.name)::text = 'fingerprint_map'::text)) OR ((cvterm.name)::text = 'STS_map'::text)) OR ((cvterm.name)::text = 'RH_map'::text)) OR ((cvterm.name)::text = 'unigene_cluster'::text)) OR ((cvterm.name)::text = 'CHiP_seq_region'::text)) OR ((cvterm.name)::text = 'experimental_feature'::text));


ALTER TABLE so.experimental_feature OWNER TO postgres;

--
-- Name: experimental_feature_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW experimental_feature_attribute AS
    SELECT feature.feature_id AS experimental_feature_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'score'::text) OR ((cvterm.name)::text = 'quality_value'::text)) OR ((cvterm.name)::text = 'experimental_feature_attribute'::text));


ALTER TABLE so.experimental_feature_attribute OWNER TO postgres;

--
-- Name: experimental_result_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW experimental_result_region AS
    SELECT feature.feature_id AS experimental_result_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'overlapping_feature_set'::text) OR ((cvterm.name)::text = 'no_output'::text)) OR ((cvterm.name)::text = 'overlapping_EST_set'::text)) OR ((cvterm.name)::text = 'experimental_result_region'::text));


ALTER TABLE so.experimental_result_region OWNER TO postgres;

--
-- Name: experimentally_defined_binding_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW experimentally_defined_binding_region AS
    SELECT feature.feature_id AS experimentally_defined_binding_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'CHiP_seq_region'::text) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text));


ALTER TABLE so.experimentally_defined_binding_region OWNER TO postgres;

--
-- Name: experimentally_determined; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW experimentally_determined AS
    SELECT feature.feature_id AS experimentally_determined_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'experimentally_determined'::text);


ALTER TABLE so.experimentally_determined OWNER TO postgres;

--
-- Name: expressed_sequence_assembly; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW expressed_sequence_assembly AS
    SELECT feature.feature_id AS expressed_sequence_assembly_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'expressed_sequence_assembly'::text);


ALTER TABLE so.expressed_sequence_assembly OWNER TO postgres;

--
-- Name: expressed_sequence_match; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW expressed_sequence_match AS
    SELECT feature.feature_id AS expressed_sequence_match_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'EST_match'::text) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'expressed_sequence_match'::text));


ALTER TABLE so.expressed_sequence_match OWNER TO postgres;

--
-- Name: external_transcribed_spacer_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW external_transcribed_spacer_region AS
    SELECT feature.feature_id AS external_transcribed_spacer_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'external_transcribed_spacer_region'::text);


ALTER TABLE so.external_transcribed_spacer_region OWNER TO postgres;

--
-- Name: extrachromosomal_mobile_genetic_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW extrachromosomal_mobile_genetic_element AS
    SELECT feature.feature_id AS extrachromosomal_mobile_genetic_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((cvterm.name)::text = 'natural_transposable_element'::text) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text));


ALTER TABLE so.extrachromosomal_mobile_genetic_element OWNER TO postgres;

--
-- Name: extramembrane_polypeptide_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW extramembrane_polypeptide_region AS
    SELECT feature.feature_id AS extramembrane_polypeptide_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text));


ALTER TABLE so.extramembrane_polypeptide_region OWNER TO postgres;

--
-- Name: feature_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW feature_attribute AS
    SELECT feature.feature_id AS feature_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'transcript_attribute'::text) OR ((cvterm.name)::text = 'bound_by_factor'::text)) OR ((cvterm.name)::text = 'flanked'::text)) OR ((cvterm.name)::text = 'gene_attribute'::text)) OR ((cvterm.name)::text = 'retrotransposed'::text)) OR ((cvterm.name)::text = 'transgenic'::text)) OR ((cvterm.name)::text = 'natural'::text)) OR ((cvterm.name)::text = 'engineered'::text)) OR ((cvterm.name)::text = 'foreign'::text)) OR ((cvterm.name)::text = 'fusion'::text)) OR ((cvterm.name)::text = 'rescue'::text)) OR ((cvterm.name)::text = 'wild_type'::text)) OR ((cvterm.name)::text = 'conserved'::text)) OR ((cvterm.name)::text = 'status'::text)) OR ((cvterm.name)::text = 'intermediate'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged'::text)) OR ((cvterm.name)::text = 'cryptic'::text)) OR ((cvterm.name)::text = 'strand_attribute'::text)) OR ((cvterm.name)::text = 'direction_attribute'::text)) OR ((cvterm.name)::text = 'enzymatic'::text)) OR ((cvterm.name)::text = 'mobile'::text)) OR ((cvterm.name)::text = 'alteration_attribute'::text)) OR ((cvterm.name)::text = 'experimental_feature_attribute'::text)) OR ((cvterm.name)::text = 'edited'::text)) OR ((cvterm.name)::text = 'capped'::text)) OR ((cvterm.name)::text = 'mRNA_attribute'::text)) OR ((cvterm.name)::text = 'trans_spliced'::text)) OR ((cvterm.name)::text = 'alternatively_spliced'::text)) OR ((cvterm.name)::text = 'monocistronic'::text)) OR ((cvterm.name)::text = 'polycistronic'::text)) OR ((cvterm.name)::text = 'polyadenylated'::text)) OR ((cvterm.name)::text = 'exemplar'::text)) OR ((cvterm.name)::text = 'frameshift'::text)) OR ((cvterm.name)::text = 'recoded'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_framshift'::text)) OR ((cvterm.name)::text = 'codon_redefined'::text)) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'dicistronic'::text)) OR ((cvterm.name)::text = 'bound_by_protein'::text)) OR ((cvterm.name)::text = 'bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'floxed'::text)) OR ((cvterm.name)::text = 'FRT_flanked'::text)) OR ((cvterm.name)::text = 'protein_coding'::text)) OR ((cvterm.name)::text = 'non_protein_coding'::text)) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text)) OR ((cvterm.name)::text = 'gene_array_member'::text)) OR ((cvterm.name)::text = 'regulated'::text)) OR ((cvterm.name)::text = 'epigenetically_modified'::text)) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text)) OR ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text)) OR ((cvterm.name)::text = 'intein_containing'::text)) OR ((cvterm.name)::text = 'miRNA_encoding'::text)) OR ((cvterm.name)::text = 'rRNA_encoding'::text)) OR ((cvterm.name)::text = 'scRNA_encoding'::text)) OR ((cvterm.name)::text = 'snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'snRNA_encoding'::text)) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text)) OR ((cvterm.name)::text = 'stRNA_encoding'::text)) OR ((cvterm.name)::text = 'tmRNA_encoding'::text)) OR ((cvterm.name)::text = 'tRNA_encoding'::text)) OR ((cvterm.name)::text = 'gRNA_encoding'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'overlapping'::text)) OR ((cvterm.name)::text = 'inside_intron'::text)) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'antisense'::text)) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text)) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'operon_member'::text)) OR ((cvterm.name)::text = 'gene_cassette_member'::text)) OR ((cvterm.name)::text = 'gene_subarray_member'::text)) OR ((cvterm.name)::text = 'member_of_regulon'::text)) OR ((cvterm.name)::text = 'cassette_array_member'::text)) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated'::text)) OR ((cvterm.name)::text = 'translationally_regulated'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text)) OR ((cvterm.name)::text = 'transcriptionally_induced'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text)) OR ((cvterm.name)::text = 'autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'allelically_excluded'::text)) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'encodes_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text)) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'homologous'::text)) OR ((cvterm.name)::text = 'syntenic'::text)) OR ((cvterm.name)::text = 'orthologous'::text)) OR ((cvterm.name)::text = 'paralogous'::text)) OR ((cvterm.name)::text = 'fragmentary'::text)) OR ((cvterm.name)::text = 'predicted'::text)) OR ((cvterm.name)::text = 'validated'::text)) OR ((cvterm.name)::text = 'invalidated'::text)) OR ((cvterm.name)::text = 'independently_known'::text)) OR ((cvterm.name)::text = 'consensus'::text)) OR ((cvterm.name)::text = 'low_complexity'::text)) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text)) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text)) OR ((cvterm.name)::text = 'orphan'::text)) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text)) OR ((cvterm.name)::text = 'supported_by_domain_match'::text)) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text)) OR ((cvterm.name)::text = 'experimentally_determined'::text)) OR ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text)) OR ((cvterm.name)::text = 'standard_draft'::text)) OR ((cvterm.name)::text = 'high_quality_draft'::text)) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text)) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text)) OR ((cvterm.name)::text = 'noncontiguous_finished'::text)) OR ((cvterm.name)::text = 'finished_genome'::text)) OR ((cvterm.name)::text = 'single'::text)) OR ((cvterm.name)::text = 'double'::text)) OR ((cvterm.name)::text = 'forward'::text)) OR ((cvterm.name)::text = 'reverse'::text)) OR ((cvterm.name)::text = 'ribozymic'::text)) OR ((cvterm.name)::text = 'chromosomal_variation_attribute'::text)) OR ((cvterm.name)::text = 'insertion_attribute'::text)) OR ((cvterm.name)::text = 'inversion_attribute'::text)) OR ((cvterm.name)::text = 'translocaton_attribute'::text)) OR ((cvterm.name)::text = 'duplication_attribute'::text)) OR ((cvterm.name)::text = 'intrachromosomal'::text)) OR ((cvterm.name)::text = 'interchromosomal'::text)) OR ((cvterm.name)::text = 'tandem'::text)) OR ((cvterm.name)::text = 'direct'::text)) OR ((cvterm.name)::text = 'inverted'::text)) OR ((cvterm.name)::text = 'pericentric'::text)) OR ((cvterm.name)::text = 'paracentric'::text)) OR ((cvterm.name)::text = 'reciprocal'::text)) OR ((cvterm.name)::text = 'insertional'::text)) OR ((cvterm.name)::text = 'free'::text)) OR ((cvterm.name)::text = 'score'::text)) OR ((cvterm.name)::text = 'quality_value'::text)) OR ((cvterm.name)::text = 'feature_attribute'::text));


ALTER TABLE so.feature_attribute OWNER TO postgres;

--
-- Name: fingerprint_map; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW fingerprint_map AS
    SELECT feature.feature_id AS fingerprint_map_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'fingerprint_map'::text);


ALTER TABLE so.fingerprint_map OWNER TO postgres;

--
-- Name: finished_genome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW finished_genome AS
    SELECT feature.feature_id AS finished_genome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'finished_genome'::text);


ALTER TABLE so.finished_genome OWNER TO postgres;

--
-- Name: five_aminomethyl_two_thiouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_aminomethyl_two_thiouridine AS
    SELECT feature.feature_id AS five_aminomethyl_two_thiouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text);


ALTER TABLE so.five_aminomethyl_two_thiouridine OWNER TO postgres;

--
-- Name: five_carbamoylmethyluridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_carbamoylmethyluridine AS
    SELECT feature.feature_id AS five_carbamoylmethyluridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text);


ALTER TABLE so.five_carbamoylmethyluridine OWNER TO postgres;

--
-- Name: five_carboxyhydroxymethyl_uridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_carboxyhydroxymethyl_uridine AS
    SELECT feature.feature_id AS five_carboxyhydroxymethyl_uridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text);


ALTER TABLE so.five_carboxyhydroxymethyl_uridine OWNER TO postgres;

--
-- Name: five_carboxyhydroxymethyl_uridine_methyl_ester; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_carboxyhydroxymethyl_uridine_methyl_ester AS
    SELECT feature.feature_id AS five_carboxyhydroxymethyl_uridine_methyl_ester_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text);


ALTER TABLE so.five_carboxyhydroxymethyl_uridine_methyl_ester OWNER TO postgres;

--
-- Name: five_carboxymethylaminomethyl_two_prime_o_methyluridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_carboxymethylaminomethyl_two_prime_o_methyluridine AS
    SELECT feature.feature_id AS five_carboxymethylaminomethyl_two_prime_o_methyluridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text);


ALTER TABLE so.five_carboxymethylaminomethyl_two_prime_o_methyluridine OWNER TO postgres;

--
-- Name: five_carboxymethylaminomethyl_two_thiouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_carboxymethylaminomethyl_two_thiouridine AS
    SELECT feature.feature_id AS five_carboxymethylaminomethyl_two_thiouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text);


ALTER TABLE so.five_carboxymethylaminomethyl_two_thiouridine OWNER TO postgres;

--
-- Name: five_carboxymethylaminomethyluridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_carboxymethylaminomethyluridine AS
    SELECT feature.feature_id AS five_carboxymethylaminomethyluridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text);


ALTER TABLE so.five_carboxymethylaminomethyluridine OWNER TO postgres;

--
-- Name: five_carboxymethyluridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_carboxymethyluridine AS
    SELECT feature.feature_id AS five_carboxymethyluridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_carboxymethyluridine'::text);


ALTER TABLE so.five_carboxymethyluridine OWNER TO postgres;

--
-- Name: five_cm_2_prime_o_methu; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_cm_2_prime_o_methu AS
    SELECT feature.feature_id AS five_cm_2_prime_o_methu_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text);


ALTER TABLE so.five_cm_2_prime_o_methu OWNER TO postgres;

--
-- Name: five_formyl_two_prime_o_methylcytidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_formyl_two_prime_o_methylcytidine AS
    SELECT feature.feature_id AS five_formyl_two_prime_o_methylcytidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text);


ALTER TABLE so.five_formyl_two_prime_o_methylcytidine OWNER TO postgres;

--
-- Name: five_formylcytidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_formylcytidine AS
    SELECT feature.feature_id AS five_formylcytidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_formylcytidine'::text);


ALTER TABLE so.five_formylcytidine OWNER TO postgres;

--
-- Name: five_hydroxymethylcytidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_hydroxymethylcytidine AS
    SELECT feature.feature_id AS five_hydroxymethylcytidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text);


ALTER TABLE so.five_hydroxymethylcytidine OWNER TO postgres;

--
-- Name: five_hydroxyuridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_hydroxyuridine AS
    SELECT feature.feature_id AS five_hydroxyuridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_hydroxyuridine'::text);


ALTER TABLE so.five_hydroxyuridine OWNER TO postgres;

--
-- Name: five_isopentenylaminomethyl_two_prime_o_methyluridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_isopentenylaminomethyl_two_prime_o_methyluridine AS
    SELECT feature.feature_id AS five_isopentenylaminomethyl_two_prime_o_methyluridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text);


ALTER TABLE so.five_isopentenylaminomethyl_two_prime_o_methyluridine OWNER TO postgres;

--
-- Name: five_isopentenylaminomethyl_two_thiouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_isopentenylaminomethyl_two_thiouridine AS
    SELECT feature.feature_id AS five_isopentenylaminomethyl_two_thiouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text);


ALTER TABLE so.five_isopentenylaminomethyl_two_thiouridine OWNER TO postgres;

--
-- Name: five_isopentenylaminomethyl_uridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_isopentenylaminomethyl_uridine AS
    SELECT feature.feature_id AS five_isopentenylaminomethyl_uridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text);


ALTER TABLE so.five_isopentenylaminomethyl_uridine OWNER TO postgres;

--
-- Name: five_mam_2_thiouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_mam_2_thiouridine AS
    SELECT feature.feature_id AS five_mam_2_thiouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text);


ALTER TABLE so.five_mam_2_thiouridine OWNER TO postgres;

--
-- Name: five_mcm_2_thiouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_mcm_2_thiouridine AS
    SELECT feature.feature_id AS five_mcm_2_thiouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text);


ALTER TABLE so.five_mcm_2_thiouridine OWNER TO postgres;

--
-- Name: five_methoxycarbonylmethyl_two_prime_o_methyluridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_methoxycarbonylmethyl_two_prime_o_methyluridine AS
    SELECT feature.feature_id AS five_methoxycarbonylmethyl_two_prime_o_methyluridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text);


ALTER TABLE so.five_methoxycarbonylmethyl_two_prime_o_methyluridine OWNER TO postgres;

--
-- Name: five_methoxycarbonylmethyluridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_methoxycarbonylmethyluridine AS
    SELECT feature.feature_id AS five_methoxycarbonylmethyluridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text);


ALTER TABLE so.five_methoxycarbonylmethyluridine OWNER TO postgres;

--
-- Name: five_methoxyuridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_methoxyuridine AS
    SELECT feature.feature_id AS five_methoxyuridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_methoxyuridine'::text);


ALTER TABLE so.five_methoxyuridine OWNER TO postgres;

--
-- Name: five_methyl_2_thiouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_methyl_2_thiouridine AS
    SELECT feature.feature_id AS five_methyl_2_thiouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text);


ALTER TABLE so.five_methyl_2_thiouridine OWNER TO postgres;

--
-- Name: five_methylaminomethyl_two_selenouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_methylaminomethyl_two_selenouridine AS
    SELECT feature.feature_id AS five_methylaminomethyl_two_selenouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text);


ALTER TABLE so.five_methylaminomethyl_two_selenouridine OWNER TO postgres;

--
-- Name: five_methylaminomethyluridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_methylaminomethyluridine AS
    SELECT feature.feature_id AS five_methylaminomethyluridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_methylaminomethyluridine'::text);


ALTER TABLE so.five_methylaminomethyluridine OWNER TO postgres;

--
-- Name: five_methylcytidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_methylcytidine AS
    SELECT feature.feature_id AS five_methylcytidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_methylcytidine'::text);


ALTER TABLE so.five_methylcytidine OWNER TO postgres;

--
-- Name: five_methyldihydrouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_methyldihydrouridine AS
    SELECT feature.feature_id AS five_methyldihydrouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_methyldihydrouridine'::text);


ALTER TABLE so.five_methyldihydrouridine OWNER TO postgres;

--
-- Name: five_methyluridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_methyluridine AS
    SELECT feature.feature_id AS five_methyluridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_methyluridine'::text);


ALTER TABLE so.five_methyluridine OWNER TO postgres;

--
-- Name: five_prime_cis_splice_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_cis_splice_site AS
    SELECT feature.feature_id AS five_prime_cis_splice_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text));


ALTER TABLE so.five_prime_cis_splice_site OWNER TO postgres;

--
-- Name: five_prime_clip; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_clip AS
    SELECT feature.feature_id AS five_prime_clip_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_clip'::text);


ALTER TABLE so.five_prime_clip OWNER TO postgres;

--
-- Name: five_prime_coding_exon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_coding_exon AS
    SELECT feature.feature_id AS five_prime_coding_exon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_coding_exon'::text);


ALTER TABLE so.five_prime_coding_exon OWNER TO postgres;

--
-- Name: five_prime_coding_exon_coding_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_coding_exon_coding_region AS
    SELECT feature.feature_id AS five_prime_coding_exon_coding_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text);


ALTER TABLE so.five_prime_coding_exon_coding_region OWNER TO postgres;

--
-- Name: five_prime_coding_exon_noncoding_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_coding_exon_noncoding_region AS
    SELECT feature.feature_id AS five_prime_coding_exon_noncoding_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text);


ALTER TABLE so.five_prime_coding_exon_noncoding_region OWNER TO postgres;

--
-- Name: five_prime_d_heptamer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_d_heptamer AS
    SELECT feature.feature_id AS five_prime_d_heptamer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_D_heptamer'::text);


ALTER TABLE so.five_prime_d_heptamer OWNER TO postgres;

--
-- Name: five_prime_d_nonamer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_d_nonamer AS
    SELECT feature.feature_id AS five_prime_d_nonamer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_D_nonamer'::text);


ALTER TABLE so.five_prime_d_nonamer OWNER TO postgres;

--
-- Name: five_prime_d_recombination_signal_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_d_recombination_signal_sequence AS
    SELECT feature.feature_id AS five_prime_d_recombination_signal_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text);


ALTER TABLE so.five_prime_d_recombination_signal_sequence OWNER TO postgres;

--
-- Name: five_prime_d_spacer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_d_spacer AS
    SELECT feature.feature_id AS five_prime_d_spacer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_D_spacer'::text);


ALTER TABLE so.five_prime_d_spacer OWNER TO postgres;

--
-- Name: five_prime_est; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_est AS
    SELECT feature.feature_id AS five_prime_est_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_EST'::text);


ALTER TABLE so.five_prime_est OWNER TO postgres;

--
-- Name: five_prime_five_prime_overlap; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_five_prime_overlap AS
    SELECT feature.feature_id AS five_prime_five_prime_overlap_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text);


ALTER TABLE so.five_prime_five_prime_overlap OWNER TO postgres;

--
-- Name: five_prime_flanking_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_flanking_region AS
    SELECT feature.feature_id AS five_prime_flanking_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_flanking_region'::text);


ALTER TABLE so.five_prime_flanking_region OWNER TO postgres;

--
-- Name: five_prime_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_intron AS
    SELECT feature.feature_id AS five_prime_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_intron'::text);


ALTER TABLE so.five_prime_intron OWNER TO postgres;

--
-- Name: five_prime_ltr; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_ltr AS
    SELECT feature.feature_id AS five_prime_ltr_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_LTR'::text);


ALTER TABLE so.five_prime_ltr OWNER TO postgres;

--
-- Name: five_prime_ltr_component; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_ltr_component AS
    SELECT feature.feature_id AS five_prime_ltr_component_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text));


ALTER TABLE so.five_prime_ltr_component OWNER TO postgres;

--
-- Name: five_prime_noncoding_exon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_noncoding_exon AS
    SELECT feature.feature_id AS five_prime_noncoding_exon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_noncoding_exon'::text);


ALTER TABLE so.five_prime_noncoding_exon OWNER TO postgres;

--
-- Name: five_prime_open_reading_frame; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_open_reading_frame AS
    SELECT feature.feature_id AS five_prime_open_reading_frame_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_open_reading_frame'::text);


ALTER TABLE so.five_prime_open_reading_frame OWNER TO postgres;

--
-- Name: five_prime_recoding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_recoding_site AS
    SELECT feature.feature_id AS five_prime_recoding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_recoding_site'::text);


ALTER TABLE so.five_prime_recoding_site OWNER TO postgres;

--
-- Name: five_prime_restriction_enzyme_junction; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_restriction_enzyme_junction AS
    SELECT feature.feature_id AS five_prime_restriction_enzyme_junction_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text);


ALTER TABLE so.five_prime_restriction_enzyme_junction OWNER TO postgres;

--
-- Name: five_prime_rst; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_rst AS
    SELECT feature.feature_id AS five_prime_rst_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_RST'::text);


ALTER TABLE so.five_prime_rst OWNER TO postgres;

--
-- Name: five_prime_terminal_inverted_repeat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_terminal_inverted_repeat AS
    SELECT feature.feature_id AS five_prime_terminal_inverted_repeat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text);


ALTER TABLE so.five_prime_terminal_inverted_repeat OWNER TO postgres;

--
-- Name: five_prime_three_prime_overlap; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_three_prime_overlap AS
    SELECT feature.feature_id AS five_prime_three_prime_overlap_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text);


ALTER TABLE so.five_prime_three_prime_overlap OWNER TO postgres;

--
-- Name: five_prime_ust; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_ust AS
    SELECT feature.feature_id AS five_prime_ust_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_UST'::text);


ALTER TABLE so.five_prime_ust OWNER TO postgres;

--
-- Name: five_prime_utr; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_utr AS
    SELECT feature.feature_id AS five_prime_utr_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_UTR'::text);


ALTER TABLE so.five_prime_utr OWNER TO postgres;

--
-- Name: five_prime_utr_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_utr_intron AS
    SELECT feature.feature_id AS five_prime_utr_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_prime_UTR_intron'::text);


ALTER TABLE so.five_prime_utr_intron OWNER TO postgres;

--
-- Name: five_prime_utr_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_prime_utr_variant AS
    SELECT feature.feature_id AS five_prime_utr_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = '5_prime_UTR_variant'::text);


ALTER TABLE so.five_prime_utr_variant OWNER TO postgres;

--
-- Name: five_taurinomethyl_two_thiouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_taurinomethyl_two_thiouridine AS
    SELECT feature.feature_id AS five_taurinomethyl_two_thiouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text);


ALTER TABLE so.five_taurinomethyl_two_thiouridine OWNER TO postgres;

--
-- Name: five_taurinomethyluridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_taurinomethyluridine AS
    SELECT feature.feature_id AS five_taurinomethyluridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_taurinomethyluridine'::text);


ALTER TABLE so.five_taurinomethyluridine OWNER TO postgres;

--
-- Name: five_two_prime_o_dimethylcytidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_two_prime_o_dimethylcytidine AS
    SELECT feature.feature_id AS five_two_prime_o_dimethylcytidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text);


ALTER TABLE so.five_two_prime_o_dimethylcytidine OWNER TO postgres;

--
-- Name: five_two_prime_o_dimethyluridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW five_two_prime_o_dimethyluridine AS
    SELECT feature.feature_id AS five_two_prime_o_dimethyluridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text);


ALTER TABLE so.five_two_prime_o_dimethyluridine OWNER TO postgres;

--
-- Name: fivehundred_b_downstream_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW fivehundred_b_downstream_variant AS
    SELECT feature.feature_id AS fivehundred_b_downstream_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = '500B_downstream_variant'::text);


ALTER TABLE so.fivehundred_b_downstream_variant OWNER TO postgres;

--
-- Name: fivekb_downstream_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW fivekb_downstream_variant AS
    SELECT feature.feature_id AS fivekb_downstream_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = '500B_downstream_variant'::text) OR ((cvterm.name)::text = '5KB_downstream_variant'::text));


ALTER TABLE so.fivekb_downstream_variant OWNER TO postgres;

--
-- Name: fivekb_upstream_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW fivekb_upstream_variant AS
    SELECT feature.feature_id AS fivekb_upstream_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = '2KB_upstream_variant'::text) OR ((cvterm.name)::text = '5KB_upstream_variant'::text));


ALTER TABLE so.fivekb_upstream_variant OWNER TO postgres;

--
-- Name: fixed_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW fixed_variant AS
    SELECT feature.feature_id AS fixed_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'fixed_variant'::text);


ALTER TABLE so.fixed_variant OWNER TO postgres;

--
-- Name: flanked; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW flanked AS
    SELECT feature.feature_id AS flanked_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'floxed'::text) OR ((cvterm.name)::text = 'FRT_flanked'::text)) OR ((cvterm.name)::text = 'flanked'::text));


ALTER TABLE so.flanked OWNER TO postgres;

--
-- Name: flanking_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW flanking_region AS
    SELECT feature.feature_id AS flanking_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'transposable_element_flanking_region'::text) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'flanking_region'::text));


ALTER TABLE so.flanking_region OWNER TO postgres;

--
-- Name: flanking_three_prime_quadruplet_recoding_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW flanking_three_prime_quadruplet_recoding_signal AS
    SELECT feature.feature_id AS flanking_three_prime_quadruplet_recoding_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text);


ALTER TABLE so.flanking_three_prime_quadruplet_recoding_signal OWNER TO postgres;

--
-- Name: floxed; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW floxed AS
    SELECT feature.feature_id AS floxed_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'floxed'::text);


ALTER TABLE so.floxed OWNER TO postgres;

--
-- Name: floxed_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW floxed_gene AS
    SELECT feature.feature_id AS floxed_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'floxed_gene'::text);


ALTER TABLE so.floxed_gene OWNER TO postgres;

--
-- Name: foldback_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW foldback_element AS
    SELECT feature.feature_id AS foldback_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'foldback_element'::text);


ALTER TABLE so.foldback_element OWNER TO postgres;

--
-- Name: foreign_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW foreign_gene AS
    SELECT feature.feature_id AS foreign_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'foreign_gene'::text));


ALTER TABLE so.foreign_gene OWNER TO postgres;

--
-- Name: foreign_transposable_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW foreign_transposable_element AS
    SELECT feature.feature_id AS foreign_transposable_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'foreign_transposable_element'::text));


ALTER TABLE so.foreign_transposable_element OWNER TO postgres;

--
-- Name: forward; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW forward AS
    SELECT feature.feature_id AS forward_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'forward'::text);


ALTER TABLE so.forward OWNER TO postgres;

--
-- Name: forward_primer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW forward_primer AS
    SELECT feature.feature_id AS forward_primer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'forward_primer'::text);


ALTER TABLE so.forward_primer OWNER TO postgres;

--
-- Name: fosmid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW fosmid AS
    SELECT feature.feature_id AS fosmid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'fosmid'::text);


ALTER TABLE so.fosmid OWNER TO postgres;

--
-- Name: four_bp_start_codon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW four_bp_start_codon AS
    SELECT feature.feature_id AS four_bp_start_codon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'four_bp_start_codon'::text);


ALTER TABLE so.four_bp_start_codon OWNER TO postgres;

--
-- Name: four_demethylwyosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW four_demethylwyosine AS
    SELECT feature.feature_id AS four_demethylwyosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'four_demethylwyosine'::text);


ALTER TABLE so.four_demethylwyosine OWNER TO postgres;

--
-- Name: four_thiouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW four_thiouridine AS
    SELECT feature.feature_id AS four_thiouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'four_thiouridine'::text);


ALTER TABLE so.four_thiouridine OWNER TO postgres;

--
-- Name: fragment_assembly; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW fragment_assembly AS
    SELECT feature.feature_id AS fragment_assembly_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'fingerprint_map'::text) OR ((cvterm.name)::text = 'STS_map'::text)) OR ((cvterm.name)::text = 'RH_map'::text)) OR ((cvterm.name)::text = 'fragment_assembly'::text));


ALTER TABLE so.fragment_assembly OWNER TO postgres;

--
-- Name: fragmentary; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW fragmentary AS
    SELECT feature.feature_id AS fragmentary_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'fragmentary'::text);


ALTER TABLE so.fragmentary OWNER TO postgres;

--
-- Name: frame_restoring_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW frame_restoring_variant AS
    SELECT feature.feature_id AS frame_restoring_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'frame_restoring_variant'::text);


ALTER TABLE so.frame_restoring_variant OWNER TO postgres;

--
-- Name: frameshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW frameshift AS
    SELECT feature.feature_id AS frameshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'minus_1_frameshift'::text) OR ((cvterm.name)::text = 'minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_framshift'::text)) OR ((cvterm.name)::text = 'frameshift'::text));


ALTER TABLE so.frameshift OWNER TO postgres;

--
-- Name: frameshift_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW frameshift_variant AS
    SELECT feature.feature_id AS frameshift_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'frame_restoring_variant'::text) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text));


ALTER TABLE so.frameshift_variant OWNER TO postgres;

--
-- Name: free; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW free AS
    SELECT feature.feature_id AS free_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'free'::text);


ALTER TABLE so.free OWNER TO postgres;

--
-- Name: free_chromosome_arm; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW free_chromosome_arm AS
    SELECT feature.feature_id AS free_chromosome_arm_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'free_chromosome_arm'::text);


ALTER TABLE so.free_chromosome_arm OWNER TO postgres;

--
-- Name: free_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW free_duplication AS
    SELECT feature.feature_id AS free_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'free_ring_duplication'::text) OR ((cvterm.name)::text = 'free_duplication'::text));


ALTER TABLE so.free_duplication OWNER TO postgres;

--
-- Name: free_ring_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW free_ring_duplication AS
    SELECT feature.feature_id AS free_ring_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'free_ring_duplication'::text);


ALTER TABLE so.free_ring_duplication OWNER TO postgres;

--
-- Name: frt_flanked; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW frt_flanked AS
    SELECT feature.feature_id AS frt_flanked_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'FRT_flanked'::text);


ALTER TABLE so.frt_flanked OWNER TO postgres;

--
-- Name: frt_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW frt_site AS
    SELECT feature.feature_id AS frt_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'FRT_site'::text);


ALTER TABLE so.frt_site OWNER TO postgres;

--
-- Name: functional_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW functional_variant AS
    SELECT feature.feature_id AS functional_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((cvterm.name)::text = 'transcript_function_variant'::text) OR ((cvterm.name)::text = 'translational_product_function_variant'::text)) OR ((cvterm.name)::text = 'level_of_transcript_variant'::text)) OR ((cvterm.name)::text = 'transcript_processing_variant'::text)) OR ((cvterm.name)::text = 'transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'transcription_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'editing_variant'::text)) OR ((cvterm.name)::text = 'polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text)) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'translational_product_level_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text)) OR ((cvterm.name)::text = 'decreased_translational_product_level'::text)) OR ((cvterm.name)::text = 'increased_translational_product_level'::text)) OR ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text)) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text)) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text)) OR ((cvterm.name)::text = 'functional_variant'::text));


ALTER TABLE so.functional_variant OWNER TO postgres;

--
-- Name: fusion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW fusion AS
    SELECT feature.feature_id AS fusion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'fusion'::text);


ALTER TABLE so.fusion OWNER TO postgres;

--
-- Name: fusion_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW fusion_gene AS
    SELECT feature.feature_id AS fusion_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'fusion_gene'::text));


ALTER TABLE so.fusion_gene OWNER TO postgres;

--
-- Name: g_quartet; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW g_quartet AS
    SELECT feature.feature_id AS g_quartet_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'G_quartet'::text);


ALTER TABLE so.g_quartet OWNER TO postgres;

--
-- Name: g_to_a_transition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW g_to_a_transition AS
    SELECT feature.feature_id AS g_to_a_transition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'G_to_A_transition'::text);


ALTER TABLE so.g_to_a_transition OWNER TO postgres;

--
-- Name: g_to_c_transversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW g_to_c_transversion AS
    SELECT feature.feature_id AS g_to_c_transversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'G_to_C_transversion'::text);


ALTER TABLE so.g_to_c_transversion OWNER TO postgres;

--
-- Name: g_to_t_transversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW g_to_t_transversion AS
    SELECT feature.feature_id AS g_to_t_transversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'G_to_T_transversion'::text);


ALTER TABLE so.g_to_t_transversion OWNER TO postgres;

--
-- Name: gaga_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gaga_motif AS
    SELECT feature.feature_id AS gaga_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'GAGA_motif'::text);


ALTER TABLE so.gaga_motif OWNER TO postgres;

--
-- Name: galactosyl_queuosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW galactosyl_queuosine AS
    SELECT feature.feature_id AS galactosyl_queuosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'galactosyl_queuosine'::text);


ALTER TABLE so.galactosyl_queuosine OWNER TO postgres;

--
-- Name: gamma_turn; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gamma_turn AS
    SELECT feature.feature_id AS gamma_turn_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'gamma_turn_classic'::text) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text));


ALTER TABLE so.gamma_turn OWNER TO postgres;

--
-- Name: gamma_turn_classic; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gamma_turn_classic AS
    SELECT feature.feature_id AS gamma_turn_classic_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gamma_turn_classic'::text);


ALTER TABLE so.gamma_turn_classic OWNER TO postgres;

--
-- Name: gamma_turn_inverse; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gamma_turn_inverse AS
    SELECT feature.feature_id AS gamma_turn_inverse_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gamma_turn_inverse'::text);


ALTER TABLE so.gamma_turn_inverse OWNER TO postgres;

--
-- Name: gap; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gap AS
    SELECT feature.feature_id AS gap_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gap'::text);


ALTER TABLE so.gap OWNER TO postgres;

--
-- Name: gc_rich_promoter_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gc_rich_promoter_region AS
    SELECT feature.feature_id AS gc_rich_promoter_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'GC_rich_promoter_region'::text);


ALTER TABLE so.gc_rich_promoter_region OWNER TO postgres;

--
-- Name: gcvb_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gcvb_rna AS
    SELECT feature.feature_id AS gcvb_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'GcvB_RNA'::text);


ALTER TABLE so.gcvb_rna OWNER TO postgres;

--
-- Name: gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene AS
    SELECT feature.feature_id AS gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'nuclear_gene'::text) OR ((cvterm.name)::text = 'mt_gene'::text)) OR ((cvterm.name)::text = 'plastid_gene'::text)) OR ((cvterm.name)::text = 'nucleomorph_gene'::text)) OR ((cvterm.name)::text = 'plasmid_gene'::text)) OR ((cvterm.name)::text = 'proviral_gene'::text)) OR ((cvterm.name)::text = 'transposable_element_gene'::text)) OR ((cvterm.name)::text = 'silenced_gene'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'foreign_gene'::text)) OR ((cvterm.name)::text = 'fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text)) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'rescue_gene'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'transgene'::text)) OR ((cvterm.name)::text = 'predicted_gene'::text)) OR ((cvterm.name)::text = 'protein_coding_gene'::text)) OR ((cvterm.name)::text = 'retrogene'::text)) OR ((cvterm.name)::text = 'ncRNA_gene'::text)) OR ((cvterm.name)::text = 'cryptic_gene'::text)) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'gene_cassette'::text)) OR ((cvterm.name)::text = 'kinetoplast_gene'::text)) OR ((cvterm.name)::text = 'maxicircle_gene'::text)) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'apicoplast_gene'::text)) OR ((cvterm.name)::text = 'ct_gene'::text)) OR ((cvterm.name)::text = 'chromoplast_gene'::text)) OR ((cvterm.name)::text = 'cyanelle_gene'::text)) OR ((cvterm.name)::text = 'leucoplast_gene'::text)) OR ((cvterm.name)::text = 'proplastid_gene'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'floxed_gene'::text)) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gRNA_gene'::text)) OR ((cvterm.name)::text = 'miRNA_gene'::text)) OR ((cvterm.name)::text = 'scRNA_gene'::text)) OR ((cvterm.name)::text = 'snoRNA_gene'::text)) OR ((cvterm.name)::text = 'snRNA_gene'::text)) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'stRNA_gene'::text)) OR ((cvterm.name)::text = 'tmRNA_gene'::text)) OR ((cvterm.name)::text = 'tRNA_gene'::text)) OR ((cvterm.name)::text = 'rRNA_gene'::text)) OR ((cvterm.name)::text = 'piRNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'lincRNA_gene'::text)) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text)) OR ((cvterm.name)::text = 'gene'::text));


ALTER TABLE so.gene OWNER TO postgres;

--
-- Name: gene_array; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_array AS
    SELECT feature.feature_id AS gene_array_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_array'::text);


ALTER TABLE so.gene_array OWNER TO postgres;

--
-- Name: gene_array_member; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_array_member AS
    SELECT feature.feature_id AS gene_array_member_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'operon_member'::text) OR ((cvterm.name)::text = 'gene_cassette_member'::text)) OR ((cvterm.name)::text = 'gene_subarray_member'::text)) OR ((cvterm.name)::text = 'member_of_regulon'::text)) OR ((cvterm.name)::text = 'cassette_array_member'::text)) OR ((cvterm.name)::text = 'gene_array_member'::text));


ALTER TABLE so.gene_array_member OWNER TO postgres;

--
-- Name: gene_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_attribute AS
    SELECT feature.feature_id AS gene_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'protein_coding'::text) OR ((cvterm.name)::text = 'non_protein_coding'::text)) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text)) OR ((cvterm.name)::text = 'gene_array_member'::text)) OR ((cvterm.name)::text = 'regulated'::text)) OR ((cvterm.name)::text = 'epigenetically_modified'::text)) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text)) OR ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text)) OR ((cvterm.name)::text = 'intein_containing'::text)) OR ((cvterm.name)::text = 'miRNA_encoding'::text)) OR ((cvterm.name)::text = 'rRNA_encoding'::text)) OR ((cvterm.name)::text = 'scRNA_encoding'::text)) OR ((cvterm.name)::text = 'snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'snRNA_encoding'::text)) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text)) OR ((cvterm.name)::text = 'stRNA_encoding'::text)) OR ((cvterm.name)::text = 'tmRNA_encoding'::text)) OR ((cvterm.name)::text = 'tRNA_encoding'::text)) OR ((cvterm.name)::text = 'gRNA_encoding'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'overlapping'::text)) OR ((cvterm.name)::text = 'inside_intron'::text)) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'antisense'::text)) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text)) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'operon_member'::text)) OR ((cvterm.name)::text = 'gene_cassette_member'::text)) OR ((cvterm.name)::text = 'gene_subarray_member'::text)) OR ((cvterm.name)::text = 'member_of_regulon'::text)) OR ((cvterm.name)::text = 'cassette_array_member'::text)) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated'::text)) OR ((cvterm.name)::text = 'translationally_regulated'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text)) OR ((cvterm.name)::text = 'transcriptionally_induced'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text)) OR ((cvterm.name)::text = 'autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'allelically_excluded'::text)) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'encodes_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text)) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'gene_attribute'::text));


ALTER TABLE so.gene_attribute OWNER TO postgres;

--
-- Name: gene_cassette; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_cassette AS
    SELECT feature.feature_id AS gene_cassette_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_cassette'::text);


ALTER TABLE so.gene_cassette OWNER TO postgres;

--
-- Name: gene_cassette_array; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_cassette_array AS
    SELECT feature.feature_id AS gene_cassette_array_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_cassette_array'::text);


ALTER TABLE so.gene_cassette_array OWNER TO postgres;

--
-- Name: gene_cassette_member; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_cassette_member AS
    SELECT feature.feature_id AS gene_cassette_member_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'cassette_array_member'::text) OR ((cvterm.name)::text = 'gene_cassette_member'::text));


ALTER TABLE so.gene_cassette_member OWNER TO postgres;

--
-- Name: gene_component_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_component_region AS
    SELECT feature.feature_id AS gene_component_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'non_transcribed_region'::text) OR ((cvterm.name)::text = 'gene_fragment'::text)) OR ((cvterm.name)::text = 'TSS_region'::text)) OR ((cvterm.name)::text = 'gene_segment'::text)) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text)) OR ((cvterm.name)::text = 'gene_component_region'::text));


ALTER TABLE so.gene_component_region OWNER TO postgres;

--
-- Name: gene_fragment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_fragment AS
    SELECT feature.feature_id AS gene_fragment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_fragment'::text);


ALTER TABLE so.gene_fragment OWNER TO postgres;

--
-- Name: gene_fusion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_fusion AS
    SELECT feature.feature_id AS gene_fusion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_fusion'::text);


ALTER TABLE so.gene_fusion OWNER TO postgres;

--
-- Name: gene_group; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_group AS
    SELECT feature.feature_id AS gene_group_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'operon'::text) OR ((cvterm.name)::text = 'mating_type_region'::text)) OR ((cvterm.name)::text = 'gene_array'::text)) OR ((cvterm.name)::text = 'gene_subarray'::text)) OR ((cvterm.name)::text = 'gene_cassette_array'::text)) OR ((cvterm.name)::text = 'regulon'::text)) OR ((cvterm.name)::text = 'gene_group'::text));


ALTER TABLE so.gene_group OWNER TO postgres;

--
-- Name: gene_group_regulatory_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_group_regulatory_region AS
    SELECT feature.feature_id AS gene_group_regulatory_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'operator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text));


ALTER TABLE so.gene_group_regulatory_region OWNER TO postgres;

--
-- Name: gene_member_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_member_region AS
    SELECT feature.feature_id AS gene_member_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'transcript'::text) OR ((cvterm.name)::text = 'regulatory_region'::text)) OR ((cvterm.name)::text = 'polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text)) OR ((cvterm.name)::text = 'enzymatic_RNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text)) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text)) OR ((cvterm.name)::text = 'processed_transcript'::text)) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mRNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ribozyme'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text)) OR ((cvterm.name)::text = 'translation_regulatory_region'::text)) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text)) OR ((cvterm.name)::text = 'replication_regulatory_region'::text)) OR ((cvterm.name)::text = 'terminator'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'attenuator'::text)) OR ((cvterm.name)::text = 'gene_member_region'::text));


ALTER TABLE so.gene_member_region OWNER TO postgres;

--
-- Name: gene_rearranged_at_dna_level; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_rearranged_at_dna_level AS
    SELECT feature.feature_id AS gene_rearranged_at_dna_level_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text);


ALTER TABLE so.gene_rearranged_at_dna_level OWNER TO postgres;

--
-- Name: gene_segment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_segment AS
    SELECT feature.feature_id AS gene_segment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'pseudogenic_gene_segment'::text) OR ((cvterm.name)::text = 'gene_segment'::text));


ALTER TABLE so.gene_segment OWNER TO postgres;

--
-- Name: gene_silenced_by_dna_methylation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_silenced_by_dna_methylation AS
    SELECT feature.feature_id AS gene_silenced_by_dna_methylation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text);


ALTER TABLE so.gene_silenced_by_dna_methylation OWNER TO postgres;

--
-- Name: gene_silenced_by_dna_modification; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_silenced_by_dna_modification AS
    SELECT feature.feature_id AS gene_silenced_by_dna_modification_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text));


ALTER TABLE so.gene_silenced_by_dna_modification OWNER TO postgres;

--
-- Name: gene_silenced_by_histone_deacetylation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_silenced_by_histone_deacetylation AS
    SELECT feature.feature_id AS gene_silenced_by_histone_deacetylation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text);


ALTER TABLE so.gene_silenced_by_histone_deacetylation OWNER TO postgres;

--
-- Name: gene_silenced_by_histone_methylation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_silenced_by_histone_methylation AS
    SELECT feature.feature_id AS gene_silenced_by_histone_methylation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text);


ALTER TABLE so.gene_silenced_by_histone_methylation OWNER TO postgres;

--
-- Name: gene_silenced_by_histone_modification; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_silenced_by_histone_modification AS
    SELECT feature.feature_id AS gene_silenced_by_histone_modification_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text));


ALTER TABLE so.gene_silenced_by_histone_modification OWNER TO postgres;

--
-- Name: gene_silenced_by_rna_interference; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_silenced_by_rna_interference AS
    SELECT feature.feature_id AS gene_silenced_by_rna_interference_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text);


ALTER TABLE so.gene_silenced_by_rna_interference OWNER TO postgres;

--
-- Name: gene_subarray; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_subarray AS
    SELECT feature.feature_id AS gene_subarray_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_subarray'::text);


ALTER TABLE so.gene_subarray OWNER TO postgres;

--
-- Name: gene_subarray_member; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_subarray_member AS
    SELECT feature.feature_id AS gene_subarray_member_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_subarray_member'::text);


ALTER TABLE so.gene_subarray_member OWNER TO postgres;

--
-- Name: gene_to_gene_feature; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_to_gene_feature AS
    SELECT feature.feature_id AS gene_to_gene_feature_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((cvterm.name)::text = 'overlapping'::text) OR ((cvterm.name)::text = 'inside_intron'::text)) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'antisense'::text)) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text)) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text));


ALTER TABLE so.gene_to_gene_feature OWNER TO postgres;

--
-- Name: gene_trap_construct; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_trap_construct AS
    SELECT feature.feature_id AS gene_trap_construct_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_trap_construct'::text);


ALTER TABLE so.gene_trap_construct OWNER TO postgres;

--
-- Name: gene_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_variant AS
    SELECT feature.feature_id AS gene_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'gene_fusion'::text) OR ((cvterm.name)::text = 'splicing_variant'::text)) OR ((cvterm.name)::text = 'transcript_variant'::text)) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text)) OR ((cvterm.name)::text = 'exon_loss'::text)) OR ((cvterm.name)::text = 'intron_gain'::text)) OR ((cvterm.name)::text = 'splice_region_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text)) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text)) OR ((cvterm.name)::text = 'complex_change_in_transcript'::text)) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'nc_transcript_variant'::text)) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text)) OR ((cvterm.name)::text = 'UTR_variant'::text)) OR ((cvterm.name)::text = 'intron_variant'::text)) OR ((cvterm.name)::text = 'exon_variant'::text)) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text)) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text)) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text)) OR ((cvterm.name)::text = 'splice_site_variant'::text)) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'coding_sequence_variant'::text)) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text)) OR ((cvterm.name)::text = 'codon_variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text)) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text)) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text)) OR ((cvterm.name)::text = 'conformational_change_variant'::text)) OR ((cvterm.name)::text = 'amino_acid_deletion'::text)) OR ((cvterm.name)::text = 'amino_acid_insertion'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text)) OR ((cvterm.name)::text = 'polypeptide_fusion'::text)) OR ((cvterm.name)::text = 'polypeptide_truncation'::text)) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'gene_variant'::text));


ALTER TABLE so.gene_variant OWNER TO postgres;

--
-- Name: gene_with_dicistronic_mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_dicistronic_mrna AS
    SELECT feature.feature_id AS gene_with_dicistronic_mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text);


ALTER TABLE so.gene_with_dicistronic_mrna OWNER TO postgres;

--
-- Name: gene_with_dicistronic_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_dicistronic_primary_transcript AS
    SELECT feature.feature_id AS gene_with_dicistronic_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text);


ALTER TABLE so.gene_with_dicistronic_primary_transcript OWNER TO postgres;

--
-- Name: gene_with_dicistronic_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_dicistronic_transcript AS
    SELECT feature.feature_id AS gene_with_dicistronic_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text));


ALTER TABLE so.gene_with_dicistronic_transcript OWNER TO postgres;

--
-- Name: gene_with_edited_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_edited_transcript AS
    SELECT feature.feature_id AS gene_with_edited_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_with_edited_transcript'::text);


ALTER TABLE so.gene_with_edited_transcript OWNER TO postgres;

--
-- Name: gene_with_mrna_recoded_by_translational_bypass; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_mrna_recoded_by_translational_bypass AS
    SELECT feature.feature_id AS gene_with_mrna_recoded_by_translational_bypass_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text);


ALTER TABLE so.gene_with_mrna_recoded_by_translational_bypass OWNER TO postgres;

--
-- Name: gene_with_mrna_with_frameshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_mrna_with_frameshift AS
    SELECT feature.feature_id AS gene_with_mrna_with_frameshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text);


ALTER TABLE so.gene_with_mrna_with_frameshift OWNER TO postgres;

--
-- Name: gene_with_non_canonical_start_codon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_non_canonical_start_codon AS
    SELECT feature.feature_id AS gene_with_non_canonical_start_codon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'gene_with_start_codon_CUG'::text) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text));


ALTER TABLE so.gene_with_non_canonical_start_codon OWNER TO postgres;

--
-- Name: gene_with_polyadenylated_mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_polyadenylated_mrna AS
    SELECT feature.feature_id AS gene_with_polyadenylated_mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text);


ALTER TABLE so.gene_with_polyadenylated_mrna OWNER TO postgres;

--
-- Name: gene_with_polycistronic_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_polycistronic_transcript AS
    SELECT feature.feature_id AS gene_with_polycistronic_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text));


ALTER TABLE so.gene_with_polycistronic_transcript OWNER TO postgres;

--
-- Name: gene_with_recoded_mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_recoded_mrna AS
    SELECT feature.feature_id AS gene_with_recoded_mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text));


ALTER TABLE so.gene_with_recoded_mrna OWNER TO postgres;

--
-- Name: gene_with_start_codon_cug; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_start_codon_cug AS
    SELECT feature.feature_id AS gene_with_start_codon_cug_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text);


ALTER TABLE so.gene_with_start_codon_cug OWNER TO postgres;

--
-- Name: gene_with_stop_codon_read_through; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_stop_codon_read_through AS
    SELECT feature.feature_id AS gene_with_stop_codon_read_through_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text));


ALTER TABLE so.gene_with_stop_codon_read_through OWNER TO postgres;

--
-- Name: gene_with_stop_codon_redefined_as_pyrrolysine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_stop_codon_redefined_as_pyrrolysine AS
    SELECT feature.feature_id AS gene_with_stop_codon_redefined_as_pyrrolysine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text);


ALTER TABLE so.gene_with_stop_codon_redefined_as_pyrrolysine OWNER TO postgres;

--
-- Name: gene_with_stop_codon_redefined_as_selenocysteine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_stop_codon_redefined_as_selenocysteine AS
    SELECT feature.feature_id AS gene_with_stop_codon_redefined_as_selenocysteine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text);


ALTER TABLE so.gene_with_stop_codon_redefined_as_selenocysteine OWNER TO postgres;

--
-- Name: gene_with_trans_spliced_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_trans_spliced_transcript AS
    SELECT feature.feature_id AS gene_with_trans_spliced_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text);


ALTER TABLE so.gene_with_trans_spliced_transcript OWNER TO postgres;

--
-- Name: gene_with_transcript_with_translational_frameshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gene_with_transcript_with_translational_frameshift AS
    SELECT feature.feature_id AS gene_with_transcript_with_translational_frameshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text);


ALTER TABLE so.gene_with_transcript_with_translational_frameshift OWNER TO postgres;

--
-- Name: genetic_marker; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW genetic_marker AS
    SELECT feature.feature_id AS genetic_marker_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'heritable_phenotypic_marker'::text) OR ((cvterm.name)::text = 'DArT_marker'::text)) OR ((cvterm.name)::text = 'genetic_marker'::text));


ALTER TABLE so.genetic_marker OWNER TO postgres;

--
-- Name: genome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW genome AS
    SELECT feature.feature_id AS genome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'kinetoplast'::text) OR ((cvterm.name)::text = 'reference_genome'::text)) OR ((cvterm.name)::text = 'variant_genome'::text)) OR ((cvterm.name)::text = 'chromosomally_aberrant_genome'::text)) OR ((cvterm.name)::text = 'genome'::text));


ALTER TABLE so.genome OWNER TO postgres;

--
-- Name: genomic_clone; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW genomic_clone AS
    SELECT feature.feature_id AS genomic_clone_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'genomic_clone'::text);


ALTER TABLE so.genomic_clone OWNER TO postgres;

--
-- Name: genomic_dna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW genomic_dna AS
    SELECT feature.feature_id AS genomic_dna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'genomic_DNA'::text);


ALTER TABLE so.genomic_dna OWNER TO postgres;

--
-- Name: genomic_island; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW genomic_island AS
    SELECT feature.feature_id AS genomic_island_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'pathogenic_island'::text) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'genomic_island'::text));


ALTER TABLE so.genomic_island OWNER TO postgres;

--
-- Name: genomically_contaminated_cdna_clone; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW genomically_contaminated_cdna_clone AS
    SELECT feature.feature_id AS genomically_contaminated_cdna_clone_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text);


ALTER TABLE so.genomically_contaminated_cdna_clone OWNER TO postgres;

--
-- Name: germline_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW germline_variant AS
    SELECT feature.feature_id AS germline_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'germline_variant'::text);


ALTER TABLE so.germline_variant OWNER TO postgres;

--
-- Name: glutamic_acid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW glutamic_acid AS
    SELECT feature.feature_id AS glutamic_acid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'glutamic_acid'::text);


ALTER TABLE so.glutamic_acid OWNER TO postgres;

--
-- Name: glutamic_acid_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW glutamic_acid_trna_primary_transcript AS
    SELECT feature.feature_id AS glutamic_acid_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text);


ALTER TABLE so.glutamic_acid_trna_primary_transcript OWNER TO postgres;

--
-- Name: glutamine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW glutamine AS
    SELECT feature.feature_id AS glutamine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'glutamine'::text);


ALTER TABLE so.glutamine OWNER TO postgres;

--
-- Name: glutamine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW glutamine_trna_primary_transcript AS
    SELECT feature.feature_id AS glutamine_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text);


ALTER TABLE so.glutamine_trna_primary_transcript OWNER TO postgres;

--
-- Name: glutaminyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW glutaminyl_trna AS
    SELECT feature.feature_id AS glutaminyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'glutaminyl_tRNA'::text);


ALTER TABLE so.glutaminyl_trna OWNER TO postgres;

--
-- Name: glutamyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW glutamyl_trna AS
    SELECT feature.feature_id AS glutamyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'glutamyl_tRNA'::text);


ALTER TABLE so.glutamyl_trna OWNER TO postgres;

--
-- Name: glycine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW glycine AS
    SELECT feature.feature_id AS glycine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'glycine'::text);


ALTER TABLE so.glycine OWNER TO postgres;

--
-- Name: glycine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW glycine_trna_primary_transcript AS
    SELECT feature.feature_id AS glycine_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text);


ALTER TABLE so.glycine_trna_primary_transcript OWNER TO postgres;

--
-- Name: glycyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW glycyl_trna AS
    SELECT feature.feature_id AS glycyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'glycyl_tRNA'::text);


ALTER TABLE so.glycyl_trna OWNER TO postgres;

--
-- Name: gna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gna AS
    SELECT feature.feature_id AS gna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'R_GNA'::text) OR ((cvterm.name)::text = 'S_GNA'::text)) OR ((cvterm.name)::text = 'GNA'::text));


ALTER TABLE so.gna OWNER TO postgres;

--
-- Name: gna_oligo; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW gna_oligo AS
    SELECT feature.feature_id AS gna_oligo_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'R_GNA_oligo'::text) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text));


ALTER TABLE so.gna_oligo OWNER TO postgres;

--
-- Name: golden_path; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW golden_path AS
    SELECT feature.feature_id AS golden_path_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'golden_path'::text);


ALTER TABLE so.golden_path OWNER TO postgres;

--
-- Name: golden_path_fragment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW golden_path_fragment AS
    SELECT feature.feature_id AS golden_path_fragment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'golden_path_fragment'::text);


ALTER TABLE so.golden_path_fragment OWNER TO postgres;

--
-- Name: grna_encoding; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW grna_encoding AS
    SELECT feature.feature_id AS grna_encoding_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gRNA_encoding'::text);


ALTER TABLE so.grna_encoding OWNER TO postgres;

--
-- Name: grna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW grna_gene AS
    SELECT feature.feature_id AS grna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'gRNA_gene'::text);


ALTER TABLE so.grna_gene OWNER TO postgres;

--
-- Name: group_1_intron_homing_endonuclease_target_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW group_1_intron_homing_endonuclease_target_region AS
    SELECT feature.feature_id AS group_1_intron_homing_endonuclease_target_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text);


ALTER TABLE so.group_1_intron_homing_endonuclease_target_region OWNER TO postgres;

--
-- Name: group_i_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW group_i_intron AS
    SELECT feature.feature_id AS group_i_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'group_I_intron'::text);


ALTER TABLE so.group_i_intron OWNER TO postgres;

--
-- Name: group_ii_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW group_ii_intron AS
    SELECT feature.feature_id AS group_ii_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'group_IIA_intron'::text) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text));


ALTER TABLE so.group_ii_intron OWNER TO postgres;

--
-- Name: group_iia_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW group_iia_intron AS
    SELECT feature.feature_id AS group_iia_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'group_IIA_intron'::text);


ALTER TABLE so.group_iia_intron OWNER TO postgres;

--
-- Name: group_iib_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW group_iib_intron AS
    SELECT feature.feature_id AS group_iib_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'group_IIB_intron'::text);


ALTER TABLE so.group_iib_intron OWNER TO postgres;

--
-- Name: group_iii_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW group_iii_intron AS
    SELECT feature.feature_id AS group_iii_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'group_III_intron'::text);


ALTER TABLE so.group_iii_intron OWNER TO postgres;

--
-- Name: guide_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW guide_rna AS
    SELECT feature.feature_id AS guide_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'guide_RNA'::text);


ALTER TABLE so.guide_rna OWNER TO postgres;

--
-- Name: guide_rna_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW guide_rna_region AS
    SELECT feature.feature_id AS guide_rna_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'anchor_region'::text) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text));


ALTER TABLE so.guide_rna_region OWNER TO postgres;

--
-- Name: h2b_ubiquitination_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h2b_ubiquitination_site AS
    SELECT feature.feature_id AS h2b_ubiquitination_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H2B_ubiquitination_site'::text);


ALTER TABLE so.h2b_ubiquitination_site OWNER TO postgres;

--
-- Name: h2bk5_monomethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h2bk5_monomethylation_site AS
    SELECT feature.feature_id AS h2bk5_monomethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text);


ALTER TABLE so.h2bk5_monomethylation_site OWNER TO postgres;

--
-- Name: h3k14_acetylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k14_acetylation_site AS
    SELECT feature.feature_id AS h3k14_acetylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K14_acetylation_site'::text);


ALTER TABLE so.h3k14_acetylation_site OWNER TO postgres;

--
-- Name: h3k18_acetylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k18_acetylation_site AS
    SELECT feature.feature_id AS h3k18_acetylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K18_acetylation_site'::text);


ALTER TABLE so.h3k18_acetylation_site OWNER TO postgres;

--
-- Name: h3k23_acylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k23_acylation_site AS
    SELECT feature.feature_id AS h3k23_acylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K23_acylation site'::text);


ALTER TABLE so.h3k23_acylation_site OWNER TO postgres;

--
-- Name: h3k27_acylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k27_acylation_site AS
    SELECT feature.feature_id AS h3k27_acylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K27_acylation_site'::text);


ALTER TABLE so.h3k27_acylation_site OWNER TO postgres;

--
-- Name: h3k27_dimethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k27_dimethylation_site AS
    SELECT feature.feature_id AS h3k27_dimethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K27_dimethylation_site'::text);


ALTER TABLE so.h3k27_dimethylation_site OWNER TO postgres;

--
-- Name: h3k27_methylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k27_methylation_site AS
    SELECT feature.feature_id AS h3k27_methylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text));


ALTER TABLE so.h3k27_methylation_site OWNER TO postgres;

--
-- Name: h3k27_monomethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k27_monomethylation_site AS
    SELECT feature.feature_id AS h3k27_monomethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K27_monomethylation_site'::text);


ALTER TABLE so.h3k27_monomethylation_site OWNER TO postgres;

--
-- Name: h3k27_trimethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k27_trimethylation_site AS
    SELECT feature.feature_id AS h3k27_trimethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K27_trimethylation_site'::text);


ALTER TABLE so.h3k27_trimethylation_site OWNER TO postgres;

--
-- Name: h3k36_dimethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k36_dimethylation_site AS
    SELECT feature.feature_id AS h3k36_dimethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K36_dimethylation_site'::text);


ALTER TABLE so.h3k36_dimethylation_site OWNER TO postgres;

--
-- Name: h3k36_methylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k36_methylation_site AS
    SELECT feature.feature_id AS h3k36_methylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text));


ALTER TABLE so.h3k36_methylation_site OWNER TO postgres;

--
-- Name: h3k36_monomethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k36_monomethylation_site AS
    SELECT feature.feature_id AS h3k36_monomethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K36_monomethylation_site'::text);


ALTER TABLE so.h3k36_monomethylation_site OWNER TO postgres;

--
-- Name: h3k36_trimethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k36_trimethylation_site AS
    SELECT feature.feature_id AS h3k36_trimethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K36_trimethylation_site'::text);


ALTER TABLE so.h3k36_trimethylation_site OWNER TO postgres;

--
-- Name: h3k4_dimethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k4_dimethylation_site AS
    SELECT feature.feature_id AS h3k4_dimethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K4_dimethylation_site'::text);


ALTER TABLE so.h3k4_dimethylation_site OWNER TO postgres;

--
-- Name: h3k4_methylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k4_methylation_site AS
    SELECT feature.feature_id AS h3k4_methylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text));


ALTER TABLE so.h3k4_methylation_site OWNER TO postgres;

--
-- Name: h3k4_monomethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k4_monomethylation_site AS
    SELECT feature.feature_id AS h3k4_monomethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K4_monomethylation_site'::text);


ALTER TABLE so.h3k4_monomethylation_site OWNER TO postgres;

--
-- Name: h3k4_trimethylation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k4_trimethylation AS
    SELECT feature.feature_id AS h3k4_trimethylation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K4_trimethylation'::text);


ALTER TABLE so.h3k4_trimethylation OWNER TO postgres;

--
-- Name: h3k79_dimethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k79_dimethylation_site AS
    SELECT feature.feature_id AS h3k79_dimethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K79_dimethylation_site'::text);


ALTER TABLE so.h3k79_dimethylation_site OWNER TO postgres;

--
-- Name: h3k79_methylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k79_methylation_site AS
    SELECT feature.feature_id AS h3k79_methylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text));


ALTER TABLE so.h3k79_methylation_site OWNER TO postgres;

--
-- Name: h3k79_monomethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k79_monomethylation_site AS
    SELECT feature.feature_id AS h3k79_monomethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K79_monomethylation_site'::text);


ALTER TABLE so.h3k79_monomethylation_site OWNER TO postgres;

--
-- Name: h3k79_trimethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k79_trimethylation_site AS
    SELECT feature.feature_id AS h3k79_trimethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K79_trimethylation_site'::text);


ALTER TABLE so.h3k79_trimethylation_site OWNER TO postgres;

--
-- Name: h3k9_acetylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k9_acetylation_site AS
    SELECT feature.feature_id AS h3k9_acetylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K9_acetylation_site'::text);


ALTER TABLE so.h3k9_acetylation_site OWNER TO postgres;

--
-- Name: h3k9_dimethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k9_dimethylation_site AS
    SELECT feature.feature_id AS h3k9_dimethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K9_dimethylation_site'::text);


ALTER TABLE so.h3k9_dimethylation_site OWNER TO postgres;

--
-- Name: h3k9_methylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k9_methylation_site AS
    SELECT feature.feature_id AS h3k9_methylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text));


ALTER TABLE so.h3k9_methylation_site OWNER TO postgres;

--
-- Name: h3k9_monomethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k9_monomethylation_site AS
    SELECT feature.feature_id AS h3k9_monomethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K9_monomethylation_site'::text);


ALTER TABLE so.h3k9_monomethylation_site OWNER TO postgres;

--
-- Name: h3k9_trimethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h3k9_trimethylation_site AS
    SELECT feature.feature_id AS h3k9_trimethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H3K9_trimethylation_site'::text);


ALTER TABLE so.h3k9_trimethylation_site OWNER TO postgres;

--
-- Name: h4k16_acylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h4k16_acylation_site AS
    SELECT feature.feature_id AS h4k16_acylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H4K16_acylation_site'::text);


ALTER TABLE so.h4k16_acylation_site OWNER TO postgres;

--
-- Name: h4k20_monomethylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h4k20_monomethylation_site AS
    SELECT feature.feature_id AS h4k20_monomethylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H4K20_monomethylation_site'::text);


ALTER TABLE so.h4k20_monomethylation_site OWNER TO postgres;

--
-- Name: h4k5_acylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h4k5_acylation_site AS
    SELECT feature.feature_id AS h4k5_acylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H4K5_acylation_site'::text);


ALTER TABLE so.h4k5_acylation_site OWNER TO postgres;

--
-- Name: h4k8_acylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h4k8_acylation_site AS
    SELECT feature.feature_id AS h4k8_acylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H4K8_acylation site'::text);


ALTER TABLE so.h4k8_acylation_site OWNER TO postgres;

--
-- Name: h4k_acylation_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h4k_acylation_region AS
    SELECT feature.feature_id AS h4k_acylation_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H4K_acylation_region'::text);


ALTER TABLE so.h4k_acylation_region OWNER TO postgres;

--
-- Name: h_aca_box_snorna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h_aca_box_snorna AS
    SELECT feature.feature_id AS h_aca_box_snorna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text));


ALTER TABLE so.h_aca_box_snorna OWNER TO postgres;

--
-- Name: h_aca_box_snorna_encoding; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h_aca_box_snorna_encoding AS
    SELECT feature.feature_id AS h_aca_box_snorna_encoding_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text);


ALTER TABLE so.h_aca_box_snorna_encoding OWNER TO postgres;

--
-- Name: h_aca_box_snorna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h_aca_box_snorna_primary_transcript AS
    SELECT feature.feature_id AS h_aca_box_snorna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text);


ALTER TABLE so.h_aca_box_snorna_primary_transcript OWNER TO postgres;

--
-- Name: h_pseudoknot; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW h_pseudoknot AS
    SELECT feature.feature_id AS h_pseudoknot_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'H_pseudoknot'::text);


ALTER TABLE so.h_pseudoknot OWNER TO postgres;

--
-- Name: hammerhead_ribozyme; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW hammerhead_ribozyme AS
    SELECT feature.feature_id AS hammerhead_ribozyme_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'hammerhead_ribozyme'::text);


ALTER TABLE so.hammerhead_ribozyme OWNER TO postgres;

--
-- Name: haplotype; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW haplotype AS
    SELECT feature.feature_id AS haplotype_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'haplotype'::text);


ALTER TABLE so.haplotype OWNER TO postgres;

--
-- Name: haplotype_block; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW haplotype_block AS
    SELECT feature.feature_id AS haplotype_block_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'haplotype_block'::text);


ALTER TABLE so.haplotype_block OWNER TO postgres;

--
-- Name: helitron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW helitron AS
    SELECT feature.feature_id AS helitron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'helitron'::text);


ALTER TABLE so.helitron OWNER TO postgres;

--
-- Name: helix_turn_helix; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW helix_turn_helix AS
    SELECT feature.feature_id AS helix_turn_helix_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'helix_turn_helix'::text);


ALTER TABLE so.helix_turn_helix OWNER TO postgres;

--
-- Name: heptamer_of_recombination_feature_of_vertebrate_im_sys_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW heptamer_of_recombination_feature_of_vertebrate_im_sys_gene AS
    SELECT feature.feature_id AS heptamer_of_recombination_feature_of_vertebrate_im_sys_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'three_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text));


ALTER TABLE so.heptamer_of_recombination_feature_of_vertebrate_im_sys_gene OWNER TO postgres;

--
-- Name: heritable_phenotypic_marker; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW heritable_phenotypic_marker AS
    SELECT feature.feature_id AS heritable_phenotypic_marker_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'heritable_phenotypic_marker'::text);


ALTER TABLE so.heritable_phenotypic_marker OWNER TO postgres;

--
-- Name: hetero_compound_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW hetero_compound_chromosome AS
    SELECT feature.feature_id AS hetero_compound_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'hetero_compound_chromosome'::text);


ALTER TABLE so.hetero_compound_chromosome OWNER TO postgres;

--
-- Name: high_identity_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW high_identity_region AS
    SELECT feature.feature_id AS high_identity_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'high_identity_region'::text);


ALTER TABLE so.high_identity_region OWNER TO postgres;

--
-- Name: high_quality_draft; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW high_quality_draft AS
    SELECT feature.feature_id AS high_quality_draft_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'high_quality_draft'::text);


ALTER TABLE so.high_quality_draft OWNER TO postgres;

--
-- Name: histidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW histidine AS
    SELECT feature.feature_id AS histidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'histidine'::text);


ALTER TABLE so.histidine OWNER TO postgres;

--
-- Name: histidine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW histidine_trna_primary_transcript AS
    SELECT feature.feature_id AS histidine_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text);


ALTER TABLE so.histidine_trna_primary_transcript OWNER TO postgres;

--
-- Name: histidyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW histidyl_trna AS
    SELECT feature.feature_id AS histidyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'histidyl_tRNA'::text);


ALTER TABLE so.histidyl_trna OWNER TO postgres;

--
-- Name: histone_acetylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW histone_acetylation_site AS
    SELECT feature.feature_id AS histone_acetylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text));


ALTER TABLE so.histone_acetylation_site OWNER TO postgres;

--
-- Name: histone_acylation_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW histone_acylation_region AS
    SELECT feature.feature_id AS histone_acylation_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text));


ALTER TABLE so.histone_acylation_region OWNER TO postgres;

--
-- Name: histone_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW histone_binding_site AS
    SELECT feature.feature_id AS histone_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'histone_binding_site'::text);


ALTER TABLE so.histone_binding_site OWNER TO postgres;

--
-- Name: histone_methylation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW histone_methylation_site AS
    SELECT feature.feature_id AS histone_methylation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text));


ALTER TABLE so.histone_methylation_site OWNER TO postgres;

--
-- Name: histone_modification; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW histone_modification AS
    SELECT feature.feature_id AS histone_modification_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'histone_modification'::text));


ALTER TABLE so.histone_modification OWNER TO postgres;

--
-- Name: histone_ubiqitination_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW histone_ubiqitination_site AS
    SELECT feature.feature_id AS histone_ubiqitination_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text));


ALTER TABLE so.histone_ubiqitination_site OWNER TO postgres;

--
-- Name: homing_endonuclease_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW homing_endonuclease_binding_site AS
    SELECT feature.feature_id AS homing_endonuclease_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text);


ALTER TABLE so.homing_endonuclease_binding_site OWNER TO postgres;

--
-- Name: homo_compound_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW homo_compound_chromosome AS
    SELECT feature.feature_id AS homo_compound_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'homo_compound_chromosome'::text);


ALTER TABLE so.homo_compound_chromosome OWNER TO postgres;

--
-- Name: homologous; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW homologous AS
    SELECT feature.feature_id AS homologous_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'orthologous'::text) OR ((cvterm.name)::text = 'paralogous'::text)) OR ((cvterm.name)::text = 'homologous'::text));


ALTER TABLE so.homologous OWNER TO postgres;

--
-- Name: homologous_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW homologous_region AS
    SELECT feature.feature_id AS homologous_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'paralogous_region'::text) OR ((cvterm.name)::text = 'orthologous_region'::text)) OR ((cvterm.name)::text = 'homologous_region'::text));


ALTER TABLE so.homologous_region OWNER TO postgres;

--
-- Name: hoogsteen_base_pair; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW hoogsteen_base_pair AS
    SELECT feature.feature_id AS hoogsteen_base_pair_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'Hoogsteen_base_pair'::text);


ALTER TABLE so.hoogsteen_base_pair OWNER TO postgres;

--
-- Name: hydrophobic_region_of_peptide; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW hydrophobic_region_of_peptide AS
    SELECT feature.feature_id AS hydrophobic_region_of_peptide_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text);


ALTER TABLE so.hydrophobic_region_of_peptide OWNER TO postgres;

--
-- Name: hydroxywybutosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW hydroxywybutosine AS
    SELECT feature.feature_id AS hydroxywybutosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'hydroxywybutosine'::text);


ALTER TABLE so.hydroxywybutosine OWNER TO postgres;

--
-- Name: hyperploid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW hyperploid AS
    SELECT feature.feature_id AS hyperploid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'hyperploid'::text);


ALTER TABLE so.hyperploid OWNER TO postgres;

--
-- Name: hypoploid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW hypoploid AS
    SELECT feature.feature_id AS hypoploid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'hypoploid'::text);


ALTER TABLE so.hypoploid OWNER TO postgres;

--
-- Name: i_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW i_motif AS
    SELECT feature.feature_id AS i_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'i_motif'::text);


ALTER TABLE so.i_motif OWNER TO postgres;

--
-- Name: idna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW idna AS
    SELECT feature.feature_id AS idna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'iDNA'::text);


ALTER TABLE so.idna OWNER TO postgres;

--
-- Name: immature_peptide_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW immature_peptide_region AS
    SELECT feature.feature_id AS immature_peptide_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'immature_peptide_region'::text);


ALTER TABLE so.immature_peptide_region OWNER TO postgres;

--
-- Name: imprinted; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW imprinted AS
    SELECT feature.feature_id AS imprinted_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'maternally_imprinted'::text) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'imprinted'::text));


ALTER TABLE so.imprinted OWNER TO postgres;

--
-- Name: improved_high_quality_draft; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW improved_high_quality_draft AS
    SELECT feature.feature_id AS improved_high_quality_draft_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'improved_high_quality_draft'::text);


ALTER TABLE so.improved_high_quality_draft OWNER TO postgres;

--
-- Name: inactive_catalytic_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inactive_catalytic_site AS
    SELECT feature.feature_id AS inactive_catalytic_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inactive_catalytic_site'::text);


ALTER TABLE so.inactive_catalytic_site OWNER TO postgres;

--
-- Name: inactive_ligand_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inactive_ligand_binding_site AS
    SELECT feature.feature_id AS inactive_ligand_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'inactive_catalytic_site'::text) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text));


ALTER TABLE so.inactive_ligand_binding_site OWNER TO postgres;

--
-- Name: incomplete_terminal_codon_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW incomplete_terminal_codon_variant AS
    SELECT feature.feature_id AS incomplete_terminal_codon_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text);


ALTER TABLE so.incomplete_terminal_codon_variant OWNER TO postgres;

--
-- Name: increased_polyadenylation_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW increased_polyadenylation_variant AS
    SELECT feature.feature_id AS increased_polyadenylation_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'increased_polyadenylation_variant'::text);


ALTER TABLE so.increased_polyadenylation_variant OWNER TO postgres;

--
-- Name: increased_transcript_level_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW increased_transcript_level_variant AS
    SELECT feature.feature_id AS increased_transcript_level_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'increased_transcript_level_variant'::text);


ALTER TABLE so.increased_transcript_level_variant OWNER TO postgres;

--
-- Name: increased_transcript_stability_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW increased_transcript_stability_variant AS
    SELECT feature.feature_id AS increased_transcript_stability_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'increased_transcript_stability_variant'::text);


ALTER TABLE so.increased_transcript_stability_variant OWNER TO postgres;

--
-- Name: increased_transcription_rate_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW increased_transcription_rate_variant AS
    SELECT feature.feature_id AS increased_transcription_rate_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'increased_transcription_rate_variant'::text);


ALTER TABLE so.increased_transcription_rate_variant OWNER TO postgres;

--
-- Name: increased_translational_product_level; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW increased_translational_product_level AS
    SELECT feature.feature_id AS increased_translational_product_level_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'increased_translational_product_level'::text);


ALTER TABLE so.increased_translational_product_level OWNER TO postgres;

--
-- Name: indel; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW indel AS
    SELECT feature.feature_id AS indel_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'indel'::text);


ALTER TABLE so.indel OWNER TO postgres;

--
-- Name: independently_known; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW independently_known AS
    SELECT feature.feature_id AS independently_known_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'independently_known'::text);


ALTER TABLE so.independently_known OWNER TO postgres;

--
-- Name: inframe_codon_gain; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inframe_codon_gain AS
    SELECT feature.feature_id AS inframe_codon_gain_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inframe_codon_gain'::text);


ALTER TABLE so.inframe_codon_gain OWNER TO postgres;

--
-- Name: inframe_codon_loss; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inframe_codon_loss AS
    SELECT feature.feature_id AS inframe_codon_loss_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inframe_codon_loss'::text);


ALTER TABLE so.inframe_codon_loss OWNER TO postgres;

--
-- Name: inframe_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inframe_variant AS
    SELECT feature.feature_id AS inframe_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'inframe_codon_gain'::text) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text));


ALTER TABLE so.inframe_variant OWNER TO postgres;

--
-- Name: initiator_codon_change; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW initiator_codon_change AS
    SELECT feature.feature_id AS initiator_codon_change_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'initiator_codon_change'::text);


ALTER TABLE so.initiator_codon_change OWNER TO postgres;

--
-- Name: inosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inosine AS
    SELECT feature.feature_id AS inosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'modified_inosine'::text) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'inosine'::text));


ALTER TABLE so.inosine OWNER TO postgres;

--
-- Name: inr1_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inr1_motif AS
    SELECT feature.feature_id AS inr1_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'INR1_motif'::text);


ALTER TABLE so.inr1_motif OWNER TO postgres;

--
-- Name: inr_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inr_motif AS
    SELECT feature.feature_id AS inr_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'INR_motif'::text);


ALTER TABLE so.inr_motif OWNER TO postgres;

--
-- Name: insertion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW insertion AS
    SELECT feature.feature_id AS insertion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'transgenic_insertion'::text) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'insertion'::text));


ALTER TABLE so.insertion OWNER TO postgres;

--
-- Name: insertion_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW insertion_attribute AS
    SELECT feature.feature_id AS insertion_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'tandem'::text) OR ((cvterm.name)::text = 'direct'::text)) OR ((cvterm.name)::text = 'inverted'::text)) OR ((cvterm.name)::text = 'insertion_attribute'::text));


ALTER TABLE so.insertion_attribute OWNER TO postgres;

--
-- Name: insertion_breakpoint; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW insertion_breakpoint AS
    SELECT feature.feature_id AS insertion_breakpoint_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'insertion_breakpoint'::text);


ALTER TABLE so.insertion_breakpoint OWNER TO postgres;

--
-- Name: insertion_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW insertion_sequence AS
    SELECT feature.feature_id AS insertion_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'insertion_sequence'::text);


ALTER TABLE so.insertion_sequence OWNER TO postgres;

--
-- Name: insertion_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW insertion_site AS
    SELECT feature.feature_id AS insertion_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'transposable_element_insertion_site'::text) OR ((cvterm.name)::text = 'insertion_site'::text));


ALTER TABLE so.insertion_site OWNER TO postgres;

--
-- Name: insertional; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW insertional AS
    SELECT feature.feature_id AS insertional_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'insertional'::text);


ALTER TABLE so.insertional OWNER TO postgres;

--
-- Name: insertional_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW insertional_duplication AS
    SELECT feature.feature_id AS insertional_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'uninverted_insertional_duplication'::text) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text));


ALTER TABLE so.insertional_duplication OWNER TO postgres;

--
-- Name: inside_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inside_intron AS
    SELECT feature.feature_id AS inside_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'inside_intron_antiparallel'::text) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'inside_intron'::text));


ALTER TABLE so.inside_intron OWNER TO postgres;

--
-- Name: inside_intron_antiparallel; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inside_intron_antiparallel AS
    SELECT feature.feature_id AS inside_intron_antiparallel_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inside_intron_antiparallel'::text);


ALTER TABLE so.inside_intron_antiparallel OWNER TO postgres;

--
-- Name: inside_intron_parallel; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inside_intron_parallel AS
    SELECT feature.feature_id AS inside_intron_parallel_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inside_intron_parallel'::text);


ALTER TABLE so.inside_intron_parallel OWNER TO postgres;

--
-- Name: insulator; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW insulator AS
    SELECT feature.feature_id AS insulator_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'insulator'::text);


ALTER TABLE so.insulator OWNER TO postgres;

--
-- Name: insulator_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW insulator_binding_site AS
    SELECT feature.feature_id AS insulator_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'insulator_binding_site'::text);


ALTER TABLE so.insulator_binding_site OWNER TO postgres;

--
-- Name: integrated_mobile_genetic_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW integrated_mobile_genetic_element AS
    SELECT feature.feature_id AS integrated_mobile_genetic_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'transposable_element'::text) OR ((cvterm.name)::text = 'proviral_region'::text)) OR ((cvterm.name)::text = 'integron'::text)) OR ((cvterm.name)::text = 'genomic_island'::text)) OR ((cvterm.name)::text = 'integrated_plasmid'::text)) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'prophage'::text)) OR ((cvterm.name)::text = 'pathogenic_island'::text)) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text));


ALTER TABLE so.integrated_mobile_genetic_element OWNER TO postgres;

--
-- Name: integrated_plasmid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW integrated_plasmid AS
    SELECT feature.feature_id AS integrated_plasmid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'integrated_plasmid'::text);


ALTER TABLE so.integrated_plasmid OWNER TO postgres;

--
-- Name: integration_excision_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW integration_excision_site AS
    SELECT feature.feature_id AS integration_excision_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'attI_site'::text) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text));


ALTER TABLE so.integration_excision_site OWNER TO postgres;

--
-- Name: integron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW integron AS
    SELECT feature.feature_id AS integron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'integron'::text);


ALTER TABLE so.integron OWNER TO postgres;

--
-- Name: intein; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intein AS
    SELECT feature.feature_id AS intein_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'intein'::text);


ALTER TABLE so.intein OWNER TO postgres;

--
-- Name: intein_containing; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intein_containing AS
    SELECT feature.feature_id AS intein_containing_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'intein_containing'::text);


ALTER TABLE so.intein_containing OWNER TO postgres;

--
-- Name: interband; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW interband AS
    SELECT feature.feature_id AS interband_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'interband'::text);


ALTER TABLE so.interband OWNER TO postgres;

--
-- Name: interchromosomal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW interchromosomal AS
    SELECT feature.feature_id AS interchromosomal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'interchromosomal'::text);


ALTER TABLE so.interchromosomal OWNER TO postgres;

--
-- Name: interchromosomal_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW interchromosomal_duplication AS
    SELECT feature.feature_id AS interchromosomal_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'interchromosomal_duplication'::text);


ALTER TABLE so.interchromosomal_duplication OWNER TO postgres;

--
-- Name: interchromosomal_mutation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW interchromosomal_mutation AS
    SELECT feature.feature_id AS interchromosomal_mutation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((cvterm.name)::text = 'chromosomal_translocation'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'translocation_element'::text)) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text));


ALTER TABLE so.interchromosomal_mutation OWNER TO postgres;

--
-- Name: interchromosomal_transposition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW interchromosomal_transposition AS
    SELECT feature.feature_id AS interchromosomal_transposition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text));


ALTER TABLE so.interchromosomal_transposition OWNER TO postgres;

--
-- Name: intergenic_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intergenic_region AS
    SELECT feature.feature_id AS intergenic_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'intergenic_region'::text);


ALTER TABLE so.intergenic_region OWNER TO postgres;

--
-- Name: intergenic_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intergenic_variant AS
    SELECT feature.feature_id AS intergenic_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'intergenic_variant'::text);


ALTER TABLE so.intergenic_variant OWNER TO postgres;

--
-- Name: interior_coding_exon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW interior_coding_exon AS
    SELECT feature.feature_id AS interior_coding_exon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'interior_coding_exon'::text);


ALTER TABLE so.interior_coding_exon OWNER TO postgres;

--
-- Name: interior_exon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW interior_exon AS
    SELECT feature.feature_id AS interior_exon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'interior_exon'::text);


ALTER TABLE so.interior_exon OWNER TO postgres;

--
-- Name: interior_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW interior_intron AS
    SELECT feature.feature_id AS interior_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'interior_intron'::text);


ALTER TABLE so.interior_intron OWNER TO postgres;

--
-- Name: intermediate; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intermediate AS
    SELECT feature.feature_id AS intermediate_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'intermediate'::text);


ALTER TABLE so.intermediate OWNER TO postgres;

--
-- Name: intermediate_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intermediate_element AS
    SELECT feature.feature_id AS intermediate_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'intermediate_element'::text);


ALTER TABLE so.intermediate_element OWNER TO postgres;

--
-- Name: internal_eliminated_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW internal_eliminated_sequence AS
    SELECT feature.feature_id AS internal_eliminated_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'internal_eliminated_sequence'::text);


ALTER TABLE so.internal_eliminated_sequence OWNER TO postgres;

--
-- Name: internal_guide_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW internal_guide_sequence AS
    SELECT feature.feature_id AS internal_guide_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'internal_guide_sequence'::text);


ALTER TABLE so.internal_guide_sequence OWNER TO postgres;

--
-- Name: internal_ribosome_entry_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW internal_ribosome_entry_site AS
    SELECT feature.feature_id AS internal_ribosome_entry_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text));


ALTER TABLE so.internal_ribosome_entry_site OWNER TO postgres;

--
-- Name: internal_shine_dalgarno_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW internal_shine_dalgarno_sequence AS
    SELECT feature.feature_id AS internal_shine_dalgarno_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text);


ALTER TABLE so.internal_shine_dalgarno_sequence OWNER TO postgres;

--
-- Name: internal_transcribed_spacer_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW internal_transcribed_spacer_region AS
    SELECT feature.feature_id AS internal_transcribed_spacer_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text);


ALTER TABLE so.internal_transcribed_spacer_region OWNER TO postgres;

--
-- Name: internal_utr; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW internal_utr AS
    SELECT feature.feature_id AS internal_utr_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'internal_UTR'::text);


ALTER TABLE so.internal_utr OWNER TO postgres;

--
-- Name: intrachromosomal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intrachromosomal AS
    SELECT feature.feature_id AS intrachromosomal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'intrachromosomal'::text);


ALTER TABLE so.intrachromosomal OWNER TO postgres;

--
-- Name: intrachromosomal_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intrachromosomal_duplication AS
    SELECT feature.feature_id AS intrachromosomal_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text));


ALTER TABLE so.intrachromosomal_duplication OWNER TO postgres;

--
-- Name: intrachromosomal_mutation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intrachromosomal_mutation AS
    SELECT feature.feature_id AS intrachromosomal_mutation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((cvterm.name)::text = 'chromosomal_deletion'::text) OR ((cvterm.name)::text = 'chromosomal_inversion'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome_fission'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text));


ALTER TABLE so.intrachromosomal_mutation OWNER TO postgres;

--
-- Name: intrachromosomal_transposition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intrachromosomal_transposition AS
    SELECT feature.feature_id AS intrachromosomal_transposition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text));


ALTER TABLE so.intrachromosomal_transposition OWNER TO postgres;

--
-- Name: intramembrane_polypeptide_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intramembrane_polypeptide_region AS
    SELECT feature.feature_id AS intramembrane_polypeptide_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'membrane_peptide_loop'::text) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text));


ALTER TABLE so.intramembrane_polypeptide_region OWNER TO postgres;

--
-- Name: intrinsically_unstructured_polypeptide_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intrinsically_unstructured_polypeptide_region AS
    SELECT feature.feature_id AS intrinsically_unstructured_polypeptide_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text);


ALTER TABLE so.intrinsically_unstructured_polypeptide_region OWNER TO postgres;

--
-- Name: introgressed_chromosome_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW introgressed_chromosome_region AS
    SELECT feature.feature_id AS introgressed_chromosome_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'introgressed_chromosome_region'::text);


ALTER TABLE so.introgressed_chromosome_region OWNER TO postgres;

--
-- Name: intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intron AS
    SELECT feature.feature_id AS intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((cvterm.name)::text = 'five_prime_intron'::text) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'intron'::text));


ALTER TABLE so.intron OWNER TO postgres;

--
-- Name: intron_domain; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intron_domain AS
    SELECT feature.feature_id AS intron_domain_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'internal_guide_sequence'::text) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'intron_domain'::text));


ALTER TABLE so.intron_domain OWNER TO postgres;

--
-- Name: intron_gain; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intron_gain AS
    SELECT feature.feature_id AS intron_gain_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'intron_gain'::text);


ALTER TABLE so.intron_gain OWNER TO postgres;

--
-- Name: intron_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intron_variant AS
    SELECT feature.feature_id AS intron_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'splice_site_variant'::text) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'intron_variant'::text));


ALTER TABLE so.intron_variant OWNER TO postgres;

--
-- Name: intronic_regulatory_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intronic_regulatory_region AS
    SELECT feature.feature_id AS intronic_regulatory_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'intronic_regulatory_region'::text);


ALTER TABLE so.intronic_regulatory_region OWNER TO postgres;

--
-- Name: intronic_splice_enhancer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW intronic_splice_enhancer AS
    SELECT feature.feature_id AS intronic_splice_enhancer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'intronic_splice_enhancer'::text);


ALTER TABLE so.intronic_splice_enhancer OWNER TO postgres;

--
-- Name: invalidated; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW invalidated AS
    SELECT feature.feature_id AS invalidated_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text)) OR ((cvterm.name)::text = 'invalidated'::text));


ALTER TABLE so.invalidated OWNER TO postgres;

--
-- Name: invalidated_by_chimeric_cdna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW invalidated_by_chimeric_cdna AS
    SELECT feature.feature_id AS invalidated_by_chimeric_cdna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text);


ALTER TABLE so.invalidated_by_chimeric_cdna OWNER TO postgres;

--
-- Name: invalidated_by_genomic_contamination; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW invalidated_by_genomic_contamination AS
    SELECT feature.feature_id AS invalidated_by_genomic_contamination_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text);


ALTER TABLE so.invalidated_by_genomic_contamination OWNER TO postgres;

--
-- Name: invalidated_by_genomic_polya_primed_cdna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW invalidated_by_genomic_polya_primed_cdna AS
    SELECT feature.feature_id AS invalidated_by_genomic_polya_primed_cdna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text);


ALTER TABLE so.invalidated_by_genomic_polya_primed_cdna OWNER TO postgres;

--
-- Name: invalidated_by_partial_processing; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW invalidated_by_partial_processing AS
    SELECT feature.feature_id AS invalidated_by_partial_processing_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'invalidated_by_partial_processing'::text);


ALTER TABLE so.invalidated_by_partial_processing OWNER TO postgres;

--
-- Name: invalidated_cdna_clone; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW invalidated_cdna_clone AS
    SELECT feature.feature_id AS invalidated_cdna_clone_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'chimeric_cDNA_clone'::text) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text));


ALTER TABLE so.invalidated_cdna_clone OWNER TO postgres;

--
-- Name: inversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inversion AS
    SELECT feature.feature_id AS inversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inversion'::text);


ALTER TABLE so.inversion OWNER TO postgres;

--
-- Name: inversion_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inversion_attribute AS
    SELECT feature.feature_id AS inversion_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'pericentric'::text) OR ((cvterm.name)::text = 'paracentric'::text)) OR ((cvterm.name)::text = 'inversion_attribute'::text));


ALTER TABLE so.inversion_attribute OWNER TO postgres;

--
-- Name: inversion_breakpoint; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inversion_breakpoint AS
    SELECT feature.feature_id AS inversion_breakpoint_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inversion_breakpoint'::text);


ALTER TABLE so.inversion_breakpoint OWNER TO postgres;

--
-- Name: inversion_cum_translocation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inversion_cum_translocation AS
    SELECT feature.feature_id AS inversion_cum_translocation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text));


ALTER TABLE so.inversion_cum_translocation OWNER TO postgres;

--
-- Name: inversion_derived_aneuploid_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inversion_derived_aneuploid_chromosome AS
    SELECT feature.feature_id AS inversion_derived_aneuploid_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text);


ALTER TABLE so.inversion_derived_aneuploid_chromosome OWNER TO postgres;

--
-- Name: inversion_derived_bipartite_deficiency; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inversion_derived_bipartite_deficiency AS
    SELECT feature.feature_id AS inversion_derived_bipartite_deficiency_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text);


ALTER TABLE so.inversion_derived_bipartite_deficiency OWNER TO postgres;

--
-- Name: inversion_derived_bipartite_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inversion_derived_bipartite_duplication AS
    SELECT feature.feature_id AS inversion_derived_bipartite_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text);


ALTER TABLE so.inversion_derived_bipartite_duplication OWNER TO postgres;

--
-- Name: inversion_derived_deficiency_plus_aneuploid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inversion_derived_deficiency_plus_aneuploid AS
    SELECT feature.feature_id AS inversion_derived_deficiency_plus_aneuploid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text);


ALTER TABLE so.inversion_derived_deficiency_plus_aneuploid OWNER TO postgres;

--
-- Name: inversion_derived_deficiency_plus_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inversion_derived_deficiency_plus_duplication AS
    SELECT feature.feature_id AS inversion_derived_deficiency_plus_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text);


ALTER TABLE so.inversion_derived_deficiency_plus_duplication OWNER TO postgres;

--
-- Name: inversion_derived_duplication_plus_aneuploid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inversion_derived_duplication_plus_aneuploid AS
    SELECT feature.feature_id AS inversion_derived_duplication_plus_aneuploid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text);


ALTER TABLE so.inversion_derived_duplication_plus_aneuploid OWNER TO postgres;

--
-- Name: inversion_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inversion_site AS
    SELECT feature.feature_id AS inversion_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'FRT_site'::text) OR ((cvterm.name)::text = 'inversion_site'::text));


ALTER TABLE so.inversion_site OWNER TO postgres;

--
-- Name: inversion_site_part; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inversion_site_part AS
    SELECT feature.feature_id AS inversion_site_part_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'IRLinv_site'::text) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text));


ALTER TABLE so.inversion_site_part OWNER TO postgres;

--
-- Name: invert_inter_transposition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW invert_inter_transposition AS
    SELECT feature.feature_id AS invert_inter_transposition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text);


ALTER TABLE so.invert_inter_transposition OWNER TO postgres;

--
-- Name: invert_intra_transposition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW invert_intra_transposition AS
    SELECT feature.feature_id AS invert_intra_transposition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text);


ALTER TABLE so.invert_intra_transposition OWNER TO postgres;

--
-- Name: inverted; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inverted AS
    SELECT feature.feature_id AS inverted_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inverted'::text);


ALTER TABLE so.inverted OWNER TO postgres;

--
-- Name: inverted_insertional_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inverted_insertional_duplication AS
    SELECT feature.feature_id AS inverted_insertional_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inverted_insertional_duplication'::text);


ALTER TABLE so.inverted_insertional_duplication OWNER TO postgres;

--
-- Name: inverted_repeat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inverted_repeat AS
    SELECT feature.feature_id AS inverted_repeat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'inverted_repeat'::text));


ALTER TABLE so.inverted_repeat OWNER TO postgres;

--
-- Name: inverted_ring_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inverted_ring_chromosome AS
    SELECT feature.feature_id AS inverted_ring_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inverted_ring_chromosome'::text);


ALTER TABLE so.inverted_ring_chromosome OWNER TO postgres;

--
-- Name: inverted_tandem_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW inverted_tandem_duplication AS
    SELECT feature.feature_id AS inverted_tandem_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'inverted_tandem_duplication'::text);


ALTER TABLE so.inverted_tandem_duplication OWNER TO postgres;

--
-- Name: irlinv_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW irlinv_site AS
    SELECT feature.feature_id AS irlinv_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'IRLinv_site'::text);


ALTER TABLE so.irlinv_site OWNER TO postgres;

--
-- Name: iron_responsive_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW iron_responsive_element AS
    SELECT feature.feature_id AS iron_responsive_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'iron_responsive_element'::text);


ALTER TABLE so.iron_responsive_element OWNER TO postgres;

--
-- Name: irrinv_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW irrinv_site AS
    SELECT feature.feature_id AS irrinv_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'IRRinv_site'::text);


ALTER TABLE so.irrinv_site OWNER TO postgres;

--
-- Name: isoleucine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW isoleucine AS
    SELECT feature.feature_id AS isoleucine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'isoleucine'::text);


ALTER TABLE so.isoleucine OWNER TO postgres;

--
-- Name: isoleucine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW isoleucine_trna_primary_transcript AS
    SELECT feature.feature_id AS isoleucine_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text);


ALTER TABLE so.isoleucine_trna_primary_transcript OWNER TO postgres;

--
-- Name: isoleucyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW isoleucyl_trna AS
    SELECT feature.feature_id AS isoleucyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'isoleucyl_tRNA'::text);


ALTER TABLE so.isoleucyl_trna OWNER TO postgres;

--
-- Name: isowyosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW isowyosine AS
    SELECT feature.feature_id AS isowyosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'isowyosine'::text);


ALTER TABLE so.isowyosine OWNER TO postgres;

--
-- Name: isre; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW isre AS
    SELECT feature.feature_id AS isre_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'ISRE'::text);


ALTER TABLE so.isre OWNER TO postgres;

--
-- Name: j_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW j_c_cluster AS
    SELECT feature.feature_id AS j_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'J_C_cluster'::text);


ALTER TABLE so.j_c_cluster OWNER TO postgres;

--
-- Name: j_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW j_cluster AS
    SELECT feature.feature_id AS j_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'J_cluster'::text);


ALTER TABLE so.j_cluster OWNER TO postgres;

--
-- Name: j_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW j_gene AS
    SELECT feature.feature_id AS j_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'J_gene'::text);


ALTER TABLE so.j_gene OWNER TO postgres;

--
-- Name: j_gene_recombination_feature; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW j_gene_recombination_feature AS
    SELECT feature.feature_id AS j_gene_recombination_feature_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'J_gene_recombination_feature'::text);


ALTER TABLE so.j_gene_recombination_feature OWNER TO postgres;

--
-- Name: j_heptamer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW j_heptamer AS
    SELECT feature.feature_id AS j_heptamer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'J_heptamer'::text);


ALTER TABLE so.j_heptamer OWNER TO postgres;

--
-- Name: j_nonamer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW j_nonamer AS
    SELECT feature.feature_id AS j_nonamer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'J_nonamer'::text);


ALTER TABLE so.j_nonamer OWNER TO postgres;

--
-- Name: j_spacer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW j_spacer AS
    SELECT feature.feature_id AS j_spacer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'J_spacer'::text);


ALTER TABLE so.j_spacer OWNER TO postgres;

--
-- Name: junction; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW junction AS
    SELECT feature.feature_id AS junction_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((cvterm.name)::text = 'clone_insert_end'::text) OR ((cvterm.name)::text = 'clone_insert_start'::text)) OR ((cvterm.name)::text = 'exon_junction'::text)) OR ((cvterm.name)::text = 'insertion_site'::text)) OR ((cvterm.name)::text = 'polyA_site'::text)) OR ((cvterm.name)::text = 'deletion_junction'::text)) OR ((cvterm.name)::text = 'chromosome_breakpoint'::text)) OR ((cvterm.name)::text = 'splice_junction'::text)) OR ((cvterm.name)::text = 'trans_splice_junction'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_cleavage_junction'::text)) OR ((cvterm.name)::text = 'transposable_element_insertion_site'::text)) OR ((cvterm.name)::text = 'inversion_breakpoint'::text)) OR ((cvterm.name)::text = 'translocation_breakpoint'::text)) OR ((cvterm.name)::text = 'insertion_breakpoint'::text)) OR ((cvterm.name)::text = 'deletion_breakpoint'::text)) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text)) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'junction'::text));


ALTER TABLE so.junction OWNER TO postgres;

--
-- Name: k_turn_rna_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW k_turn_rna_motif AS
    SELECT feature.feature_id AS k_turn_rna_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'K_turn_RNA_motif'::text);


ALTER TABLE so.k_turn_rna_motif OWNER TO postgres;

--
-- Name: kinetoplast; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW kinetoplast AS
    SELECT feature.feature_id AS kinetoplast_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'kinetoplast'::text);


ALTER TABLE so.kinetoplast OWNER TO postgres;

--
-- Name: kinetoplast_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW kinetoplast_gene AS
    SELECT feature.feature_id AS kinetoplast_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'maxicircle_gene'::text) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'kinetoplast_gene'::text));


ALTER TABLE so.kinetoplast_gene OWNER TO postgres;

--
-- Name: kozak_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW kozak_sequence AS
    SELECT feature.feature_id AS kozak_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'kozak_sequence'::text);


ALTER TABLE so.kozak_sequence OWNER TO postgres;

--
-- Name: laevosynaptic_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW laevosynaptic_chromosome AS
    SELECT feature.feature_id AS laevosynaptic_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'laevosynaptic_chromosome'::text);


ALTER TABLE so.laevosynaptic_chromosome OWNER TO postgres;

--
-- Name: lambda_vector; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW lambda_vector AS
    SELECT feature.feature_id AS lambda_vector_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'lambda_vector'::text);


ALTER TABLE so.lambda_vector OWNER TO postgres;

--
-- Name: large_subunit_rrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW large_subunit_rrna AS
    SELECT feature.feature_id AS large_subunit_rrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'rRNA_5_8S'::text) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text));


ALTER TABLE so.large_subunit_rrna OWNER TO postgres;

--
-- Name: left_handed_peptide_helix; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW left_handed_peptide_helix AS
    SELECT feature.feature_id AS left_handed_peptide_helix_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'left_handed_peptide_helix'::text);


ALTER TABLE so.left_handed_peptide_helix OWNER TO postgres;

--
-- Name: lethal_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW lethal_variant AS
    SELECT feature.feature_id AS lethal_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'lethal_variant'::text);


ALTER TABLE so.lethal_variant OWNER TO postgres;

--
-- Name: leucine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW leucine AS
    SELECT feature.feature_id AS leucine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'leucine'::text);


ALTER TABLE so.leucine OWNER TO postgres;

--
-- Name: leucine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW leucine_trna_primary_transcript AS
    SELECT feature.feature_id AS leucine_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text);


ALTER TABLE so.leucine_trna_primary_transcript OWNER TO postgres;

--
-- Name: leucoplast_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW leucoplast_chromosome AS
    SELECT feature.feature_id AS leucoplast_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'leucoplast_chromosome'::text);


ALTER TABLE so.leucoplast_chromosome OWNER TO postgres;

--
-- Name: leucoplast_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW leucoplast_gene AS
    SELECT feature.feature_id AS leucoplast_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'leucoplast_gene'::text);


ALTER TABLE so.leucoplast_gene OWNER TO postgres;

--
-- Name: leucoplast_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW leucoplast_sequence AS
    SELECT feature.feature_id AS leucoplast_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'leucoplast_sequence'::text);


ALTER TABLE so.leucoplast_sequence OWNER TO postgres;

--
-- Name: leucyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW leucyl_trna AS
    SELECT feature.feature_id AS leucyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'leucyl_tRNA'::text);


ALTER TABLE so.leucyl_trna OWNER TO postgres;

--
-- Name: level_of_transcript_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW level_of_transcript_variant AS
    SELECT feature.feature_id AS level_of_transcript_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'decreased_transcript_level_variant'::text) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'level_of_transcript_variant'::text));


ALTER TABLE so.level_of_transcript_variant OWNER TO postgres;

--
-- Name: ligand_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ligand_binding_site AS
    SELECT feature.feature_id AS ligand_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'ligand_binding_site'::text));


ALTER TABLE so.ligand_binding_site OWNER TO postgres;

--
-- Name: ligation_based_read; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ligation_based_read AS
    SELECT feature.feature_id AS ligation_based_read_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'ligation_based_read'::text);


ALTER TABLE so.ligation_based_read OWNER TO postgres;

--
-- Name: lincrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW lincrna AS
    SELECT feature.feature_id AS lincrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'lincRNA'::text);


ALTER TABLE so.lincrna OWNER TO postgres;

--
-- Name: lincrna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW lincrna_gene AS
    SELECT feature.feature_id AS lincrna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'lincRNA_gene'::text);


ALTER TABLE so.lincrna_gene OWNER TO postgres;

--
-- Name: line_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW line_element AS
    SELECT feature.feature_id AS line_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'LINE_element'::text);


ALTER TABLE so.line_element OWNER TO postgres;

--
-- Name: linear; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW linear AS
    SELECT feature.feature_id AS linear_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'linear'::text);


ALTER TABLE so.linear OWNER TO postgres;

--
-- Name: linear_double_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW linear_double_stranded_dna_chromosome AS
    SELECT feature.feature_id AS linear_double_stranded_dna_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text);


ALTER TABLE so.linear_double_stranded_dna_chromosome OWNER TO postgres;

--
-- Name: linear_double_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW linear_double_stranded_rna_chromosome AS
    SELECT feature.feature_id AS linear_double_stranded_rna_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text);


ALTER TABLE so.linear_double_stranded_rna_chromosome OWNER TO postgres;

--
-- Name: linear_single_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW linear_single_stranded_dna_chromosome AS
    SELECT feature.feature_id AS linear_single_stranded_dna_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text);


ALTER TABLE so.linear_single_stranded_dna_chromosome OWNER TO postgres;

--
-- Name: linear_single_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW linear_single_stranded_rna_chromosome AS
    SELECT feature.feature_id AS linear_single_stranded_rna_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text);


ALTER TABLE so.linear_single_stranded_rna_chromosome OWNER TO postgres;

--
-- Name: linkage_group; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW linkage_group AS
    SELECT feature.feature_id AS linkage_group_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'linkage_group'::text);


ALTER TABLE so.linkage_group OWNER TO postgres;

--
-- Name: lipoprotein_signal_peptide; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW lipoprotein_signal_peptide AS
    SELECT feature.feature_id AS lipoprotein_signal_peptide_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text);


ALTER TABLE so.lipoprotein_signal_peptide OWNER TO postgres;

--
-- Name: lna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW lna AS
    SELECT feature.feature_id AS lna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'LNA'::text);


ALTER TABLE so.lna OWNER TO postgres;

--
-- Name: lna_oligo; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW lna_oligo AS
    SELECT feature.feature_id AS lna_oligo_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'LNA_oligo'::text);


ALTER TABLE so.lna_oligo OWNER TO postgres;

--
-- Name: locus_control_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW locus_control_region AS
    SELECT feature.feature_id AS locus_control_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'locus_control_region'::text);


ALTER TABLE so.locus_control_region OWNER TO postgres;

--
-- Name: long_terminal_repeat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW long_terminal_repeat AS
    SELECT feature.feature_id AS long_terminal_repeat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'five_prime_LTR'::text) OR ((cvterm.name)::text = 'three_prime_LTR'::text)) OR ((cvterm.name)::text = 'solo_LTR'::text)) OR ((cvterm.name)::text = 'long_terminal_repeat'::text));


ALTER TABLE so.long_terminal_repeat OWNER TO postgres;

--
-- Name: loss_of_heterozygosity; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW loss_of_heterozygosity AS
    SELECT feature.feature_id AS loss_of_heterozygosity_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'loss_of_heterozygosity'::text);


ALTER TABLE so.loss_of_heterozygosity OWNER TO postgres;

--
-- Name: low_complexity; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW low_complexity AS
    SELECT feature.feature_id AS low_complexity_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'low_complexity'::text);


ALTER TABLE so.low_complexity OWNER TO postgres;

--
-- Name: low_complexity_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW low_complexity_region AS
    SELECT feature.feature_id AS low_complexity_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'low_complexity_region'::text);


ALTER TABLE so.low_complexity_region OWNER TO postgres;

--
-- Name: loxp_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW loxp_site AS
    SELECT feature.feature_id AS loxp_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'loxP_site'::text);


ALTER TABLE so.loxp_site OWNER TO postgres;

--
-- Name: ltr_component; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ltr_component AS
    SELECT feature.feature_id AS ltr_component_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((cvterm.name)::text = 'U5_LTR_region'::text) OR ((cvterm.name)::text = 'R_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'LTR_component'::text));


ALTER TABLE so.ltr_component OWNER TO postgres;

--
-- Name: ltr_retrotransposon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ltr_retrotransposon AS
    SELECT feature.feature_id AS ltr_retrotransposon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'LTR_retrotransposon'::text);


ALTER TABLE so.ltr_retrotransposon OWNER TO postgres;

--
-- Name: lysidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW lysidine AS
    SELECT feature.feature_id AS lysidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'lysidine'::text);


ALTER TABLE so.lysidine OWNER TO postgres;

--
-- Name: lysine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW lysine AS
    SELECT feature.feature_id AS lysine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'lysine'::text);


ALTER TABLE so.lysine OWNER TO postgres;

--
-- Name: lysine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW lysine_trna_primary_transcript AS
    SELECT feature.feature_id AS lysine_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text);


ALTER TABLE so.lysine_trna_primary_transcript OWNER TO postgres;

--
-- Name: lysosomal_localization_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW lysosomal_localization_signal AS
    SELECT feature.feature_id AS lysosomal_localization_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'lysosomal_localization_signal'::text);


ALTER TABLE so.lysosomal_localization_signal OWNER TO postgres;

--
-- Name: lysyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW lysyl_trna AS
    SELECT feature.feature_id AS lysyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'lysyl_tRNA'::text);


ALTER TABLE so.lysyl_trna OWNER TO postgres;

--
-- Name: macronuclear_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW macronuclear_chromosome AS
    SELECT feature.feature_id AS macronuclear_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'macronuclear_chromosome'::text);


ALTER TABLE so.macronuclear_chromosome OWNER TO postgres;

--
-- Name: macronuclear_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW macronuclear_sequence AS
    SELECT feature.feature_id AS macronuclear_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'macronuclear_sequence'::text);


ALTER TABLE so.macronuclear_sequence OWNER TO postgres;

--
-- Name: macronucleus_destined_segment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW macronucleus_destined_segment AS
    SELECT feature.feature_id AS macronucleus_destined_segment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'macronucleus_destined_segment'::text);


ALTER TABLE so.macronucleus_destined_segment OWNER TO postgres;

--
-- Name: major_tss; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW major_tss AS
    SELECT feature.feature_id AS major_tss_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'major_TSS'::text);


ALTER TABLE so.major_tss OWNER TO postgres;

--
-- Name: mannosyl_queuosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mannosyl_queuosine AS
    SELECT feature.feature_id AS mannosyl_queuosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mannosyl_queuosine'::text);


ALTER TABLE so.mannosyl_queuosine OWNER TO postgres;

--
-- Name: match; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW match AS
    SELECT feature.feature_id AS match_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((cvterm.name)::text = 'nucleotide_match'::text) OR ((cvterm.name)::text = 'protein_match'::text)) OR ((cvterm.name)::text = 'expressed_sequence_match'::text)) OR ((cvterm.name)::text = 'cross_genome_match'::text)) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text)) OR ((cvterm.name)::text = 'primer_match'::text)) OR ((cvterm.name)::text = 'EST_match'::text)) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'match'::text));


ALTER TABLE so.match OWNER TO postgres;

--
-- Name: match_part; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW match_part AS
    SELECT feature.feature_id AS match_part_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'match_part'::text);


ALTER TABLE so.match_part OWNER TO postgres;

--
-- Name: maternal_uniparental_disomy; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW maternal_uniparental_disomy AS
    SELECT feature.feature_id AS maternal_uniparental_disomy_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'maternal_uniparental_disomy'::text);


ALTER TABLE so.maternal_uniparental_disomy OWNER TO postgres;

--
-- Name: maternal_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW maternal_variant AS
    SELECT feature.feature_id AS maternal_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'maternal_variant'::text);


ALTER TABLE so.maternal_variant OWNER TO postgres;

--
-- Name: maternally_imprinted; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW maternally_imprinted AS
    SELECT feature.feature_id AS maternally_imprinted_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'maternally_imprinted'::text);


ALTER TABLE so.maternally_imprinted OWNER TO postgres;

--
-- Name: maternally_imprinted_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW maternally_imprinted_gene AS
    SELECT feature.feature_id AS maternally_imprinted_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'maternally_imprinted_gene'::text);


ALTER TABLE so.maternally_imprinted_gene OWNER TO postgres;

--
-- Name: mathematically_defined_repeat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mathematically_defined_repeat AS
    SELECT feature.feature_id AS mathematically_defined_repeat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mathematically_defined_repeat'::text);


ALTER TABLE so.mathematically_defined_repeat OWNER TO postgres;

--
-- Name: mating_type_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mating_type_region AS
    SELECT feature.feature_id AS mating_type_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mating_type_region'::text);


ALTER TABLE so.mating_type_region OWNER TO postgres;

--
-- Name: matrix_attachment_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW matrix_attachment_site AS
    SELECT feature.feature_id AS matrix_attachment_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'matrix_attachment_site'::text);


ALTER TABLE so.matrix_attachment_site OWNER TO postgres;

--
-- Name: mature_mirna_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mature_mirna_variant AS
    SELECT feature.feature_id AS mature_mirna_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mature_miRNA_variant'::text);


ALTER TABLE so.mature_mirna_variant OWNER TO postgres;

--
-- Name: mature_protein_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mature_protein_region AS
    SELECT feature.feature_id AS mature_protein_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'active_peptide'::text) OR ((cvterm.name)::text = 'mature_protein_region'::text));


ALTER TABLE so.mature_protein_region OWNER TO postgres;

--
-- Name: mature_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mature_transcript AS
    SELECT feature.feature_id AS mature_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'mRNA'::text) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text));


ALTER TABLE so.mature_transcript OWNER TO postgres;

--
-- Name: mature_transcript_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mature_transcript_region AS
    SELECT feature.feature_id AS mature_transcript_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'mRNA_region'::text) OR ((cvterm.name)::text = 'tmRNA_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text)) OR ((cvterm.name)::text = 'riboswitch'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'anchor_region'::text)) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'anticodon_loop'::text)) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'mature_transcript_region'::text));


ALTER TABLE so.mature_transcript_region OWNER TO postgres;

--
-- Name: maxicircle; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW maxicircle AS
    SELECT feature.feature_id AS maxicircle_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'maxicircle'::text);


ALTER TABLE so.maxicircle OWNER TO postgres;

--
-- Name: maxicircle_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW maxicircle_gene AS
    SELECT feature.feature_id AS maxicircle_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'maxicircle_gene'::text));


ALTER TABLE so.maxicircle_gene OWNER TO postgres;

--
-- Name: member_of_regulon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW member_of_regulon AS
    SELECT feature.feature_id AS member_of_regulon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'member_of_regulon'::text);


ALTER TABLE so.member_of_regulon OWNER TO postgres;

--
-- Name: membrane_peptide_loop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW membrane_peptide_loop AS
    SELECT feature.feature_id AS membrane_peptide_loop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'membrane_peptide_loop'::text);


ALTER TABLE so.membrane_peptide_loop OWNER TO postgres;

--
-- Name: membrane_structure; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW membrane_structure AS
    SELECT feature.feature_id AS membrane_structure_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'membrane_structure'::text);


ALTER TABLE so.membrane_structure OWNER TO postgres;

--
-- Name: metabolic_island; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW metabolic_island AS
    SELECT feature.feature_id AS metabolic_island_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'metabolic_island'::text);


ALTER TABLE so.metabolic_island OWNER TO postgres;

--
-- Name: metal_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW metal_binding_site AS
    SELECT feature.feature_id AS metal_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'metal_binding_site'::text));


ALTER TABLE so.metal_binding_site OWNER TO postgres;

--
-- Name: methionine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW methionine AS
    SELECT feature.feature_id AS methionine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'methionine'::text);


ALTER TABLE so.methionine OWNER TO postgres;

--
-- Name: methionine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW methionine_trna_primary_transcript AS
    SELECT feature.feature_id AS methionine_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text);


ALTER TABLE so.methionine_trna_primary_transcript OWNER TO postgres;

--
-- Name: methionyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW methionyl_trna AS
    SELECT feature.feature_id AS methionyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'methionyl_tRNA'::text);


ALTER TABLE so.methionyl_trna OWNER TO postgres;

--
-- Name: methylated_a; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW methylated_a AS
    SELECT feature.feature_id AS methylated_a_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'methylated_A'::text);


ALTER TABLE so.methylated_a OWNER TO postgres;

--
-- Name: methylated_base_feature; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW methylated_base_feature AS
    SELECT feature.feature_id AS methylated_base_feature_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'methylated_C'::text) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'methylated_base_feature'::text));


ALTER TABLE so.methylated_base_feature OWNER TO postgres;

--
-- Name: methylated_c; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW methylated_c AS
    SELECT feature.feature_id AS methylated_c_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'methylated_C'::text);


ALTER TABLE so.methylated_c OWNER TO postgres;

--
-- Name: methylation_guide_snorna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW methylation_guide_snorna AS
    SELECT feature.feature_id AS methylation_guide_snorna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'methylation_guide_snoRNA'::text);


ALTER TABLE so.methylation_guide_snorna OWNER TO postgres;

--
-- Name: methylation_guide_snorna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW methylation_guide_snorna_primary_transcript AS
    SELECT feature.feature_id AS methylation_guide_snorna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text);


ALTER TABLE so.methylation_guide_snorna_primary_transcript OWNER TO postgres;

--
-- Name: methylinosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW methylinosine AS
    SELECT feature.feature_id AS methylinosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'methylinosine'::text);


ALTER TABLE so.methylinosine OWNER TO postgres;

--
-- Name: methylwyosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW methylwyosine AS
    SELECT feature.feature_id AS methylwyosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'methylwyosine'::text);


ALTER TABLE so.methylwyosine OWNER TO postgres;

--
-- Name: micf_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW micf_rna AS
    SELECT feature.feature_id AS micf_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'MicF_RNA'::text);


ALTER TABLE so.micf_rna OWNER TO postgres;

--
-- Name: microarray_oligo; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW microarray_oligo AS
    SELECT feature.feature_id AS microarray_oligo_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'microarray_oligo'::text);


ALTER TABLE so.microarray_oligo OWNER TO postgres;

--
-- Name: micronuclear_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW micronuclear_chromosome AS
    SELECT feature.feature_id AS micronuclear_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'micronuclear_chromosome'::text);


ALTER TABLE so.micronuclear_chromosome OWNER TO postgres;

--
-- Name: micronuclear_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW micronuclear_sequence AS
    SELECT feature.feature_id AS micronuclear_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'micronuclear_sequence'::text);


ALTER TABLE so.micronuclear_sequence OWNER TO postgres;

--
-- Name: microsatellite; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW microsatellite AS
    SELECT feature.feature_id AS microsatellite_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'microsatellite'::text));


ALTER TABLE so.microsatellite OWNER TO postgres;

--
-- Name: mini_exon_donor_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mini_exon_donor_rna AS
    SELECT feature.feature_id AS mini_exon_donor_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mini_exon_donor_RNA'::text);


ALTER TABLE so.mini_exon_donor_rna OWNER TO postgres;

--
-- Name: mini_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mini_gene AS
    SELECT feature.feature_id AS mini_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'rescue_mini_gene'::text) OR ((cvterm.name)::text = 'mini_gene'::text));


ALTER TABLE so.mini_gene OWNER TO postgres;

--
-- Name: minicircle; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW minicircle AS
    SELECT feature.feature_id AS minicircle_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'minicircle'::text);


ALTER TABLE so.minicircle OWNER TO postgres;

--
-- Name: minicircle_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW minicircle_gene AS
    SELECT feature.feature_id AS minicircle_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'minicircle_gene'::text);


ALTER TABLE so.minicircle_gene OWNER TO postgres;

--
-- Name: minisatellite; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW minisatellite AS
    SELECT feature.feature_id AS minisatellite_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'minisatellite'::text);


ALTER TABLE so.minisatellite OWNER TO postgres;

--
-- Name: minor_tss; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW minor_tss AS
    SELECT feature.feature_id AS minor_tss_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'minor_TSS'::text);


ALTER TABLE so.minor_tss OWNER TO postgres;

--
-- Name: minus_10_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW minus_10_signal AS
    SELECT feature.feature_id AS minus_10_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'minus_10_signal'::text);


ALTER TABLE so.minus_10_signal OWNER TO postgres;

--
-- Name: minus_12_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW minus_12_signal AS
    SELECT feature.feature_id AS minus_12_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'minus_12_signal'::text);


ALTER TABLE so.minus_12_signal OWNER TO postgres;

--
-- Name: minus_1_frameshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW minus_1_frameshift AS
    SELECT feature.feature_id AS minus_1_frameshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'minus_1_frameshift'::text);


ALTER TABLE so.minus_1_frameshift OWNER TO postgres;

--
-- Name: minus_1_frameshift_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW minus_1_frameshift_variant AS
    SELECT feature.feature_id AS minus_1_frameshift_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'minus_1_frameshift_variant'::text);


ALTER TABLE so.minus_1_frameshift_variant OWNER TO postgres;

--
-- Name: minus_1_translationally_frameshifted; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW minus_1_translationally_frameshifted AS
    SELECT feature.feature_id AS minus_1_translationally_frameshifted_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text);


ALTER TABLE so.minus_1_translationally_frameshifted OWNER TO postgres;

--
-- Name: minus_24_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW minus_24_signal AS
    SELECT feature.feature_id AS minus_24_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'minus_24_signal'::text);


ALTER TABLE so.minus_24_signal OWNER TO postgres;

--
-- Name: minus_2_frameshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW minus_2_frameshift AS
    SELECT feature.feature_id AS minus_2_frameshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'minus_2_frameshift'::text);


ALTER TABLE so.minus_2_frameshift OWNER TO postgres;

--
-- Name: minus_2_frameshift_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW minus_2_frameshift_variant AS
    SELECT feature.feature_id AS minus_2_frameshift_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'minus_2_frameshift_variant'::text);


ALTER TABLE so.minus_2_frameshift_variant OWNER TO postgres;

--
-- Name: minus_35_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW minus_35_signal AS
    SELECT feature.feature_id AS minus_35_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'minus_35_signal'::text);


ALTER TABLE so.minus_35_signal OWNER TO postgres;

--
-- Name: mirna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mirna AS
    SELECT feature.feature_id AS mirna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'miRNA'::text);


ALTER TABLE so.mirna OWNER TO postgres;

--
-- Name: mirna_antiguide; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mirna_antiguide AS
    SELECT feature.feature_id AS mirna_antiguide_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'miRNA_antiguide'::text);


ALTER TABLE so.mirna_antiguide OWNER TO postgres;

--
-- Name: mirna_encoding; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mirna_encoding AS
    SELECT feature.feature_id AS mirna_encoding_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'miRNA_encoding'::text);


ALTER TABLE so.mirna_encoding OWNER TO postgres;

--
-- Name: mirna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mirna_gene AS
    SELECT feature.feature_id AS mirna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'miRNA_gene'::text);


ALTER TABLE so.mirna_gene OWNER TO postgres;

--
-- Name: mirna_loop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mirna_loop AS
    SELECT feature.feature_id AS mirna_loop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'miRNA_loop'::text);


ALTER TABLE so.mirna_loop OWNER TO postgres;

--
-- Name: mirna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mirna_primary_transcript AS
    SELECT feature.feature_id AS mirna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'stRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text));


ALTER TABLE so.mirna_primary_transcript OWNER TO postgres;

--
-- Name: mirna_primary_transcript_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mirna_primary_transcript_region AS
    SELECT feature.feature_id AS mirna_primary_transcript_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'pre_miRNA'::text) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text));


ALTER TABLE so.mirna_primary_transcript_region OWNER TO postgres;

--
-- Name: mirna_stem; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mirna_stem AS
    SELECT feature.feature_id AS mirna_stem_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'miRNA_stem'::text);


ALTER TABLE so.mirna_stem OWNER TO postgres;

--
-- Name: mirna_target_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mirna_target_site AS
    SELECT feature.feature_id AS mirna_target_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'miRNA_target_site'::text);


ALTER TABLE so.mirna_target_site OWNER TO postgres;

--
-- Name: mirtron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mirtron AS
    SELECT feature.feature_id AS mirtron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mirtron'::text);


ALTER TABLE so.mirtron OWNER TO postgres;

--
-- Name: missense_codon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW missense_codon AS
    SELECT feature.feature_id AS missense_codon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'conservative_missense_codon'::text) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'missense_codon'::text));


ALTER TABLE so.missense_codon OWNER TO postgres;

--
-- Name: mite; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mite AS
    SELECT feature.feature_id AS mite_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'MITE'::text);


ALTER TABLE so.mite OWNER TO postgres;

--
-- Name: mitochondrial_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mitochondrial_chromosome AS
    SELECT feature.feature_id AS mitochondrial_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mitochondrial_chromosome'::text);


ALTER TABLE so.mitochondrial_chromosome OWNER TO postgres;

--
-- Name: mitochondrial_dna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mitochondrial_dna AS
    SELECT feature.feature_id AS mitochondrial_dna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mitochondrial_DNA'::text);


ALTER TABLE so.mitochondrial_dna OWNER TO postgres;

--
-- Name: mitochondrial_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mitochondrial_sequence AS
    SELECT feature.feature_id AS mitochondrial_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'mitochondrial_DNA'::text) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text));


ALTER TABLE so.mitochondrial_sequence OWNER TO postgres;

--
-- Name: mnp; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mnp AS
    SELECT feature.feature_id AS mnp_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'MNP'::text);


ALTER TABLE so.mnp OWNER TO postgres;

--
-- Name: mobile; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mobile AS
    SELECT feature.feature_id AS mobile_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mobile'::text);


ALTER TABLE so.mobile OWNER TO postgres;

--
-- Name: mobile_genetic_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mobile_genetic_element AS
    SELECT feature.feature_id AS mobile_genetic_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'mobile_intron'::text) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'transposable_element'::text)) OR ((cvterm.name)::text = 'proviral_region'::text)) OR ((cvterm.name)::text = 'integron'::text)) OR ((cvterm.name)::text = 'genomic_island'::text)) OR ((cvterm.name)::text = 'integrated_plasmid'::text)) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'prophage'::text)) OR ((cvterm.name)::text = 'pathogenic_island'::text)) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'mobile_genetic_element'::text));


ALTER TABLE so.mobile_genetic_element OWNER TO postgres;

--
-- Name: mobile_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mobile_intron AS
    SELECT feature.feature_id AS mobile_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mobile_intron'::text);


ALTER TABLE so.mobile_intron OWNER TO postgres;

--
-- Name: modified_adenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_adenosine AS
    SELECT feature.feature_id AS modified_adenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((cvterm.name)::text = 'one_methyladenosine'::text) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text));


ALTER TABLE so.modified_adenosine OWNER TO postgres;

--
-- Name: modified_amino_acid_feature; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_amino_acid_feature AS
    SELECT feature.feature_id AS modified_amino_acid_feature_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((cvterm.name)::text = 'modified_glycine'::text) OR ((cvterm.name)::text = 'modified_L_alanine'::text)) OR ((cvterm.name)::text = 'modified_L_asparagine'::text)) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_cysteine'::text)) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_threonine'::text)) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text)) OR ((cvterm.name)::text = 'modified_L_glutamine'::text)) OR ((cvterm.name)::text = 'modified_L_methionine'::text)) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text)) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text)) OR ((cvterm.name)::text = 'modified_L_histidine'::text)) OR ((cvterm.name)::text = 'modified_L_serine'::text)) OR ((cvterm.name)::text = 'modified_L_lysine'::text)) OR ((cvterm.name)::text = 'modified_L_leucine'::text)) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text)) OR ((cvterm.name)::text = 'modified_L_valine'::text)) OR ((cvterm.name)::text = 'modified_L_proline'::text)) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text)) OR ((cvterm.name)::text = 'modified_L_arginine'::text)) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text));


ALTER TABLE so.modified_amino_acid_feature OWNER TO postgres;

--
-- Name: modified_base; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_base AS
    SELECT feature.feature_id AS modified_base_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'methylated_base_feature'::text) OR ((cvterm.name)::text = 'methylated_C'::text)) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'modified_base'::text));


ALTER TABLE so.modified_base OWNER TO postgres;

--
-- Name: modified_cytidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_cytidine AS
    SELECT feature.feature_id AS modified_cytidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((cvterm.name)::text = 'three_methylcytidine'::text) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text));


ALTER TABLE so.modified_cytidine OWNER TO postgres;

--
-- Name: modified_glycine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_glycine AS
    SELECT feature.feature_id AS modified_glycine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_glycine'::text);


ALTER TABLE so.modified_glycine OWNER TO postgres;

--
-- Name: modified_guanosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_guanosine AS
    SELECT feature.feature_id AS modified_guanosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((cvterm.name)::text = 'seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text));


ALTER TABLE so.modified_guanosine OWNER TO postgres;

--
-- Name: modified_inosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_inosine AS
    SELECT feature.feature_id AS modified_inosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'methylinosine'::text) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text));


ALTER TABLE so.modified_inosine OWNER TO postgres;

--
-- Name: modified_l_alanine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_alanine AS
    SELECT feature.feature_id AS modified_l_alanine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_alanine'::text);


ALTER TABLE so.modified_l_alanine OWNER TO postgres;

--
-- Name: modified_l_arginine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_arginine AS
    SELECT feature.feature_id AS modified_l_arginine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_arginine'::text);


ALTER TABLE so.modified_l_arginine OWNER TO postgres;

--
-- Name: modified_l_asparagine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_asparagine AS
    SELECT feature.feature_id AS modified_l_asparagine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_asparagine'::text);


ALTER TABLE so.modified_l_asparagine OWNER TO postgres;

--
-- Name: modified_l_aspartic_acid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_aspartic_acid AS
    SELECT feature.feature_id AS modified_l_aspartic_acid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_aspartic_acid'::text);


ALTER TABLE so.modified_l_aspartic_acid OWNER TO postgres;

--
-- Name: modified_l_cysteine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_cysteine AS
    SELECT feature.feature_id AS modified_l_cysteine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_cysteine'::text);


ALTER TABLE so.modified_l_cysteine OWNER TO postgres;

--
-- Name: modified_l_glutamic_acid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_glutamic_acid AS
    SELECT feature.feature_id AS modified_l_glutamic_acid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_glutamic_acid'::text);


ALTER TABLE so.modified_l_glutamic_acid OWNER TO postgres;

--
-- Name: modified_l_glutamine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_glutamine AS
    SELECT feature.feature_id AS modified_l_glutamine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_glutamine'::text);


ALTER TABLE so.modified_l_glutamine OWNER TO postgres;

--
-- Name: modified_l_histidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_histidine AS
    SELECT feature.feature_id AS modified_l_histidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_histidine'::text);


ALTER TABLE so.modified_l_histidine OWNER TO postgres;

--
-- Name: modified_l_isoleucine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_isoleucine AS
    SELECT feature.feature_id AS modified_l_isoleucine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_isoleucine'::text);


ALTER TABLE so.modified_l_isoleucine OWNER TO postgres;

--
-- Name: modified_l_leucine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_leucine AS
    SELECT feature.feature_id AS modified_l_leucine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_leucine'::text);


ALTER TABLE so.modified_l_leucine OWNER TO postgres;

--
-- Name: modified_l_lysine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_lysine AS
    SELECT feature.feature_id AS modified_l_lysine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_lysine'::text);


ALTER TABLE so.modified_l_lysine OWNER TO postgres;

--
-- Name: modified_l_methionine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_methionine AS
    SELECT feature.feature_id AS modified_l_methionine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_methionine'::text);


ALTER TABLE so.modified_l_methionine OWNER TO postgres;

--
-- Name: modified_l_phenylalanine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_phenylalanine AS
    SELECT feature.feature_id AS modified_l_phenylalanine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_phenylalanine'::text);


ALTER TABLE so.modified_l_phenylalanine OWNER TO postgres;

--
-- Name: modified_l_proline; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_proline AS
    SELECT feature.feature_id AS modified_l_proline_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_proline'::text);


ALTER TABLE so.modified_l_proline OWNER TO postgres;

--
-- Name: modified_l_selenocysteine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_selenocysteine AS
    SELECT feature.feature_id AS modified_l_selenocysteine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_selenocysteine'::text);


ALTER TABLE so.modified_l_selenocysteine OWNER TO postgres;

--
-- Name: modified_l_serine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_serine AS
    SELECT feature.feature_id AS modified_l_serine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_serine'::text);


ALTER TABLE so.modified_l_serine OWNER TO postgres;

--
-- Name: modified_l_threonine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_threonine AS
    SELECT feature.feature_id AS modified_l_threonine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_threonine'::text);


ALTER TABLE so.modified_l_threonine OWNER TO postgres;

--
-- Name: modified_l_tryptophan; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_tryptophan AS
    SELECT feature.feature_id AS modified_l_tryptophan_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_tryptophan'::text);


ALTER TABLE so.modified_l_tryptophan OWNER TO postgres;

--
-- Name: modified_l_tyrosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_tyrosine AS
    SELECT feature.feature_id AS modified_l_tyrosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_tyrosine'::text);


ALTER TABLE so.modified_l_tyrosine OWNER TO postgres;

--
-- Name: modified_l_valine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_l_valine AS
    SELECT feature.feature_id AS modified_l_valine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'modified_L_valine'::text);


ALTER TABLE so.modified_l_valine OWNER TO postgres;

--
-- Name: modified_rna_base_feature; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_rna_base_feature AS
    SELECT feature.feature_id AS modified_rna_base_feature_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'inosine'::text) OR ((cvterm.name)::text = 'seven_methylguanine'::text)) OR ((cvterm.name)::text = 'ribothymidine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text)) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'one_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'three_methylcytidine'::text)) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'dihydrouridine'::text)) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text));


ALTER TABLE so.modified_rna_base_feature OWNER TO postgres;

--
-- Name: modified_uridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW modified_uridine AS
    SELECT feature.feature_id AS modified_uridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'dihydrouridine'::text) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text));


ALTER TABLE so.modified_uridine OWNER TO postgres;

--
-- Name: molecular_contact_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW molecular_contact_region AS
    SELECT feature.feature_id AS molecular_contact_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text));


ALTER TABLE so.molecular_contact_region OWNER TO postgres;

--
-- Name: monocistronic; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW monocistronic AS
    SELECT feature.feature_id AS monocistronic_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'monocistronic'::text);


ALTER TABLE so.monocistronic OWNER TO postgres;

--
-- Name: monocistronic_mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW monocistronic_mrna AS
    SELECT feature.feature_id AS monocistronic_mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'monocistronic_mRNA'::text);


ALTER TABLE so.monocistronic_mrna OWNER TO postgres;

--
-- Name: monocistronic_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW monocistronic_primary_transcript AS
    SELECT feature.feature_id AS monocistronic_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'monocistronic_primary_transcript'::text);


ALTER TABLE so.monocistronic_primary_transcript OWNER TO postgres;

--
-- Name: monocistronic_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW monocistronic_transcript AS
    SELECT feature.feature_id AS monocistronic_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'monocistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text));


ALTER TABLE so.monocistronic_transcript OWNER TO postgres;

--
-- Name: morpholino_backbone; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW morpholino_backbone AS
    SELECT feature.feature_id AS morpholino_backbone_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'morpholino_backbone'::text);


ALTER TABLE so.morpholino_backbone OWNER TO postgres;

--
-- Name: morpholino_oligo; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW morpholino_oligo AS
    SELECT feature.feature_id AS morpholino_oligo_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'morpholino_oligo'::text);


ALTER TABLE so.morpholino_oligo OWNER TO postgres;

--
-- Name: mrna_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mrna_attribute AS
    SELECT feature.feature_id AS mrna_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((cvterm.name)::text = 'polyadenylated'::text) OR ((cvterm.name)::text = 'exemplar'::text)) OR ((cvterm.name)::text = 'frameshift'::text)) OR ((cvterm.name)::text = 'recoded'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_framshift'::text)) OR ((cvterm.name)::text = 'codon_redefined'::text)) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'mRNA_attribute'::text));


ALTER TABLE so.mrna_attribute OWNER TO postgres;

--
-- Name: mrna_recoded_by_codon_redefinition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mrna_recoded_by_codon_redefinition AS
    SELECT feature.feature_id AS mrna_recoded_by_codon_redefinition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text);


ALTER TABLE so.mrna_recoded_by_codon_redefinition OWNER TO postgres;

--
-- Name: mrna_recoded_by_translational_bypass; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mrna_recoded_by_translational_bypass AS
    SELECT feature.feature_id AS mrna_recoded_by_translational_bypass_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text);


ALTER TABLE so.mrna_recoded_by_translational_bypass OWNER TO postgres;

--
-- Name: mrna_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mrna_region AS
    SELECT feature.feature_id AS mrna_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'riboswitch'::text) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'mRNA_region'::text));


ALTER TABLE so.mrna_region OWNER TO postgres;

--
-- Name: mrna_with_frameshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mrna_with_frameshift AS
    SELECT feature.feature_id AS mrna_with_frameshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text));


ALTER TABLE so.mrna_with_frameshift OWNER TO postgres;

--
-- Name: mrna_with_minus_1_frameshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mrna_with_minus_1_frameshift AS
    SELECT feature.feature_id AS mrna_with_minus_1_frameshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text);


ALTER TABLE so.mrna_with_minus_1_frameshift OWNER TO postgres;

--
-- Name: mrna_with_minus_2_frameshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mrna_with_minus_2_frameshift AS
    SELECT feature.feature_id AS mrna_with_minus_2_frameshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text);


ALTER TABLE so.mrna_with_minus_2_frameshift OWNER TO postgres;

--
-- Name: mrna_with_plus_1_frameshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mrna_with_plus_1_frameshift AS
    SELECT feature.feature_id AS mrna_with_plus_1_frameshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text);


ALTER TABLE so.mrna_with_plus_1_frameshift OWNER TO postgres;

--
-- Name: mrna_with_plus_2_frameshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mrna_with_plus_2_frameshift AS
    SELECT feature.feature_id AS mrna_with_plus_2_frameshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text);


ALTER TABLE so.mrna_with_plus_2_frameshift OWNER TO postgres;

--
-- Name: mt_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mt_gene AS
    SELECT feature.feature_id AS mt_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'kinetoplast_gene'::text) OR ((cvterm.name)::text = 'maxicircle_gene'::text)) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'mt_gene'::text));


ALTER TABLE so.mt_gene OWNER TO postgres;

--
-- Name: mte; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mte AS
    SELECT feature.feature_id AS mte_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'MTE'::text);


ALTER TABLE so.mte OWNER TO postgres;

--
-- Name: mutated_variant_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW mutated_variant_site AS
    SELECT feature.feature_id AS mutated_variant_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'mutated_variant_site'::text);


ALTER TABLE so.mutated_variant_site OWNER TO postgres;

--
-- Name: n2_2_prime_o_dimethylguanosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n2_2_prime_o_dimethylguanosine AS
    SELECT feature.feature_id AS n2_2_prime_o_dimethylguanosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text);


ALTER TABLE so.n2_2_prime_o_dimethylguanosine OWNER TO postgres;

--
-- Name: n2_7_2prirme_o_trimethylguanosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n2_7_2prirme_o_trimethylguanosine AS
    SELECT feature.feature_id AS n2_7_2prirme_o_trimethylguanosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text);


ALTER TABLE so.n2_7_2prirme_o_trimethylguanosine OWNER TO postgres;

--
-- Name: n2_7_dimethylguanosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n2_7_dimethylguanosine AS
    SELECT feature.feature_id AS n2_7_dimethylguanosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text);


ALTER TABLE so.n2_7_dimethylguanosine OWNER TO postgres;

--
-- Name: n2_methylguanosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n2_methylguanosine AS
    SELECT feature.feature_id AS n2_methylguanosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N2_methylguanosine'::text);


ALTER TABLE so.n2_methylguanosine OWNER TO postgres;

--
-- Name: n2_n2_2_prime_o_trimethylguanosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n2_n2_2_prime_o_trimethylguanosine AS
    SELECT feature.feature_id AS n2_n2_2_prime_o_trimethylguanosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text);


ALTER TABLE so.n2_n2_2_prime_o_trimethylguanosine OWNER TO postgres;

--
-- Name: n2_n2_7_trimethylguanosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n2_n2_7_trimethylguanosine AS
    SELECT feature.feature_id AS n2_n2_7_trimethylguanosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text);


ALTER TABLE so.n2_n2_7_trimethylguanosine OWNER TO postgres;

--
-- Name: n2_n2_dimethylguanosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n2_n2_dimethylguanosine AS
    SELECT feature.feature_id AS n2_n2_dimethylguanosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text);


ALTER TABLE so.n2_n2_dimethylguanosine OWNER TO postgres;

--
-- Name: n4_2_prime_o_dimethylcytidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n4_2_prime_o_dimethylcytidine AS
    SELECT feature.feature_id AS n4_2_prime_o_dimethylcytidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text);


ALTER TABLE so.n4_2_prime_o_dimethylcytidine OWNER TO postgres;

--
-- Name: n4_acetyl_2_prime_o_methylcytidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n4_acetyl_2_prime_o_methylcytidine AS
    SELECT feature.feature_id AS n4_acetyl_2_prime_o_methylcytidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text);


ALTER TABLE so.n4_acetyl_2_prime_o_methylcytidine OWNER TO postgres;

--
-- Name: n4_acetylcytidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n4_acetylcytidine AS
    SELECT feature.feature_id AS n4_acetylcytidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N4_acetylcytidine'::text);


ALTER TABLE so.n4_acetylcytidine OWNER TO postgres;

--
-- Name: n4_methylcytidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n4_methylcytidine AS
    SELECT feature.feature_id AS n4_methylcytidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N4_methylcytidine'::text);


ALTER TABLE so.n4_methylcytidine OWNER TO postgres;

--
-- Name: n4_n4_2_prime_o_trimethylcytidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n4_n4_2_prime_o_trimethylcytidine AS
    SELECT feature.feature_id AS n4_n4_2_prime_o_trimethylcytidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text);


ALTER TABLE so.n4_n4_2_prime_o_trimethylcytidine OWNER TO postgres;

--
-- Name: n6_2_prime_o_dimethyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n6_2_prime_o_dimethyladenosine AS
    SELECT feature.feature_id AS n6_2_prime_o_dimethyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text);


ALTER TABLE so.n6_2_prime_o_dimethyladenosine OWNER TO postgres;

--
-- Name: n6_acetyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n6_acetyladenosine AS
    SELECT feature.feature_id AS n6_acetyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N6_acetyladenosine'::text);


ALTER TABLE so.n6_acetyladenosine OWNER TO postgres;

--
-- Name: n6_cis_hydroxyisopentenyl_adenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n6_cis_hydroxyisopentenyl_adenosine AS
    SELECT feature.feature_id AS n6_cis_hydroxyisopentenyl_adenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text);


ALTER TABLE so.n6_cis_hydroxyisopentenyl_adenosine OWNER TO postgres;

--
-- Name: n6_glycinylcarbamoyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n6_glycinylcarbamoyladenosine AS
    SELECT feature.feature_id AS n6_glycinylcarbamoyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text);


ALTER TABLE so.n6_glycinylcarbamoyladenosine OWNER TO postgres;

--
-- Name: n6_hydroxynorvalylcarbamoyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n6_hydroxynorvalylcarbamoyladenosine AS
    SELECT feature.feature_id AS n6_hydroxynorvalylcarbamoyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text);


ALTER TABLE so.n6_hydroxynorvalylcarbamoyladenosine OWNER TO postgres;

--
-- Name: n6_isopentenyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n6_isopentenyladenosine AS
    SELECT feature.feature_id AS n6_isopentenyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N6_isopentenyladenosine'::text);


ALTER TABLE so.n6_isopentenyladenosine OWNER TO postgres;

--
-- Name: n6_methyl_n6_threonylcarbamoyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n6_methyl_n6_threonylcarbamoyladenosine AS
    SELECT feature.feature_id AS n6_methyl_n6_threonylcarbamoyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text);


ALTER TABLE so.n6_methyl_n6_threonylcarbamoyladenosine OWNER TO postgres;

--
-- Name: n6_methyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n6_methyladenosine AS
    SELECT feature.feature_id AS n6_methyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N6_methyladenosine'::text);


ALTER TABLE so.n6_methyladenosine OWNER TO postgres;

--
-- Name: n6_n6_2_prime_o_trimethyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n6_n6_2_prime_o_trimethyladenosine AS
    SELECT feature.feature_id AS n6_n6_2_prime_o_trimethyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text);


ALTER TABLE so.n6_n6_2_prime_o_trimethyladenosine OWNER TO postgres;

--
-- Name: n6_n6_dimethyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n6_n6_dimethyladenosine AS
    SELECT feature.feature_id AS n6_n6_dimethyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text);


ALTER TABLE so.n6_n6_dimethyladenosine OWNER TO postgres;

--
-- Name: n6_threonylcarbamoyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n6_threonylcarbamoyladenosine AS
    SELECT feature.feature_id AS n6_threonylcarbamoyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text);


ALTER TABLE so.n6_threonylcarbamoyladenosine OWNER TO postgres;

--
-- Name: n_terminal_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW n_terminal_region AS
    SELECT feature.feature_id AS n_terminal_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'n_terminal_region'::text);


ALTER TABLE so.n_terminal_region OWNER TO postgres;

--
-- Name: natural_plasmid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW natural_plasmid AS
    SELECT feature.feature_id AS natural_plasmid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'natural_plasmid'::text);


ALTER TABLE so.natural_plasmid OWNER TO postgres;

--
-- Name: natural_transposable_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW natural_transposable_element AS
    SELECT feature.feature_id AS natural_transposable_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'natural_transposable_element'::text);


ALTER TABLE so.natural_transposable_element OWNER TO postgres;

--
-- Name: natural_variant_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW natural_variant_site AS
    SELECT feature.feature_id AS natural_variant_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'natural_variant_site'::text);


ALTER TABLE so.natural_variant_site OWNER TO postgres;

--
-- Name: nc_conserved_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nc_conserved_region AS
    SELECT feature.feature_id AS nc_conserved_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'nc_conserved_region'::text);


ALTER TABLE so.nc_conserved_region OWNER TO postgres;

--
-- Name: nc_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nc_primary_transcript AS
    SELECT feature.feature_id AS nc_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'scRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text));


ALTER TABLE so.nc_primary_transcript OWNER TO postgres;

--
-- Name: nc_transcript_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nc_transcript_variant AS
    SELECT feature.feature_id AS nc_transcript_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'mature_miRNA_variant'::text) OR ((cvterm.name)::text = 'nc_transcript_variant'::text));


ALTER TABLE so.nc_transcript_variant OWNER TO postgres;

--
-- Name: ncrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ncrna AS
    SELECT feature.feature_id AS ncrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'scRNA'::text) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text));


ALTER TABLE so.ncrna OWNER TO postgres;

--
-- Name: ncrna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ncrna_gene AS
    SELECT feature.feature_id AS ncrna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((cvterm.name)::text = 'gRNA_gene'::text) OR ((cvterm.name)::text = 'miRNA_gene'::text)) OR ((cvterm.name)::text = 'scRNA_gene'::text)) OR ((cvterm.name)::text = 'snoRNA_gene'::text)) OR ((cvterm.name)::text = 'snRNA_gene'::text)) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'stRNA_gene'::text)) OR ((cvterm.name)::text = 'tmRNA_gene'::text)) OR ((cvterm.name)::text = 'tRNA_gene'::text)) OR ((cvterm.name)::text = 'rRNA_gene'::text)) OR ((cvterm.name)::text = 'piRNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'lincRNA_gene'::text)) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text)) OR ((cvterm.name)::text = 'ncRNA_gene'::text));


ALTER TABLE so.ncrna_gene OWNER TO postgres;

--
-- Name: ndm2_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ndm2_motif AS
    SELECT feature.feature_id AS ndm2_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'NDM2_motif'::text);


ALTER TABLE so.ndm2_motif OWNER TO postgres;

--
-- Name: ndm3_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ndm3_motif AS
    SELECT feature.feature_id AS ndm3_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'NDM3_motif'::text);


ALTER TABLE so.ndm3_motif OWNER TO postgres;

--
-- Name: negative_sense_ssrna_viral_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW negative_sense_ssrna_viral_sequence AS
    SELECT feature.feature_id AS negative_sense_ssrna_viral_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text);


ALTER TABLE so.negative_sense_ssrna_viral_sequence OWNER TO postgres;

--
-- Name: negatively_autoregulated; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW negatively_autoregulated AS
    SELECT feature.feature_id AS negatively_autoregulated_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'negatively_autoregulated'::text);


ALTER TABLE so.negatively_autoregulated OWNER TO postgres;

--
-- Name: negatively_autoregulated_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW negatively_autoregulated_gene AS
    SELECT feature.feature_id AS negatively_autoregulated_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'negatively_autoregulated_gene'::text);


ALTER TABLE so.negatively_autoregulated_gene OWNER TO postgres;

--
-- Name: nested_repeat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nested_repeat AS
    SELECT feature.feature_id AS nested_repeat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'nested_tandem_repeat'::text) OR ((cvterm.name)::text = 'nested_repeat'::text));


ALTER TABLE so.nested_repeat OWNER TO postgres;

--
-- Name: nested_tandem_repeat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nested_tandem_repeat AS
    SELECT feature.feature_id AS nested_tandem_repeat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'nested_tandem_repeat'::text);


ALTER TABLE so.nested_tandem_repeat OWNER TO postgres;

--
-- Name: nested_transposon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nested_transposon AS
    SELECT feature.feature_id AS nested_transposon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'nested_transposon'::text);


ALTER TABLE so.nested_transposon OWNER TO postgres;

--
-- Name: nmd_transcript_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nmd_transcript_variant AS
    SELECT feature.feature_id AS nmd_transcript_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'NMD_transcript_variant'::text);


ALTER TABLE so.nmd_transcript_variant OWNER TO postgres;

--
-- Name: no_output; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW no_output AS
    SELECT feature.feature_id AS no_output_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'no_output'::text);


ALTER TABLE so.no_output OWNER TO postgres;

--
-- Name: non_adjacent_residues; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW non_adjacent_residues AS
    SELECT feature.feature_id AS non_adjacent_residues_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'non_adjacent_residues'::text);


ALTER TABLE so.non_adjacent_residues OWNER TO postgres;

--
-- Name: non_canonical_five_prime_splice_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW non_canonical_five_prime_splice_site AS
    SELECT feature.feature_id AS non_canonical_five_prime_splice_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text);


ALTER TABLE so.non_canonical_five_prime_splice_site OWNER TO postgres;

--
-- Name: non_canonical_start_codon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW non_canonical_start_codon AS
    SELECT feature.feature_id AS non_canonical_start_codon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'four_bp_start_codon'::text) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text));


ALTER TABLE so.non_canonical_start_codon OWNER TO postgres;

--
-- Name: non_canonical_three_prime_splice_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW non_canonical_three_prime_splice_site AS
    SELECT feature.feature_id AS non_canonical_three_prime_splice_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text);


ALTER TABLE so.non_canonical_three_prime_splice_site OWNER TO postgres;

--
-- Name: non_coding_exon_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW non_coding_exon_variant AS
    SELECT feature.feature_id AS non_coding_exon_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'non_coding_exon_variant'::text);


ALTER TABLE so.non_coding_exon_variant OWNER TO postgres;

--
-- Name: non_conservative_amino_acid_substitution; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW non_conservative_amino_acid_substitution AS
    SELECT feature.feature_id AS non_conservative_amino_acid_substitution_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text);


ALTER TABLE so.non_conservative_amino_acid_substitution OWNER TO postgres;

--
-- Name: non_conservative_missense_codon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW non_conservative_missense_codon AS
    SELECT feature.feature_id AS non_conservative_missense_codon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'non_conservative_missense_codon'::text);


ALTER TABLE so.non_conservative_missense_codon OWNER TO postgres;

--
-- Name: non_cytoplasmic_polypeptide_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW non_cytoplasmic_polypeptide_region AS
    SELECT feature.feature_id AS non_cytoplasmic_polypeptide_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text);


ALTER TABLE so.non_cytoplasmic_polypeptide_region OWNER TO postgres;

--
-- Name: non_ltr_retrotransposon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW non_ltr_retrotransposon AS
    SELECT feature.feature_id AS non_ltr_retrotransposon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'LINE_element'::text) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text));


ALTER TABLE so.non_ltr_retrotransposon OWNER TO postgres;

--
-- Name: non_ltr_retrotransposon_polymeric_tract; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW non_ltr_retrotransposon_polymeric_tract AS
    SELECT feature.feature_id AS non_ltr_retrotransposon_polymeric_tract_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text);


ALTER TABLE so.non_ltr_retrotransposon_polymeric_tract OWNER TO postgres;

--
-- Name: non_processed_pseudogene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW non_processed_pseudogene AS
    SELECT feature.feature_id AS non_processed_pseudogene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text)) OR ((cvterm.name)::text = 'cassette_pseudogene'::text)) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text)) OR ((cvterm.name)::text = 'unitary_pseudogene'::text)) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text));


ALTER TABLE so.non_processed_pseudogene OWNER TO postgres;

--
-- Name: non_protein_coding; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW non_protein_coding AS
    SELECT feature.feature_id AS non_protein_coding_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((cvterm.name)::text = 'miRNA_encoding'::text) OR ((cvterm.name)::text = 'rRNA_encoding'::text)) OR ((cvterm.name)::text = 'scRNA_encoding'::text)) OR ((cvterm.name)::text = 'snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'snRNA_encoding'::text)) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text)) OR ((cvterm.name)::text = 'stRNA_encoding'::text)) OR ((cvterm.name)::text = 'tmRNA_encoding'::text)) OR ((cvterm.name)::text = 'tRNA_encoding'::text)) OR ((cvterm.name)::text = 'gRNA_encoding'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'non_protein_coding'::text));


ALTER TABLE so.non_protein_coding OWNER TO postgres;

--
-- Name: non_synonymous_codon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW non_synonymous_codon AS
    SELECT feature.feature_id AS non_synonymous_codon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'stop_gained'::text) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text));


ALTER TABLE so.non_synonymous_codon OWNER TO postgres;

--
-- Name: non_terminal_residue; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW non_terminal_residue AS
    SELECT feature.feature_id AS non_terminal_residue_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'non_terminal_residue'::text);


ALTER TABLE so.non_terminal_residue OWNER TO postgres;

--
-- Name: non_transcribed_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW non_transcribed_region AS
    SELECT feature.feature_id AS non_transcribed_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'non_transcribed_region'::text);


ALTER TABLE so.non_transcribed_region OWNER TO postgres;

--
-- Name: nonamer_of_recombination_feature_of_vertebrate_im_sys_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nonamer_of_recombination_feature_of_vertebrate_im_sys_gene AS
    SELECT feature.feature_id AS nonamer_of_recombination_feature_of_vertebrate_im_sys_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'three_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text));


ALTER TABLE so.nonamer_of_recombination_feature_of_vertebrate_im_sys_gene OWNER TO postgres;

--
-- Name: noncoding_exon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW noncoding_exon AS
    SELECT feature.feature_id AS noncoding_exon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'three_prime_noncoding_exon'::text) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'noncoding_exon'::text));


ALTER TABLE so.noncoding_exon OWNER TO postgres;

--
-- Name: noncoding_region_of_exon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW noncoding_region_of_exon AS
    SELECT feature.feature_id AS noncoding_region_of_exon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text));


ALTER TABLE so.noncoding_region_of_exon OWNER TO postgres;

--
-- Name: noncontiguous_finished; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW noncontiguous_finished AS
    SELECT feature.feature_id AS noncontiguous_finished_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'noncontiguous_finished'::text);


ALTER TABLE so.noncontiguous_finished OWNER TO postgres;

--
-- Name: nuclear_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nuclear_chromosome AS
    SELECT feature.feature_id AS nuclear_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'nuclear_chromosome'::text);


ALTER TABLE so.nuclear_chromosome OWNER TO postgres;

--
-- Name: nuclear_export_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nuclear_export_signal AS
    SELECT feature.feature_id AS nuclear_export_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'nuclear_export_signal'::text);


ALTER TABLE so.nuclear_export_signal OWNER TO postgres;

--
-- Name: nuclear_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nuclear_gene AS
    SELECT feature.feature_id AS nuclear_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'nuclear_gene'::text);


ALTER TABLE so.nuclear_gene OWNER TO postgres;

--
-- Name: nuclear_localization_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nuclear_localization_signal AS
    SELECT feature.feature_id AS nuclear_localization_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'nuclear_localization_signal'::text);


ALTER TABLE so.nuclear_localization_signal OWNER TO postgres;

--
-- Name: nuclear_mt_pseudogene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nuclear_mt_pseudogene AS
    SELECT feature.feature_id AS nuclear_mt_pseudogene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text);


ALTER TABLE so.nuclear_mt_pseudogene OWNER TO postgres;

--
-- Name: nuclear_rim_localization_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nuclear_rim_localization_signal AS
    SELECT feature.feature_id AS nuclear_rim_localization_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text);


ALTER TABLE so.nuclear_rim_localization_signal OWNER TO postgres;

--
-- Name: nuclear_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nuclear_sequence AS
    SELECT feature.feature_id AS nuclear_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'nuclear_sequence'::text);


ALTER TABLE so.nuclear_sequence OWNER TO postgres;

--
-- Name: nuclease_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nuclease_binding_site AS
    SELECT feature.feature_id AS nuclease_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'restriction_enzyme_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text));


ALTER TABLE so.nuclease_binding_site OWNER TO postgres;

--
-- Name: nuclease_hypersensitive_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nuclease_hypersensitive_site AS
    SELECT feature.feature_id AS nuclease_hypersensitive_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text));


ALTER TABLE so.nuclease_hypersensitive_site OWNER TO postgres;

--
-- Name: nuclease_sensitive_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nuclease_sensitive_site AS
    SELECT feature.feature_id AS nuclease_sensitive_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'nuclease_hypersensitive_site'::text) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text));


ALTER TABLE so.nuclease_sensitive_site OWNER TO postgres;

--
-- Name: nucleic_acid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nucleic_acid AS
    SELECT feature.feature_id AS nucleic_acid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((cvterm.name)::text = 'DNA'::text) OR ((cvterm.name)::text = 'RNA'::text)) OR ((cvterm.name)::text = 'morpholino_backbone'::text)) OR ((cvterm.name)::text = 'PNA'::text)) OR ((cvterm.name)::text = 'LNA'::text)) OR ((cvterm.name)::text = 'TNA'::text)) OR ((cvterm.name)::text = 'GNA'::text)) OR ((cvterm.name)::text = 'cDNA'::text)) OR ((cvterm.name)::text = 'genomic_DNA'::text)) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'R_GNA'::text)) OR ((cvterm.name)::text = 'S_GNA'::text)) OR ((cvterm.name)::text = 'nucleic_acid'::text));


ALTER TABLE so.nucleic_acid OWNER TO postgres;

--
-- Name: nucleomorph_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nucleomorph_gene AS
    SELECT feature.feature_id AS nucleomorph_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'nucleomorph_gene'::text);


ALTER TABLE so.nucleomorph_gene OWNER TO postgres;

--
-- Name: nucleomorphic_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nucleomorphic_chromosome AS
    SELECT feature.feature_id AS nucleomorphic_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'nucleomorphic_chromosome'::text);


ALTER TABLE so.nucleomorphic_chromosome OWNER TO postgres;

--
-- Name: nucleomorphic_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nucleomorphic_sequence AS
    SELECT feature.feature_id AS nucleomorphic_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'nucleomorphic_sequence'::text);


ALTER TABLE so.nucleomorphic_sequence OWNER TO postgres;

--
-- Name: nucleotide_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nucleotide_binding_site AS
    SELECT feature.feature_id AS nucleotide_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'miRNA_target_site'::text) OR ((cvterm.name)::text = 'DNA_binding_site'::text)) OR ((cvterm.name)::text = 'primer_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text));


ALTER TABLE so.nucleotide_binding_site OWNER TO postgres;

--
-- Name: nucleotide_match; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nucleotide_match AS
    SELECT feature.feature_id AS nucleotide_match_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((cvterm.name)::text = 'expressed_sequence_match'::text) OR ((cvterm.name)::text = 'cross_genome_match'::text)) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text)) OR ((cvterm.name)::text = 'primer_match'::text)) OR ((cvterm.name)::text = 'EST_match'::text)) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'nucleotide_match'::text));


ALTER TABLE so.nucleotide_match OWNER TO postgres;

--
-- Name: nucleotide_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nucleotide_motif AS
    SELECT feature.feature_id AS nucleotide_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'DNA_motif'::text) OR ((cvterm.name)::text = 'RNA_motif'::text)) OR ((cvterm.name)::text = 'PSE_motif'::text)) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'nucleotide_motif'::text));


ALTER TABLE so.nucleotide_motif OWNER TO postgres;

--
-- Name: nucleotide_to_protein_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW nucleotide_to_protein_binding_site AS
    SELECT feature.feature_id AS nucleotide_to_protein_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((cvterm.name)::text = 'nuclease_binding_site'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text));


ALTER TABLE so.nucleotide_to_protein_binding_site OWNER TO postgres;

--
-- Name: octamer_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW octamer_motif AS
    SELECT feature.feature_id AS octamer_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'octamer_motif'::text);


ALTER TABLE so.octamer_motif OWNER TO postgres;

--
-- Name: oligo; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW oligo AS
    SELECT feature.feature_id AS oligo_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'aptamer'::text) OR ((cvterm.name)::text = 'probe'::text)) OR ((cvterm.name)::text = 'tag'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text)) OR ((cvterm.name)::text = 'DNAzyme'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text)) OR ((cvterm.name)::text = 'DNA_aptamer'::text)) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'microarray_oligo'::text)) OR ((cvterm.name)::text = 'SAGE_tag'::text)) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'primer'::text)) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'RNAi_reagent'::text)) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'morpholino_oligo'::text)) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'oligo'::text));


ALTER TABLE so.oligo OWNER TO postgres;

--
-- Name: oligo_u_tail; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW oligo_u_tail AS
    SELECT feature.feature_id AS oligo_u_tail_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'oligo_U_tail'::text);


ALTER TABLE so.oligo_u_tail OWNER TO postgres;

--
-- Name: one_methyl_3_3_amino_three_carboxypropyl_pseudouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW one_methyl_3_3_amino_three_carboxypropyl_pseudouridine AS
    SELECT feature.feature_id AS one_methyl_3_3_amino_three_carboxypropyl_pseudouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text);


ALTER TABLE so.one_methyl_3_3_amino_three_carboxypropyl_pseudouridine OWNER TO postgres;

--
-- Name: one_methyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW one_methyladenosine AS
    SELECT feature.feature_id AS one_methyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'one_methyladenosine'::text);


ALTER TABLE so.one_methyladenosine OWNER TO postgres;

--
-- Name: one_methylguanosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW one_methylguanosine AS
    SELECT feature.feature_id AS one_methylguanosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'one_methylguanosine'::text);


ALTER TABLE so.one_methylguanosine OWNER TO postgres;

--
-- Name: one_methylinosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW one_methylinosine AS
    SELECT feature.feature_id AS one_methylinosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'one_methylinosine'::text);


ALTER TABLE so.one_methylinosine OWNER TO postgres;

--
-- Name: one_methylpseudouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW one_methylpseudouridine AS
    SELECT feature.feature_id AS one_methylpseudouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'one_methylpseudouridine'::text);


ALTER TABLE so.one_methylpseudouridine OWNER TO postgres;

--
-- Name: one_two_prime_o_dimethyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW one_two_prime_o_dimethyladenosine AS
    SELECT feature.feature_id AS one_two_prime_o_dimethyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text);


ALTER TABLE so.one_two_prime_o_dimethyladenosine OWNER TO postgres;

--
-- Name: one_two_prime_o_dimethylguanosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW one_two_prime_o_dimethylguanosine AS
    SELECT feature.feature_id AS one_two_prime_o_dimethylguanosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text);


ALTER TABLE so.one_two_prime_o_dimethylguanosine OWNER TO postgres;

--
-- Name: one_two_prime_o_dimethylinosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW one_two_prime_o_dimethylinosine AS
    SELECT feature.feature_id AS one_two_prime_o_dimethylinosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text);


ALTER TABLE so.one_two_prime_o_dimethylinosine OWNER TO postgres;

--
-- Name: open_chromatin_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW open_chromatin_region AS
    SELECT feature.feature_id AS open_chromatin_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'open_chromatin_region'::text);


ALTER TABLE so.open_chromatin_region OWNER TO postgres;

--
-- Name: operator; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW operator AS
    SELECT feature.feature_id AS operator_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'operator'::text);


ALTER TABLE so.operator OWNER TO postgres;

--
-- Name: operon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW operon AS
    SELECT feature.feature_id AS operon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'operon'::text);


ALTER TABLE so.operon OWNER TO postgres;

--
-- Name: operon_member; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW operon_member AS
    SELECT feature.feature_id AS operon_member_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'operon_member'::text);


ALTER TABLE so.operon_member OWNER TO postgres;

--
-- Name: orf; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW orf AS
    SELECT feature.feature_id AS orf_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'mini_gene'::text) OR ((cvterm.name)::text = 'rescue_mini_gene'::text)) OR ((cvterm.name)::text = 'ORF'::text));


ALTER TABLE so.orf OWNER TO postgres;

--
-- Name: organelle_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW organelle_sequence AS
    SELECT feature.feature_id AS organelle_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((cvterm.name)::text = 'macronuclear_sequence'::text) OR ((cvterm.name)::text = 'micronuclear_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text)) OR ((cvterm.name)::text = 'nuclear_sequence'::text)) OR ((cvterm.name)::text = 'nucleomorphic_sequence'::text)) OR ((cvterm.name)::text = 'plastid_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_DNA'::text)) OR ((cvterm.name)::text = 'apicoplast_sequence'::text)) OR ((cvterm.name)::text = 'chromoplast_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_sequence'::text)) OR ((cvterm.name)::text = 'cyanelle_sequence'::text)) OR ((cvterm.name)::text = 'leucoplast_sequence'::text)) OR ((cvterm.name)::text = 'proplastid_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_DNA'::text)) OR ((cvterm.name)::text = 'organelle_sequence'::text));


ALTER TABLE so.organelle_sequence OWNER TO postgres;

--
-- Name: oric; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW oric AS
    SELECT feature.feature_id AS oric_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'oriC'::text);


ALTER TABLE so.oric OWNER TO postgres;

--
-- Name: origin_of_replication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW origin_of_replication AS
    SELECT feature.feature_id AS origin_of_replication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'D_loop'::text) OR ((cvterm.name)::text = 'ARS'::text)) OR ((cvterm.name)::text = 'oriT'::text)) OR ((cvterm.name)::text = 'amplification_origin'::text)) OR ((cvterm.name)::text = 'oriV'::text)) OR ((cvterm.name)::text = 'oriC'::text)) OR ((cvterm.name)::text = 'origin_of_replication'::text));


ALTER TABLE so.origin_of_replication OWNER TO postgres;

--
-- Name: orit; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW orit AS
    SELECT feature.feature_id AS orit_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'oriT'::text);


ALTER TABLE so.orit OWNER TO postgres;

--
-- Name: oriv; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW oriv AS
    SELECT feature.feature_id AS oriv_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'oriV'::text);


ALTER TABLE so.oriv OWNER TO postgres;

--
-- Name: orphan; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW orphan AS
    SELECT feature.feature_id AS orphan_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'orphan'::text);


ALTER TABLE so.orphan OWNER TO postgres;

--
-- Name: orphan_cds; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW orphan_cds AS
    SELECT feature.feature_id AS orphan_cds_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'orphan_CDS'::text);


ALTER TABLE so.orphan_cds OWNER TO postgres;

--
-- Name: orthologous; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW orthologous AS
    SELECT feature.feature_id AS orthologous_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'orthologous'::text);


ALTER TABLE so.orthologous OWNER TO postgres;

--
-- Name: orthologous_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW orthologous_region AS
    SELECT feature.feature_id AS orthologous_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'orthologous_region'::text);


ALTER TABLE so.orthologous_region OWNER TO postgres;

--
-- Name: outron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW outron AS
    SELECT feature.feature_id AS outron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'outron'::text);


ALTER TABLE so.outron OWNER TO postgres;

--
-- Name: overlapping; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW overlapping AS
    SELECT feature.feature_id AS overlapping_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((cvterm.name)::text = 'inside_intron'::text) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'antisense'::text)) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text)) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'overlapping'::text));


ALTER TABLE so.overlapping OWNER TO postgres;

--
-- Name: overlapping_est_set; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW overlapping_est_set AS
    SELECT feature.feature_id AS overlapping_est_set_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'overlapping_EST_set'::text);


ALTER TABLE so.overlapping_est_set OWNER TO postgres;

--
-- Name: overlapping_feature_set; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW overlapping_feature_set AS
    SELECT feature.feature_id AS overlapping_feature_set_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'overlapping_EST_set'::text) OR ((cvterm.name)::text = 'overlapping_feature_set'::text));


ALTER TABLE so.overlapping_feature_set OWNER TO postgres;

--
-- Name: oxys_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW oxys_rna AS
    SELECT feature.feature_id AS oxys_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'OxyS_RNA'::text);


ALTER TABLE so.oxys_rna OWNER TO postgres;

--
-- Name: p_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW p_element AS
    SELECT feature.feature_id AS p_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'p_element'::text);


ALTER TABLE so.p_element OWNER TO postgres;

--
-- Name: pac; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pac AS
    SELECT feature.feature_id AS pac_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'PAC'::text);


ALTER TABLE so.pac OWNER TO postgres;

--
-- Name: pac_end; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pac_end AS
    SELECT feature.feature_id AS pac_end_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'PAC_end'::text);


ALTER TABLE so.pac_end OWNER TO postgres;

--
-- Name: paired_end_fragment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW paired_end_fragment AS
    SELECT feature.feature_id AS paired_end_fragment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'paired_end_fragment'::text);


ALTER TABLE so.paired_end_fragment OWNER TO postgres;

--
-- Name: paracentric; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW paracentric AS
    SELECT feature.feature_id AS paracentric_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'paracentric'::text);


ALTER TABLE so.paracentric OWNER TO postgres;

--
-- Name: paracentric_inversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW paracentric_inversion AS
    SELECT feature.feature_id AS paracentric_inversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'paracentric_inversion'::text);


ALTER TABLE so.paracentric_inversion OWNER TO postgres;

--
-- Name: parallel_beta_strand; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW parallel_beta_strand AS
    SELECT feature.feature_id AS parallel_beta_strand_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'parallel_beta_strand'::text);


ALTER TABLE so.parallel_beta_strand OWNER TO postgres;

--
-- Name: paralogous; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW paralogous AS
    SELECT feature.feature_id AS paralogous_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'paralogous'::text);


ALTER TABLE so.paralogous OWNER TO postgres;

--
-- Name: paralogous_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW paralogous_region AS
    SELECT feature.feature_id AS paralogous_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'paralogous_region'::text);


ALTER TABLE so.paralogous_region OWNER TO postgres;

--
-- Name: partially_characterised_chromosomal_mutation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW partially_characterised_chromosomal_mutation AS
    SELECT feature.feature_id AS partially_characterised_chromosomal_mutation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text);


ALTER TABLE so.partially_characterised_chromosomal_mutation OWNER TO postgres;

--
-- Name: partially_processed_cdna_clone; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW partially_processed_cdna_clone AS
    SELECT feature.feature_id AS partially_processed_cdna_clone_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text);


ALTER TABLE so.partially_processed_cdna_clone OWNER TO postgres;

--
-- Name: paternal_uniparental_disomy; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW paternal_uniparental_disomy AS
    SELECT feature.feature_id AS paternal_uniparental_disomy_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'paternal_uniparental_disomy'::text);


ALTER TABLE so.paternal_uniparental_disomy OWNER TO postgres;

--
-- Name: paternal_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW paternal_variant AS
    SELECT feature.feature_id AS paternal_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'paternal_variant'::text);


ALTER TABLE so.paternal_variant OWNER TO postgres;

--
-- Name: paternally_imprinted; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW paternally_imprinted AS
    SELECT feature.feature_id AS paternally_imprinted_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'paternally_imprinted'::text);


ALTER TABLE so.paternally_imprinted OWNER TO postgres;

--
-- Name: paternally_imprinted_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW paternally_imprinted_gene AS
    SELECT feature.feature_id AS paternally_imprinted_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'paternally_imprinted_gene'::text);


ALTER TABLE so.paternally_imprinted_gene OWNER TO postgres;

--
-- Name: pathogenic_island; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pathogenic_island AS
    SELECT feature.feature_id AS pathogenic_island_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pathogenic_island'::text);


ALTER TABLE so.pathogenic_island OWNER TO postgres;

--
-- Name: pcr_product; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pcr_product AS
    SELECT feature.feature_id AS pcr_product_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'RAPD'::text) OR ((cvterm.name)::text = 'PCR_product'::text));


ALTER TABLE so.pcr_product OWNER TO postgres;

--
-- Name: pedigree_specific_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pedigree_specific_variant AS
    SELECT feature.feature_id AS pedigree_specific_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pedigree_specific_variant'::text);


ALTER TABLE so.pedigree_specific_variant OWNER TO postgres;

--
-- Name: peptide_coil; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW peptide_coil AS
    SELECT feature.feature_id AS peptide_coil_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'peptide_coil'::text);


ALTER TABLE so.peptide_coil OWNER TO postgres;

--
-- Name: peptide_collection; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW peptide_collection AS
    SELECT feature.feature_id AS peptide_collection_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'peptide_collection'::text);


ALTER TABLE so.peptide_collection OWNER TO postgres;

--
-- Name: peptide_helix; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW peptide_helix AS
    SELECT feature.feature_id AS peptide_helix_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'left_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text));


ALTER TABLE so.peptide_helix OWNER TO postgres;

--
-- Name: peptide_localization_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW peptide_localization_signal AS
    SELECT feature.feature_id AS peptide_localization_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'signal_peptide'::text) OR ((cvterm.name)::text = 'transit_peptide'::text)) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text)) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'nuclear_export_signal'::text)) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text)) OR ((cvterm.name)::text = 'peptide_localization_signal'::text));


ALTER TABLE so.peptide_localization_signal OWNER TO postgres;

--
-- Name: peptidyl; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW peptidyl AS
    SELECT feature.feature_id AS peptidyl_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'peptidyl'::text);


ALTER TABLE so.peptidyl OWNER TO postgres;

--
-- Name: pericentric; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pericentric AS
    SELECT feature.feature_id AS pericentric_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pericentric'::text);


ALTER TABLE so.pericentric OWNER TO postgres;

--
-- Name: pericentric_inversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pericentric_inversion AS
    SELECT feature.feature_id AS pericentric_inversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pericentric_inversion'::text);


ALTER TABLE so.pericentric_inversion OWNER TO postgres;

--
-- Name: peroxywybutosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW peroxywybutosine AS
    SELECT feature.feature_id AS peroxywybutosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'peroxywybutosine'::text);


ALTER TABLE so.peroxywybutosine OWNER TO postgres;

--
-- Name: phage_rna_polymerase_promoter; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW phage_rna_polymerase_promoter AS
    SELECT feature.feature_id AS phage_rna_polymerase_promoter_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text));


ALTER TABLE so.phage_rna_polymerase_promoter OWNER TO postgres;

--
-- Name: phage_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW phage_sequence AS
    SELECT feature.feature_id AS phage_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'phage_sequence'::text);


ALTER TABLE so.phage_sequence OWNER TO postgres;

--
-- Name: phagemid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW phagemid AS
    SELECT feature.feature_id AS phagemid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'phagemid'::text);


ALTER TABLE so.phagemid OWNER TO postgres;

--
-- Name: phe_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW phe_trna_primary_transcript AS
    SELECT feature.feature_id AS phe_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text);


ALTER TABLE so.phe_trna_primary_transcript OWNER TO postgres;

--
-- Name: phenylalanine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW phenylalanine AS
    SELECT feature.feature_id AS phenylalanine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'phenylalanine'::text);


ALTER TABLE so.phenylalanine OWNER TO postgres;

--
-- Name: phenylalanyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW phenylalanyl_trna AS
    SELECT feature.feature_id AS phenylalanyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'phenylalanyl_tRNA'::text);


ALTER TABLE so.phenylalanyl_trna OWNER TO postgres;

--
-- Name: pi_helix; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pi_helix AS
    SELECT feature.feature_id AS pi_helix_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pi_helix'::text);


ALTER TABLE so.pi_helix OWNER TO postgres;

--
-- Name: pirna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pirna AS
    SELECT feature.feature_id AS pirna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'piRNA'::text);


ALTER TABLE so.pirna OWNER TO postgres;

--
-- Name: pirna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pirna_gene AS
    SELECT feature.feature_id AS pirna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'piRNA_gene'::text);


ALTER TABLE so.pirna_gene OWNER TO postgres;

--
-- Name: plasmid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW plasmid AS
    SELECT feature.feature_id AS plasmid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((cvterm.name)::text = 'engineered_plasmid'::text) OR ((cvterm.name)::text = 'episome'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'plasmid'::text));


ALTER TABLE so.plasmid OWNER TO postgres;

--
-- Name: plasmid_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW plasmid_gene AS
    SELECT feature.feature_id AS plasmid_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'plasmid_gene'::text);


ALTER TABLE so.plasmid_gene OWNER TO postgres;

--
-- Name: plasmid_location; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW plasmid_location AS
    SELECT feature.feature_id AS plasmid_location_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'plasmid_location'::text);


ALTER TABLE so.plasmid_location OWNER TO postgres;

--
-- Name: plasmid_vector; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW plasmid_vector AS
    SELECT feature.feature_id AS plasmid_vector_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'plasmid_vector'::text);


ALTER TABLE so.plasmid_vector OWNER TO postgres;

--
-- Name: plastid_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW plastid_gene AS
    SELECT feature.feature_id AS plastid_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'apicoplast_gene'::text) OR ((cvterm.name)::text = 'ct_gene'::text)) OR ((cvterm.name)::text = 'chromoplast_gene'::text)) OR ((cvterm.name)::text = 'cyanelle_gene'::text)) OR ((cvterm.name)::text = 'leucoplast_gene'::text)) OR ((cvterm.name)::text = 'proplastid_gene'::text)) OR ((cvterm.name)::text = 'plastid_gene'::text));


ALTER TABLE so.plastid_gene OWNER TO postgres;

--
-- Name: plastid_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW plastid_sequence AS
    SELECT feature.feature_id AS plastid_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'apicoplast_sequence'::text) OR ((cvterm.name)::text = 'chromoplast_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_sequence'::text)) OR ((cvterm.name)::text = 'cyanelle_sequence'::text)) OR ((cvterm.name)::text = 'leucoplast_sequence'::text)) OR ((cvterm.name)::text = 'proplastid_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_DNA'::text)) OR ((cvterm.name)::text = 'plastid_sequence'::text));


ALTER TABLE so.plastid_sequence OWNER TO postgres;

--
-- Name: plus_1_frameshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW plus_1_frameshift AS
    SELECT feature.feature_id AS plus_1_frameshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'plus_1_frameshift'::text);


ALTER TABLE so.plus_1_frameshift OWNER TO postgres;

--
-- Name: plus_1_frameshift_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW plus_1_frameshift_variant AS
    SELECT feature.feature_id AS plus_1_frameshift_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'plus_1_frameshift_variant'::text);


ALTER TABLE so.plus_1_frameshift_variant OWNER TO postgres;

--
-- Name: plus_1_translational_frameshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW plus_1_translational_frameshift AS
    SELECT feature.feature_id AS plus_1_translational_frameshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'plus_1_translational_frameshift'::text);


ALTER TABLE so.plus_1_translational_frameshift OWNER TO postgres;

--
-- Name: plus_1_translationally_frameshifted; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW plus_1_translationally_frameshifted AS
    SELECT feature.feature_id AS plus_1_translationally_frameshifted_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text);


ALTER TABLE so.plus_1_translationally_frameshifted OWNER TO postgres;

--
-- Name: plus_2_frameshift_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW plus_2_frameshift_variant AS
    SELECT feature.feature_id AS plus_2_frameshift_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'plus_2_frameshift variant'::text);


ALTER TABLE so.plus_2_frameshift_variant OWNER TO postgres;

--
-- Name: plus_2_framshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW plus_2_framshift AS
    SELECT feature.feature_id AS plus_2_framshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'plus_2_framshift'::text);


ALTER TABLE so.plus_2_framshift OWNER TO postgres;

--
-- Name: plus_2_translational_frameshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW plus_2_translational_frameshift AS
    SELECT feature.feature_id AS plus_2_translational_frameshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'plus_2_translational_frameshift'::text);


ALTER TABLE so.plus_2_translational_frameshift OWNER TO postgres;

--
-- Name: pna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pna AS
    SELECT feature.feature_id AS pna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'PNA'::text);


ALTER TABLE so.pna OWNER TO postgres;

--
-- Name: pna_oligo; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pna_oligo AS
    SELECT feature.feature_id AS pna_oligo_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'PNA_oligo'::text);


ALTER TABLE so.pna_oligo OWNER TO postgres;

--
-- Name: point_centromere; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW point_centromere AS
    SELECT feature.feature_id AS point_centromere_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'point_centromere'::text);


ALTER TABLE so.point_centromere OWNER TO postgres;

--
-- Name: point_mutation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW point_mutation AS
    SELECT feature.feature_id AS point_mutation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'point_mutation'::text);


ALTER TABLE so.point_mutation OWNER TO postgres;

--
-- Name: polinton; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polinton AS
    SELECT feature.feature_id AS polinton_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polinton'::text);


ALTER TABLE so.polinton OWNER TO postgres;

--
-- Name: polya_primed_cdna_clone; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polya_primed_cdna_clone AS
    SELECT feature.feature_id AS polya_primed_cdna_clone_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text);


ALTER TABLE so.polya_primed_cdna_clone OWNER TO postgres;

--
-- Name: polya_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polya_sequence AS
    SELECT feature.feature_id AS polya_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polyA_sequence'::text);


ALTER TABLE so.polya_sequence OWNER TO postgres;

--
-- Name: polya_signal_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polya_signal_sequence AS
    SELECT feature.feature_id AS polya_signal_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polyA_signal_sequence'::text);


ALTER TABLE so.polya_signal_sequence OWNER TO postgres;

--
-- Name: polya_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polya_site AS
    SELECT feature.feature_id AS polya_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polyA_site'::text);


ALTER TABLE so.polya_site OWNER TO postgres;

--
-- Name: polyadenylated; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polyadenylated AS
    SELECT feature.feature_id AS polyadenylated_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polyadenylated'::text);


ALTER TABLE so.polyadenylated OWNER TO postgres;

--
-- Name: polyadenylated_mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polyadenylated_mrna AS
    SELECT feature.feature_id AS polyadenylated_mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polyadenylated_mRNA'::text);


ALTER TABLE so.polyadenylated_mrna OWNER TO postgres;

--
-- Name: polyadenylation_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polyadenylation_variant AS
    SELECT feature.feature_id AS polyadenylation_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'increased_polyadenylation_variant'::text) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'polyadenylation_variant'::text));


ALTER TABLE so.polyadenylation_variant OWNER TO postgres;

--
-- Name: polycistronic; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polycistronic AS
    SELECT feature.feature_id AS polycistronic_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'dicistronic'::text) OR ((cvterm.name)::text = 'polycistronic'::text));


ALTER TABLE so.polycistronic OWNER TO postgres;

--
-- Name: polycistronic_mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polycistronic_mrna AS
    SELECT feature.feature_id AS polycistronic_mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text));


ALTER TABLE so.polycistronic_mrna OWNER TO postgres;

--
-- Name: polycistronic_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polycistronic_primary_transcript AS
    SELECT feature.feature_id AS polycistronic_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text));


ALTER TABLE so.polycistronic_primary_transcript OWNER TO postgres;

--
-- Name: polycistronic_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polycistronic_transcript AS
    SELECT feature.feature_id AS polycistronic_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'dicistronic_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_transcript'::text));


ALTER TABLE so.polycistronic_transcript OWNER TO postgres;

--
-- Name: polymer_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polymer_attribute AS
    SELECT feature.feature_id AS polymer_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((cvterm.name)::text = 'nucleic_acid'::text) OR ((cvterm.name)::text = 'synthetic_sequence'::text)) OR ((cvterm.name)::text = 'topology_attribute'::text)) OR ((cvterm.name)::text = 'peptidyl'::text)) OR ((cvterm.name)::text = 'DNA'::text)) OR ((cvterm.name)::text = 'RNA'::text)) OR ((cvterm.name)::text = 'morpholino_backbone'::text)) OR ((cvterm.name)::text = 'PNA'::text)) OR ((cvterm.name)::text = 'LNA'::text)) OR ((cvterm.name)::text = 'TNA'::text)) OR ((cvterm.name)::text = 'GNA'::text)) OR ((cvterm.name)::text = 'cDNA'::text)) OR ((cvterm.name)::text = 'genomic_DNA'::text)) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'R_GNA'::text)) OR ((cvterm.name)::text = 'S_GNA'::text)) OR ((cvterm.name)::text = 'random_sequence'::text)) OR ((cvterm.name)::text = 'designed_sequence'::text)) OR ((cvterm.name)::text = 'linear'::text)) OR ((cvterm.name)::text = 'circular'::text)) OR ((cvterm.name)::text = 'polymer_attribute'::text));


ALTER TABLE so.polymer_attribute OWNER TO postgres;

--
-- Name: polymerase_synthesis_read; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polymerase_synthesis_read AS
    SELECT feature.feature_id AS polymerase_synthesis_read_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polymerase_synthesis_read'::text);


ALTER TABLE so.polymerase_synthesis_read OWNER TO postgres;

--
-- Name: polymorphic_sequence_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polymorphic_sequence_variant AS
    SELECT feature.feature_id AS polymorphic_sequence_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polymorphic_sequence_variant'::text);


ALTER TABLE so.polymorphic_sequence_variant OWNER TO postgres;

--
-- Name: polymorphic_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polymorphic_variant AS
    SELECT feature.feature_id AS polymorphic_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polymorphic_variant'::text);


ALTER TABLE so.polymorphic_variant OWNER TO postgres;

--
-- Name: polypeptide; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide AS
    SELECT feature.feature_id AS polypeptide_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide'::text);


ALTER TABLE so.polypeptide OWNER TO postgres;

--
-- Name: polypeptide_binding_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_binding_motif AS
    SELECT feature.feature_id AS polypeptide_binding_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_binding_motif'::text);


ALTER TABLE so.polypeptide_binding_motif OWNER TO postgres;

--
-- Name: polypeptide_calcium_ion_contact_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_calcium_ion_contact_site AS
    SELECT feature.feature_id AS polypeptide_calcium_ion_contact_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text);


ALTER TABLE so.polypeptide_calcium_ion_contact_site OWNER TO postgres;

--
-- Name: polypeptide_catalytic_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_catalytic_motif AS
    SELECT feature.feature_id AS polypeptide_catalytic_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text);


ALTER TABLE so.polypeptide_catalytic_motif OWNER TO postgres;

--
-- Name: polypeptide_cobalt_ion_contact_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_cobalt_ion_contact_site AS
    SELECT feature.feature_id AS polypeptide_cobalt_ion_contact_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text);


ALTER TABLE so.polypeptide_cobalt_ion_contact_site OWNER TO postgres;

--
-- Name: polypeptide_conserved_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_conserved_motif AS
    SELECT feature.feature_id AS polypeptide_conserved_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_conserved_motif'::text);


ALTER TABLE so.polypeptide_conserved_motif OWNER TO postgres;

--
-- Name: polypeptide_conserved_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_conserved_region AS
    SELECT feature.feature_id AS polypeptide_conserved_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'polypeptide_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_repeat'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text));


ALTER TABLE so.polypeptide_conserved_region OWNER TO postgres;

--
-- Name: polypeptide_copper_ion_contact_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_copper_ion_contact_site AS
    SELECT feature.feature_id AS polypeptide_copper_ion_contact_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text);


ALTER TABLE so.polypeptide_copper_ion_contact_site OWNER TO postgres;

--
-- Name: polypeptide_dna_contact; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_dna_contact AS
    SELECT feature.feature_id AS polypeptide_dna_contact_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_DNA_contact'::text);


ALTER TABLE so.polypeptide_dna_contact OWNER TO postgres;

--
-- Name: polypeptide_domain; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_domain AS
    SELECT feature.feature_id AS polypeptide_domain_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_domain'::text);


ALTER TABLE so.polypeptide_domain OWNER TO postgres;

--
-- Name: polypeptide_function_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_function_variant AS
    SELECT feature.feature_id AS polypeptide_function_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text)) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text)) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text)) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text));


ALTER TABLE so.polypeptide_function_variant OWNER TO postgres;

--
-- Name: polypeptide_fusion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_fusion AS
    SELECT feature.feature_id AS polypeptide_fusion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_fusion'::text);


ALTER TABLE so.polypeptide_fusion OWNER TO postgres;

--
-- Name: polypeptide_gain_of_function_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_gain_of_function_variant AS
    SELECT feature.feature_id AS polypeptide_gain_of_function_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text);


ALTER TABLE so.polypeptide_gain_of_function_variant OWNER TO postgres;

--
-- Name: polypeptide_iron_ion_contact_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_iron_ion_contact_site AS
    SELECT feature.feature_id AS polypeptide_iron_ion_contact_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text);


ALTER TABLE so.polypeptide_iron_ion_contact_site OWNER TO postgres;

--
-- Name: polypeptide_ligand_contact; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_ligand_contact AS
    SELECT feature.feature_id AS polypeptide_ligand_contact_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_ligand_contact'::text);


ALTER TABLE so.polypeptide_ligand_contact OWNER TO postgres;

--
-- Name: polypeptide_localization_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_localization_variant AS
    SELECT feature.feature_id AS polypeptide_localization_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_localization_variant'::text);


ALTER TABLE so.polypeptide_localization_variant OWNER TO postgres;

--
-- Name: polypeptide_loss_of_function_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_loss_of_function_variant AS
    SELECT feature.feature_id AS polypeptide_loss_of_function_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'inactive_ligand_binding_site'::text) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text)) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text)) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text));


ALTER TABLE so.polypeptide_loss_of_function_variant OWNER TO postgres;

--
-- Name: polypeptide_magnesium_ion_contact_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_magnesium_ion_contact_site AS
    SELECT feature.feature_id AS polypeptide_magnesium_ion_contact_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text);


ALTER TABLE so.polypeptide_magnesium_ion_contact_site OWNER TO postgres;

--
-- Name: polypeptide_manganese_ion_contact_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_manganese_ion_contact_site AS
    SELECT feature.feature_id AS polypeptide_manganese_ion_contact_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text);


ALTER TABLE so.polypeptide_manganese_ion_contact_site OWNER TO postgres;

--
-- Name: polypeptide_metal_contact; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_metal_contact AS
    SELECT feature.feature_id AS polypeptide_metal_contact_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text));


ALTER TABLE so.polypeptide_metal_contact OWNER TO postgres;

--
-- Name: polypeptide_molybdenum_ion_contact_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_molybdenum_ion_contact_site AS
    SELECT feature.feature_id AS polypeptide_molybdenum_ion_contact_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text);


ALTER TABLE so.polypeptide_molybdenum_ion_contact_site OWNER TO postgres;

--
-- Name: polypeptide_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_motif AS
    SELECT feature.feature_id AS polypeptide_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'biochemical_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_motif'::text));


ALTER TABLE so.polypeptide_motif OWNER TO postgres;

--
-- Name: polypeptide_nest_left_right_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_nest_left_right_motif AS
    SELECT feature.feature_id AS polypeptide_nest_left_right_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text);


ALTER TABLE so.polypeptide_nest_left_right_motif OWNER TO postgres;

--
-- Name: polypeptide_nest_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_nest_motif AS
    SELECT feature.feature_id AS polypeptide_nest_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text));


ALTER TABLE so.polypeptide_nest_motif OWNER TO postgres;

--
-- Name: polypeptide_nest_right_left_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_nest_right_left_motif AS
    SELECT feature.feature_id AS polypeptide_nest_right_left_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text);


ALTER TABLE so.polypeptide_nest_right_left_motif OWNER TO postgres;

--
-- Name: polypeptide_nickel_ion_contact_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_nickel_ion_contact_site AS
    SELECT feature.feature_id AS polypeptide_nickel_ion_contact_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text);


ALTER TABLE so.polypeptide_nickel_ion_contact_site OWNER TO postgres;

--
-- Name: polypeptide_partial_loss_of_function; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_partial_loss_of_function AS
    SELECT feature.feature_id AS polypeptide_partial_loss_of_function_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text);


ALTER TABLE so.polypeptide_partial_loss_of_function OWNER TO postgres;

--
-- Name: polypeptide_post_translational_processing_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_post_translational_processing_variant AS
    SELECT feature.feature_id AS polypeptide_post_translational_processing_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text);


ALTER TABLE so.polypeptide_post_translational_processing_variant OWNER TO postgres;

--
-- Name: polypeptide_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_region AS
    SELECT feature.feature_id AS polypeptide_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'mature_protein_region'::text) OR ((cvterm.name)::text = 'immature_peptide_region'::text)) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text)) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text)) OR ((cvterm.name)::text = 'peptide_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text)) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text)) OR ((cvterm.name)::text = 'active_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'membrane_structure'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text)) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text)) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text)) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'asx_motif'::text)) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'coiled_coil'::text)) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'natural_variant_site'::text)) OR ((cvterm.name)::text = 'mutated_variant_site'::text)) OR ((cvterm.name)::text = 'alternate_sequence_site'::text)) OR ((cvterm.name)::text = 'signal_peptide'::text)) OR ((cvterm.name)::text = 'transit_peptide'::text)) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text)) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'nuclear_export_signal'::text)) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text)) OR ((cvterm.name)::text = 'intein'::text)) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text)) OR ((cvterm.name)::text = 'propeptide'::text)) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text)) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text)) OR ((cvterm.name)::text = 'n_terminal_region'::text)) OR ((cvterm.name)::text = 'c_terminal_region'::text)) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'polypeptide_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_repeat'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_region'::text));


ALTER TABLE so.polypeptide_region OWNER TO postgres;

--
-- Name: polypeptide_repeat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_repeat AS
    SELECT feature.feature_id AS polypeptide_repeat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_repeat'::text);


ALTER TABLE so.polypeptide_repeat OWNER TO postgres;

--
-- Name: polypeptide_secondary_structure; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_secondary_structure AS
    SELECT feature.feature_id AS polypeptide_secondary_structure_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'asx_motif'::text) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text));


ALTER TABLE so.polypeptide_secondary_structure OWNER TO postgres;

--
-- Name: polypeptide_sequence_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_sequence_variant AS
    SELECT feature.feature_id AS polypeptide_sequence_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((cvterm.name)::text = 'amino_acid_deletion'::text) OR ((cvterm.name)::text = 'amino_acid_insertion'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text)) OR ((cvterm.name)::text = 'polypeptide_fusion'::text)) OR ((cvterm.name)::text = 'polypeptide_truncation'::text)) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text));


ALTER TABLE so.polypeptide_sequence_variant OWNER TO postgres;

--
-- Name: polypeptide_sequencing_information; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_sequencing_information AS
    SELECT feature.feature_id AS polypeptide_sequencing_information_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'non_adjacent_residues'::text) OR ((cvterm.name)::text = 'non_terminal_residue'::text)) OR ((cvterm.name)::text = 'sequence_conflict'::text)) OR ((cvterm.name)::text = 'sequence_uncertainty'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text));


ALTER TABLE so.polypeptide_sequencing_information OWNER TO postgres;

--
-- Name: polypeptide_structural_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_structural_motif AS
    SELECT feature.feature_id AS polypeptide_structural_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'coiled_coil'::text) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text));


ALTER TABLE so.polypeptide_structural_motif OWNER TO postgres;

--
-- Name: polypeptide_structural_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_structural_region AS
    SELECT feature.feature_id AS polypeptide_structural_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'membrane_structure'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text)) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text)) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text)) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'asx_motif'::text)) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'coiled_coil'::text)) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text));


ALTER TABLE so.polypeptide_structural_region OWNER TO postgres;

--
-- Name: polypeptide_truncation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_truncation AS
    SELECT feature.feature_id AS polypeptide_truncation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_truncation'::text);


ALTER TABLE so.polypeptide_truncation OWNER TO postgres;

--
-- Name: polypeptide_tungsten_ion_contact_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_tungsten_ion_contact_site AS
    SELECT feature.feature_id AS polypeptide_tungsten_ion_contact_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text);


ALTER TABLE so.polypeptide_tungsten_ion_contact_site OWNER TO postgres;

--
-- Name: polypeptide_turn_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_turn_motif AS
    SELECT feature.feature_id AS polypeptide_turn_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((cvterm.name)::text = 'asx_turn'::text) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text));


ALTER TABLE so.polypeptide_turn_motif OWNER TO postgres;

--
-- Name: polypeptide_variation_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_variation_site AS
    SELECT feature.feature_id AS polypeptide_variation_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'natural_variant_site'::text) OR ((cvterm.name)::text = 'mutated_variant_site'::text)) OR ((cvterm.name)::text = 'alternate_sequence_site'::text)) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text));


ALTER TABLE so.polypeptide_variation_site OWNER TO postgres;

--
-- Name: polypeptide_zinc_ion_contact_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypeptide_zinc_ion_contact_site AS
    SELECT feature.feature_id AS polypeptide_zinc_ion_contact_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text);


ALTER TABLE so.polypeptide_zinc_ion_contact_site OWNER TO postgres;

--
-- Name: polyploid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polyploid AS
    SELECT feature.feature_id AS polyploid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'autopolyploid'::text) OR ((cvterm.name)::text = 'allopolyploid'::text)) OR ((cvterm.name)::text = 'polyploid'::text));


ALTER TABLE so.polyploid OWNER TO postgres;

--
-- Name: polypyrimidine_tract; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW polypyrimidine_tract AS
    SELECT feature.feature_id AS polypyrimidine_tract_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'polypyrimidine_tract'::text);


ALTER TABLE so.polypyrimidine_tract OWNER TO postgres;

--
-- Name: population_specific_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW population_specific_variant AS
    SELECT feature.feature_id AS population_specific_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'population_specific_variant'::text);


ALTER TABLE so.population_specific_variant OWNER TO postgres;

--
-- Name: positive_sense_ssrna_viral_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW positive_sense_ssrna_viral_sequence AS
    SELECT feature.feature_id AS positive_sense_ssrna_viral_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text);


ALTER TABLE so.positive_sense_ssrna_viral_sequence OWNER TO postgres;

--
-- Name: positively_autoregulated; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW positively_autoregulated AS
    SELECT feature.feature_id AS positively_autoregulated_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'positively_autoregulated'::text);


ALTER TABLE so.positively_autoregulated OWNER TO postgres;

--
-- Name: positively_autoregulated_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW positively_autoregulated_gene AS
    SELECT feature.feature_id AS positively_autoregulated_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'positively_autoregulated_gene'::text);


ALTER TABLE so.positively_autoregulated_gene OWNER TO postgres;

--
-- Name: possible_assembly_error; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW possible_assembly_error AS
    SELECT feature.feature_id AS possible_assembly_error_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'possible_assembly_error'::text);


ALTER TABLE so.possible_assembly_error OWNER TO postgres;

--
-- Name: possible_base_call_error; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW possible_base_call_error AS
    SELECT feature.feature_id AS possible_base_call_error_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'possible_base_call_error'::text);


ALTER TABLE so.possible_base_call_error OWNER TO postgres;

--
-- Name: post_translationally_modified_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW post_translationally_modified_region AS
    SELECT feature.feature_id AS post_translationally_modified_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'histone_modification'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text));


ALTER TABLE so.post_translationally_modified_region OWNER TO postgres;

--
-- Name: post_translationally_regulated; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW post_translationally_regulated AS
    SELECT feature.feature_id AS post_translationally_regulated_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated'::text));


ALTER TABLE so.post_translationally_regulated OWNER TO postgres;

--
-- Name: post_translationally_regulated_by_protein_modification; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW post_translationally_regulated_by_protein_modification AS
    SELECT feature.feature_id AS post_translationally_regulated_by_protein_modification_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text);


ALTER TABLE so.post_translationally_regulated_by_protein_modification OWNER TO postgres;

--
-- Name: post_translationally_regulated_by_protein_stability; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW post_translationally_regulated_by_protein_stability AS
    SELECT feature.feature_id AS post_translationally_regulated_by_protein_stability_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text);


ALTER TABLE so.post_translationally_regulated_by_protein_stability OWNER TO postgres;

--
-- Name: post_translationally_regulated_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW post_translationally_regulated_gene AS
    SELECT feature.feature_id AS post_translationally_regulated_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'post_translationally_regulated_gene'::text);


ALTER TABLE so.post_translationally_regulated_gene OWNER TO postgres;

--
-- Name: pre_edited_mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pre_edited_mrna AS
    SELECT feature.feature_id AS pre_edited_mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pre_edited_mRNA'::text);


ALTER TABLE so.pre_edited_mrna OWNER TO postgres;

--
-- Name: pre_edited_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pre_edited_region AS
    SELECT feature.feature_id AS pre_edited_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pre_edited_region'::text);


ALTER TABLE so.pre_edited_region OWNER TO postgres;

--
-- Name: pre_mirna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pre_mirna AS
    SELECT feature.feature_id AS pre_mirna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pre_miRNA'::text);


ALTER TABLE so.pre_mirna OWNER TO postgres;

--
-- Name: predicted; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW predicted AS
    SELECT feature.feature_id AS predicted_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'supported_by_sequence_similarity'::text) OR ((cvterm.name)::text = 'orphan'::text)) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text)) OR ((cvterm.name)::text = 'supported_by_domain_match'::text)) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text)) OR ((cvterm.name)::text = 'predicted'::text));


ALTER TABLE so.predicted OWNER TO postgres;

--
-- Name: predicted_by_ab_initio_computation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW predicted_by_ab_initio_computation AS
    SELECT feature.feature_id AS predicted_by_ab_initio_computation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text);


ALTER TABLE so.predicted_by_ab_initio_computation OWNER TO postgres;

--
-- Name: predicted_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW predicted_gene AS
    SELECT feature.feature_id AS predicted_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'predicted_gene'::text);


ALTER TABLE so.predicted_gene OWNER TO postgres;

--
-- Name: primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW primary_transcript AS
    SELECT feature.feature_id AS primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'protein_coding_primary_transcript'::text) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text));


ALTER TABLE so.primary_transcript OWNER TO postgres;

--
-- Name: primary_transcript_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW primary_transcript_region AS
    SELECT feature.feature_id AS primary_transcript_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'splice_site'::text) OR ((cvterm.name)::text = 'intron'::text)) OR ((cvterm.name)::text = 'clip'::text)) OR ((cvterm.name)::text = 'TSS'::text)) OR ((cvterm.name)::text = 'transcription_end_site'::text)) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text)) OR ((cvterm.name)::text = 'intron_domain'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'outron'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'five_prime_intron'::text)) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'five_prime_clip'::text)) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'major_TSS'::text)) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'internal_guide_sequence'::text)) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'pre_miRNA'::text)) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'primary_transcript_region'::text));


ALTER TABLE so.primary_transcript_region OWNER TO postgres;

--
-- Name: primer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW primer AS
    SELECT feature.feature_id AS primer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'sequencing_primer'::text) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'primer'::text));


ALTER TABLE so.primer OWNER TO postgres;

--
-- Name: primer_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW primer_binding_site AS
    SELECT feature.feature_id AS primer_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'primer_binding_site'::text);


ALTER TABLE so.primer_binding_site OWNER TO postgres;

--
-- Name: primer_match; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW primer_match AS
    SELECT feature.feature_id AS primer_match_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'primer_match'::text);


ALTER TABLE so.primer_match OWNER TO postgres;

--
-- Name: probe; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW probe AS
    SELECT feature.feature_id AS probe_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'microarray_oligo'::text) OR ((cvterm.name)::text = 'probe'::text));


ALTER TABLE so.probe OWNER TO postgres;

--
-- Name: processed_pseudogene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW processed_pseudogene AS
    SELECT feature.feature_id AS processed_pseudogene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'processed_pseudogene'::text);


ALTER TABLE so.processed_pseudogene OWNER TO postgres;

--
-- Name: processed_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW processed_transcript AS
    SELECT feature.feature_id AS processed_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'processed_transcript'::text);


ALTER TABLE so.processed_transcript OWNER TO postgres;

--
-- Name: proline; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW proline AS
    SELECT feature.feature_id AS proline_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'proline'::text);


ALTER TABLE so.proline OWNER TO postgres;

--
-- Name: proline_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW proline_trna_primary_transcript AS
    SELECT feature.feature_id AS proline_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text);


ALTER TABLE so.proline_trna_primary_transcript OWNER TO postgres;

--
-- Name: prolyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW prolyl_trna AS
    SELECT feature.feature_id AS prolyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'prolyl_tRNA'::text);


ALTER TABLE so.prolyl_trna OWNER TO postgres;

--
-- Name: promoter; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW promoter AS
    SELECT feature.feature_id AS promoter_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((cvterm.name)::text = 'bidirectional_promoter'::text) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'promoter'::text));


ALTER TABLE so.promoter OWNER TO postgres;

--
-- Name: promoter_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW promoter_element AS
    SELECT feature.feature_id AS promoter_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((cvterm.name)::text = 'GC_rich_promoter_region'::text) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text));


ALTER TABLE so.promoter_element OWNER TO postgres;

--
-- Name: promoter_targeting_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW promoter_targeting_sequence AS
    SELECT feature.feature_id AS promoter_targeting_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'promoter_targeting_sequence'::text);


ALTER TABLE so.promoter_targeting_sequence OWNER TO postgres;

--
-- Name: promoter_trap_construct; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW promoter_trap_construct AS
    SELECT feature.feature_id AS promoter_trap_construct_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'promoter_trap_construct'::text);


ALTER TABLE so.promoter_trap_construct OWNER TO postgres;

--
-- Name: propeptide; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW propeptide AS
    SELECT feature.feature_id AS propeptide_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'propeptide'::text);


ALTER TABLE so.propeptide OWNER TO postgres;

--
-- Name: propeptide_cleavage_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW propeptide_cleavage_site AS
    SELECT feature.feature_id AS propeptide_cleavage_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'propeptide_cleavage_site'::text);


ALTER TABLE so.propeptide_cleavage_site OWNER TO postgres;

--
-- Name: prophage; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW prophage AS
    SELECT feature.feature_id AS prophage_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'prophage'::text);


ALTER TABLE so.prophage OWNER TO postgres;

--
-- Name: proplastid_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW proplastid_gene AS
    SELECT feature.feature_id AS proplastid_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'proplastid_gene'::text);


ALTER TABLE so.proplastid_gene OWNER TO postgres;

--
-- Name: proplastid_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW proplastid_sequence AS
    SELECT feature.feature_id AS proplastid_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'proplastid_sequence'::text);


ALTER TABLE so.proplastid_sequence OWNER TO postgres;

--
-- Name: protein_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW protein_binding_site AS
    SELECT feature.feature_id AS protein_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'protein_binding_site'::text));


ALTER TABLE so.protein_binding_site OWNER TO postgres;

--
-- Name: protein_coding; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW protein_coding AS
    SELECT feature.feature_id AS protein_coding_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'intein_containing'::text) OR ((cvterm.name)::text = 'protein_coding'::text));


ALTER TABLE so.protein_coding OWNER TO postgres;

--
-- Name: protein_coding_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW protein_coding_gene AS
    SELECT feature.feature_id AS protein_coding_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'protein_coding_gene'::text));


ALTER TABLE so.protein_coding_gene OWNER TO postgres;

--
-- Name: protein_coding_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW protein_coding_primary_transcript AS
    SELECT feature.feature_id AS protein_coding_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'pre_edited_mRNA'::text) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text));


ALTER TABLE so.protein_coding_primary_transcript OWNER TO postgres;

--
-- Name: protein_match; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW protein_match AS
    SELECT feature.feature_id AS protein_match_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'protein_match'::text);


ALTER TABLE so.protein_match OWNER TO postgres;

--
-- Name: protein_protein_contact; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW protein_protein_contact AS
    SELECT feature.feature_id AS protein_protein_contact_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'protein_protein_contact'::text);


ALTER TABLE so.protein_protein_contact OWNER TO postgres;

--
-- Name: proviral_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW proviral_gene AS
    SELECT feature.feature_id AS proviral_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'endogenous_retroviral_gene'::text) OR ((cvterm.name)::text = 'proviral_gene'::text));


ALTER TABLE so.proviral_gene OWNER TO postgres;

--
-- Name: proviral_location; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW proviral_location AS
    SELECT feature.feature_id AS proviral_location_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'endogenous_retroviral_sequence'::text) OR ((cvterm.name)::text = 'proviral_location'::text));


ALTER TABLE so.proviral_location OWNER TO postgres;

--
-- Name: proviral_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW proviral_region AS
    SELECT feature.feature_id AS proviral_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'prophage'::text) OR ((cvterm.name)::text = 'proviral_region'::text));


ALTER TABLE so.proviral_region OWNER TO postgres;

--
-- Name: proximal_promoter_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW proximal_promoter_element AS
    SELECT feature.feature_id AS proximal_promoter_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'proximal_promoter_element'::text);


ALTER TABLE so.proximal_promoter_element OWNER TO postgres;

--
-- Name: pse_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pse_motif AS
    SELECT feature.feature_id AS pse_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'PSE_motif'::text);


ALTER TABLE so.pse_motif OWNER TO postgres;

--
-- Name: pseudogene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pseudogene AS
    SELECT feature.feature_id AS pseudogene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'processed_pseudogene'::text) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text)) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text)) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text)) OR ((cvterm.name)::text = 'cassette_pseudogene'::text)) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text)) OR ((cvterm.name)::text = 'unitary_pseudogene'::text)) OR ((cvterm.name)::text = 'pseudogene'::text));


ALTER TABLE so.pseudogene OWNER TO postgres;

--
-- Name: pseudogene_by_unequal_crossing_over; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pseudogene_by_unequal_crossing_over AS
    SELECT feature.feature_id AS pseudogene_by_unequal_crossing_over_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text);


ALTER TABLE so.pseudogene_by_unequal_crossing_over OWNER TO postgres;

--
-- Name: pseudogenic_exon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pseudogenic_exon AS
    SELECT feature.feature_id AS pseudogenic_exon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pseudogenic_exon'::text);


ALTER TABLE so.pseudogenic_exon OWNER TO postgres;

--
-- Name: pseudogenic_gene_segment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pseudogenic_gene_segment AS
    SELECT feature.feature_id AS pseudogenic_gene_segment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pseudogenic_gene_segment'::text);


ALTER TABLE so.pseudogenic_gene_segment OWNER TO postgres;

--
-- Name: pseudogenic_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pseudogenic_region AS
    SELECT feature.feature_id AS pseudogenic_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'decayed_exon'::text) OR ((cvterm.name)::text = 'pseudogenic_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text)) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text)) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text)) OR ((cvterm.name)::text = 'pseudogenic_region'::text));


ALTER TABLE so.pseudogenic_region OWNER TO postgres;

--
-- Name: pseudogenic_rrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pseudogenic_rrna AS
    SELECT feature.feature_id AS pseudogenic_rrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pseudogenic_rRNA'::text);


ALTER TABLE so.pseudogenic_rrna OWNER TO postgres;

--
-- Name: pseudogenic_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pseudogenic_transcript AS
    SELECT feature.feature_id AS pseudogenic_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pseudogenic_transcript'::text);


ALTER TABLE so.pseudogenic_transcript OWNER TO postgres;

--
-- Name: pseudogenic_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pseudogenic_trna AS
    SELECT feature.feature_id AS pseudogenic_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pseudogenic_tRNA'::text);


ALTER TABLE so.pseudogenic_trna OWNER TO postgres;

--
-- Name: pseudoknot; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pseudoknot AS
    SELECT feature.feature_id AS pseudoknot_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'recoding_pseudoknot'::text) OR ((cvterm.name)::text = 'H_pseudoknot'::text)) OR ((cvterm.name)::text = 'pseudoknot'::text));


ALTER TABLE so.pseudoknot OWNER TO postgres;

--
-- Name: pseudouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pseudouridine AS
    SELECT feature.feature_id AS pseudouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pseudouridine'::text);


ALTER TABLE so.pseudouridine OWNER TO postgres;

--
-- Name: pseudouridylation_guide_snorna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pseudouridylation_guide_snorna AS
    SELECT feature.feature_id AS pseudouridylation_guide_snorna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text);


ALTER TABLE so.pseudouridylation_guide_snorna OWNER TO postgres;

--
-- Name: purine_to_pyrimidine_transversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW purine_to_pyrimidine_transversion AS
    SELECT feature.feature_id AS purine_to_pyrimidine_transversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'A_to_C_transversion'::text) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text));


ALTER TABLE so.purine_to_pyrimidine_transversion OWNER TO postgres;

--
-- Name: purine_transition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW purine_transition AS
    SELECT feature.feature_id AS purine_transition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'A_to_G_transition'::text) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text));


ALTER TABLE so.purine_transition OWNER TO postgres;

--
-- Name: pyrimidine_to_purine_transversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pyrimidine_to_purine_transversion AS
    SELECT feature.feature_id AS pyrimidine_to_purine_transversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'C_to_A_transversion'::text) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text));


ALTER TABLE so.pyrimidine_to_purine_transversion OWNER TO postgres;

--
-- Name: pyrimidine_transition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pyrimidine_transition AS
    SELECT feature.feature_id AS pyrimidine_transition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'C_to_T_transition'::text) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text));


ALTER TABLE so.pyrimidine_transition OWNER TO postgres;

--
-- Name: pyrosequenced_read; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pyrosequenced_read AS
    SELECT feature.feature_id AS pyrosequenced_read_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pyrosequenced_read'::text);


ALTER TABLE so.pyrosequenced_read OWNER TO postgres;

--
-- Name: pyrrolysine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pyrrolysine AS
    SELECT feature.feature_id AS pyrrolysine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pyrrolysine'::text);


ALTER TABLE so.pyrrolysine OWNER TO postgres;

--
-- Name: pyrrolysine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pyrrolysine_trna_primary_transcript AS
    SELECT feature.feature_id AS pyrrolysine_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text);


ALTER TABLE so.pyrrolysine_trna_primary_transcript OWNER TO postgres;

--
-- Name: pyrrolysyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW pyrrolysyl_trna AS
    SELECT feature.feature_id AS pyrrolysyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text);


ALTER TABLE so.pyrrolysyl_trna OWNER TO postgres;

--
-- Name: qtl; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW qtl AS
    SELECT feature.feature_id AS qtl_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'QTL'::text);


ALTER TABLE so.qtl OWNER TO postgres;

--
-- Name: quality_value; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW quality_value AS
    SELECT feature.feature_id AS quality_value_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'quality_value'::text);


ALTER TABLE so.quality_value OWNER TO postgres;

--
-- Name: quantitative_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW quantitative_variant AS
    SELECT feature.feature_id AS quantitative_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'quantitative_variant'::text);


ALTER TABLE so.quantitative_variant OWNER TO postgres;

--
-- Name: queuosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW queuosine AS
    SELECT feature.feature_id AS queuosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'queuosine'::text);


ALTER TABLE so.queuosine OWNER TO postgres;

--
-- Name: r_five_prime_ltr_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW r_five_prime_ltr_region AS
    SELECT feature.feature_id AS r_five_prime_ltr_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'R_five_prime_LTR_region'::text);


ALTER TABLE so.r_five_prime_ltr_region OWNER TO postgres;

--
-- Name: r_gna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW r_gna AS
    SELECT feature.feature_id AS r_gna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'R_GNA'::text);


ALTER TABLE so.r_gna OWNER TO postgres;

--
-- Name: r_gna_oligo; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW r_gna_oligo AS
    SELECT feature.feature_id AS r_gna_oligo_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'R_GNA_oligo'::text);


ALTER TABLE so.r_gna_oligo OWNER TO postgres;

--
-- Name: r_ltr_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW r_ltr_region AS
    SELECT feature.feature_id AS r_ltr_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_LTR_region'::text));


ALTER TABLE so.r_ltr_region OWNER TO postgres;

--
-- Name: r_three_prime_ltr_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW r_three_prime_ltr_region AS
    SELECT feature.feature_id AS r_three_prime_ltr_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'R_three_prime_LTR_region'::text);


ALTER TABLE so.r_three_prime_ltr_region OWNER TO postgres;

--
-- Name: random_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW random_sequence AS
    SELECT feature.feature_id AS random_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'random_sequence'::text);


ALTER TABLE so.random_sequence OWNER TO postgres;

--
-- Name: rapd; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rapd AS
    SELECT feature.feature_id AS rapd_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RAPD'::text);


ALTER TABLE so.rapd OWNER TO postgres;

--
-- Name: rare_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rare_variant AS
    SELECT feature.feature_id AS rare_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rare_variant'::text);


ALTER TABLE so.rare_variant OWNER TO postgres;

--
-- Name: rasirna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rasirna AS
    SELECT feature.feature_id AS rasirna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rasiRNA'::text);


ALTER TABLE so.rasirna OWNER TO postgres;

--
-- Name: rate_of_transcription_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rate_of_transcription_variant AS
    SELECT feature.feature_id AS rate_of_transcription_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'increased_transcription_rate_variant'::text) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text));


ALTER TABLE so.rate_of_transcription_variant OWNER TO postgres;

--
-- Name: read; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW read AS
    SELECT feature.feature_id AS read_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((cvterm.name)::text = 'read_pair'::text) OR ((cvterm.name)::text = 'contig_read'::text)) OR ((cvterm.name)::text = 'BAC_end'::text)) OR ((cvterm.name)::text = 'dye_terminator_read'::text)) OR ((cvterm.name)::text = 'pyrosequenced_read'::text)) OR ((cvterm.name)::text = 'ligation_based_read'::text)) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text)) OR ((cvterm.name)::text = 'PAC_end'::text)) OR ((cvterm.name)::text = 'YAC_end'::text)) OR ((cvterm.name)::text = 'clone_end'::text)) OR ((cvterm.name)::text = 'read'::text));


ALTER TABLE so.read OWNER TO postgres;

--
-- Name: read_pair; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW read_pair AS
    SELECT feature.feature_id AS read_pair_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'read_pair'::text);


ALTER TABLE so.read_pair OWNER TO postgres;

--
-- Name: reading_frame; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW reading_frame AS
    SELECT feature.feature_id AS reading_frame_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'ORF'::text) OR ((cvterm.name)::text = 'blocked_reading_frame'::text)) OR ((cvterm.name)::text = 'mini_gene'::text)) OR ((cvterm.name)::text = 'rescue_mini_gene'::text)) OR ((cvterm.name)::text = 'reading_frame'::text));


ALTER TABLE so.reading_frame OWNER TO postgres;

--
-- Name: reagent; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW reagent AS
    SELECT feature.feature_id AS reagent_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'PCR_product'::text) OR ((cvterm.name)::text = 'clone'::text)) OR ((cvterm.name)::text = 'rescue_region'::text)) OR ((cvterm.name)::text = 'oligo'::text)) OR ((cvterm.name)::text = 'clone_insert'::text)) OR ((cvterm.name)::text = 'cloned_region'::text)) OR ((cvterm.name)::text = 'databank_entry'::text)) OR ((cvterm.name)::text = 'RAPD'::text)) OR ((cvterm.name)::text = 'genomic_clone'::text)) OR ((cvterm.name)::text = 'cDNA_clone'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'aptamer'::text)) OR ((cvterm.name)::text = 'probe'::text)) OR ((cvterm.name)::text = 'tag'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text)) OR ((cvterm.name)::text = 'DNAzyme'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text)) OR ((cvterm.name)::text = 'DNA_aptamer'::text)) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'microarray_oligo'::text)) OR ((cvterm.name)::text = 'SAGE_tag'::text)) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'primer'::text)) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'RNAi_reagent'::text)) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'morpholino_oligo'::text)) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text)) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'reagent'::text));


ALTER TABLE so.reagent OWNER TO postgres;

--
-- Name: rearranged_at_dna_level; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rearranged_at_dna_level AS
    SELECT feature.feature_id AS rearranged_at_dna_level_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rearranged_at_DNA_level'::text);


ALTER TABLE so.rearranged_at_dna_level OWNER TO postgres;

--
-- Name: reciprocal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW reciprocal AS
    SELECT feature.feature_id AS reciprocal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'reciprocal'::text);


ALTER TABLE so.reciprocal OWNER TO postgres;

--
-- Name: reciprocal_chromosomal_translocation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW reciprocal_chromosomal_translocation AS
    SELECT feature.feature_id AS reciprocal_chromosomal_translocation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text);


ALTER TABLE so.reciprocal_chromosomal_translocation OWNER TO postgres;

--
-- Name: recoded; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recoded AS
    SELECT feature.feature_id AS recoded_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'codon_redefined'::text) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'recoded'::text));


ALTER TABLE so.recoded OWNER TO postgres;

--
-- Name: recoded_by_translational_bypass; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recoded_by_translational_bypass AS
    SELECT feature.feature_id AS recoded_by_translational_bypass_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'recoded_by_translational_bypass'::text);


ALTER TABLE so.recoded_by_translational_bypass OWNER TO postgres;

--
-- Name: recoded_codon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recoded_codon AS
    SELECT feature.feature_id AS recoded_codon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'stop_codon_read_through'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text));


ALTER TABLE so.recoded_codon OWNER TO postgres;

--
-- Name: recoded_mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recoded_mrna AS
    SELECT feature.feature_id AS recoded_mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text));


ALTER TABLE so.recoded_mrna OWNER TO postgres;

--
-- Name: recoding_pseudoknot; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recoding_pseudoknot AS
    SELECT feature.feature_id AS recoding_pseudoknot_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'recoding_pseudoknot'::text);


ALTER TABLE so.recoding_pseudoknot OWNER TO postgres;

--
-- Name: recoding_stimulatory_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recoding_stimulatory_region AS
    SELECT feature.feature_id AS recoding_stimulatory_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text));


ALTER TABLE so.recoding_stimulatory_region OWNER TO postgres;

--
-- Name: recombination_feature; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recombination_feature AS
    SELECT feature.feature_id AS recombination_feature_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'recombination_hotspot'::text) OR ((cvterm.name)::text = 'haplotype_block'::text)) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text)) OR ((cvterm.name)::text = 'iDNA'::text)) OR ((cvterm.name)::text = 'specific_recombination_site'::text)) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text)) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text)) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'recombination_feature'::text));


ALTER TABLE so.recombination_feature OWNER TO postgres;

--
-- Name: recombination_feature_of_rearranged_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recombination_feature_of_rearranged_gene AS
    SELECT feature.feature_id AS recombination_feature_of_rearranged_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text));


ALTER TABLE so.recombination_feature_of_rearranged_gene OWNER TO postgres;

--
-- Name: recombination_hotspot; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recombination_hotspot AS
    SELECT feature.feature_id AS recombination_hotspot_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'recombination_hotspot'::text);


ALTER TABLE so.recombination_hotspot OWNER TO postgres;

--
-- Name: recombination_regulatory_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recombination_regulatory_region AS
    SELECT feature.feature_id AS recombination_regulatory_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'recombination_regulatory_region'::text);


ALTER TABLE so.recombination_regulatory_region OWNER TO postgres;

--
-- Name: recombination_signal_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recombination_signal_sequence AS
    SELECT feature.feature_id AS recombination_signal_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'recombination_signal_sequence'::text);


ALTER TABLE so.recombination_signal_sequence OWNER TO postgres;

--
-- Name: recombinationally_inverted_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recombinationally_inverted_gene AS
    SELECT feature.feature_id AS recombinationally_inverted_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'recombinationally_inverted_gene'::text);


ALTER TABLE so.recombinationally_inverted_gene OWNER TO postgres;

--
-- Name: recombinationally_rearranged; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recombinationally_rearranged AS
    SELECT feature.feature_id AS recombinationally_rearranged_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'recombinationally_rearranged'::text);


ALTER TABLE so.recombinationally_rearranged OWNER TO postgres;

--
-- Name: recombinationally_rearranged_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recombinationally_rearranged_gene AS
    SELECT feature.feature_id AS recombinationally_rearranged_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'recombinationally_inverted_gene'::text) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text));


ALTER TABLE so.recombinationally_rearranged_gene OWNER TO postgres;

--
-- Name: recombinationally_rearranged_vertebrate_immune_system_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recombinationally_rearranged_vertebrate_immune_system_gene AS
    SELECT feature.feature_id AS recombinationally_rearranged_vertebrate_immune_system_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text);


ALTER TABLE so.recombinationally_rearranged_vertebrate_immune_system_gene OWNER TO postgres;

--
-- Name: recursive_splice_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW recursive_splice_site AS
    SELECT feature.feature_id AS recursive_splice_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'recursive_splice_site'::text);


ALTER TABLE so.recursive_splice_site OWNER TO postgres;

--
-- Name: reference_genome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW reference_genome AS
    SELECT feature.feature_id AS reference_genome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'reference_genome'::text);


ALTER TABLE so.reference_genome OWNER TO postgres;

--
-- Name: region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW region AS
    SELECT feature.feature_id AS region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_idcvterm.name)::text = 'biomaterial_region'::text) OR ((cvterm.name)::text = 'experimental_feature'::text)) OR ((cvterm.name)::text = 'biological_region'::text)) OR ((cvterm.name)::text = 'topologically_defined_region'::text)) OR ((cvterm.name)::text = 'reagent'::text)) OR ((cvterm.name)::text = 'engineered_region'::text)) OR ((cvterm.name)::text = 'PCR_product'::text)) OR ((cvterm.name)::text = 'clone'::text)) OR ((cvterm.name)::text = 'rescue_region'::text)) OR ((cvterm.name)::text = 'oligo'::text)) OR ((cvterm.name)::text = 'clone_insert'::text)) OR ((cvterm.name)::text = 'cloned_region'::text)) OR ((cvterm.name)::text = 'databank_entry'::text)) OR ((cvterm.name)::text = 'RAPD'::text)) OR ((cvterm.name)::text = 'genomic_clone'::text)) OR ((cvterm.name)::text = 'cDNA_clone'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'aptamer'::text)) OR ((cvterm.name)::text = 'probe'::text)) OR ((cvterm.name)::text = 'tag'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text)) OR ((cvterm.name)::text = 'DNAzyme'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text)) OR ((cvterm.name)::text = 'DNA_aptamer'::text)) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'microarray_oligo'::text)) OR ((cvterm.name)::text = 'SAGE_tag'::text)) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'primer'::text)) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'RNAi_reagent'::text)) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'morpholino_oligo'::text)) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text)) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_region'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'match_part'::text)) OR ((cvterm.name)::text = 'assembly_component'::text)) OR ((cvterm.name)::text = 'conserved_region'::text)) OR ((cvterm.name)::text = 'match'::text)) OR ((cvterm.name)::text = 'remark'::text)) OR ((cvterm.name)::text = 'reading_frame'::text)) OR ((cvterm.name)::text = 'consensus_region'::text)) OR ((cvterm.name)::text = 'low_complexity_region'::text)) OR ((cvterm.name)::text = 'assembly'::text)) OR ((cvterm.name)::text = 'transcribed_fragment'::text)) OR ((cvterm.name)::text = 'transcribed_cluster'::text)) OR ((cvterm.name)::text = 'high_identity_region'::text)) OR ((cvterm.name)::text = 'mathematically_defined_repeat'::text)) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'read'::text)) OR ((cvterm.name)::text = 'restriction_fragment'::text)) OR ((cvterm.name)::text = 'golden_path_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_fragment'::text)) OR ((cvterm.name)::text = 'gap'::text)) OR ((cvterm.name)::text = 'sonicate_fragment'::text)) OR ((cvterm.name)::text = 'paired_end_fragment'::text)) OR ((cvterm.name)::text = 'read_pair'::text)) OR ((cvterm.name)::text = 'contig_read'::text)) OR ((cvterm.name)::text = 'BAC_end'::text)) OR ((cvterm.name)::text = 'dye_terminator_read'::text)) OR ((cvterm.name)::text = 'pyrosequenced_read'::text)) OR ((cvterm.name)::text = 'ligation_based_read'::text)) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text)) OR ((cvterm.name)::text = 'PAC_end'::text)) OR ((cvterm.name)::text = 'YAC_end'::text)) OR ((cvterm.name)::text = 'clone_end'::text)) OR ((cvterm.name)::text = 'RFLP_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'coding_conserved_region'::text)) OR ((cvterm.name)::text = 'nc_conserved_region'::text)) OR ((cvterm.name)::text = 'RR_tract'::text)) OR ((cvterm.name)::text = 'homologous_region'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text)) OR ((cvterm.name)::text = 'X_element'::text)) OR ((cvterm.name)::text = 'U_box'::text)) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text)) OR ((cvterm.name)::text = 'syntenic_region'::text)) OR ((cvterm.name)::text = 'paralogous_region'::text)) OR ((cvterm.name)::text = 'orthologous_region'::text)) OR ((cvterm.name)::text = 'nucleotide_match'::text)) OR ((cvterm.name)::text = 'protein_match'::text)) OR ((cvterm.name)::text = 'expressed_sequence_match'::text)) OR ((cvterm.name)::text = 'cross_genome_match'::text)) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text)) OR ((cvterm.name)::text = 'primer_match'::text)) OR ((cvterm.name)::text = 'EST_match'::text)) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'sequence_difference'::text)) OR ((cvterm.name)::text = 'experimental_result_region'::text)) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text)) OR ((cvterm.name)::text = 'possible_base_call_error'::text)) OR ((cvterm.name)::text = 'possible_assembly_error'::text)) OR ((cvterm.name)::text = 'assembly_error_correction'::text)) OR ((cvterm.name)::text = 'base_call_error_correction'::text)) OR ((cvterm.name)::text = 'overlapping_feature_set'::text)) OR ((cvterm.name)::text = 'no_output'::text)) OR ((cvterm.name)::text = 'overlapping_EST_set'::text)) OR ((cvterm.name)::text = 'non_adjacent_residues'::text)) OR ((cvterm.name)::text = 'non_terminal_residue'::text)) OR ((cvterm.name)::text = 'sequence_conflict'::text)) OR ((cvterm.name)::text = 'sequence_uncertainty'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'ORF'::text)) OR ((cvterm.name)::text = 'blocked_reading_frame'::text)) OR ((cvterm.name)::text = 'mini_gene'::text)) OR ((cvterm.name)::text = 'rescue_mini_gene'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'sequence_assembly'::text)) OR ((cvterm.name)::text = 'fragment_assembly'::text)) OR ((cvterm.name)::text = 'supercontig'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'tiling_path'::text)) OR ((cvterm.name)::text = 'virtual_sequence'::text)) OR ((cvterm.name)::text = 'golden_path'::text)) OR ((cvterm.name)::text = 'ultracontig'::text)) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text)) OR ((cvterm.name)::text = 'fingerprint_map'::text)) OR ((cvterm.name)::text = 'STS_map'::text)) OR ((cvterm.name)::text = 'RH_map'::text)) OR ((cvterm.name)::text = 'unigene_cluster'::text)) OR ((cvterm.name)::text = 'CHiP_seq_region'::text)) OR ((cvterm.name)::text = 'sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'linkage_group'::text)) OR ((cvterm.name)::text = 'polypeptide'::text)) OR ((cvterm.name)::text = 'deletion'::text)) OR ((cvterm.name)::text = 'origin_of_replication'::text)) OR ((cvterm.name)::text = 'recombination_feature'::text)) OR ((cvterm.name)::text = 'CpG_island'::text)) OR ((cvterm.name)::text = 'pseudogene'::text)) OR ((cvterm.name)::text = 'binding_site'::text)) OR ((cvterm.name)::text = 'pseudogenic_region'::text)) OR ((cvterm.name)::text = 'cap'::text)) OR ((cvterm.name)::text = 'intergenic_region'::text)) OR ((cvterm.name)::text = 'oligo_U_tail'::text)) OR ((cvterm.name)::text = 'polyA_sequence'::text)) OR ((cvterm.name)::text = 'repeat_region'::text)) OR ((cvterm.name)::text = 'insertion'::text)) OR ((cvterm.name)::text = 'gene'::text)) OR ((cvterm.name)::text = 'repeat_unit'::text)) OR ((cvterm.name)::text = 'QTL'::text)) OR ((cvterm.name)::text = 'chromosome_part'::text)) OR ((cvterm.name)::text = 'gene_member_region'::text)) OR ((cvterm.name)::text = 'transcript_region'::text)) OR ((cvterm.name)::text = 'polypeptide_region'::text)) OR ((cvterm.name)::text = 'gene_component_region'::text)) OR ((cvterm.name)::text = 'mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'replicon'::text)) OR ((cvterm.name)::text = 'base'::text)) OR ((cvterm.name)::text = 'amino_acid'::text)) OR ((cvterm.name)::text = 'genetic_marker'::text)) OR ((cvterm.name)::text = 'sequence_motif'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text)) OR ((cvterm.name)::text = 'open_chromatin_region'::text)) OR ((cvterm.name)::text = 'gene_group'::text)) OR ((cvterm.name)::text = 'substitution'::text)) OR ((cvterm.name)::text = 'inversion'::text)) OR ((cvterm.name)::text = 'retron'::text)) OR ((cvterm.name)::text = 'G_quartet'::text)) OR ((cvterm.name)::text = 'base_pair'::text)) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'pseudoknot'::text)) OR ((cvterm.name)::text = 'WC_base_pair'::text)) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text)) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'wobble_base_pair'::text)) OR ((cvterm.name)::text = 'stem_loop'::text)) OR ((cvterm.name)::text = 'tetraloop'::text)) OR ((cvterm.name)::text = 'i_motif'::text)) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text)) OR ((cvterm.name)::text = 'H_pseudoknot'::text)) OR ((cvterm.name)::text = 'D_loop'::text)) OR ((cvterm.name)::text = 'ARS'::text)) OR ((cvterm.name)::text = 'oriT'::text)) OR ((cvterm.name)::text = 'amplification_origin'::text)) OR ((cvterm.name)::text = 'oriV'::text)) OR ((cvterm.name)::text = 'oriC'::text)) OR ((cvterm.name)::text = 'recombination_hotspot'::text)) OR ((cvterm.name)::text = 'haplotype_block'::text)) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text)) OR ((cvterm.name)::text = 'iDNA'::text)) OR ((cvterm.name)::text = 'specific_recombination_site'::text)) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text)) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text)) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'processed_pseudogene'::text)) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text)) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text)) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text)) OR ((cvterm.name)::text = 'cassette_pseudogene'::text)) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text)) OR ((cvterm.name)::text = 'unitary_pseudogene'::text)) OR ((cvterm.name)::text = 'protein_binding_site'::text)) OR ((cvterm.name)::text = 'epitope'::text)) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text)) OR ((cvterm.name)::text = 'metal_binding_site'::text)) OR ((cvterm.name)::text = 'ligand_binding_site'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'miRNA_target_site'::text)) OR ((cvterm.name)::text = 'DNA_binding_site'::text)) OR ((cvterm.name)::text = 'primer_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'decayed_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text)) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text)) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text)) OR ((cvterm.name)::text = 'long_terminal_repeat'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'inverted_repeat'::text)) OR ((cvterm.name)::text = 'direct_repeat'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'dispersed_repeat'::text)) OR ((cvterm.name)::text = 'tandem_repeat'::text)) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text)) OR ((cvterm.name)::text = 'Y_prime_element'::text)) OR ((cvterm.name)::text = 'telomeric_repeat'::text)) OR ((cvterm.name)::text = 'nested_repeat'::text)) OR ((cvterm.name)::text = 'centromeric_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_LTR'::text)) OR ((cvterm.name)::text = 'three_prime_LTR'::text)) OR ((cvterm.name)::text = 'solo_LTR'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'target_site_duplication'::text)) OR ((cvterm.name)::text = 'CRISPR'::text)) OR ((cvterm.name)::text = 'satellite_DNA'::text)) OR ((cvterm.name)::text = 'microsatellite'::text)) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text)) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text)) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text)) OR ((cvterm.name)::text = 'transgenic_insertion'::text)) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'nuclear_gene'::text)) OR ((cvterm.name)::text = 'mt_gene'::text)) OR ((cvterm.name)::text = 'plastid_gene'::text)) OR ((cvterm.name)::text = 'nucleomorph_gene'::text)) OR ((cvterm.name)::text = 'plasmid_gene'::text)) OR ((cvterm.name)::text = 'proviral_gene'::text)) OR ((cvterm.name)::text = 'transposable_element_gene'::text)) OR ((cvterm.name)::text = 'silenced_gene'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'foreign_gene'::text)) OR ((cvterm.name)::text = 'fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text)) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'rescue_gene'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'transgene'::text)) OR ((cvterm.name)::text = 'predicted_gene'::text)) OR ((cvterm.name)::text = 'protein_coding_gene'::text)) OR ((cvterm.name)::text = 'retrogene'::text)) OR ((cvterm.name)::text = 'ncRNA_gene'::text)) OR ((cvterm.name)::text = 'cryptic_gene'::text)) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'gene_cassette'::text)) OR ((cvterm.name)::text = 'kinetoplast_gene'::text)) OR ((cvterm.name)::text = 'maxicircle_gene'::text)) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'apicoplast_gene'::text)) OR ((cvterm.name)::text = 'ct_gene'::text)) OR ((cvterm.name)::text = 'chromoplast_gene'::text)) OR ((cvterm.name)::text = 'cyanelle_gene'::text)) OR ((cvterm.name)::text = 'leucoplast_gene'::text)) OR ((cvterm.name)::text = 'proplastid_gene'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'floxed_gene'::text)) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gRNA_gene'::text)) OR ((cvterm.name)::text = 'miRNA_gene'::text)) OR ((cvterm.name)::text = 'scRNA_gene'::text)) OR ((cvterm.name)::text = 'snoRNA_gene'::text)) OR ((cvterm.name)::text = 'snRNA_gene'::text)) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'stRNA_gene'::text)) OR ((cvterm.name)::text = 'tmRNA_gene'::text)) OR ((cvterm.name)::text = 'tRNA_gene'::text)) OR ((cvterm.name)::text = 'rRNA_gene'::text)) OR ((cvterm.name)::text = 'piRNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'lincRNA_gene'::text)) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text)) OR ((cvterm.name)::text = 'chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosome_band'::text)) OR ((cvterm.name)::text = 'interband'::text)) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text)) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text)) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text)) OR ((cvterm.name)::text = 'matrix_attachment_site'::text)) OR ((cvterm.name)::text = 'centromere'::text)) OR ((cvterm.name)::text = 'telomere'::text)) OR ((cvterm.name)::text = 'point_centromere'::text)) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'transcript'::text)) OR ((cvterm.name)::text = 'regulatory_region'::text)) OR ((cvterm.name)::text = 'polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text)) OR ((cvterm.name)::text = 'enzymatic_RNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text)) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text)) OR ((cvterm.name)::text = 'processed_transcript'::text)) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mRNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ribozyme'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text)) OR ((cvterm.name)::text = 'translation_regulatory_region'::text)) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text)) OR ((cvterm.name)::text = 'replication_regulatory_region'::text)) OR ((cvterm.name)::text = 'terminator'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'attenuator'::text)) OR ((cvterm.name)::text = 'exon'::text)) OR ((cvterm.name)::text = 'edited_transcript_feature'::text)) OR ((cvterm.name)::text = 'mature_transcript_region'::text)) OR ((cvterm.name)::text = 'primary_transcript_region'::text)) OR ((cvterm.name)::text = 'exon_region'::text)) OR ((cvterm.name)::text = 'anchor_binding_site'::text)) OR ((cvterm.name)::text = 'coding_exon'::text)) OR ((cvterm.name)::text = 'noncoding_exon'::text)) OR ((cvterm.name)::text = 'interior_exon'::text)) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text)) OR ((cvterm.name)::text = 'interior_coding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'pre_edited_region'::text)) OR ((cvterm.name)::text = 'editing_block'::text)) OR ((cvterm.name)::text = 'editing_domain'::text)) OR ((cvterm.name)::text = 'unedited_region'::text)) OR ((cvterm.name)::text = 'mRNA_region'::text)) OR ((cvterm.name)::text = 'tmRNA_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text)) OR ((cvterm.name)::text = 'riboswitch'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'anchor_region'::text)) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'anticodon_loop'::text)) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'splice_site'::text)) OR ((cvterm.name)::text = 'intron'::text)) OR ((cvterm.name)::text = 'clip'::text)) OR ((cvterm.name)::text = 'TSS'::text)) OR ((cvterm.name)::text = 'transcription_end_site'::text)) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text)) OR ((cvterm.name)::text = 'intron_domain'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'outron'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'five_prime_intron'::text)) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'five_prime_clip'::text)) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'major_TSS'::text)) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'internal_guide_sequence'::text)) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'pre_miRNA'::text)) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text)) OR ((cvterm.name)::text = 'coding_region_of_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'mature_protein_region'::text)) OR ((cvterm.name)::text = 'immature_peptide_region'::text)) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text)) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text)) OR ((cvterm.name)::text = 'peptide_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text)) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text)) OR ((cvterm.name)::text = 'active_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'membrane_structure'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text)) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text)) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text)) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'asx_motif'::text)) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'coiled_coil'::text)) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'natural_variant_site'::text)) OR ((cvterm.name)::text = 'mutated_variant_site'::text)) OR ((cvterm.name)::text = 'alternate_sequence_site'::text)) OR ((cvterm.name)::text = 'signal_peptide'::text)) OR ((cvterm.name)::text = 'transit_peptide'::text)) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text)) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'nuclear_export_signal'::text)) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text)) OR ((cvterm.name)::text = 'intein'::text)) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text)) OR ((cvterm.name)::text = 'propeptide'::text)) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text)) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text)) OR ((cvterm.name)::text = 'n_terminal_region'::text)) OR ((cvterm.name)::text = 'c_terminal_region'::text)) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'polypeptide_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_repeat'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'non_transcribed_region'::text)) OR ((cvterm.name)::text = 'gene_fragment'::text)) OR ((cvterm.name)::text = 'TSS_region'::text)) OR ((cvterm.name)::text = 'gene_segment'::text)) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'transposable_element'::text)) OR ((cvterm.name)::text = 'proviral_region'::text)) OR ((cvterm.name)::text = 'integron'::text)) OR ((cvterm.name)::text = 'genomic_island'::text)) OR ((cvterm.name)::text = 'integrated_plasmid'::text)) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'prophage'::text)) OR ((cvterm.name)::text = 'pathogenic_island'::text)) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'plasmid'::text)) OR ((cvterm.name)::text = 'chromosome'::text)) OR ((cvterm.name)::text = 'vector_replicon'::text)) OR ((cvterm.name)::text = 'maxicircle'::text)) OR ((cvterm.name)::text = 'minicircle'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'episome'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text)) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text)) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text)) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text)) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text)) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text)) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'YAC'::text)) OR ((cvterm.name)::text = 'BAC'::text)) OR ((cvterm.name)::text = 'PAC'::text)) OR ((cvterm.name)::text = 'cosmid'::text)) OR ((cvterm.name)::text = 'phagemid'::text)) OR ((cvterm.name)::text = 'fosmid'::text)) OR ((cvterm.name)::text = 'lambda_vector'::text)) OR ((cvterm.name)::text = 'plasmid_vector'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text)) OR ((cvterm.name)::text = 'inosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanine'::text)) OR ((cvterm.name)::text = 'ribothymidine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text)) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'one_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'three_methylcytidine'::text)) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'dihydrouridine'::text)) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'catalytic_residue'::text)) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text)) OR ((cvterm.name)::text = 'alanine'::text)) OR ((cvterm.name)::text = 'valine'::text)) OR ((cvterm.name)::text = 'leucine'::text)) OR ((cvterm.name)::text = 'isoleucine'::text)) OR ((cvterm.name)::text = 'proline'::text)) OR ((cvterm.name)::text = 'tryptophan'::text)) OR ((cvterm.name)::text = 'phenylalanine'::text)) OR ((cvterm.name)::text = 'methionine'::text)) OR ((cvterm.name)::text = 'glycine'::text)) OR ((cvterm.name)::text = 'serine'::text)) OR ((cvterm.name)::text = 'threonine'::text)) OR ((cvterm.name)::text = 'tyrosine'::text)) OR ((cvterm.name)::text = 'cysteine'::text)) OR ((cvterm.name)::text = 'glutamine'::text)) OR ((cvterm.name)::text = 'asparagine'::text)) OR ((cvterm.name)::text = 'lysine'::text)) OR ((cvterm.name)::text = 'arginine'::text)) OR ((cvterm.name)::text = 'histidine'::text)) OR ((cvterm.name)::text = 'aspartic_acid'::text)) OR ((cvterm.name)::text = 'glutamic_acid'::text)) OR ((cvterm.name)::text = 'selenocysteine'::text)) OR ((cvterm.name)::text = 'pyrrolysine'::text)) OR ((cvterm.name)::text = 'modified_glycine'::text)) OR ((cvterm.name)::text = 'modified_L_alanine'::text)) OR ((cvterm.name)::text = 'modified_L_asparagine'::text)) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_cysteine'::text)) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_threonine'::text)) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text)) OR ((cvterm.name)::text = 'modified_L_glutamine'::text)) OR ((cvterm.name)::text = 'modified_L_methionine'::text)) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text)) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text)) OR ((cvterm.name)::text = 'modified_L_histidine'::text)) OR ((cvterm.name)::text = 'modified_L_serine'::text)) OR ((cvterm.name)::text = 'modified_L_lysine'::text)) OR ((cvterm.name)::text = 'modified_L_leucine'::text)) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text)) OR ((cvterm.name)::text = 'modified_L_valine'::text)) OR ((cvterm.name)::text = 'modified_L_proline'::text)) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text)) OR ((cvterm.name)::text = 'modified_L_arginine'::text)) OR ((cvterm.name)::text = 'heritable_phenotypic_marker'::text)) OR ((cvterm.name)::text = 'DArT_marker'::text)) OR ((cvterm.name)::text = 'nucleotide_motif'::text)) OR ((cvterm.name)::text = 'DNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_motif'::text)) OR ((cvterm.name)::text = 'PSE_motif'::text)) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'modified_base'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'methylated_base_feature'::text)) OR ((cvterm.name)::text = 'methylated_C'::text)) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'operon'::text)) OR ((cvterm.name)::text = 'mating_type_region'::text)) OR ((cvterm.name)::text = 'gene_array'::text)) OR ((cvterm.name)::text = 'gene_subarray'::text)) OR ((cvterm.name)::text = 'gene_cassette_array'::text)) OR ((cvterm.name)::text = 'regulon'::text)) OR ((cvterm.name)::text = 'sequence_length_variation'::text)) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'flanking_region'::text)) OR ((cvterm.name)::text = 'repeat_component'::text)) OR ((cvterm.name)::text = 'transposable_element_flanking_region'::text)) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'LTR_component'::text)) OR ((cvterm.name)::text = 'repeat_fragment'::text)) OR ((cvterm.name)::text = 'transposon_fragment'::text)) OR ((cvterm.name)::text = 'U5_LTR_region'::text)) OR ((cvterm.name)::text = 'R_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'region'::text));


ALTER TABLE so.region OWNER TO postgres;

--
-- Name: regional_centromere; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW regional_centromere AS
    SELECT feature.feature_id AS regional_centromere_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'regional_centromere'::text);


ALTER TABLE so.regional_centromere OWNER TO postgres;

--
-- Name: regional_centromere_central_core; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW regional_centromere_central_core AS
    SELECT feature.feature_id AS regional_centromere_central_core_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'regional_centromere_central_core'::text);


ALTER TABLE so.regional_centromere_central_core OWNER TO postgres;

--
-- Name: regional_centromere_inner_repeat_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW regional_centromere_inner_repeat_region AS
    SELECT feature.feature_id AS regional_centromere_inner_repeat_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text);


ALTER TABLE so.regional_centromere_inner_repeat_region OWNER TO postgres;

--
-- Name: regional_centromere_outer_repeat_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW regional_centromere_outer_repeat_region AS
    SELECT feature.feature_id AS regional_centromere_outer_repeat_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text);


ALTER TABLE so.regional_centromere_outer_repeat_region OWNER TO postgres;

--
-- Name: regulated; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW regulated AS
    SELECT feature.feature_id AS regulated_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((cvterm.name)::text = 'transcriptionally_regulated'::text) OR ((cvterm.name)::text = 'post_translationally_regulated'::text)) OR ((cvterm.name)::text = 'translationally_regulated'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text)) OR ((cvterm.name)::text = 'transcriptionally_induced'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text)) OR ((cvterm.name)::text = 'autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'regulated'::text));


ALTER TABLE so.regulated OWNER TO postgres;

--
-- Name: regulatory_promoter_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW regulatory_promoter_element AS
    SELECT feature.feature_id AS regulatory_promoter_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'proximal_promoter_element'::text) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text));


ALTER TABLE so.regulatory_promoter_element OWNER TO postgres;

--
-- Name: regulatory_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW regulatory_region AS
    SELECT feature.feature_id AS regulatory_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'transcription_regulatory_region'::text) OR ((cvterm.name)::text = 'translation_regulatory_region'::text)) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text)) OR ((cvterm.name)::text = 'replication_regulatory_region'::text)) OR ((cvterm.name)::text = 'terminator'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'attenuator'::text)) OR ((cvterm.name)::text = 'regulatory_region'::text));


ALTER TABLE so.regulatory_region OWNER TO postgres;

--
-- Name: regulatory_region_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW regulatory_region_variant AS
    SELECT feature.feature_id AS regulatory_region_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'TF_binding_site_variant'::text) OR ((cvterm.name)::text = 'regulatory_region_variant'::text));


ALTER TABLE so.regulatory_region_variant OWNER TO postgres;

--
-- Name: regulon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW regulon AS
    SELECT feature.feature_id AS regulon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'regulon'::text);


ALTER TABLE so.regulon OWNER TO postgres;

--
-- Name: remark; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW remark AS
    SELECT feature.feature_id AS remark_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((cvterm.name)::text = 'sequence_difference'::text) OR ((cvterm.name)::text = 'experimental_result_region'::text)) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text)) OR ((cvterm.name)::text = 'possible_base_call_error'::text)) OR ((cvterm.name)::text = 'possible_assembly_error'::text)) OR ((cvterm.name)::text = 'assembly_error_correction'::text)) OR ((cvterm.name)::text = 'base_call_error_correction'::text)) OR ((cvterm.name)::text = 'overlapping_feature_set'::text)) OR ((cvterm.name)::text = 'no_output'::text)) OR ((cvterm.name)::text = 'overlapping_EST_set'::text)) OR ((cvterm.name)::text = 'non_adjacent_residues'::text)) OR ((cvterm.name)::text = 'non_terminal_residue'::text)) OR ((cvterm.name)::text = 'sequence_conflict'::text)) OR ((cvterm.name)::text = 'sequence_uncertainty'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'remark'::text));


ALTER TABLE so.remark OWNER TO postgres;

--
-- Name: repeat_component; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW repeat_component AS
    SELECT feature.feature_id AS repeat_component_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text) OR ((cvterm.name)::text = 'LTR_component'::text)) OR ((cvterm.name)::text = 'repeat_fragment'::text)) OR ((cvterm.name)::text = 'transposon_fragment'::text)) OR ((cvterm.name)::text = 'U5_LTR_region'::text)) OR ((cvterm.name)::text = 'R_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'repeat_component'::text));


ALTER TABLE so.repeat_component OWNER TO postgres;

--
-- Name: repeat_fragment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW repeat_fragment AS
    SELECT feature.feature_id AS repeat_fragment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'repeat_fragment'::text);


ALTER TABLE so.repeat_fragment OWNER TO postgres;

--
-- Name: repeat_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW repeat_region AS
    SELECT feature.feature_id AS repeat_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((cvterm.name)::text = 'long_terminal_repeat'::text) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'inverted_repeat'::text)) OR ((cvterm.name)::text = 'direct_repeat'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'dispersed_repeat'::text)) OR ((cvterm.name)::text = 'tandem_repeat'::text)) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text)) OR ((cvterm.name)::text = 'Y_prime_element'::text)) OR ((cvterm.name)::text = 'telomeric_repeat'::text)) OR ((cvterm.name)::text = 'nested_repeat'::text)) OR ((cvterm.name)::text = 'centromeric_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_LTR'::text)) OR ((cvterm.name)::text = 'three_prime_LTR'::text)) OR ((cvterm.name)::text = 'solo_LTR'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'target_site_duplication'::text)) OR ((cvterm.name)::text = 'CRISPR'::text)) OR ((cvterm.name)::text = 'satellite_DNA'::text)) OR ((cvterm.name)::text = 'microsatellite'::text)) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text)) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text)) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text)) OR ((cvterm.name)::text = 'repeat_region'::text));


ALTER TABLE so.repeat_region OWNER TO postgres;

--
-- Name: repeat_unit; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW repeat_unit AS
    SELECT feature.feature_id AS repeat_unit_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'repeat_unit'::text);


ALTER TABLE so.repeat_unit OWNER TO postgres;

--
-- Name: replication_regulatory_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW replication_regulatory_region AS
    SELECT feature.feature_id AS replication_regulatory_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'replication_regulatory_region'::text);


ALTER TABLE so.replication_regulatory_region OWNER TO postgres;

--
-- Name: replicon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW replicon AS
    SELECT feature.feature_id AS replicon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'plasmid'::text) OR ((cvterm.name)::text = 'chromosome'::text)) OR ((cvterm.name)::text = 'vector_replicon'::text)) OR ((cvterm.name)::text = 'maxicircle'::text)) OR ((cvterm.name)::text = 'minicircle'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'episome'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text)) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text)) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text)) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text)) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text)) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text)) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'YAC'::text)) OR ((cvterm.name)::text = 'BAC'::text)) OR ((cvterm.name)::text = 'PAC'::text)) OR ((cvterm.name)::text = 'cosmid'::text)) OR ((cvterm.name)::text = 'phagemid'::text)) OR ((cvterm.name)::text = 'fosmid'::text)) OR ((cvterm.name)::text = 'lambda_vector'::text)) OR ((cvterm.name)::text = 'plasmid_vector'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'replicon'::text));


ALTER TABLE so.replicon OWNER TO postgres;

--
-- Name: rescue; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rescue AS
    SELECT feature.feature_id AS rescue_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rescue'::text);


ALTER TABLE so.rescue OWNER TO postgres;

--
-- Name: rescue_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rescue_gene AS
    SELECT feature.feature_id AS rescue_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'wild_type_rescue_gene'::text) OR ((cvterm.name)::text = 'rescue_gene'::text));


ALTER TABLE so.rescue_gene OWNER TO postgres;

--
-- Name: rescue_mini_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rescue_mini_gene AS
    SELECT feature.feature_id AS rescue_mini_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rescue_mini_gene'::text);


ALTER TABLE so.rescue_mini_gene OWNER TO postgres;

--
-- Name: rescue_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rescue_region AS
    SELECT feature.feature_id AS rescue_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'engineered_rescue_region'::text) OR ((cvterm.name)::text = 'rescue_region'::text));


ALTER TABLE so.rescue_region OWNER TO postgres;

--
-- Name: resolution_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW resolution_site AS
    SELECT feature.feature_id AS resolution_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'loxP_site'::text) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text));


ALTER TABLE so.resolution_site OWNER TO postgres;

--
-- Name: restriction_enzyme_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW restriction_enzyme_binding_site AS
    SELECT feature.feature_id AS restriction_enzyme_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text);


ALTER TABLE so.restriction_enzyme_binding_site OWNER TO postgres;

--
-- Name: restriction_enzyme_cleavage_junction; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW restriction_enzyme_cleavage_junction AS
    SELECT feature.feature_id AS restriction_enzyme_cleavage_junction_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_cleavage_junction'::text));


ALTER TABLE so.restriction_enzyme_cleavage_junction OWNER TO postgres;

--
-- Name: restriction_enzyme_recognition_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW restriction_enzyme_recognition_site AS
    SELECT feature.feature_id AS restriction_enzyme_recognition_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text));


ALTER TABLE so.restriction_enzyme_recognition_site OWNER TO postgres;

--
-- Name: restriction_enzyme_single_strand_overhang; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW restriction_enzyme_single_strand_overhang AS
    SELECT feature.feature_id AS restriction_enzyme_single_strand_overhang_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text);


ALTER TABLE so.restriction_enzyme_single_strand_overhang OWNER TO postgres;

--
-- Name: restriction_fragment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW restriction_fragment AS
    SELECT feature.feature_id AS restriction_fragment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'RFLP_fragment'::text) OR ((cvterm.name)::text = 'restriction_fragment'::text));


ALTER TABLE so.restriction_fragment OWNER TO postgres;

--
-- Name: retinoic_acid_responsive_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW retinoic_acid_responsive_element AS
    SELECT feature.feature_id AS retinoic_acid_responsive_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text);


ALTER TABLE so.retinoic_acid_responsive_element OWNER TO postgres;

--
-- Name: retrogene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW retrogene AS
    SELECT feature.feature_id AS retrogene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'retrogene'::text);


ALTER TABLE so.retrogene OWNER TO postgres;

--
-- Name: retron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW retron AS
    SELECT feature.feature_id AS retron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'retron'::text);


ALTER TABLE so.retron OWNER TO postgres;

--
-- Name: retrotransposed; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW retrotransposed AS
    SELECT feature.feature_id AS retrotransposed_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'retrotransposed'::text);


ALTER TABLE so.retrotransposed OWNER TO postgres;

--
-- Name: retrotransposon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW retrotransposon AS
    SELECT feature.feature_id AS retrotransposon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text));


ALTER TABLE so.retrotransposon OWNER TO postgres;

--
-- Name: reverse; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW reverse AS
    SELECT feature.feature_id AS reverse_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'reverse'::text);


ALTER TABLE so.reverse OWNER TO postgres;

--
-- Name: reverse_hoogsteen_base_pair; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW reverse_hoogsteen_base_pair AS
    SELECT feature.feature_id AS reverse_hoogsteen_base_pair_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text);


ALTER TABLE so.reverse_hoogsteen_base_pair OWNER TO postgres;

--
-- Name: reverse_primer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW reverse_primer AS
    SELECT feature.feature_id AS reverse_primer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'reverse_primer'::text);


ALTER TABLE so.reverse_primer OWNER TO postgres;

--
-- Name: rflp_fragment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rflp_fragment AS
    SELECT feature.feature_id AS rflp_fragment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RFLP_fragment'::text);


ALTER TABLE so.rflp_fragment OWNER TO postgres;

--
-- Name: rh_map; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rh_map AS
    SELECT feature.feature_id AS rh_map_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RH_map'::text);


ALTER TABLE so.rh_map OWNER TO postgres;

--
-- Name: rho_dependent_bacterial_terminator; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rho_dependent_bacterial_terminator AS
    SELECT feature.feature_id AS rho_dependent_bacterial_terminator_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text);


ALTER TABLE so.rho_dependent_bacterial_terminator OWNER TO postgres;

--
-- Name: rho_independent_bacterial_terminator; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rho_independent_bacterial_terminator AS
    SELECT feature.feature_id AS rho_independent_bacterial_terminator_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text);


ALTER TABLE so.rho_independent_bacterial_terminator OWNER TO postgres;

--
-- Name: ribosome_entry_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ribosome_entry_site AS
    SELECT feature.feature_id AS ribosome_entry_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'internal_ribosome_entry_site'::text) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text));


ALTER TABLE so.ribosome_entry_site OWNER TO postgres;

--
-- Name: riboswitch; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW riboswitch AS
    SELECT feature.feature_id AS riboswitch_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'riboswitch'::text);


ALTER TABLE so.riboswitch OWNER TO postgres;

--
-- Name: ribothymidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ribothymidine AS
    SELECT feature.feature_id AS ribothymidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'ribothymidine'::text);


ALTER TABLE so.ribothymidine OWNER TO postgres;

--
-- Name: ribozyme; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ribozyme AS
    SELECT feature.feature_id AS ribozyme_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'ribozyme'::text);


ALTER TABLE so.ribozyme OWNER TO postgres;

--
-- Name: ribozymic; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ribozymic AS
    SELECT feature.feature_id AS ribozymic_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'ribozymic'::text);


ALTER TABLE so.ribozymic OWNER TO postgres;

--
-- Name: right_handed_peptide_helix; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW right_handed_peptide_helix AS
    SELECT feature.feature_id AS right_handed_peptide_helix_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'alpha_helix'::text) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text));


ALTER TABLE so.right_handed_peptide_helix OWNER TO postgres;

--
-- Name: ring_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ring_chromosome AS
    SELECT feature.feature_id AS ring_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text));


ALTER TABLE so.ring_chromosome OWNER TO postgres;

--
-- Name: rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rna AS
    SELECT feature.feature_id AS rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNA'::text);


ALTER TABLE so.rna OWNER TO postgres;

--
-- Name: rna_6s; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rna_6s AS
    SELECT feature.feature_id AS rna_6s_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNA_6S'::text);


ALTER TABLE so.rna_6s OWNER TO postgres;

--
-- Name: rna_aptamer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rna_aptamer AS
    SELECT feature.feature_id AS rna_aptamer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNA_aptamer'::text);


ALTER TABLE so.rna_aptamer OWNER TO postgres;

--
-- Name: rna_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rna_chromosome AS
    SELECT feature.feature_id AS rna_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text));


ALTER TABLE so.rna_chromosome OWNER TO postgres;

--
-- Name: rna_hook_turn; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rna_hook_turn AS
    SELECT feature.feature_id AS rna_hook_turn_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNA_hook_turn'::text);


ALTER TABLE so.rna_hook_turn OWNER TO postgres;

--
-- Name: rna_internal_loop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rna_internal_loop AS
    SELECT feature.feature_id AS rna_internal_loop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text));


ALTER TABLE so.rna_internal_loop OWNER TO postgres;

--
-- Name: rna_junction_loop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rna_junction_loop AS
    SELECT feature.feature_id AS rna_junction_loop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'RNA_hook_turn'::text) OR ((cvterm.name)::text = 'RNA_junction_loop'::text));


ALTER TABLE so.rna_junction_loop OWNER TO postgres;

--
-- Name: rna_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rna_motif AS
    SELECT feature.feature_id AS rna_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((cvterm.name)::text = 'RNA_internal_loop'::text) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'RNA_motif'::text));


ALTER TABLE so.rna_motif OWNER TO postgres;

--
-- Name: rna_polymerase_ii_tata_box; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rna_polymerase_ii_tata_box AS
    SELECT feature.feature_id AS rna_polymerase_ii_tata_box_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text);


ALTER TABLE so.rna_polymerase_ii_tata_box OWNER TO postgres;

--
-- Name: rna_polymerase_iii_tata_box; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rna_polymerase_iii_tata_box AS
    SELECT feature.feature_id AS rna_polymerase_iii_tata_box_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text);


ALTER TABLE so.rna_polymerase_iii_tata_box OWNER TO postgres;

--
-- Name: rna_polymerase_promoter; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rna_polymerase_promoter AS
    SELECT feature.feature_id AS rna_polymerase_promoter_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((cvterm.name)::text = 'RNApol_I_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text));


ALTER TABLE so.rna_polymerase_promoter OWNER TO postgres;

--
-- Name: rna_sequence_secondary_structure; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rna_sequence_secondary_structure AS
    SELECT feature.feature_id AS rna_sequence_secondary_structure_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'stem_loop'::text) OR ((cvterm.name)::text = 'tetraloop'::text)) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text));


ALTER TABLE so.rna_sequence_secondary_structure OWNER TO postgres;

--
-- Name: rnai_reagent; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rnai_reagent AS
    SELECT feature.feature_id AS rnai_reagent_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNAi_reagent'::text);


ALTER TABLE so.rnai_reagent OWNER TO postgres;

--
-- Name: rnapol_i_promoter; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rnapol_i_promoter AS
    SELECT feature.feature_id AS rnapol_i_promoter_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNApol_I_promoter'::text);


ALTER TABLE so.rnapol_i_promoter OWNER TO postgres;

--
-- Name: rnapol_ii_core_promoter; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rnapol_ii_core_promoter AS
    SELECT feature.feature_id AS rnapol_ii_core_promoter_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNApol_II_core_promoter'::text);


ALTER TABLE so.rnapol_ii_core_promoter OWNER TO postgres;

--
-- Name: rnapol_ii_promoter; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rnapol_ii_promoter AS
    SELECT feature.feature_id AS rnapol_ii_promoter_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'RNApol_II_core_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text));


ALTER TABLE so.rnapol_ii_promoter OWNER TO postgres;

--
-- Name: rnapol_iii_promoter; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rnapol_iii_promoter AS
    SELECT feature.feature_id AS rnapol_iii_promoter_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text));


ALTER TABLE so.rnapol_iii_promoter OWNER TO postgres;

--
-- Name: rnapol_iii_promoter_type_1; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rnapol_iii_promoter_type_1 AS
    SELECT feature.feature_id AS rnapol_iii_promoter_type_1_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text);


ALTER TABLE so.rnapol_iii_promoter_type_1 OWNER TO postgres;

--
-- Name: rnapol_iii_promoter_type_2; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rnapol_iii_promoter_type_2 AS
    SELECT feature.feature_id AS rnapol_iii_promoter_type_2_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text);


ALTER TABLE so.rnapol_iii_promoter_type_2 OWNER TO postgres;

--
-- Name: rnapol_iii_promoter_type_3; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rnapol_iii_promoter_type_3 AS
    SELECT feature.feature_id AS rnapol_iii_promoter_type_3_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text);


ALTER TABLE so.rnapol_iii_promoter_type_3 OWNER TO postgres;

--
-- Name: rnase_mrp_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rnase_mrp_rna AS
    SELECT feature.feature_id AS rnase_mrp_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNase_MRP_RNA'::text);


ALTER TABLE so.rnase_mrp_rna OWNER TO postgres;

--
-- Name: rnase_mrp_rna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rnase_mrp_rna_gene AS
    SELECT feature.feature_id AS rnase_mrp_rna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text);


ALTER TABLE so.rnase_mrp_rna_gene OWNER TO postgres;

--
-- Name: rnase_p_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rnase_p_rna AS
    SELECT feature.feature_id AS rnase_p_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNase_P_RNA'::text);


ALTER TABLE so.rnase_p_rna OWNER TO postgres;

--
-- Name: rnase_p_rna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rnase_p_rna_gene AS
    SELECT feature.feature_id AS rnase_p_rna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RNase_P_RNA_gene'::text);


ALTER TABLE so.rnase_p_rna_gene OWNER TO postgres;

--
-- Name: robertsonian_fusion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW robertsonian_fusion AS
    SELECT feature.feature_id AS robertsonian_fusion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'Robertsonian_fusion'::text);


ALTER TABLE so.robertsonian_fusion OWNER TO postgres;

--
-- Name: rpra_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rpra_rna AS
    SELECT feature.feature_id AS rpra_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RprA_RNA'::text);


ALTER TABLE so.rpra_rna OWNER TO postgres;

--
-- Name: rr_tract; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rr_tract AS
    SELECT feature.feature_id AS rr_tract_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RR_tract'::text);


ALTER TABLE so.rr_tract OWNER TO postgres;

--
-- Name: rre_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rre_rna AS
    SELECT feature.feature_id AS rre_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RRE_RNA'::text);


ALTER TABLE so.rre_rna OWNER TO postgres;

--
-- Name: rrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna AS
    SELECT feature.feature_id AS rrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((cvterm.name)::text = 'small_subunit_rRNA'::text) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'rRNA'::text));


ALTER TABLE so.rrna OWNER TO postgres;

--
-- Name: rrna_16s; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_16s AS
    SELECT feature.feature_id AS rrna_16s_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rRNA_16S'::text);


ALTER TABLE so.rrna_16s OWNER TO postgres;

--
-- Name: rrna_18s; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_18s AS
    SELECT feature.feature_id AS rrna_18s_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rRNA_18S'::text);


ALTER TABLE so.rrna_18s OWNER TO postgres;

--
-- Name: rrna_21s; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_21s AS
    SELECT feature.feature_id AS rrna_21s_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rRNA_21S'::text);


ALTER TABLE so.rrna_21s OWNER TO postgres;

--
-- Name: rrna_23s; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_23s AS
    SELECT feature.feature_id AS rrna_23s_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rRNA_23S'::text);


ALTER TABLE so.rrna_23s OWNER TO postgres;

--
-- Name: rrna_25s; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_25s AS
    SELECT feature.feature_id AS rrna_25s_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rRNA_25S'::text);


ALTER TABLE so.rrna_25s OWNER TO postgres;

--
-- Name: rrna_28s; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_28s AS
    SELECT feature.feature_id AS rrna_28s_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rRNA_28S'::text);


ALTER TABLE so.rrna_28s OWNER TO postgres;

--
-- Name: rrna_5_8s; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_5_8s AS
    SELECT feature.feature_id AS rrna_5_8s_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rRNA_5_8S'::text);


ALTER TABLE so.rrna_5_8s OWNER TO postgres;

--
-- Name: rrna_5s; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_5s AS
    SELECT feature.feature_id AS rrna_5s_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rRNA_5S'::text);


ALTER TABLE so.rrna_5s OWNER TO postgres;

--
-- Name: rrna_cleavage_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_cleavage_rna AS
    SELECT feature.feature_id AS rrna_cleavage_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text);


ALTER TABLE so.rrna_cleavage_rna OWNER TO postgres;

--
-- Name: rrna_cleavage_snorna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_cleavage_snorna_primary_transcript AS
    SELECT feature.feature_id AS rrna_cleavage_snorna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text);


ALTER TABLE so.rrna_cleavage_snorna_primary_transcript OWNER TO postgres;

--
-- Name: rrna_encoding; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_encoding AS
    SELECT feature.feature_id AS rrna_encoding_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rRNA_encoding'::text);


ALTER TABLE so.rrna_encoding OWNER TO postgres;

--
-- Name: rrna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_gene AS
    SELECT feature.feature_id AS rrna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rRNA_gene'::text);


ALTER TABLE so.rrna_gene OWNER TO postgres;

--
-- Name: rrna_large_subunit_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_large_subunit_primary_transcript AS
    SELECT feature.feature_id AS rrna_large_subunit_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text);


ALTER TABLE so.rrna_large_subunit_primary_transcript OWNER TO postgres;

--
-- Name: rrna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_primary_transcript AS
    SELECT feature.feature_id AS rrna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text));


ALTER TABLE so.rrna_primary_transcript OWNER TO postgres;

--
-- Name: rrna_primary_transcript_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_primary_transcript_region AS
    SELECT feature.feature_id AS rrna_primary_transcript_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text));


ALTER TABLE so.rrna_primary_transcript_region OWNER TO postgres;

--
-- Name: rrna_small_subunit_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rrna_small_subunit_primary_transcript AS
    SELECT feature.feature_id AS rrna_small_subunit_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text);


ALTER TABLE so.rrna_small_subunit_primary_transcript OWNER TO postgres;

--
-- Name: rst; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rst AS
    SELECT feature.feature_id AS rst_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'three_prime_RST'::text) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'RST'::text));


ALTER TABLE so.rst OWNER TO postgres;

--
-- Name: rst_match; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW rst_match AS
    SELECT feature.feature_id AS rst_match_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'RST_match'::text);


ALTER TABLE so.rst_match OWNER TO postgres;

--
-- Name: s_gna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW s_gna AS
    SELECT feature.feature_id AS s_gna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'S_GNA'::text);


ALTER TABLE so.s_gna OWNER TO postgres;

--
-- Name: s_gna_oligo; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW s_gna_oligo AS
    SELECT feature.feature_id AS s_gna_oligo_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'S_GNA_oligo'::text);


ALTER TABLE so.s_gna_oligo OWNER TO postgres;

--
-- Name: sage_tag; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sage_tag AS
    SELECT feature.feature_id AS sage_tag_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SAGE_tag'::text);


ALTER TABLE so.sage_tag OWNER TO postgres;

--
-- Name: sarcin_like_rna_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sarcin_like_rna_motif AS
    SELECT feature.feature_id AS sarcin_like_rna_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text);


ALTER TABLE so.sarcin_like_rna_motif OWNER TO postgres;

--
-- Name: satellite_dna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW satellite_dna AS
    SELECT feature.feature_id AS satellite_dna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'microsatellite'::text) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'satellite_DNA'::text));


ALTER TABLE so.satellite_dna OWNER TO postgres;

--
-- Name: schellmann_loop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW schellmann_loop AS
    SELECT feature.feature_id AS schellmann_loop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'schellmann_loop_seven'::text) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text));


ALTER TABLE so.schellmann_loop OWNER TO postgres;

--
-- Name: schellmann_loop_seven; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW schellmann_loop_seven AS
    SELECT feature.feature_id AS schellmann_loop_seven_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'schellmann_loop_seven'::text);


ALTER TABLE so.schellmann_loop_seven OWNER TO postgres;

--
-- Name: schellmann_loop_six; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW schellmann_loop_six AS
    SELECT feature.feature_id AS schellmann_loop_six_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'schellmann_loop_six'::text);


ALTER TABLE so.schellmann_loop_six OWNER TO postgres;

--
-- Name: score; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW score AS
    SELECT feature.feature_id AS score_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'score'::text);


ALTER TABLE so.score OWNER TO postgres;

--
-- Name: scrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW scrna AS
    SELECT feature.feature_id AS scrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'scRNA'::text);


ALTER TABLE so.scrna OWNER TO postgres;

--
-- Name: scrna_encoding; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW scrna_encoding AS
    SELECT feature.feature_id AS scrna_encoding_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'scRNA_encoding'::text);


ALTER TABLE so.scrna_encoding OWNER TO postgres;

--
-- Name: scrna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW scrna_gene AS
    SELECT feature.feature_id AS scrna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'scRNA_gene'::text);


ALTER TABLE so.scrna_gene OWNER TO postgres;

--
-- Name: scrna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW scrna_primary_transcript AS
    SELECT feature.feature_id AS scrna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'scRNA_primary_transcript'::text);


ALTER TABLE so.scrna_primary_transcript OWNER TO postgres;

--
-- Name: secis_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW secis_element AS
    SELECT feature.feature_id AS secis_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SECIS_element'::text);


ALTER TABLE so.secis_element OWNER TO postgres;

--
-- Name: selenocysteine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW selenocysteine AS
    SELECT feature.feature_id AS selenocysteine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'selenocysteine'::text);


ALTER TABLE so.selenocysteine OWNER TO postgres;

--
-- Name: selenocysteine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW selenocysteine_trna_primary_transcript AS
    SELECT feature.feature_id AS selenocysteine_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text);


ALTER TABLE so.selenocysteine_trna_primary_transcript OWNER TO postgres;

--
-- Name: selenocysteinyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW selenocysteinyl_trna AS
    SELECT feature.feature_id AS selenocysteinyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text);


ALTER TABLE so.selenocysteinyl_trna OWNER TO postgres;

--
-- Name: sequence_alteration; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sequence_alteration AS
    SELECT feature.feature_id AS sequence_alteration_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'deletion'::text) OR ((cvterm.name)::text = 'translocation'::text)) OR ((cvterm.name)::text = 'insertion'::text)) OR ((cvterm.name)::text = 'copy_number_variation'::text)) OR ((cvterm.name)::text = 'UPD'::text)) OR ((cvterm.name)::text = 'structural_alteration'::text)) OR ((cvterm.name)::text = 'substitution'::text)) OR ((cvterm.name)::text = 'indel'::text)) OR ((cvterm.name)::text = 'inversion'::text)) OR ((cvterm.name)::text = 'transgenic_insertion'::text)) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'copy_number_gain'::text)) OR ((cvterm.name)::text = 'copy_number_loss'::text)) OR ((cvterm.name)::text = 'maternal_uniparental_disomy'::text)) OR ((cvterm.name)::text = 'paternal_uniparental_disomy'::text)) OR ((cvterm.name)::text = 'complex_structural_alteration'::text)) OR ((cvterm.name)::text = 'sequence_length_variation'::text)) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'sequence_alteration'::text));


ALTER TABLE so.sequence_alteration OWNER TO postgres;

--
-- Name: sequence_assembly; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sequence_assembly AS
    SELECT feature.feature_id AS sequence_assembly_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'supercontig'::text) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'tiling_path'::text)) OR ((cvterm.name)::text = 'virtual_sequence'::text)) OR ((cvterm.name)::text = 'golden_path'::text)) OR ((cvterm.name)::text = 'ultracontig'::text)) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text)) OR ((cvterm.name)::text = 'sequence_assembly'::text));


ALTER TABLE so.sequence_assembly OWNER TO postgres;

--
-- Name: sequence_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sequence_attribute AS
    SELECT feature.feature_id AS sequence_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'polymer_attribute'::text) OR ((cvterm.name)::text = 'feature_attribute'::text)) OR ((cvterm.name)::text = 'sequence_location'::text)) OR ((cvterm.name)::text = 'variant_quality'::text)) OR ((cvterm.name)::text = 'nucleic_acid'::text)) OR ((cvterm.name)::text = 'synthetic_sequence'::text)) OR ((cvterm.name)::text = 'topology_attribute'::text)) OR ((cvterm.name)::text = 'peptidyl'::text)) OR ((cvterm.name)::text = 'DNA'::text)) OR ((cvterm.name)::text = 'RNA'::text)) OR ((cvterm.name)::text = 'morpholino_backbone'::text)) OR ((cvterm.name)::text = 'PNA'::text)) OR ((cvterm.name)::text = 'LNA'::text)) OR ((cvterm.name)::text = 'TNA'::text)) OR ((cvterm.name)::text = 'GNA'::text)) OR ((cvterm.name)::text = 'cDNA'::text)) OR ((cvterm.name)::text = 'genomic_DNA'::text)) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'R_GNA'::text)) OR ((cvterm.name)::text = 'S_GNA'::text)) OR ((cvterm.name)::text = 'random_sequence'::text)) OR ((cvterm.name)::text = 'designed_sequence'::text)) OR ((cvterm.name)::text = 'linear'::text)) OR ((cvterm.name)::text = 'circular'::text)) OR ((cvterm.name)::text = 'transcript_attribute'::text)) OR ((cvterm.name)::text = 'bound_by_factor'::text)) OR ((cvterm.name)::text = 'flanked'::text)) OR ((cvterm.name)::text = 'gene_attribute'::text)) OR ((cvterm.name)::text = 'retrotransposed'::text)) OR ((cvterm.name)::text = 'transgenic'::text)) OR ((cvterm.name)::text = 'natural'::text)) OR ((cvterm.name)::text = 'engineered'::text)) OR ((cvterm.name)::text = 'foreign'::text)) OR ((cvterm.name)::text = 'fusion'::text)) OR ((cvterm.name)::text = 'rescue'::text)) OR ((cvterm.name)::text = 'wild_type'::text)) OR ((cvterm.name)::text = 'conserved'::text)) OR ((cvterm.name)::text = 'status'::text)) OR ((cvterm.name)::text = 'intermediate'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged'::text)) OR ((cvterm.name)::text = 'cryptic'::text)) OR ((cvterm.name)::text = 'strand_attribute'::text)) OR ((cvterm.name)::text = 'direction_attribute'::text)) OR ((cvterm.name)::text = 'enzymatic'::text)) OR ((cvterm.name)::text = 'mobile'::text)) OR ((cvterm.name)::text = 'alteration_attribute'::text)) OR ((cvterm.name)::text = 'experimental_feature_attribute'::text)) OR ((cvterm.name)::text = 'edited'::text)) OR ((cvterm.name)::text = 'capped'::text)) OR ((cvterm.name)::text = 'mRNA_attribute'::text)) OR ((cvterm.name)::text = 'trans_spliced'::text)) OR ((cvterm.name)::text = 'alternatively_spliced'::text)) OR ((cvterm.name)::text = 'monocistronic'::text)) OR ((cvterm.name)::text = 'polycistronic'::text)) OR ((cvterm.name)::text = 'polyadenylated'::text)) OR ((cvterm.name)::text = 'exemplar'::text)) OR ((cvterm.name)::text = 'frameshift'::text)) OR ((cvterm.name)::text = 'recoded'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_framshift'::text)) OR ((cvterm.name)::text = 'codon_redefined'::text)) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'dicistronic'::text)) OR ((cvterm.name)::text = 'bound_by_protein'::text)) OR ((cvterm.name)::text = 'bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'floxed'::text)) OR ((cvterm.name)::text = 'FRT_flanked'::text)) OR ((cvterm.name)::text = 'protein_coding'::text)) OR ((cvterm.name)::text = 'non_protein_coding'::text)) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text)) OR ((cvterm.name)::text = 'gene_array_member'::text)) OR ((cvterm.name)::text = 'regulated'::text)) OR ((cvterm.name)::text = 'epigenetically_modified'::text)) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text)) OR ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text)) OR ((cvterm.name)::text = 'intein_containing'::text)) OR ((cvterm.name)::text = 'miRNA_encoding'::text)) OR ((cvterm.name)::text = 'rRNA_encoding'::text)) OR ((cvterm.name)::text = 'scRNA_encoding'::text)) OR ((cvterm.name)::text = 'snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'snRNA_encoding'::text)) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text)) OR ((cvterm.name)::text = 'stRNA_encoding'::text)) OR ((cvterm.name)::text = 'tmRNA_encoding'::text)) OR ((cvterm.name)::text = 'tRNA_encoding'::text)) OR ((cvterm.name)::text = 'gRNA_encoding'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'overlapping'::text)) OR ((cvterm.name)::text = 'inside_intron'::text)) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'antisense'::text)) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text)) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'operon_member'::text)) OR ((cvterm.name)::text = 'gene_cassette_member'::text)) OR ((cvterm.name)::text = 'gene_subarray_member'::text)) OR ((cvterm.name)::text = 'member_of_regulon'::text)) OR ((cvterm.name)::text = 'cassette_array_member'::text)) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated'::text)) OR ((cvterm.name)::text = 'translationally_regulated'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text)) OR ((cvterm.name)::text = 'transcriptionally_induced'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text)) OR ((cvterm.name)::text = 'autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'allelically_excluded'::text)) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'encodes_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text)) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'homologous'::text)) OR ((cvterm.name)::text = 'syntenic'::text)) OR ((cvterm.name)::text = 'orthologous'::text)) OR ((cvterm.name)::text = 'paralogous'::text)) OR ((cvterm.name)::text = 'fragmentary'::text)) OR ((cvterm.name)::text = 'predicted'::text)) OR ((cvterm.name)::text = 'validated'::text)) OR ((cvterm.name)::text = 'invalidated'::text)) OR ((cvterm.name)::text = 'independently_known'::text)) OR ((cvterm.name)::text = 'consensus'::text)) OR ((cvterm.name)::text = 'low_complexity'::text)) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text)) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text)) OR ((cvterm.name)::text = 'orphan'::text)) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text)) OR ((cvterm.name)::text = 'supported_by_domain_match'::text)) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text)) OR ((cvterm.name)::text = 'experimentally_determined'::text)) OR ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text)) OR ((cvterm.name)::text = 'standard_draft'::text)) OR ((cvterm.name)::text = 'high_quality_draft'::text)) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text)) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text)) OR ((cvterm.name)::text = 'noncontiguous_finished'::text)) OR ((cvterm.name)::text = 'finished_genome'::text)) OR ((cvterm.name)::text = 'single'::text)) OR ((cvterm.name)::text = 'double'::text)) OR ((cvterm.name)::text = 'forward'::text)) OR ((cvterm.name)::text = 'reverse'::text)) OR ((cvterm.name)::text = 'ribozymic'::text)) OR ((cvterm.name)::text = 'chromosomal_variation_attribute'::text)) OR ((cvterm.name)::text = 'insertion_attribute'::text)) OR ((cvterm.name)::text = 'inversion_attribute'::text)) OR ((cvterm.name)::text = 'translocaton_attribute'::text)) OR ((cvterm.name)::text = 'duplication_attribute'::text)) OR ((cvterm.name)::text = 'intrachromosomal'::text)) OR ((cvterm.name)::text = 'interchromosomal'::text)) OR ((cvterm.name)::text = 'tandem'::text)) OR ((cvterm.name)::text = 'direct'::text)) OR ((cvterm.name)::text = 'inverted'::text)) OR ((cvterm.name)::text = 'pericentric'::text)) OR ((cvterm.name)::text = 'paracentric'::text)) OR ((cvterm.name)::text = 'reciprocal'::text)) OR ((cvterm.name)::text = 'insertional'::text)) OR ((cvterm.name)::text = 'free'::text)) OR ((cvterm.name)::text = 'score'::text)) OR ((cvterm.name)::text = 'quality_value'::text)) OR ((cvterm.name)::text = 'organelle_sequence'::text)) OR ((cvterm.name)::text = 'plasmid_location'::text)) OR ((cvterm.name)::text = 'proviral_location'::text)) OR ((cvterm.name)::text = 'macronuclear_sequence'::text)) OR ((cvterm.name)::text = 'micronuclear_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text)) OR ((cvterm.name)::text = 'nuclear_sequence'::text)) OR ((cvterm.name)::text = 'nucleomorphic_sequence'::text)) OR ((cvterm.name)::text = 'plastid_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_DNA'::text)) OR ((cvterm.name)::text = 'apicoplast_sequence'::text)) OR ((cvterm.name)::text = 'chromoplast_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_sequence'::text)) OR ((cvterm.name)::text = 'cyanelle_sequence'::text)) OR ((cvterm.name)::text = 'leucoplast_sequence'::text)) OR ((cvterm.name)::text = 'proplastid_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_DNA'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_sequence'::text)) OR ((cvterm.name)::text = 'variant_origin'::text)) OR ((cvterm.name)::text = 'variant_frequency'::text)) OR ((cvterm.name)::text = 'variant_phenotype'::text)) OR ((cvterm.name)::text = 'maternal_variant'::text)) OR ((cvterm.name)::text = 'paternal_variant'::text)) OR ((cvterm.name)::text = 'somatic_variant'::text)) OR ((cvterm.name)::text = 'germline_variant'::text)) OR ((cvterm.name)::text = 'pedigree_specific_variant'::text)) OR ((cvterm.name)::text = 'population_specific_variant'::text)) OR ((cvterm.name)::text = 'de_novo_variant'::text)) OR ((cvterm.name)::text = 'unique_variant'::text)) OR ((cvterm.name)::text = 'rare_variant'::text)) OR ((cvterm.name)::text = 'polymorphic_variant'::text)) OR ((cvterm.name)::text = 'common_variant'::text)) OR ((cvterm.name)::text = 'fixed_variant'::text)) OR ((cvterm.name)::text = 'benign_variant'::text)) OR ((cvterm.name)::text = 'disease_associated_variant'::text)) OR ((cvterm.name)::text = 'disease_causing_variant'::text)) OR ((cvterm.name)::text = 'lethal_variant'::text)) OR ((cvterm.name)::text = 'quantitative_variant'::text)) OR ((cvterm.name)::text = 'sequence_attribute'::text));


ALTER TABLE so.sequence_attribute OWNER TO postgres;

--
-- Name: sequence_collection; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sequence_collection AS
    SELECT feature.feature_id AS sequence_collection_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'kinetoplast'::text) OR ((cvterm.name)::text = 'genome'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'peptide_collection'::text)) OR ((cvterm.name)::text = 'variant_collection'::text)) OR ((cvterm.name)::text = 'kinetoplast'::text)) OR ((cvterm.name)::text = 'reference_genome'::text)) OR ((cvterm.name)::text = 'variant_genome'::text)) OR ((cvterm.name)::text = 'chromosomally_aberrant_genome'::text)) OR ((cvterm.name)::text = 'chromosome_variation'::text)) OR ((cvterm.name)::text = 'allele'::text)) OR ((cvterm.name)::text = 'haplotype'::text)) OR ((cvterm.name)::text = 'genotype'::text)) OR ((cvterm.name)::text = 'diplotype'::text)) OR ((cvterm.name)::text = 'assortment_derived_variation'::text)) OR ((cvterm.name)::text = 'chromosome_number_variation'::text)) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text)) OR ((cvterm.name)::text = 'assortment_derived_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text)) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text)) OR ((cvterm.name)::text = 'aneuploid'::text)) OR ((cvterm.name)::text = 'polyploid'::text)) OR ((cvterm.name)::text = 'hyperploid'::text)) OR ((cvterm.name)::text = 'hypoploid'::text)) OR ((cvterm.name)::text = 'autopolyploid'::text)) OR ((cvterm.name)::text = 'allopolyploid'::text)) OR ((cvterm.name)::text = 'free_chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosomal_transposition'::text)) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text)) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosomal_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome'::text)) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'chromosomal_deletion'::text)) OR ((cvterm.name)::text = 'chromosomal_inversion'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome_fission'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'translocation_element'::text)) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'free_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text)) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text)) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text)) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'polymorphic_sequence_variant'::text)) OR ((cvterm.name)::text = 'sequence_collection'::text));


ALTER TABLE so.sequence_collection OWNER TO postgres;

--
-- Name: sequence_conflict; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sequence_conflict AS
    SELECT feature.feature_id AS sequence_conflict_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'contig_collection'::text) OR ((cvterm.name)::text = 'sequence_conflict'::text));


ALTER TABLE so.sequence_conflict OWNER TO postgres;

--
-- Name: sequence_cv_lookup_table; Type: TABLE; Schema: so; Owner: postgres; Tablespace: 
--

CREATE TABLE sequence_cv_lookup_table (
    sequence_cv_lookup_table_id integer NOT NULL,
    original_cvterm_name character varying(1024),
    relation_name character varying(128)
);


ALTER TABLE so.sequence_cv_lookup_table OWNER TO postgres;

--
-- Name: sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq; Type: SEQUENCE; Schema: so; Owner: postgres
--

CREATE SEQUENCE sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE so.sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq OWNER TO postgres;

--
-- Name: sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq; Type: SEQUENCE OWNED BY; Schema: so; Owner: postgres
--

ALTER SEQUENCE sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq OWNED BY sequence_cv_lookup_table.sequence_cv_lookup_table_id;


--
-- Name: sequence_difference; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sequence_difference AS
    SELECT feature.feature_id AS sequence_difference_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'possible_base_call_error'::text) OR ((cvterm.name)::text = 'possible_assembly_error'::text)) OR ((cvterm.name)::text = 'assembly_error_correction'::text)) OR ((cvterm.name)::text = 'base_call_error_correction'::text)) OR ((cvterm.name)::text = 'sequence_difference'::text));


ALTER TABLE so.sequence_difference OWNER TO postgres;

--
-- Name: sequence_feature; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sequence_feature AS
    SELECT feature.feature_id AS sequence_feature_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_idcvterm.name)::text = 'region'::text) OR ((cvterm.name)::text = 'junction'::text)) OR ((cvterm.name)::text = 'sequence_alteration'::text)) OR ((cvterm.name)::text = 'biomaterial_region'::text)) OR ((cvterm.name)::text = 'experimental_feature'::text)) OR ((cvterm.name)::text = 'biological_region'::text)) OR ((cvterm.name)::text = 'topologically_defined_region'::text)) OR ((cvterm.name)::text = 'reagent'::text)) OR ((cvterm.name)::text = 'engineered_region'::text)) OR ((cvterm.name)::text = 'PCR_product'::text)) OR ((cvterm.name)::text = 'clone'::text)) OR ((cvterm.name)::text = 'rescue_region'::text)) OR ((cvterm.name)::text = 'oligo'::text)) OR ((cvterm.name)::text = 'clone_insert'::text)) OR ((cvterm.name)::text = 'cloned_region'::text)) OR ((cvterm.name)::text = 'databank_entry'::text)) OR ((cvterm.name)::text = 'RAPD'::text)) OR ((cvterm.name)::text = 'genomic_clone'::text)) OR ((cvterm.name)::text = 'cDNA_clone'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'aptamer'::text)) OR ((cvterm.name)::text = 'probe'::text)) OR ((cvterm.name)::text = 'tag'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text)) OR ((cvterm.name)::text = 'DNAzyme'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text)) OR ((cvterm.name)::text = 'DNA_aptamer'::text)) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'microarray_oligo'::text)) OR ((cvterm.name)::text = 'SAGE_tag'::text)) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'primer'::text)) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'RNAi_reagent'::text)) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'morpholino_oligo'::text)) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text)) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_region'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'match_part'::text)) OR ((cvterm.name)::text = 'assembly_component'::text)) OR ((cvterm.name)::text = 'conserved_region'::text)) OR ((cvterm.name)::text = 'match'::text)) OR ((cvterm.name)::text = 'remark'::text)) OR ((cvterm.name)::text = 'reading_frame'::text)) OR ((cvterm.name)::text = 'consensus_region'::text)) OR ((cvterm.name)::text = 'low_complexity_region'::text)) OR ((cvterm.name)::text = 'assembly'::text)) OR ((cvterm.name)::text = 'transcribed_fragment'::text)) OR ((cvterm.name)::text = 'transcribed_cluster'::text)) OR ((cvterm.name)::text = 'high_identity_region'::text)) OR ((cvterm.name)::text = 'mathematically_defined_repeat'::text)) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'read'::text)) OR ((cvterm.name)::text = 'restriction_fragment'::text)) OR ((cvterm.name)::text = 'golden_path_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_fragment'::text)) OR ((cvterm.name)::text = 'gap'::text)) OR ((cvterm.name)::text = 'sonicate_fragment'::text)) OR ((cvterm.name)::text = 'paired_end_fragment'::text)) OR ((cvterm.name)::text = 'read_pair'::text)) OR ((cvterm.name)::text = 'contig_read'::text)) OR ((cvterm.name)::text = 'BAC_end'::text)) OR ((cvterm.name)::text = 'dye_terminator_read'::text)) OR ((cvterm.name)::text = 'pyrosequenced_read'::text)) OR ((cvterm.name)::text = 'ligation_based_read'::text)) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text)) OR ((cvterm.name)::text = 'PAC_end'::text)) OR ((cvterm.name)::text = 'YAC_end'::text)) OR ((cvterm.name)::text = 'clone_end'::text)) OR ((cvterm.name)::text = 'RFLP_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'coding_conserved_region'::text)) OR ((cvterm.name)::text = 'nc_conserved_region'::text)) OR ((cvterm.name)::text = 'RR_tract'::text)) OR ((cvterm.name)::text = 'homologous_region'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text)) OR ((cvterm.name)::text = 'X_element'::text)) OR ((cvterm.name)::text = 'U_box'::text)) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text)) OR ((cvterm.name)::text = 'syntenic_region'::text)) OR ((cvterm.name)::text = 'paralogous_region'::text)) OR ((cvterm.name)::text = 'orthologous_region'::text)) OR ((cvterm.name)::text = 'nucleotide_match'::text)) OR ((cvterm.name)::text = 'protein_match'::text)) OR ((cvterm.name)::text = 'expressed_sequence_match'::text)) OR ((cvterm.name)::text = 'cross_genome_match'::text)) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text)) OR ((cvterm.name)::text = 'primer_match'::text)) OR ((cvterm.name)::text = 'EST_match'::text)) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'sequence_difference'::text)) OR ((cvterm.name)::text = 'experimental_result_region'::text)) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text)) OR ((cvterm.name)::text = 'possible_base_call_error'::text)) OR ((cvterm.name)::text = 'possible_assembly_error'::text)) OR ((cvterm.name)::text = 'assembly_error_correction'::text)) OR ((cvterm.name)::text = 'base_call_error_correction'::text)) OR ((cvterm.name)::text = 'overlapping_feature_set'::text)) OR ((cvterm.name)::text = 'no_output'::text)) OR ((cvterm.name)::text = 'overlapping_EST_set'::text)) OR ((cvterm.name)::text = 'non_adjacent_residues'::text)) OR ((cvterm.name)::text = 'non_terminal_residue'::text)) OR ((cvterm.name)::text = 'sequence_conflict'::text)) OR ((cvterm.name)::text = 'sequence_uncertainty'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'ORF'::text)) OR ((cvterm.name)::text = 'blocked_reading_frame'::text)) OR ((cvterm.name)::text = 'mini_gene'::text)) OR ((cvterm.name)::text = 'rescue_mini_gene'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'sequence_assembly'::text)) OR ((cvterm.name)::text = 'fragment_assembly'::text)) OR ((cvterm.name)::text = 'supercontig'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'tiling_path'::text)) OR ((cvterm.name)::text = 'virtual_sequence'::text)) OR ((cvterm.name)::text = 'golden_path'::text)) OR ((cvterm.name)::text = 'ultracontig'::text)) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text)) OR ((cvterm.name)::text = 'fingerprint_map'::text)) OR ((cvterm.name)::text = 'STS_map'::text)) OR ((cvterm.name)::text = 'RH_map'::text)) OR ((cvterm.name)::text = 'unigene_cluster'::text)) OR ((cvterm.name)::text = 'CHiP_seq_region'::text)) OR ((cvterm.name)::text = 'sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'linkage_group'::text)) OR ((cvterm.name)::text = 'polypeptide'::text)) OR ((cvterm.name)::text = 'deletion'::text)) OR ((cvterm.name)::text = 'origin_of_replication'::text)) OR ((cvterm.name)::text = 'recombination_feature'::text)) OR ((cvterm.name)::text = 'CpG_island'::text)) OR ((cvterm.name)::text = 'pseudogene'::text)) OR ((cvterm.name)::text = 'binding_site'::text)) OR ((cvterm.name)::text = 'pseudogenic_region'::text)) OR ((cvterm.name)::text = 'cap'::text)) OR ((cvterm.name)::text = 'intergenic_region'::text)) OR ((cvterm.name)::text = 'oligo_U_tail'::text)) OR ((cvterm.name)::text = 'polyA_sequence'::text)) OR ((cvterm.name)::text = 'repeat_region'::text)) OR ((cvterm.name)::text = 'insertion'::text)) OR ((cvterm.name)::text = 'gene'::text)) OR ((cvterm.name)::text = 'repeat_unit'::text)) OR ((cvterm.name)::text = 'QTL'::text)) OR ((cvterm.name)::text = 'chromosome_part'::text)) OR ((cvterm.name)::text = 'gene_member_region'::text)) OR ((cvterm.name)::text = 'transcript_region'::text)) OR ((cvterm.name)::text = 'polypeptide_region'::text)) OR ((cvterm.name)::text = 'gene_component_region'::text)) OR ((cvterm.name)::text = 'mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'replicon'::text)) OR ((cvterm.name)::text = 'base'::text)) OR ((cvterm.name)::text = 'amino_acid'::text)) OR ((cvterm.name)::text = 'genetic_marker'::text)) OR ((cvterm.name)::text = 'sequence_motif'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text)) OR ((cvterm.name)::text = 'open_chromatin_region'::text)) OR ((cvterm.name)::text = 'gene_group'::text)) OR ((cvterm.name)::text = 'substitution'::text)) OR ((cvterm.name)::text = 'inversion'::text)) OR ((cvterm.name)::text = 'retron'::text)) OR ((cvterm.name)::text = 'G_quartet'::text)) OR ((cvterm.name)::text = 'base_pair'::text)) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'pseudoknot'::text)) OR ((cvterm.name)::text = 'WC_base_pair'::text)) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text)) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'wobble_base_pair'::text)) OR ((cvterm.name)::text = 'stem_loop'::text)) OR ((cvterm.name)::text = 'tetraloop'::text)) OR ((cvterm.name)::text = 'i_motif'::text)) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text)) OR ((cvterm.name)::text = 'H_pseudoknot'::text)) OR ((cvterm.name)::text = 'D_loop'::text)) OR ((cvterm.name)::text = 'ARS'::text)) OR ((cvterm.name)::text = 'oriT'::text)) OR ((cvterm.name)::text = 'amplification_origin'::text)) OR ((cvterm.name)::text = 'oriV'::text)) OR ((cvterm.name)::text = 'oriC'::text)) OR ((cvterm.name)::text = 'recombination_hotspot'::text)) OR ((cvterm.name)::text = 'haplotype_block'::text)) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text)) OR ((cvterm.name)::text = 'iDNA'::text)) OR ((cvterm.name)::text = 'specific_recombination_site'::text)) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text)) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text)) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'processed_pseudogene'::text)) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text)) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text)) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text)) OR ((cvterm.name)::text = 'cassette_pseudogene'::text)) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text)) OR ((cvterm.name)::text = 'unitary_pseudogene'::text)) OR ((cvterm.name)::text = 'protein_binding_site'::text)) OR ((cvterm.name)::text = 'epitope'::text)) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text)) OR ((cvterm.name)::text = 'metal_binding_site'::text)) OR ((cvterm.name)::text = 'ligand_binding_site'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'miRNA_target_site'::text)) OR ((cvterm.name)::text = 'DNA_binding_site'::text)) OR ((cvterm.name)::text = 'primer_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'decayed_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text)) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text)) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text)) OR ((cvterm.name)::text = 'long_terminal_repeat'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'inverted_repeat'::text)) OR ((cvterm.name)::text = 'direct_repeat'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'dispersed_repeat'::text)) OR ((cvterm.name)::text = 'tandem_repeat'::text)) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text)) OR ((cvterm.name)::text = 'Y_prime_element'::text)) OR ((cvterm.name)::text = 'telomeric_repeat'::text)) OR ((cvterm.name)::text = 'nested_repeat'::text)) OR ((cvterm.name)::text = 'centromeric_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_LTR'::text)) OR ((cvterm.name)::text = 'three_prime_LTR'::text)) OR ((cvterm.name)::text = 'solo_LTR'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'target_site_duplication'::text)) OR ((cvterm.name)::text = 'CRISPR'::text)) OR ((cvterm.name)::text = 'satellite_DNA'::text)) OR ((cvterm.name)::text = 'microsatellite'::text)) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text)) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text)) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text)) OR ((cvterm.name)::text = 'transgenic_insertion'::text)) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'nuclear_gene'::text)) OR ((cvterm.name)::text = 'mt_gene'::text)) OR ((cvterm.name)::text = 'plastid_gene'::text)) OR ((cvterm.name)::text = 'nucleomorph_gene'::text)) OR ((cvterm.name)::text = 'plasmid_gene'::text)) OR ((cvterm.name)::text = 'proviral_gene'::text)) OR ((cvterm.name)::text = 'transposable_element_gene'::text)) OR ((cvterm.name)::text = 'silenced_gene'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'foreign_gene'::text)) OR ((cvterm.name)::text = 'fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text)) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'rescue_gene'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'transgene'::text)) OR ((cvterm.name)::text = 'predicted_gene'::text)) OR ((cvterm.name)::text = 'protein_coding_gene'::text)) OR ((cvterm.name)::text = 'retrogene'::text)) OR ((cvterm.name)::text = 'ncRNA_gene'::text)) OR ((cvterm.name)::text = 'cryptic_gene'::text)) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'gene_cassette'::text)) OR ((cvterm.name)::text = 'kinetoplast_gene'::text)) OR ((cvterm.name)::text = 'maxicircle_gene'::text)) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'apicoplast_gene'::text)) OR ((cvterm.name)::text = 'ct_gene'::text)) OR ((cvterm.name)::text = 'chromoplast_gene'::text)) OR ((cvterm.name)::text = 'cyanelle_gene'::text)) OR ((cvterm.name)::text = 'leucoplast_gene'::text)) OR ((cvterm.name)::text = 'proplastid_gene'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'floxed_gene'::text)) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gRNA_gene'::text)) OR ((cvterm.name)::text = 'miRNA_gene'::text)) OR ((cvterm.name)::text = 'scRNA_gene'::text)) OR ((cvterm.name)::text = 'snoRNA_gene'::text)) OR ((cvterm.name)::text = 'snRNA_gene'::text)) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'stRNA_gene'::text)) OR ((cvterm.name)::text = 'tmRNA_gene'::text)) OR ((cvterm.name)::text = 'tRNA_gene'::text)) OR ((cvterm.name)::text = 'rRNA_gene'::text)) OR ((cvterm.name)::text = 'piRNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'lincRNA_gene'::text)) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text)) OR ((cvterm.name)::text = 'chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosome_band'::text)) OR ((cvterm.name)::text = 'interband'::text)) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text)) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text)) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text)) OR ((cvterm.name)::text = 'matrix_attachment_site'::text)) OR ((cvterm.name)::text = 'centromere'::text)) OR ((cvterm.name)::text = 'telomere'::text)) OR ((cvterm.name)::text = 'point_centromere'::text)) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'transcript'::text)) OR ((cvterm.name)::text = 'regulatory_region'::text)) OR ((cvterm.name)::text = 'polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text)) OR ((cvterm.name)::text = 'enzymatic_RNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text)) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text)) OR ((cvterm.name)::text = 'processed_transcript'::text)) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mRNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ribozyme'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text)) OR ((cvterm.name)::text = 'translation_regulatory_region'::text)) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text)) OR ((cvterm.name)::text = 'replication_regulatory_region'::text)) OR ((cvterm.name)::text = 'terminator'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'attenuator'::text)) OR ((cvterm.name)::text = 'exon'::text)) OR ((cvterm.name)::text = 'edited_transcript_feature'::text)) OR ((cvterm.name)::text = 'mature_transcript_region'::text)) OR ((cvterm.name)::text = 'primary_transcript_region'::text)) OR ((cvterm.name)::text = 'exon_region'::text)) OR ((cvterm.name)::text = 'anchor_binding_site'::text)) OR ((cvterm.name)::text = 'coding_exon'::text)) OR ((cvterm.name)::text = 'noncoding_exon'::text)) OR ((cvterm.name)::text = 'interior_exon'::text)) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text)) OR ((cvterm.name)::text = 'interior_coding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'pre_edited_region'::text)) OR ((cvterm.name)::text = 'editing_block'::text)) OR ((cvterm.name)::text = 'editing_domain'::text)) OR ((cvterm.name)::text = 'unedited_region'::text)) OR ((cvterm.name)::text = 'mRNA_region'::text)) OR ((cvterm.name)::text = 'tmRNA_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text)) OR ((cvterm.name)::text = 'riboswitch'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'anchor_region'::text)) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'anticodon_loop'::text)) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'splice_site'::text)) OR ((cvterm.name)::text = 'intron'::text)) OR ((cvterm.name)::text = 'clip'::text)) OR ((cvterm.name)::text = 'TSS'::text)) OR ((cvterm.name)::text = 'transcription_end_site'::text)) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text)) OR ((cvterm.name)::text = 'intron_domain'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'outron'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'five_prime_intron'::text)) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'five_prime_clip'::text)) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'major_TSS'::text)) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'internal_guide_sequence'::text)) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'pre_miRNA'::text)) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text)) OR ((cvterm.name)::text = 'coding_region_of_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'mature_protein_region'::text)) OR ((cvterm.name)::text = 'immature_peptide_region'::text)) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text)) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text)) OR ((cvterm.name)::text = 'peptide_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text)) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text)) OR ((cvterm.name)::text = 'active_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'membrane_structure'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text)) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text)) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text)) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'asx_motif'::text)) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'coiled_coil'::text)) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'natural_variant_site'::text)) OR ((cvterm.name)::text = 'mutated_variant_site'::text)) OR ((cvterm.name)::text = 'alternate_sequence_site'::text)) OR ((cvterm.name)::text = 'signal_peptide'::text)) OR ((cvterm.name)::text = 'transit_peptide'::text)) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text)) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'nuclear_export_signal'::text)) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text)) OR ((cvterm.name)::text = 'intein'::text)) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text)) OR ((cvterm.name)::text = 'propeptide'::text)) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text)) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text)) OR ((cvterm.name)::text = 'n_terminal_region'::text)) OR ((cvterm.name)::text = 'c_terminal_region'::text)) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'polypeptide_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_repeat'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'non_transcribed_region'::text)) OR ((cvterm.name)::text = 'gene_fragment'::text)) OR ((cvterm.name)::text = 'TSS_region'::text)) OR ((cvterm.name)::text = 'gene_segment'::text)) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'transposable_element'::text)) OR ((cvterm.name)::text = 'proviral_region'::text)) OR ((cvterm.name)::text = 'integron'::text)) OR ((cvterm.name)::text = 'genomic_island'::text)) OR ((cvterm.name)::text = 'integrated_plasmid'::text)) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'prophage'::text)) OR ((cvterm.name)::text = 'pathogenic_island'::text)) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'plasmid'::text)) OR ((cvterm.name)::text = 'chromosome'::text)) OR ((cvterm.name)::text = 'vector_replicon'::text)) OR ((cvterm.name)::text = 'maxicircle'::text)) OR ((cvterm.name)::text = 'minicircle'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'episome'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text)) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text)) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text)) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text)) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text)) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text)) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'YAC'::text)) OR ((cvterm.name)::text = 'BAC'::text)) OR ((cvterm.name)::text = 'PAC'::text)) OR ((cvterm.name)::text = 'cosmid'::text)) OR ((cvterm.name)::text = 'phagemid'::text)) OR ((cvterm.name)::text = 'fosmid'::text)) OR ((cvterm.name)::text = 'lambda_vector'::text)) OR ((cvterm.name)::text = 'plasmid_vector'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text)) OR ((cvterm.name)::text = 'inosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanine'::text)) OR ((cvterm.name)::text = 'ribothymidine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text)) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'one_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'three_methylcytidine'::text)) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'dihydrouridine'::text)) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'catalytic_residue'::text)) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text)) OR ((cvterm.name)::text = 'alanine'::text)) OR ((cvterm.name)::text = 'valine'::text)) OR ((cvterm.name)::text = 'leucine'::text)) OR ((cvterm.name)::text = 'isoleucine'::text)) OR ((cvterm.name)::text = 'proline'::text)) OR ((cvterm.name)::text = 'tryptophan'::text)) OR ((cvterm.name)::text = 'phenylalanine'::text)) OR ((cvterm.name)::text = 'methionine'::text)) OR ((cvterm.name)::text = 'glycine'::text)) OR ((cvterm.name)::text = 'serine'::text)) OR ((cvterm.name)::text = 'threonine'::text)) OR ((cvterm.name)::text = 'tyrosine'::text)) OR ((cvterm.name)::text = 'cysteine'::text)) OR ((cvterm.name)::text = 'glutamine'::text)) OR ((cvterm.name)::text = 'asparagine'::text)) OR ((cvterm.name)::text = 'lysine'::text)) OR ((cvterm.name)::text = 'arginine'::text)) OR ((cvterm.name)::text = 'histidine'::text)) OR ((cvterm.name)::text = 'aspartic_acid'::text)) OR ((cvterm.name)::text = 'glutamic_acid'::text)) OR ((cvterm.name)::text = 'selenocysteine'::text)) OR ((cvterm.name)::text = 'pyrrolysine'::text)) OR ((cvterm.name)::text = 'modified_glycine'::text)) OR ((cvterm.name)::text = 'modified_L_alanine'::text)) OR ((cvterm.name)::text = 'modified_L_asparagine'::text)) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_cysteine'::text)) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_threonine'::text)) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text)) OR ((cvterm.name)::text = 'modified_L_glutamine'::text)) OR ((cvterm.name)::text = 'modified_L_methionine'::text)) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text)) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text)) OR ((cvterm.name)::text = 'modified_L_histidine'::text)) OR ((cvterm.name)::text = 'modified_L_serine'::text)) OR ((cvterm.name)::text = 'modified_L_lysine'::text)) OR ((cvterm.name)::text = 'modified_L_leucine'::text)) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text)) OR ((cvterm.name)::text = 'modified_L_valine'::text)) OR ((cvterm.name)::text = 'modified_L_proline'::text)) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text)) OR ((cvterm.name)::text = 'modified_L_arginine'::text)) OR ((cvterm.name)::text = 'heritable_phenotypic_marker'::text)) OR ((cvterm.name)::text = 'DArT_marker'::text)) OR ((cvterm.name)::text = 'nucleotide_motif'::text)) OR ((cvterm.name)::text = 'DNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_motif'::text)) OR ((cvterm.name)::text = 'PSE_motif'::text)) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'modified_base'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'methylated_base_feature'::text)) OR ((cvterm.name)::text = 'methylated_C'::text)) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'operon'::text)) OR ((cvterm.name)::text = 'mating_type_region'::text)) OR ((cvterm.name)::text = 'gene_array'::text)) OR ((cvterm.name)::text = 'gene_subarray'::text)) OR ((cvterm.name)::text = 'gene_cassette_array'::text)) OR ((cvterm.name)::text = 'regulon'::text)) OR ((cvterm.name)::text = 'sequence_length_variation'::text)) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'flanking_region'::text)) OR ((cvterm.name)::text = 'repeat_component'::text)) OR ((cvterm.name)::text = 'transposable_element_flanking_region'::text)) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'LTR_component'::text)) OR ((cvterm.name)::text = 'repeat_fragment'::text)) OR ((cvterm.name)::text = 'transposon_fragment'::text)) OR ((cvterm.name)::text = 'U5_LTR_region'::text)) OR ((cvterm.name)::text = 'R_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'clone_insert_end'::text)) OR ((cvterm.name)::text = 'clone_insert_start'::text)) OR ((cvterm.name)::text = 'exon_junction'::text)) OR ((cvterm.name)::text = 'insertion_site'::text)) OR ((cvterm.name)::text = 'polyA_site'::text)) OR ((cvterm.name)::text = 'deletion_junction'::text)) OR ((cvterm.name)::text = 'chromosome_breakpoint'::text)) OR ((cvterm.name)::text = 'splice_junction'::text)) OR ((cvterm.name)::text = 'trans_splice_junction'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_cleavage_junction'::text)) OR ((cvterm.name)::text = 'transposable_element_insertion_site'::text)) OR ((cvterm.name)::text = 'inversion_breakpoint'::text)) OR ((cvterm.name)::text = 'translocation_breakpoint'::text)) OR ((cvterm.name)::text = 'insertion_breakpoint'::text)) OR ((cvterm.name)::text = 'deletion_breakpoint'::text)) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text)) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'deletion'::text)) OR ((cvterm.name)::text = 'translocation'::text)) OR ((cvterm.name)::text = 'insertion'::text)) OR ((cvterm.name)::text = 'copy_number_variation'::text)) OR ((cvterm.name)::text = 'UPD'::text)) OR ((cvterm.name)::text = 'structural_alteration'::text)) OR ((cvterm.name)::text = 'substitution'::text)) OR ((cvterm.name)::text = 'indel'::text)) OR ((cvterm.name)::text = 'inversion'::text)) OR ((cvterm.name)::text = 'transgenic_insertion'::text)) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'copy_number_gain'::text)) OR ((cvterm.name)::text = 'copy_number_loss'::text)) OR ((cvterm.name)::text = 'maternal_uniparental_disomy'::text)) OR ((cvterm.name)::text = 'paternal_uniparental_disomy'::text)) OR ((cvterm.name)::text = 'complex_structural_alteration'::text)) OR ((cvterm.name)::text = 'sequence_length_variation'::text)) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'sequence_feature'::text));


ALTER TABLE so.sequence_feature OWNER TO postgres;

--
-- Name: sequence_length_variation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sequence_length_variation AS
    SELECT feature.feature_id AS sequence_length_variation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'simple_sequence_length_variation'::text) OR ((cvterm.name)::text = 'sequence_length_variation'::text));


ALTER TABLE so.sequence_length_variation OWNER TO postgres;

--
-- Name: sequence_location; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sequence_location AS
    SELECT feature.feature_id AS sequence_location_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((cvterm.name)::text = 'organelle_sequence'::text) OR ((cvterm.name)::text = 'plasmid_location'::text)) OR ((cvterm.name)::text = 'proviral_location'::text)) OR ((cvterm.name)::text = 'macronuclear_sequence'::text)) OR ((cvterm.name)::text = 'micronuclear_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text)) OR ((cvterm.name)::text = 'nuclear_sequence'::text)) OR ((cvterm.name)::text = 'nucleomorphic_sequence'::text)) OR ((cvterm.name)::text = 'plastid_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_DNA'::text)) OR ((cvterm.name)::text = 'apicoplast_sequence'::text)) OR ((cvterm.name)::text = 'chromoplast_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_sequence'::text)) OR ((cvterm.name)::text = 'cyanelle_sequence'::text)) OR ((cvterm.name)::text = 'leucoplast_sequence'::text)) OR ((cvterm.name)::text = 'proplastid_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_DNA'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_sequence'::text)) OR ((cvterm.name)::text = 'sequence_location'::text));


ALTER TABLE so.sequence_location OWNER TO postgres;

--
-- Name: sequence_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sequence_motif AS
    SELECT feature.feature_id AS sequence_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'nucleotide_motif'::text) OR ((cvterm.name)::text = 'DNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_motif'::text)) OR ((cvterm.name)::text = 'PSE_motif'::text)) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'sequence_motif'::text));


ALTER TABLE so.sequence_motif OWNER TO postgres;

--
-- Name: sequence_rearrangement_feature; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sequence_rearrangement_feature AS
    SELECT feature.feature_id AS sequence_rearrangement_feature_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'specific_recombination_site'::text) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text)) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text)) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text));


ALTER TABLE so.sequence_rearrangement_feature OWNER TO postgres;

--
-- Name: sequence_secondary_structure; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sequence_secondary_structure AS
    SELECT feature.feature_id AS sequence_secondary_structure_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((cvterm.name)::text = 'G_quartet'::text) OR ((cvterm.name)::text = 'base_pair'::text)) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'pseudoknot'::text)) OR ((cvterm.name)::text = 'WC_base_pair'::text)) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text)) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'wobble_base_pair'::text)) OR ((cvterm.name)::text = 'stem_loop'::text)) OR ((cvterm.name)::text = 'tetraloop'::text)) OR ((cvterm.name)::text = 'i_motif'::text)) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text)) OR ((cvterm.name)::text = 'H_pseudoknot'::text)) OR ((cvterm.name)::text = 'sequence_secondary_structure'::text));


ALTER TABLE so.sequence_secondary_structure OWNER TO postgres;

--
-- Name: sequence_uncertainty; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sequence_uncertainty AS
    SELECT feature.feature_id AS sequence_uncertainty_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'sequence_uncertainty'::text);


ALTER TABLE so.sequence_uncertainty OWNER TO postgres;

--
-- Name: sequence_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sequence_variant AS
    SELECT feature.feature_id AS sequence_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'functional_variant'::text) OR ((cvterm.name)::text = 'structural_variant'::text)) OR ((cvterm.name)::text = 'loss_of_heterozygosity'::text)) OR ((cvterm.name)::text = 'transcript_function_variant'::text)) OR ((cvterm.name)::text = 'translational_product_function_variant'::text)) OR ((cvterm.name)::text = 'level_of_transcript_variant'::text)) OR ((cvterm.name)::text = 'transcript_processing_variant'::text)) OR ((cvterm.name)::text = 'transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'transcription_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'editing_variant'::text)) OR ((cvterm.name)::text = 'polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text)) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'translational_product_level_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text)) OR ((cvterm.name)::text = 'decreased_translational_product_level'::text)) OR ((cvterm.name)::text = 'increased_translational_product_level'::text)) OR ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text)) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text)) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text)) OR ((cvterm.name)::text = 'silent_mutation'::text)) OR ((cvterm.name)::text = 'copy_number_change'::text)) OR ((cvterm.name)::text = 'gene_variant'::text)) OR ((cvterm.name)::text = 'regulatory_region_variant'::text)) OR ((cvterm.name)::text = 'intergenic_variant'::text)) OR ((cvterm.name)::text = 'upstream_gene_variant'::text)) OR ((cvterm.name)::text = 'downstream_gene_variant'::text)) OR ((cvterm.name)::text = 'gene_fusion'::text)) OR ((cvterm.name)::text = 'splicing_variant'::text)) OR ((cvterm.name)::text = 'transcript_variant'::text)) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text)) OR ((cvterm.name)::text = 'exon_loss'::text)) OR ((cvterm.name)::text = 'intron_gain'::text)) OR ((cvterm.name)::text = 'splice_region_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text)) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text)) OR ((cvterm.name)::text = 'complex_change_in_transcript'::text)) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'nc_transcript_variant'::text)) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text)) OR ((cvterm.name)::text = 'UTR_variant'::text)) OR ((cvterm.name)::text = 'intron_variant'::text)) OR ((cvterm.name)::text = 'exon_variant'::text)) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text)) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text)) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text)) OR ((cvterm.name)::text = 'splice_site_variant'::text)) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'coding_sequence_variant'::text)) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text)) OR ((cvterm.name)::text = 'codon_variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text)) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text)) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text)) OR ((cvterm.name)::text = 'conformational_change_variant'::text)) OR ((cvterm.name)::text = 'amino_acid_deletion'::text)) OR ((cvterm.name)::text = 'amino_acid_insertion'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text)) OR ((cvterm.name)::text = 'polypeptide_fusion'::text)) OR ((cvterm.name)::text = 'polypeptide_truncation'::text)) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'TF_binding_site_variant'::text)) OR ((cvterm.name)::text = '5KB_upstream_variant'::text)) OR ((cvterm.name)::text = '2KB_upstream_variant'::text)) OR ((cvterm.name)::text = '5KB_downstream_variant'::text)) OR ((cvterm.name)::text = '500B_downstream_variant'::text)) OR ((cvterm.name)::text = 'sequence_variant'::text));


ALTER TABLE so.sequence_variant OWNER TO postgres;

--
-- Name: sequencing_primer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sequencing_primer AS
    SELECT feature.feature_id AS sequencing_primer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'sequencing_primer'::text);


ALTER TABLE so.sequencing_primer OWNER TO postgres;

--
-- Name: serine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW serine AS
    SELECT feature.feature_id AS serine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'serine'::text);


ALTER TABLE so.serine OWNER TO postgres;

--
-- Name: serine_threonine_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW serine_threonine_motif AS
    SELECT feature.feature_id AS serine_threonine_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'serine_threonine_motif'::text);


ALTER TABLE so.serine_threonine_motif OWNER TO postgres;

--
-- Name: serine_threonine_staple_motif; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW serine_threonine_staple_motif AS
    SELECT feature.feature_id AS serine_threonine_staple_motif_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'serine_threonine_staple_motif'::text);


ALTER TABLE so.serine_threonine_staple_motif OWNER TO postgres;

--
-- Name: serine_threonine_turn; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW serine_threonine_turn AS
    SELECT feature.feature_id AS serine_threonine_turn_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'st_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text));


ALTER TABLE so.serine_threonine_turn OWNER TO postgres;

--
-- Name: serine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW serine_trna_primary_transcript AS
    SELECT feature.feature_id AS serine_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text);


ALTER TABLE so.serine_trna_primary_transcript OWNER TO postgres;

--
-- Name: seryl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW seryl_trna AS
    SELECT feature.feature_id AS seryl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'seryl_tRNA'::text);


ALTER TABLE so.seryl_trna OWNER TO postgres;

--
-- Name: seven_aminomethyl_seven_deazaguanosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW seven_aminomethyl_seven_deazaguanosine AS
    SELECT feature.feature_id AS seven_aminomethyl_seven_deazaguanosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text);


ALTER TABLE so.seven_aminomethyl_seven_deazaguanosine OWNER TO postgres;

--
-- Name: seven_cyano_seven_deazaguanosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW seven_cyano_seven_deazaguanosine AS
    SELECT feature.feature_id AS seven_cyano_seven_deazaguanosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text);


ALTER TABLE so.seven_cyano_seven_deazaguanosine OWNER TO postgres;

--
-- Name: seven_deazaguanosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW seven_deazaguanosine AS
    SELECT feature.feature_id AS seven_deazaguanosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'queuosine'::text) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text));


ALTER TABLE so.seven_deazaguanosine OWNER TO postgres;

--
-- Name: seven_methylguanine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW seven_methylguanine AS
    SELECT feature.feature_id AS seven_methylguanine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'seven_methylguanine'::text);


ALTER TABLE so.seven_methylguanine OWNER TO postgres;

--
-- Name: seven_methylguanosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW seven_methylguanosine AS
    SELECT feature.feature_id AS seven_methylguanosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'seven_methylguanosine'::text);


ALTER TABLE so.seven_methylguanosine OWNER TO postgres;

--
-- Name: shadow_enhancer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW shadow_enhancer AS
    SELECT feature.feature_id AS shadow_enhancer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'shadow_enhancer'::text);


ALTER TABLE so.shadow_enhancer OWNER TO postgres;

--
-- Name: shine_dalgarno_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW shine_dalgarno_sequence AS
    SELECT feature.feature_id AS shine_dalgarno_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text);


ALTER TABLE so.shine_dalgarno_sequence OWNER TO postgres;

--
-- Name: signal_peptide; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW signal_peptide AS
    SELECT feature.feature_id AS signal_peptide_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'signal_peptide'::text);


ALTER TABLE so.signal_peptide OWNER TO postgres;

--
-- Name: silenced; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW silenced AS
    SELECT feature.feature_id AS silenced_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'silenced'::text));


ALTER TABLE so.silenced OWNER TO postgres;

--
-- Name: silenced_by_dna_methylation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW silenced_by_dna_methylation AS
    SELECT feature.feature_id AS silenced_by_dna_methylation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text);


ALTER TABLE so.silenced_by_dna_methylation OWNER TO postgres;

--
-- Name: silenced_by_dna_modification; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW silenced_by_dna_modification AS
    SELECT feature.feature_id AS silenced_by_dna_modification_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text));


ALTER TABLE so.silenced_by_dna_modification OWNER TO postgres;

--
-- Name: silenced_by_histone_deacetylation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW silenced_by_histone_deacetylation AS
    SELECT feature.feature_id AS silenced_by_histone_deacetylation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text);


ALTER TABLE so.silenced_by_histone_deacetylation OWNER TO postgres;

--
-- Name: silenced_by_histone_methylation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW silenced_by_histone_methylation AS
    SELECT feature.feature_id AS silenced_by_histone_methylation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'silenced_by_histone_methylation'::text);


ALTER TABLE so.silenced_by_histone_methylation OWNER TO postgres;

--
-- Name: silenced_by_histone_modification; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW silenced_by_histone_modification AS
    SELECT feature.feature_id AS silenced_by_histone_modification_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text));


ALTER TABLE so.silenced_by_histone_modification OWNER TO postgres;

--
-- Name: silenced_by_rna_interference; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW silenced_by_rna_interference AS
    SELECT feature.feature_id AS silenced_by_rna_interference_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'silenced_by_RNA_interference'::text);


ALTER TABLE so.silenced_by_rna_interference OWNER TO postgres;

--
-- Name: silenced_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW silenced_gene AS
    SELECT feature.feature_id AS silenced_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'silenced_gene'::text));


ALTER TABLE so.silenced_gene OWNER TO postgres;

--
-- Name: silencer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW silencer AS
    SELECT feature.feature_id AS silencer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'silencer'::text);


ALTER TABLE so.silencer OWNER TO postgres;

--
-- Name: silent_mutation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW silent_mutation AS
    SELECT feature.feature_id AS silent_mutation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'silent_mutation'::text);


ALTER TABLE so.silent_mutation OWNER TO postgres;

--
-- Name: simple_sequence_length_variation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW simple_sequence_length_variation AS
    SELECT feature.feature_id AS simple_sequence_length_variation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'simple_sequence_length_variation'::text);


ALTER TABLE so.simple_sequence_length_variation OWNER TO postgres;

--
-- Name: sine_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sine_element AS
    SELECT feature.feature_id AS sine_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SINE_element'::text);


ALTER TABLE so.sine_element OWNER TO postgres;

--
-- Name: single; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW single AS
    SELECT feature.feature_id AS single_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'single'::text);


ALTER TABLE so.single OWNER TO postgres;

--
-- Name: single_strand_restriction_enzyme_cleavage_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW single_strand_restriction_enzyme_cleavage_site AS
    SELECT feature.feature_id AS single_strand_restriction_enzyme_cleavage_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text));


ALTER TABLE so.single_strand_restriction_enzyme_cleavage_site OWNER TO postgres;

--
-- Name: single_stranded_cdna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW single_stranded_cdna AS
    SELECT feature.feature_id AS single_stranded_cdna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'single_stranded_cDNA'::text);


ALTER TABLE so.single_stranded_cdna OWNER TO postgres;

--
-- Name: single_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW single_stranded_dna_chromosome AS
    SELECT feature.feature_id AS single_stranded_dna_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text));


ALTER TABLE so.single_stranded_dna_chromosome OWNER TO postgres;

--
-- Name: single_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW single_stranded_rna_chromosome AS
    SELECT feature.feature_id AS single_stranded_rna_chromosome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text));


ALTER TABLE so.single_stranded_rna_chromosome OWNER TO postgres;

--
-- Name: sirna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sirna AS
    SELECT feature.feature_id AS sirna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'siRNA'::text);


ALTER TABLE so.sirna OWNER TO postgres;

--
-- Name: site_specific_recombination_target_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW site_specific_recombination_target_region AS
    SELECT feature.feature_id AS site_specific_recombination_target_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((cvterm.name)::text = 'integration_excision_site'::text) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text));


ALTER TABLE so.site_specific_recombination_target_region OWNER TO postgres;

--
-- Name: sl10_accceptor_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sl10_accceptor_site AS
    SELECT feature.feature_id AS sl10_accceptor_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SL10_accceptor_site'::text);


ALTER TABLE so.sl10_accceptor_site OWNER TO postgres;

--
-- Name: sl11_acceptor_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sl11_acceptor_site AS
    SELECT feature.feature_id AS sl11_acceptor_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SL11_acceptor_site'::text);


ALTER TABLE so.sl11_acceptor_site OWNER TO postgres;

--
-- Name: sl12_acceptor_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sl12_acceptor_site AS
    SELECT feature.feature_id AS sl12_acceptor_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SL12_acceptor_site'::text);


ALTER TABLE so.sl12_acceptor_site OWNER TO postgres;

--
-- Name: sl1_acceptor_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sl1_acceptor_site AS
    SELECT feature.feature_id AS sl1_acceptor_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SL1_acceptor_site'::text);


ALTER TABLE so.sl1_acceptor_site OWNER TO postgres;

--
-- Name: sl2_acceptor_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sl2_acceptor_site AS
    SELECT feature.feature_id AS sl2_acceptor_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((cvterm.name)::text = 'SL3_acceptor_site'::text) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text));


ALTER TABLE so.sl2_acceptor_site OWNER TO postgres;

--
-- Name: sl3_acceptor_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sl3_acceptor_site AS
    SELECT feature.feature_id AS sl3_acceptor_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SL3_acceptor_site'::text);


ALTER TABLE so.sl3_acceptor_site OWNER TO postgres;

--
-- Name: sl4_acceptor_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sl4_acceptor_site AS
    SELECT feature.feature_id AS sl4_acceptor_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SL4_acceptor_site'::text);


ALTER TABLE so.sl4_acceptor_site OWNER TO postgres;

--
-- Name: sl5_acceptor_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sl5_acceptor_site AS
    SELECT feature.feature_id AS sl5_acceptor_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SL5_acceptor_site'::text);


ALTER TABLE so.sl5_acceptor_site OWNER TO postgres;

--
-- Name: sl6_acceptor_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sl6_acceptor_site AS
    SELECT feature.feature_id AS sl6_acceptor_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SL6_acceptor_site'::text);


ALTER TABLE so.sl6_acceptor_site OWNER TO postgres;

--
-- Name: sl7_acceptor_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sl7_acceptor_site AS
    SELECT feature.feature_id AS sl7_acceptor_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SL7_acceptor_site'::text);


ALTER TABLE so.sl7_acceptor_site OWNER TO postgres;

--
-- Name: sl8_acceptor_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sl8_acceptor_site AS
    SELECT feature.feature_id AS sl8_acceptor_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SL8_acceptor_site'::text);


ALTER TABLE so.sl8_acceptor_site OWNER TO postgres;

--
-- Name: sl9_acceptor_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sl9_acceptor_site AS
    SELECT feature.feature_id AS sl9_acceptor_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SL9_acceptor_site'::text);


ALTER TABLE so.sl9_acceptor_site OWNER TO postgres;

--
-- Name: small_regulatory_ncrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW small_regulatory_ncrna AS
    SELECT feature.feature_id AS small_regulatory_ncrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((cvterm.name)::text = 'miRNA'::text) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text));


ALTER TABLE so.small_regulatory_ncrna OWNER TO postgres;

--
-- Name: small_subunit_rrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW small_subunit_rrna AS
    SELECT feature.feature_id AS small_subunit_rrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'rRNA_18S'::text) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text));


ALTER TABLE so.small_subunit_rrna OWNER TO postgres;

--
-- Name: snorna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW snorna AS
    SELECT feature.feature_id AS snorna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'C_D_box_snoRNA'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text));


ALTER TABLE so.snorna OWNER TO postgres;

--
-- Name: snorna_encoding; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW snorna_encoding AS
    SELECT feature.feature_id AS snorna_encoding_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'snoRNA_encoding'::text));


ALTER TABLE so.snorna_encoding OWNER TO postgres;

--
-- Name: snorna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW snorna_gene AS
    SELECT feature.feature_id AS snorna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'snoRNA_gene'::text);


ALTER TABLE so.snorna_gene OWNER TO postgres;

--
-- Name: snorna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW snorna_primary_transcript AS
    SELECT feature.feature_id AS snorna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text));


ALTER TABLE so.snorna_primary_transcript OWNER TO postgres;

--
-- Name: snp; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW snp AS
    SELECT feature.feature_id AS snp_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SNP'::text);


ALTER TABLE so.snp OWNER TO postgres;

--
-- Name: snrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW snrna AS
    SELECT feature.feature_id AS snrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((cvterm.name)::text = 'U1_snRNA'::text) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text));


ALTER TABLE so.snrna OWNER TO postgres;

--
-- Name: snrna_encoding; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW snrna_encoding AS
    SELECT feature.feature_id AS snrna_encoding_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'snRNA_encoding'::text);


ALTER TABLE so.snrna_encoding OWNER TO postgres;

--
-- Name: snrna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW snrna_gene AS
    SELECT feature.feature_id AS snrna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'snRNA_gene'::text);


ALTER TABLE so.snrna_gene OWNER TO postgres;

--
-- Name: snrna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW snrna_primary_transcript AS
    SELECT feature.feature_id AS snrna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'snRNA_primary_transcript'::text);


ALTER TABLE so.snrna_primary_transcript OWNER TO postgres;

--
-- Name: snv; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW snv AS
    SELECT feature.feature_id AS snv_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((cvterm.name)::text = 'SNP'::text) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'SNV'::text));


ALTER TABLE so.snv OWNER TO postgres;

--
-- Name: so_foreign; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW so_foreign AS
    SELECT feature.feature_id AS so_foreign_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'foreign'::text);


ALTER TABLE so.so_foreign OWNER TO postgres;

--
-- Name: so_genotype; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW so_genotype AS
    SELECT feature.feature_id AS so_genotype_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'genotype'::text);


ALTER TABLE so.so_genotype OWNER TO postgres;

--
-- Name: so_natural; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW so_natural AS
    SELECT feature.feature_id AS so_natural_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'natural'::text);


ALTER TABLE so.so_natural OWNER TO postgres;

--
-- Name: solo_ltr; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW solo_ltr AS
    SELECT feature.feature_id AS solo_ltr_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'solo_LTR'::text);


ALTER TABLE so.solo_ltr OWNER TO postgres;

--
-- Name: somatic_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW somatic_variant AS
    SELECT feature.feature_id AS somatic_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'somatic_variant'::text);


ALTER TABLE so.somatic_variant OWNER TO postgres;

--
-- Name: sonicate_fragment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sonicate_fragment AS
    SELECT feature.feature_id AS sonicate_fragment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'sonicate_fragment'::text);


ALTER TABLE so.sonicate_fragment OWNER TO postgres;

--
-- Name: sp6_rna_polymerase_promoter; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sp6_rna_polymerase_promoter AS
    SELECT feature.feature_id AS sp6_rna_polymerase_promoter_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text);


ALTER TABLE so.sp6_rna_polymerase_promoter OWNER TO postgres;

--
-- Name: specific_recombination_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW specific_recombination_site AS
    SELECT feature.feature_id AS specific_recombination_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'specific_recombination_site'::text));


ALTER TABLE so.specific_recombination_site OWNER TO postgres;

--
-- Name: splice_acceptor_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW splice_acceptor_variant AS
    SELECT feature.feature_id AS splice_acceptor_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'splice_acceptor_variant'::text);


ALTER TABLE so.splice_acceptor_variant OWNER TO postgres;

--
-- Name: splice_donor_5th_base_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW splice_donor_5th_base_variant AS
    SELECT feature.feature_id AS splice_donor_5th_base_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text);


ALTER TABLE so.splice_donor_5th_base_variant OWNER TO postgres;

--
-- Name: splice_donor_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW splice_donor_variant AS
    SELECT feature.feature_id AS splice_donor_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'splice_donor_variant'::text);


ALTER TABLE so.splice_donor_variant OWNER TO postgres;

--
-- Name: splice_enhancer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW splice_enhancer AS
    SELECT feature.feature_id AS splice_enhancer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text));


ALTER TABLE so.splice_enhancer OWNER TO postgres;

--
-- Name: splice_junction; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW splice_junction AS
    SELECT feature.feature_id AS splice_junction_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'splice_junction'::text);


ALTER TABLE so.splice_junction OWNER TO postgres;

--
-- Name: splice_region_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW splice_region_variant AS
    SELECT feature.feature_id AS splice_region_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'splice_region_variant'::text);


ALTER TABLE so.splice_region_variant OWNER TO postgres;

--
-- Name: splice_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW splice_site AS
    SELECT feature.feature_id AS splice_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((cvterm.name)::text = 'cis_splice_site'::text) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'splice_site'::text));


ALTER TABLE so.splice_site OWNER TO postgres;

--
-- Name: splice_site_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW splice_site_variant AS
    SELECT feature.feature_id AS splice_site_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'splice_acceptor_variant'::text) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'splice_site_variant'::text));


ALTER TABLE so.splice_site_variant OWNER TO postgres;

--
-- Name: spliced_leader_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW spliced_leader_rna AS
    SELECT feature.feature_id AS spliced_leader_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'spliced_leader_RNA'::text);


ALTER TABLE so.spliced_leader_rna OWNER TO postgres;

--
-- Name: spliceosomal_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW spliceosomal_intron AS
    SELECT feature.feature_id AS spliceosomal_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'U2_intron'::text) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text));


ALTER TABLE so.spliceosomal_intron OWNER TO postgres;

--
-- Name: spliceosomal_intron_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW spliceosomal_intron_region AS
    SELECT feature.feature_id AS spliceosomal_intron_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text));


ALTER TABLE so.spliceosomal_intron_region OWNER TO postgres;

--
-- Name: splicing_regulatory_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW splicing_regulatory_region AS
    SELECT feature.feature_id AS splicing_regulatory_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'splice_enhancer'::text) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text));


ALTER TABLE so.splicing_regulatory_region OWNER TO postgres;

--
-- Name: splicing_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW splicing_variant AS
    SELECT feature.feature_id AS splicing_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'cryptic_splice_site_variant'::text) OR ((cvterm.name)::text = 'exon_loss'::text)) OR ((cvterm.name)::text = 'intron_gain'::text)) OR ((cvterm.name)::text = 'splice_region_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text)) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text)) OR ((cvterm.name)::text = 'splicing_variant'::text));


ALTER TABLE so.splicing_variant OWNER TO postgres;

--
-- Name: spot_42_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW spot_42_rna AS
    SELECT feature.feature_id AS spot_42_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'spot_42_RNA'::text);


ALTER TABLE so.spot_42_rna OWNER TO postgres;

--
-- Name: srp_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW srp_rna AS
    SELECT feature.feature_id AS srp_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SRP_RNA'::text);


ALTER TABLE so.srp_rna OWNER TO postgres;

--
-- Name: srp_rna_encoding; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW srp_rna_encoding AS
    SELECT feature.feature_id AS srp_rna_encoding_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SRP_RNA_encoding'::text);


ALTER TABLE so.srp_rna_encoding OWNER TO postgres;

--
-- Name: srp_rna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW srp_rna_gene AS
    SELECT feature.feature_id AS srp_rna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SRP_RNA_gene'::text);


ALTER TABLE so.srp_rna_gene OWNER TO postgres;

--
-- Name: srp_rna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW srp_rna_primary_transcript AS
    SELECT feature.feature_id AS srp_rna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text);


ALTER TABLE so.srp_rna_primary_transcript OWNER TO postgres;

--
-- Name: ss_oligo; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ss_oligo AS
    SELECT feature.feature_id AS ss_oligo_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'primer'::text) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text));


ALTER TABLE so.ss_oligo OWNER TO postgres;

--
-- Name: ss_rna_viral_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ss_rna_viral_sequence AS
    SELECT feature.feature_id AS ss_rna_viral_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text));


ALTER TABLE so.ss_rna_viral_sequence OWNER TO postgres;

--
-- Name: st_turn_left_handed_type_one; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW st_turn_left_handed_type_one AS
    SELECT feature.feature_id AS st_turn_left_handed_type_one_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text);


ALTER TABLE so.st_turn_left_handed_type_one OWNER TO postgres;

--
-- Name: st_turn_left_handed_type_two; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW st_turn_left_handed_type_two AS
    SELECT feature.feature_id AS st_turn_left_handed_type_two_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text);


ALTER TABLE so.st_turn_left_handed_type_two OWNER TO postgres;

--
-- Name: st_turn_right_handed_type_one; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW st_turn_right_handed_type_one AS
    SELECT feature.feature_id AS st_turn_right_handed_type_one_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text);


ALTER TABLE so.st_turn_right_handed_type_one OWNER TO postgres;

--
-- Name: st_turn_right_handed_type_two; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW st_turn_right_handed_type_two AS
    SELECT feature.feature_id AS st_turn_right_handed_type_two_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text);


ALTER TABLE so.st_turn_right_handed_type_two OWNER TO postgres;

--
-- Name: standard_draft; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW standard_draft AS
    SELECT feature.feature_id AS standard_draft_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'standard_draft'::text);


ALTER TABLE so.standard_draft OWNER TO postgres;

--
-- Name: start_codon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW start_codon AS
    SELECT feature.feature_id AS start_codon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text));


ALTER TABLE so.start_codon OWNER TO postgres;

--
-- Name: status; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW status AS
    SELECT feature.feature_id AS status_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((cvterm.name)::text = 'fragmentary'::text) OR ((cvterm.name)::text = 'predicted'::text)) OR ((cvterm.name)::text = 'validated'::text)) OR ((cvterm.name)::text = 'invalidated'::text)) OR ((cvterm.name)::text = 'independently_known'::text)) OR ((cvterm.name)::text = 'consensus'::text)) OR ((cvterm.name)::text = 'low_complexity'::text)) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text)) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text)) OR ((cvterm.name)::text = 'orphan'::text)) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text)) OR ((cvterm.name)::text = 'supported_by_domain_match'::text)) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text)) OR ((cvterm.name)::text = 'experimentally_determined'::text)) OR ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text)) OR ((cvterm.name)::text = 'standard_draft'::text)) OR ((cvterm.name)::text = 'high_quality_draft'::text)) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text)) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text)) OR ((cvterm.name)::text = 'noncontiguous_finished'::text)) OR ((cvterm.name)::text = 'finished_genome'::text)) OR ((cvterm.name)::text = 'status'::text));


ALTER TABLE so.status OWNER TO postgres;

--
-- Name: stem_loop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW stem_loop AS
    SELECT feature.feature_id AS stem_loop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'tetraloop'::text) OR ((cvterm.name)::text = 'stem_loop'::text));


ALTER TABLE so.stem_loop OWNER TO postgres;

--
-- Name: sticky_end_restriction_enzyme_cleavage_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sticky_end_restriction_enzyme_cleavage_site AS
    SELECT feature.feature_id AS sticky_end_restriction_enzyme_cleavage_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text);


ALTER TABLE so.sticky_end_restriction_enzyme_cleavage_site OWNER TO postgres;

--
-- Name: stop_codon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW stop_codon AS
    SELECT feature.feature_id AS stop_codon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'stop_codon'::text);


ALTER TABLE so.stop_codon OWNER TO postgres;

--
-- Name: stop_codon_read_through; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW stop_codon_read_through AS
    SELECT feature.feature_id AS stop_codon_read_through_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text));


ALTER TABLE so.stop_codon_read_through OWNER TO postgres;

--
-- Name: stop_codon_redefined_as_pyrrolysine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW stop_codon_redefined_as_pyrrolysine AS
    SELECT feature.feature_id AS stop_codon_redefined_as_pyrrolysine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text);


ALTER TABLE so.stop_codon_redefined_as_pyrrolysine OWNER TO postgres;

--
-- Name: stop_codon_redefined_as_selenocysteine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW stop_codon_redefined_as_selenocysteine AS
    SELECT feature.feature_id AS stop_codon_redefined_as_selenocysteine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text);


ALTER TABLE so.stop_codon_redefined_as_selenocysteine OWNER TO postgres;

--
-- Name: stop_codon_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW stop_codon_signal AS
    SELECT feature.feature_id AS stop_codon_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'UAG_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text));


ALTER TABLE so.stop_codon_signal OWNER TO postgres;

--
-- Name: stop_gained; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW stop_gained AS
    SELECT feature.feature_id AS stop_gained_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'stop_gained'::text);


ALTER TABLE so.stop_gained OWNER TO postgres;

--
-- Name: stop_lost; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW stop_lost AS
    SELECT feature.feature_id AS stop_lost_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'stop_lost'::text);


ALTER TABLE so.stop_lost OWNER TO postgres;

--
-- Name: stop_retained_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW stop_retained_variant AS
    SELECT feature.feature_id AS stop_retained_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'stop_retained_variant'::text);


ALTER TABLE so.stop_retained_variant OWNER TO postgres;

--
-- Name: strand_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW strand_attribute AS
    SELECT feature.feature_id AS strand_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'single'::text) OR ((cvterm.name)::text = 'double'::text)) OR ((cvterm.name)::text = 'strand_attribute'::text));


ALTER TABLE so.strand_attribute OWNER TO postgres;

--
-- Name: strna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW strna AS
    SELECT feature.feature_id AS strna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'stRNA'::text);


ALTER TABLE so.strna OWNER TO postgres;

--
-- Name: strna_encoding; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW strna_encoding AS
    SELECT feature.feature_id AS strna_encoding_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'stRNA_encoding'::text);


ALTER TABLE so.strna_encoding OWNER TO postgres;

--
-- Name: strna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW strna_gene AS
    SELECT feature.feature_id AS strna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'stRNA_gene'::text);


ALTER TABLE so.strna_gene OWNER TO postgres;

--
-- Name: strna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW strna_primary_transcript AS
    SELECT feature.feature_id AS strna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'stRNA_primary_transcript'::text);


ALTER TABLE so.strna_primary_transcript OWNER TO postgres;

--
-- Name: structural_alteration; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW structural_alteration AS
    SELECT feature.feature_id AS structural_alteration_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'complex_structural_alteration'::text) OR ((cvterm.name)::text = 'structural_alteration'::text));


ALTER TABLE so.structural_alteration OWNER TO postgres;

--
-- Name: structural_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW structural_variant AS
    SELECT feature.feature_id AS structural_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'silent_mutation'::text) OR ((cvterm.name)::text = 'copy_number_change'::text)) OR ((cvterm.name)::text = 'gene_variant'::text)) OR ((cvterm.name)::text = 'regulatory_region_variant'::text)) OR ((cvterm.name)::text = 'intergenic_variant'::text)) OR ((cvterm.name)::text = 'upstream_gene_variant'::text)) OR ((cvterm.name)::text = 'downstream_gene_variant'::text)) OR ((cvterm.name)::text = 'gene_fusion'::text)) OR ((cvterm.name)::text = 'splicing_variant'::text)) OR ((cvterm.name)::text = 'transcript_variant'::text)) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text)) OR ((cvterm.name)::text = 'exon_loss'::text)) OR ((cvterm.name)::text = 'intron_gain'::text)) OR ((cvterm.name)::text = 'splice_region_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text)) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text)) OR ((cvterm.name)::text = 'complex_change_in_transcript'::text)) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'nc_transcript_variant'::text)) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text)) OR ((cvterm.name)::text = 'UTR_variant'::text)) OR ((cvterm.name)::text = 'intron_variant'::text)) OR ((cvterm.name)::text = 'exon_variant'::text)) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text)) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text)) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text)) OR ((cvterm.name)::text = 'splice_site_variant'::text)) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'coding_sequence_variant'::text)) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text)) OR ((cvterm.name)::text = 'codon_variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text)) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text)) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text)) OR ((cvterm.name)::text = 'conformational_change_variant'::text)) OR ((cvterm.name)::text = 'amino_acid_deletion'::text)) OR ((cvterm.name)::text = 'amino_acid_insertion'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text)) OR ((cvterm.name)::text = 'polypeptide_fusion'::text)) OR ((cvterm.name)::text = 'polypeptide_truncation'::text)) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'TF_binding_site_variant'::text)) OR ((cvterm.name)::text = '5KB_upstream_variant'::text)) OR ((cvterm.name)::text = '2KB_upstream_variant'::text)) OR ((cvterm.name)::text = '5KB_downstream_variant'::text)) OR ((cvterm.name)::text = '500B_downstream_variant'::text)) OR ((cvterm.name)::text = 'structural_variant'::text));


ALTER TABLE so.structural_variant OWNER TO postgres;

--
-- Name: sts; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sts AS
    SELECT feature.feature_id AS sts_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'STS'::text);


ALTER TABLE so.sts OWNER TO postgres;

--
-- Name: sts_map; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sts_map AS
    SELECT feature.feature_id AS sts_map_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'STS_map'::text);


ALTER TABLE so.sts_map OWNER TO postgres;

--
-- Name: substitution; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW substitution AS
    SELECT feature.feature_id AS substitution_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((cvterm.name)::text = 'sequence_length_variation'::text) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'substitution'::text));


ALTER TABLE so.substitution OWNER TO postgres;

--
-- Name: sugar_edge_base_pair; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW sugar_edge_base_pair AS
    SELECT feature.feature_id AS sugar_edge_base_pair_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'sugar_edge_base_pair'::text);


ALTER TABLE so.sugar_edge_base_pair OWNER TO postgres;

--
-- Name: supercontig; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW supercontig AS
    SELECT feature.feature_id AS supercontig_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'supercontig'::text);


ALTER TABLE so.supercontig OWNER TO postgres;

--
-- Name: supported_by_domain_match; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW supported_by_domain_match AS
    SELECT feature.feature_id AS supported_by_domain_match_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'supported_by_domain_match'::text);


ALTER TABLE so.supported_by_domain_match OWNER TO postgres;

--
-- Name: supported_by_est_or_cdna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW supported_by_est_or_cdna AS
    SELECT feature.feature_id AS supported_by_est_or_cdna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text);


ALTER TABLE so.supported_by_est_or_cdna OWNER TO postgres;

--
-- Name: supported_by_sequence_similarity; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW supported_by_sequence_similarity AS
    SELECT feature.feature_id AS supported_by_sequence_similarity_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'supported_by_domain_match'::text) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text)) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text));


ALTER TABLE so.supported_by_sequence_similarity OWNER TO postgres;

--
-- Name: symbiosis_island; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW symbiosis_island AS
    SELECT feature.feature_id AS symbiosis_island_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'symbiosis_island'::text);


ALTER TABLE so.symbiosis_island OWNER TO postgres;

--
-- Name: symmetric_rna_internal_loop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW symmetric_rna_internal_loop AS
    SELECT feature.feature_id AS symmetric_rna_internal_loop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text);


ALTER TABLE so.symmetric_rna_internal_loop OWNER TO postgres;

--
-- Name: synonymous_codon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW synonymous_codon AS
    SELECT feature.feature_id AS synonymous_codon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'synonymous_codon'::text);


ALTER TABLE so.synonymous_codon OWNER TO postgres;

--
-- Name: syntenic; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW syntenic AS
    SELECT feature.feature_id AS syntenic_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'syntenic'::text);


ALTER TABLE so.syntenic OWNER TO postgres;

--
-- Name: syntenic_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW syntenic_region AS
    SELECT feature.feature_id AS syntenic_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'syntenic_region'::text);


ALTER TABLE so.syntenic_region OWNER TO postgres;

--
-- Name: synthetic_oligo; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW synthetic_oligo AS
    SELECT feature.feature_id AS synthetic_oligo_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'morpholino_oligo'::text) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text));


ALTER TABLE so.synthetic_oligo OWNER TO postgres;

--
-- Name: synthetic_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW synthetic_sequence AS
    SELECT feature.feature_id AS synthetic_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'random_sequence'::text) OR ((cvterm.name)::text = 'designed_sequence'::text)) OR ((cvterm.name)::text = 'synthetic_sequence'::text));


ALTER TABLE so.synthetic_sequence OWNER TO postgres;

--
-- Name: t3_rna_polymerase_promoter; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW t3_rna_polymerase_promoter AS
    SELECT feature.feature_id AS t3_rna_polymerase_promoter_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text);


ALTER TABLE so.t3_rna_polymerase_promoter OWNER TO postgres;

--
-- Name: t7_rna_polymerase_promoter; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW t7_rna_polymerase_promoter AS
    SELECT feature.feature_id AS t7_rna_polymerase_promoter_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text);


ALTER TABLE so.t7_rna_polymerase_promoter OWNER TO postgres;

--
-- Name: t_loop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW t_loop AS
    SELECT feature.feature_id AS t_loop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'T_loop'::text);


ALTER TABLE so.t_loop OWNER TO postgres;

--
-- Name: t_to_a_transversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW t_to_a_transversion AS
    SELECT feature.feature_id AS t_to_a_transversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'T_to_A_transversion'::text);


ALTER TABLE so.t_to_a_transversion OWNER TO postgres;

--
-- Name: t_to_c_transition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW t_to_c_transition AS
    SELECT feature.feature_id AS t_to_c_transition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'T_to_C_transition'::text);


ALTER TABLE so.t_to_c_transition OWNER TO postgres;

--
-- Name: t_to_g_transversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW t_to_g_transversion AS
    SELECT feature.feature_id AS t_to_g_transversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'T_to_G_transversion'::text);


ALTER TABLE so.t_to_g_transversion OWNER TO postgres;

--
-- Name: tag; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tag AS
    SELECT feature.feature_id AS tag_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((cvterm.name)::text = 'SAGE_tag'::text) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'tag'::text));


ALTER TABLE so.tag OWNER TO postgres;

--
-- Name: tandem; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tandem AS
    SELECT feature.feature_id AS tandem_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tandem'::text);


ALTER TABLE so.tandem OWNER TO postgres;

--
-- Name: tandem_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tandem_duplication AS
    SELECT feature.feature_id AS tandem_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'direct_tandem_duplication'::text) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text));


ALTER TABLE so.tandem_duplication OWNER TO postgres;

--
-- Name: tandem_repeat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tandem_repeat AS
    SELECT feature.feature_id AS tandem_repeat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'satellite_DNA'::text) OR ((cvterm.name)::text = 'microsatellite'::text)) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tandem_repeat'::text));


ALTER TABLE so.tandem_repeat OWNER TO postgres;

--
-- Name: target_site_duplication; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW target_site_duplication AS
    SELECT feature.feature_id AS target_site_duplication_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'target_site_duplication'::text);


ALTER TABLE so.target_site_duplication OWNER TO postgres;

--
-- Name: targeting_vector; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW targeting_vector AS
    SELECT feature.feature_id AS targeting_vector_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'targeting_vector'::text);


ALTER TABLE so.targeting_vector OWNER TO postgres;

--
-- Name: tasirna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tasirna AS
    SELECT feature.feature_id AS tasirna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tasiRNA'::text);


ALTER TABLE so.tasirna OWNER TO postgres;

--
-- Name: tasirna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tasirna_primary_transcript AS
    SELECT feature.feature_id AS tasirna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text);


ALTER TABLE so.tasirna_primary_transcript OWNER TO postgres;

--
-- Name: tata_box; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tata_box AS
    SELECT feature.feature_id AS tata_box_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'TATA_box'::text));


ALTER TABLE so.tata_box OWNER TO postgres;

--
-- Name: telomerase_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW telomerase_rna AS
    SELECT feature.feature_id AS telomerase_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'telomerase_RNA'::text);


ALTER TABLE so.telomerase_rna OWNER TO postgres;

--
-- Name: telomerase_rna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW telomerase_rna_gene AS
    SELECT feature.feature_id AS telomerase_rna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'telomerase_RNA_gene'::text);


ALTER TABLE so.telomerase_rna_gene OWNER TO postgres;

--
-- Name: telomere; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW telomere AS
    SELECT feature.feature_id AS telomere_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'telomere'::text);


ALTER TABLE so.telomere OWNER TO postgres;

--
-- Name: telomeric_repeat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW telomeric_repeat AS
    SELECT feature.feature_id AS telomeric_repeat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'telomeric_repeat'::text);


ALTER TABLE so.telomeric_repeat OWNER TO postgres;

--
-- Name: template_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW template_region AS
    SELECT feature.feature_id AS template_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'template_region'::text);


ALTER TABLE so.template_region OWNER TO postgres;

--
-- Name: terminal_codon_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW terminal_codon_variant AS
    SELECT feature.feature_id AS terminal_codon_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'terminator_codon_variant'::text) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text));


ALTER TABLE so.terminal_codon_variant OWNER TO postgres;

--
-- Name: terminal_inverted_repeat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW terminal_inverted_repeat AS
    SELECT feature.feature_id AS terminal_inverted_repeat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text));


ALTER TABLE so.terminal_inverted_repeat OWNER TO postgres;

--
-- Name: terminal_inverted_repeat_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW terminal_inverted_repeat_element AS
    SELECT feature.feature_id AS terminal_inverted_repeat_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'MITE'::text) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text));


ALTER TABLE so.terminal_inverted_repeat_element OWNER TO postgres;

--
-- Name: terminator; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW terminator AS
    SELECT feature.feature_id AS terminator_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'terminator'::text));


ALTER TABLE so.terminator OWNER TO postgres;

--
-- Name: terminator_codon_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW terminator_codon_variant AS
    SELECT feature.feature_id AS terminator_codon_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'stop_retained_variant'::text) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text));


ALTER TABLE so.terminator_codon_variant OWNER TO postgres;

--
-- Name: terminator_of_type_2_rnapol_iii_promoter; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW terminator_of_type_2_rnapol_iii_promoter AS
    SELECT feature.feature_id AS terminator_of_type_2_rnapol_iii_promoter_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text);


ALTER TABLE so.terminator_of_type_2_rnapol_iii_promoter OWNER TO postgres;

--
-- Name: tetraloop; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tetraloop AS
    SELECT feature.feature_id AS tetraloop_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tetraloop'::text);


ALTER TABLE so.tetraloop OWNER TO postgres;

--
-- Name: tetranuc_repeat_microsat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tetranuc_repeat_microsat AS
    SELECT feature.feature_id AS tetranuc_repeat_microsat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text);


ALTER TABLE so.tetranuc_repeat_microsat OWNER TO postgres;

--
-- Name: tf_binding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tf_binding_site AS
    SELECT feature.feature_id AS tf_binding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'TF_binding_site'::text);


ALTER TABLE so.tf_binding_site OWNER TO postgres;

--
-- Name: tf_binding_site_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tf_binding_site_variant AS
    SELECT feature.feature_id AS tf_binding_site_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'TF_binding_site_variant'::text);


ALTER TABLE so.tf_binding_site_variant OWNER TO postgres;

--
-- Name: thr_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW thr_trna_primary_transcript AS
    SELECT feature.feature_id AS thr_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text);


ALTER TABLE so.thr_trna_primary_transcript OWNER TO postgres;

--
-- Name: three_methylcytidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_methylcytidine AS
    SELECT feature.feature_id AS three_methylcytidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_methylcytidine'::text);


ALTER TABLE so.three_methylcytidine OWNER TO postgres;

--
-- Name: three_methylpseudouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_methylpseudouridine AS
    SELECT feature.feature_id AS three_methylpseudouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_methylpseudouridine'::text);


ALTER TABLE so.three_methylpseudouridine OWNER TO postgres;

--
-- Name: three_methyluridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_methyluridine AS
    SELECT feature.feature_id AS three_methyluridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_methyluridine'::text);


ALTER TABLE so.three_methyluridine OWNER TO postgres;

--
-- Name: three_prime_cis_splice_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_cis_splice_site AS
    SELECT feature.feature_id AS three_prime_cis_splice_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text));


ALTER TABLE so.three_prime_cis_splice_site OWNER TO postgres;

--
-- Name: three_prime_clip; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_clip AS
    SELECT feature.feature_id AS three_prime_clip_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_clip'::text);


ALTER TABLE so.three_prime_clip OWNER TO postgres;

--
-- Name: three_prime_coding_exon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_coding_exon AS
    SELECT feature.feature_id AS three_prime_coding_exon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_coding_exon'::text);


ALTER TABLE so.three_prime_coding_exon OWNER TO postgres;

--
-- Name: three_prime_coding_exon_coding_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_coding_exon_coding_region AS
    SELECT feature.feature_id AS three_prime_coding_exon_coding_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text);


ALTER TABLE so.three_prime_coding_exon_coding_region OWNER TO postgres;

--
-- Name: three_prime_coding_exon_noncoding_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_coding_exon_noncoding_region AS
    SELECT feature.feature_id AS three_prime_coding_exon_noncoding_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text);


ALTER TABLE so.three_prime_coding_exon_noncoding_region OWNER TO postgres;

--
-- Name: three_prime_d_heptamer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_d_heptamer AS
    SELECT feature.feature_id AS three_prime_d_heptamer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_D_heptamer'::text);


ALTER TABLE so.three_prime_d_heptamer OWNER TO postgres;

--
-- Name: three_prime_d_nonamer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_d_nonamer AS
    SELECT feature.feature_id AS three_prime_d_nonamer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_D_nonamer'::text);


ALTER TABLE so.three_prime_d_nonamer OWNER TO postgres;

--
-- Name: three_prime_d_recombination_signal_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_d_recombination_signal_sequence AS
    SELECT feature.feature_id AS three_prime_d_recombination_signal_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text);


ALTER TABLE so.three_prime_d_recombination_signal_sequence OWNER TO postgres;

--
-- Name: three_prime_d_spacer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_d_spacer AS
    SELECT feature.feature_id AS three_prime_d_spacer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_D_spacer'::text);


ALTER TABLE so.three_prime_d_spacer OWNER TO postgres;

--
-- Name: three_prime_est; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_est AS
    SELECT feature.feature_id AS three_prime_est_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_EST'::text);


ALTER TABLE so.three_prime_est OWNER TO postgres;

--
-- Name: three_prime_five_prime_overlap; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_five_prime_overlap AS
    SELECT feature.feature_id AS three_prime_five_prime_overlap_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text);


ALTER TABLE so.three_prime_five_prime_overlap OWNER TO postgres;

--
-- Name: three_prime_flanking_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_flanking_region AS
    SELECT feature.feature_id AS three_prime_flanking_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_flanking_region'::text);


ALTER TABLE so.three_prime_flanking_region OWNER TO postgres;

--
-- Name: three_prime_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_intron AS
    SELECT feature.feature_id AS three_prime_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_intron'::text);


ALTER TABLE so.three_prime_intron OWNER TO postgres;

--
-- Name: three_prime_ltr; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_ltr AS
    SELECT feature.feature_id AS three_prime_ltr_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_LTR'::text);


ALTER TABLE so.three_prime_ltr OWNER TO postgres;

--
-- Name: three_prime_ltr_component; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_ltr_component AS
    SELECT feature.feature_id AS three_prime_ltr_component_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'R_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text));


ALTER TABLE so.three_prime_ltr_component OWNER TO postgres;

--
-- Name: three_prime_noncoding_exon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_noncoding_exon AS
    SELECT feature.feature_id AS three_prime_noncoding_exon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_noncoding_exon'::text);


ALTER TABLE so.three_prime_noncoding_exon OWNER TO postgres;

--
-- Name: three_prime_race_clone; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_race_clone AS
    SELECT feature.feature_id AS three_prime_race_clone_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_RACE_clone'::text);


ALTER TABLE so.three_prime_race_clone OWNER TO postgres;

--
-- Name: three_prime_recoding_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_recoding_site AS
    SELECT feature.feature_id AS three_prime_recoding_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'three_prime_stem_loop_structure'::text) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text));


ALTER TABLE so.three_prime_recoding_site OWNER TO postgres;

--
-- Name: three_prime_repeat_recoding_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_repeat_recoding_signal AS
    SELECT feature.feature_id AS three_prime_repeat_recoding_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text);


ALTER TABLE so.three_prime_repeat_recoding_signal OWNER TO postgres;

--
-- Name: three_prime_restriction_enzyme_junction; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_restriction_enzyme_junction AS
    SELECT feature.feature_id AS three_prime_restriction_enzyme_junction_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text);


ALTER TABLE so.three_prime_restriction_enzyme_junction OWNER TO postgres;

--
-- Name: three_prime_rst; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_rst AS
    SELECT feature.feature_id AS three_prime_rst_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_RST'::text);


ALTER TABLE so.three_prime_rst OWNER TO postgres;

--
-- Name: three_prime_stem_loop_structure; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_stem_loop_structure AS
    SELECT feature.feature_id AS three_prime_stem_loop_structure_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text);


ALTER TABLE so.three_prime_stem_loop_structure OWNER TO postgres;

--
-- Name: three_prime_terminal_inverted_repeat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_terminal_inverted_repeat AS
    SELECT feature.feature_id AS three_prime_terminal_inverted_repeat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text);


ALTER TABLE so.three_prime_terminal_inverted_repeat OWNER TO postgres;

--
-- Name: three_prime_three_prime_overlap; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_three_prime_overlap AS
    SELECT feature.feature_id AS three_prime_three_prime_overlap_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text);


ALTER TABLE so.three_prime_three_prime_overlap OWNER TO postgres;

--
-- Name: three_prime_ust; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_ust AS
    SELECT feature.feature_id AS three_prime_ust_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_UST'::text);


ALTER TABLE so.three_prime_ust OWNER TO postgres;

--
-- Name: three_prime_utr; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_utr AS
    SELECT feature.feature_id AS three_prime_utr_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_UTR'::text);


ALTER TABLE so.three_prime_utr OWNER TO postgres;

--
-- Name: three_prime_utr_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_utr_intron AS
    SELECT feature.feature_id AS three_prime_utr_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_prime_UTR_intron'::text);


ALTER TABLE so.three_prime_utr_intron OWNER TO postgres;

--
-- Name: three_prime_utr_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_prime_utr_variant AS
    SELECT feature.feature_id AS three_prime_utr_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = '3_prime_UTR_variant'::text);


ALTER TABLE so.three_prime_utr_variant OWNER TO postgres;

--
-- Name: three_ten_helix; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_ten_helix AS
    SELECT feature.feature_id AS three_ten_helix_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_ten_helix'::text);


ALTER TABLE so.three_ten_helix OWNER TO postgres;

--
-- Name: three_three_amino_three_carboxypropyl_uridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_three_amino_three_carboxypropyl_uridine AS
    SELECT feature.feature_id AS three_three_amino_three_carboxypropyl_uridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text);


ALTER TABLE so.three_three_amino_three_carboxypropyl_uridine OWNER TO postgres;

--
-- Name: three_two_prime_o_dimethyluridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW three_two_prime_o_dimethyluridine AS
    SELECT feature.feature_id AS three_two_prime_o_dimethyluridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text);


ALTER TABLE so.three_two_prime_o_dimethyluridine OWNER TO postgres;

--
-- Name: threed_polypeptide_structure_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW threed_polypeptide_structure_variant AS
    SELECT feature.feature_id AS threed_polypeptide_structure_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'complex_3D_structural_variant'::text) OR ((cvterm.name)::text = 'conformational_change_variant'::text)) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text));


ALTER TABLE so.threed_polypeptide_structure_variant OWNER TO postgres;

--
-- Name: threonine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW threonine AS
    SELECT feature.feature_id AS threonine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'threonine'::text);


ALTER TABLE so.threonine OWNER TO postgres;

--
-- Name: threonyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW threonyl_trna AS
    SELECT feature.feature_id AS threonyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'threonyl_tRNA'::text);


ALTER TABLE so.threonyl_trna OWNER TO postgres;

--
-- Name: tiling_path; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tiling_path AS
    SELECT feature.feature_id AS tiling_path_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tiling_path'::text);


ALTER TABLE so.tiling_path OWNER TO postgres;

--
-- Name: tiling_path_clone; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tiling_path_clone AS
    SELECT feature.feature_id AS tiling_path_clone_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tiling_path_clone'::text);


ALTER TABLE so.tiling_path_clone OWNER TO postgres;

--
-- Name: tiling_path_fragment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tiling_path_fragment AS
    SELECT feature.feature_id AS tiling_path_fragment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'tiling_path_clone'::text) OR ((cvterm.name)::text = 'tiling_path_fragment'::text));


ALTER TABLE so.tiling_path_fragment OWNER TO postgres;

--
-- Name: tmrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tmrna AS
    SELECT feature.feature_id AS tmrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tmRNA'::text);


ALTER TABLE so.tmrna OWNER TO postgres;

--
-- Name: tmrna_acceptor_piece; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tmrna_acceptor_piece AS
    SELECT feature.feature_id AS tmrna_acceptor_piece_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text);


ALTER TABLE so.tmrna_acceptor_piece OWNER TO postgres;

--
-- Name: tmrna_coding_piece; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tmrna_coding_piece AS
    SELECT feature.feature_id AS tmrna_coding_piece_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tmRNA_coding_piece'::text);


ALTER TABLE so.tmrna_coding_piece OWNER TO postgres;

--
-- Name: tmrna_encoding; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tmrna_encoding AS
    SELECT feature.feature_id AS tmrna_encoding_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tmRNA_encoding'::text);


ALTER TABLE so.tmrna_encoding OWNER TO postgres;

--
-- Name: tmrna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tmrna_gene AS
    SELECT feature.feature_id AS tmrna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tmRNA_gene'::text);


ALTER TABLE so.tmrna_gene OWNER TO postgres;

--
-- Name: tmrna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tmrna_primary_transcript AS
    SELECT feature.feature_id AS tmrna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tmRNA_primary_transcript'::text);


ALTER TABLE so.tmrna_primary_transcript OWNER TO postgres;

--
-- Name: tmrna_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tmrna_region AS
    SELECT feature.feature_id AS tmrna_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'tmRNA_coding_piece'::text) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_region'::text));


ALTER TABLE so.tmrna_region OWNER TO postgres;

--
-- Name: tna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tna AS
    SELECT feature.feature_id AS tna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'TNA'::text);


ALTER TABLE so.tna OWNER TO postgres;

--
-- Name: tna_oligo; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tna_oligo AS
    SELECT feature.feature_id AS tna_oligo_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'TNA_oligo'::text);


ALTER TABLE so.tna_oligo OWNER TO postgres;

--
-- Name: topologically_defined_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW topologically_defined_region AS
    SELECT feature.feature_id AS topologically_defined_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((cvterm.name)::text = 'flanking_region'::text) OR ((cvterm.name)::text = 'repeat_component'::text)) OR ((cvterm.name)::text = 'transposable_element_flanking_region'::text)) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'LTR_component'::text)) OR ((cvterm.name)::text = 'repeat_fragment'::text)) OR ((cvterm.name)::text = 'transposon_fragment'::text)) OR ((cvterm.name)::text = 'U5_LTR_region'::text)) OR ((cvterm.name)::text = 'R_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'topologically_defined_region'::text));


ALTER TABLE so.topologically_defined_region OWNER TO postgres;

--
-- Name: topology_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW topology_attribute AS
    SELECT feature.feature_id AS topology_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'linear'::text) OR ((cvterm.name)::text = 'circular'::text)) OR ((cvterm.name)::text = 'topology_attribute'::text));


ALTER TABLE so.topology_attribute OWNER TO postgres;

--
-- Name: trans_splice_acceptor_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW trans_splice_acceptor_site AS
    SELECT feature.feature_id AS trans_splice_acceptor_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((cvterm.name)::text = 'SL1_acceptor_site'::text) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text));


ALTER TABLE so.trans_splice_acceptor_site OWNER TO postgres;

--
-- Name: trans_splice_donor_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW trans_splice_donor_site AS
    SELECT feature.feature_id AS trans_splice_donor_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'trans_splice_donor_site'::text);


ALTER TABLE so.trans_splice_donor_site OWNER TO postgres;

--
-- Name: trans_splice_junction; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW trans_splice_junction AS
    SELECT feature.feature_id AS trans_splice_junction_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'trans_splice_junction'::text);


ALTER TABLE so.trans_splice_junction OWNER TO postgres;

--
-- Name: trans_splice_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW trans_splice_site AS
    SELECT feature.feature_id AS trans_splice_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((cvterm.name)::text = 'trans_splice_acceptor_site'::text) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text));


ALTER TABLE so.trans_splice_site OWNER TO postgres;

--
-- Name: trans_spliced; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW trans_spliced AS
    SELECT feature.feature_id AS trans_spliced_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'trans_spliced'::text);


ALTER TABLE so.trans_spliced OWNER TO postgres;

--
-- Name: trans_spliced_mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW trans_spliced_mrna AS
    SELECT feature.feature_id AS trans_spliced_mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'trans_spliced_mRNA'::text);


ALTER TABLE so.trans_spliced_mrna OWNER TO postgres;

--
-- Name: trans_spliced_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW trans_spliced_transcript AS
    SELECT feature.feature_id AS trans_spliced_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text));


ALTER TABLE so.trans_spliced_transcript OWNER TO postgres;

--
-- Name: transcribed_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcribed_cluster AS
    SELECT feature.feature_id AS transcribed_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'unigene_cluster'::text) OR ((cvterm.name)::text = 'transcribed_cluster'::text));


ALTER TABLE so.transcribed_cluster OWNER TO postgres;

--
-- Name: transcribed_fragment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcribed_fragment AS
    SELECT feature.feature_id AS transcribed_fragment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'transcribed_fragment'::text);


ALTER TABLE so.transcribed_fragment OWNER TO postgres;

--
-- Name: transcribed_spacer_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcribed_spacer_region AS
    SELECT feature.feature_id AS transcribed_spacer_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'internal_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text));


ALTER TABLE so.transcribed_spacer_region OWNER TO postgres;

--
-- Name: transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcript AS
    SELECT feature.feature_id AS transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'polycistronic_transcript'::text) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text)) OR ((cvterm.name)::text = 'enzymatic_RNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text)) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text)) OR ((cvterm.name)::text = 'processed_transcript'::text)) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mRNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ribozyme'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'transcript'::text));


ALTER TABLE so.transcript OWNER TO postgres;

--
-- Name: transcript_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcript_attribute AS
    SELECT feature.feature_id AS transcript_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((cvterm.name)::text = 'edited'::text) OR ((cvterm.name)::text = 'capped'::text)) OR ((cvterm.name)::text = 'mRNA_attribute'::text)) OR ((cvterm.name)::text = 'trans_spliced'::text)) OR ((cvterm.name)::text = 'alternatively_spliced'::text)) OR ((cvterm.name)::text = 'monocistronic'::text)) OR ((cvterm.name)::text = 'polycistronic'::text)) OR ((cvterm.name)::text = 'polyadenylated'::text)) OR ((cvterm.name)::text = 'exemplar'::text)) OR ((cvterm.name)::text = 'frameshift'::text)) OR ((cvterm.name)::text = 'recoded'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_framshift'::text)) OR ((cvterm.name)::text = 'codon_redefined'::text)) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'dicistronic'::text)) OR ((cvterm.name)::text = 'transcript_attribute'::text));


ALTER TABLE so.transcript_attribute OWNER TO postgres;

--
-- Name: transcript_bound_by_nucleic_acid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcript_bound_by_nucleic_acid AS
    SELECT feature.feature_id AS transcript_bound_by_nucleic_acid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text);


ALTER TABLE so.transcript_bound_by_nucleic_acid OWNER TO postgres;

--
-- Name: transcript_bound_by_protein; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcript_bound_by_protein AS
    SELECT feature.feature_id AS transcript_bound_by_protein_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'transcript_bound_by_protein'::text);


ALTER TABLE so.transcript_bound_by_protein OWNER TO postgres;

--
-- Name: transcript_function_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcript_function_variant AS
    SELECT feature.feature_id AS transcript_function_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((cvterm.name)::text = 'level_of_transcript_variant'::text) OR ((cvterm.name)::text = 'transcript_processing_variant'::text)) OR ((cvterm.name)::text = 'transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'transcription_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'editing_variant'::text)) OR ((cvterm.name)::text = 'polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text)) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'transcript_function_variant'::text));


ALTER TABLE so.transcript_function_variant OWNER TO postgres;

--
-- Name: transcript_processing_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcript_processing_variant AS
    SELECT feature.feature_id AS transcript_processing_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'editing_variant'::text) OR ((cvterm.name)::text = 'polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'transcript_processing_variant'::text));


ALTER TABLE so.transcript_processing_variant OWNER TO postgres;

--
-- Name: transcript_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcript_region AS
    SELECT feature.feature_id AS transcript_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'exon'::text) OR ((cvterm.name)::text = 'edited_transcript_feature'::text)) OR ((cvterm.name)::text = 'mature_transcript_region'::text)) OR ((cvterm.name)::text = 'primary_transcript_region'::text)) OR ((cvterm.name)::text = 'exon_region'::text)) OR ((cvterm.name)::text = 'anchor_binding_site'::text)) OR ((cvterm.name)::text = 'coding_exon'::text)) OR ((cvterm.name)::text = 'noncoding_exon'::text)) OR ((cvterm.name)::text = 'interior_exon'::text)) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text)) OR ((cvterm.name)::text = 'interior_coding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'pre_edited_region'::text)) OR ((cvterm.name)::text = 'editing_block'::text)) OR ((cvterm.name)::text = 'editing_domain'::text)) OR ((cvterm.name)::text = 'unedited_region'::text)) OR ((cvterm.name)::text = 'mRNA_region'::text)) OR ((cvterm.name)::text = 'tmRNA_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text)) OR ((cvterm.name)::text = 'riboswitch'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'anchor_region'::text)) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'anticodon_loop'::text)) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'splice_site'::text)) OR ((cvterm.name)::text = 'intron'::text)) OR ((cvterm.name)::text = 'clip'::text)) OR ((cvterm.name)::text = 'TSS'::text)) OR ((cvterm.name)::text = 'transcription_end_site'::text)) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text)) OR ((cvterm.name)::text = 'intron_domain'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'outron'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'five_prime_intron'::text)) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'five_prime_clip'::text)) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'major_TSS'::text)) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'internal_guide_sequence'::text)) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'pre_miRNA'::text)) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text)) OR ((cvterm.name)::text = 'coding_region_of_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'transcript_region'::text));


ALTER TABLE so.transcript_region OWNER TO postgres;

--
-- Name: transcript_secondary_structure_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcript_secondary_structure_variant AS
    SELECT feature.feature_id AS transcript_secondary_structure_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text));


ALTER TABLE so.transcript_secondary_structure_variant OWNER TO postgres;

--
-- Name: transcript_stability_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcript_stability_variant AS
    SELECT feature.feature_id AS transcript_stability_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'decreased_transcript_stability_variant'::text) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'transcript_stability_variant'::text));


ALTER TABLE so.transcript_stability_variant OWNER TO postgres;

--
-- Name: transcript_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcript_variant AS
    SELECT feature.feature_id AS transcript_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'complex_change_in_transcript'::text) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'nc_transcript_variant'::text)) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text)) OR ((cvterm.name)::text = 'UTR_variant'::text)) OR ((cvterm.name)::text = 'intron_variant'::text)) OR ((cvterm.name)::text = 'exon_variant'::text)) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text)) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text)) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text)) OR ((cvterm.name)::text = 'splice_site_variant'::text)) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'coding_sequence_variant'::text)) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text)) OR ((cvterm.name)::text = 'codon_variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = 'transcript_variant'::text));


ALTER TABLE so.transcript_variant OWNER TO postgres;

--
-- Name: transcript_with_translational_frameshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcript_with_translational_frameshift AS
    SELECT feature.feature_id AS transcript_with_translational_frameshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text);


ALTER TABLE so.transcript_with_translational_frameshift OWNER TO postgres;

--
-- Name: transcription_end_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcription_end_site AS
    SELECT feature.feature_id AS transcription_end_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'transcription_end_site'::text);


ALTER TABLE so.transcription_end_site OWNER TO postgres;

--
-- Name: transcription_regulatory_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcription_regulatory_region AS
    SELECT feature.feature_id AS transcription_regulatory_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'terminator'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text));


ALTER TABLE so.transcription_regulatory_region OWNER TO postgres;

--
-- Name: transcription_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcription_variant AS
    SELECT feature.feature_id AS transcription_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((cvterm.name)::text = 'rate_of_transcription_variant'::text) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'transcription_variant'::text));


ALTER TABLE so.transcription_variant OWNER TO postgres;

--
-- Name: transcriptional_cis_regulatory_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcriptional_cis_regulatory_region AS
    SELECT feature.feature_id AS transcriptional_cis_regulatory_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((((((cvterm.name)::text = 'promoter'::text) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text));


ALTER TABLE so.transcriptional_cis_regulatory_region OWNER TO postgres;

--
-- Name: transcriptionally_constitutive; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcriptionally_constitutive AS
    SELECT feature.feature_id AS transcriptionally_constitutive_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'transcriptionally_constitutive'::text);


ALTER TABLE so.transcriptionally_constitutive OWNER TO postgres;

--
-- Name: transcriptionally_induced; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcriptionally_induced AS
    SELECT feature.feature_id AS transcriptionally_induced_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'positively_autoregulated'::text) OR ((cvterm.name)::text = 'transcriptionally_induced'::text));


ALTER TABLE so.transcriptionally_induced OWNER TO postgres;

--
-- Name: transcriptionally_regulated; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcriptionally_regulated AS
    SELECT feature.feature_id AS transcriptionally_regulated_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((cvterm.name)::text = 'transcriptionally_constitutive'::text) OR ((cvterm.name)::text = 'transcriptionally_induced'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text)) OR ((cvterm.name)::text = 'autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text));


ALTER TABLE so.transcriptionally_regulated OWNER TO postgres;

--
-- Name: transcriptionally_repressed; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transcriptionally_repressed AS
    SELECT feature.feature_id AS transcriptionally_repressed_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text));


ALTER TABLE so.transcriptionally_repressed OWNER TO postgres;

--
-- Name: transgene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transgene AS
    SELECT feature.feature_id AS transgene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'floxed_gene'::text) OR ((cvterm.name)::text = 'transgene'::text));


ALTER TABLE so.transgene OWNER TO postgres;

--
-- Name: transgenic; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transgenic AS
    SELECT feature.feature_id AS transgenic_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'transgenic'::text);


ALTER TABLE so.transgenic OWNER TO postgres;

--
-- Name: transgenic_insertion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transgenic_insertion AS
    SELECT feature.feature_id AS transgenic_insertion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'transgenic_insertion'::text);


ALTER TABLE so.transgenic_insertion OWNER TO postgres;

--
-- Name: transgenic_transposable_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transgenic_transposable_element AS
    SELECT feature.feature_id AS transgenic_transposable_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'transgenic_transposable_element'::text);


ALTER TABLE so.transgenic_transposable_element OWNER TO postgres;

--
-- Name: transit_peptide; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transit_peptide AS
    SELECT feature.feature_id AS transit_peptide_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'transit_peptide'::text);


ALTER TABLE so.transit_peptide OWNER TO postgres;

--
-- Name: transition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transition AS
    SELECT feature.feature_id AS transition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'pyrimidine_transition'::text) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'transition'::text));


ALTER TABLE so.transition OWNER TO postgres;

--
-- Name: translated_nucleotide_match; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW translated_nucleotide_match AS
    SELECT feature.feature_id AS translated_nucleotide_match_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'translated_nucleotide_match'::text);


ALTER TABLE so.translated_nucleotide_match OWNER TO postgres;

--
-- Name: translation_regulatory_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW translation_regulatory_region AS
    SELECT feature.feature_id AS translation_regulatory_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'attenuator'::text) OR ((cvterm.name)::text = 'translation_regulatory_region'::text));


ALTER TABLE so.translation_regulatory_region OWNER TO postgres;

--
-- Name: translational_frameshift; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW translational_frameshift AS
    SELECT feature.feature_id AS translational_frameshift_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'plus_1_translational_frameshift'::text) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text));


ALTER TABLE so.translational_frameshift OWNER TO postgres;

--
-- Name: translational_product_function_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW translational_product_function_variant AS
    SELECT feature.feature_id AS translational_product_function_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((cvterm.name)::text = 'translational_product_level_variant'::text) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text)) OR ((cvterm.name)::text = 'decreased_translational_product_level'::text)) OR ((cvterm.name)::text = 'increased_translational_product_level'::text)) OR ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text)) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text)) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text)) OR ((cvterm.name)::text = 'translational_product_function_variant'::text));


ALTER TABLE so.translational_product_function_variant OWNER TO postgres;

--
-- Name: translational_product_level_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW translational_product_level_variant AS
    SELECT feature.feature_id AS translational_product_level_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'decreased_translational_product_level'::text) OR ((cvterm.name)::text = 'increased_translational_product_level'::text)) OR ((cvterm.name)::text = 'translational_product_level_variant'::text));


ALTER TABLE so.translational_product_level_variant OWNER TO postgres;

--
-- Name: translational_product_structure_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW translational_product_structure_variant AS
    SELECT feature.feature_id AS translational_product_structure_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((cvterm.name)::text = '3D_polypeptide_structure_variant'::text) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text)) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text)) OR ((cvterm.name)::text = 'conformational_change_variant'::text)) OR ((cvterm.name)::text = 'amino_acid_deletion'::text)) OR ((cvterm.name)::text = 'amino_acid_insertion'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text)) OR ((cvterm.name)::text = 'polypeptide_fusion'::text)) OR ((cvterm.name)::text = 'polypeptide_truncation'::text)) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text));


ALTER TABLE so.translational_product_structure_variant OWNER TO postgres;

--
-- Name: translationally_frameshifted; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW translationally_frameshifted AS
    SELECT feature.feature_id AS translationally_frameshifted_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text));


ALTER TABLE so.translationally_frameshifted OWNER TO postgres;

--
-- Name: translationally_regulated; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW translationally_regulated AS
    SELECT feature.feature_id AS translationally_regulated_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'translationally_regulated'::text);


ALTER TABLE so.translationally_regulated OWNER TO postgres;

--
-- Name: translationally_regulated_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW translationally_regulated_gene AS
    SELECT feature.feature_id AS translationally_regulated_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'translationally_regulated_gene'::text);


ALTER TABLE so.translationally_regulated_gene OWNER TO postgres;

--
-- Name: translocation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW translocation AS
    SELECT feature.feature_id AS translocation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'translocation'::text);


ALTER TABLE so.translocation OWNER TO postgres;

--
-- Name: translocation_breakpoint; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW translocation_breakpoint AS
    SELECT feature.feature_id AS translocation_breakpoint_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'translocation_breakpoint'::text);


ALTER TABLE so.translocation_breakpoint OWNER TO postgres;

--
-- Name: translocation_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW translocation_element AS
    SELECT feature.feature_id AS translocation_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'translocation_element'::text);


ALTER TABLE so.translocation_element OWNER TO postgres;

--
-- Name: translocaton_attribute; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW translocaton_attribute AS
    SELECT feature.feature_id AS translocaton_attribute_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'reciprocal'::text) OR ((cvterm.name)::text = 'insertional'::text)) OR ((cvterm.name)::text = 'translocaton_attribute'::text));


ALTER TABLE so.translocaton_attribute OWNER TO postgres;

--
-- Name: transmembrane_polypeptide_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transmembrane_polypeptide_region AS
    SELECT feature.feature_id AS transmembrane_polypeptide_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text);


ALTER TABLE so.transmembrane_polypeptide_region OWNER TO postgres;

--
-- Name: transposable_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transposable_element AS
    SELECT feature.feature_id AS transposable_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((cvterm.name)::text = 'retrotransposon'::text) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transposable_element'::text));


ALTER TABLE so.transposable_element OWNER TO postgres;

--
-- Name: transposable_element_flanking_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transposable_element_flanking_region AS
    SELECT feature.feature_id AS transposable_element_flanking_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'transposable_element_flanking_region'::text);


ALTER TABLE so.transposable_element_flanking_region OWNER TO postgres;

--
-- Name: transposable_element_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transposable_element_gene AS
    SELECT feature.feature_id AS transposable_element_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'transposable_element_gene'::text));


ALTER TABLE so.transposable_element_gene OWNER TO postgres;

--
-- Name: transposable_element_insertion_site; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transposable_element_insertion_site AS
    SELECT feature.feature_id AS transposable_element_insertion_site_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'transposable_element_insertion_site'::text);


ALTER TABLE so.transposable_element_insertion_site OWNER TO postgres;

--
-- Name: transposon_fragment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transposon_fragment AS
    SELECT feature.feature_id AS transposon_fragment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'transposon_fragment'::text);


ALTER TABLE so.transposon_fragment OWNER TO postgres;

--
-- Name: transversion; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW transversion AS
    SELECT feature.feature_id AS transversion_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'transversion'::text));


ALTER TABLE so.transversion OWNER TO postgres;

--
-- Name: trinuc_repeat_microsat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW trinuc_repeat_microsat AS
    SELECT feature.feature_id AS trinuc_repeat_microsat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text);


ALTER TABLE so.trinuc_repeat_microsat OWNER TO postgres;

--
-- Name: trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW trna AS
    SELECT feature.feature_id AS trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((cvterm.name)::text = 'alanyl_tRNA'::text) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text));


ALTER TABLE so.trna OWNER TO postgres;

--
-- Name: trna_encoding; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW trna_encoding AS
    SELECT feature.feature_id AS trna_encoding_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tRNA_encoding'::text);


ALTER TABLE so.trna_encoding OWNER TO postgres;

--
-- Name: trna_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW trna_gene AS
    SELECT feature.feature_id AS trna_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tRNA_gene'::text);


ALTER TABLE so.trna_gene OWNER TO postgres;

--
-- Name: trna_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW trna_intron AS
    SELECT feature.feature_id AS trna_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tRNA_intron'::text);


ALTER TABLE so.trna_intron OWNER TO postgres;

--
-- Name: trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW trna_primary_transcript AS
    SELECT feature.feature_id AS trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text));


ALTER TABLE so.trna_primary_transcript OWNER TO postgres;

--
-- Name: trna_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW trna_region AS
    SELECT feature.feature_id AS trna_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'anticodon_loop'::text) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text));


ALTER TABLE so.trna_region OWNER TO postgres;

--
-- Name: try_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW try_trna_primary_transcript AS
    SELECT feature.feature_id AS try_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text);


ALTER TABLE so.try_trna_primary_transcript OWNER TO postgres;

--
-- Name: tryptophan; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tryptophan AS
    SELECT feature.feature_id AS tryptophan_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tryptophan'::text);


ALTER TABLE so.tryptophan OWNER TO postgres;

--
-- Name: tryptophanyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tryptophanyl_trna AS
    SELECT feature.feature_id AS tryptophanyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tryptophanyl_tRNA'::text);


ALTER TABLE so.tryptophanyl_trna OWNER TO postgres;

--
-- Name: tss; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tss AS
    SELECT feature.feature_id AS tss_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'major_TSS'::text) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'TSS'::text));


ALTER TABLE so.tss OWNER TO postgres;

--
-- Name: tss_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tss_region AS
    SELECT feature.feature_id AS tss_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'TSS_region'::text);


ALTER TABLE so.tss_region OWNER TO postgres;

--
-- Name: twintron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW twintron AS
    SELECT feature.feature_id AS twintron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'twintron'::text);


ALTER TABLE so.twintron OWNER TO postgres;

--
-- Name: two_methyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_methyladenosine AS
    SELECT feature.feature_id AS two_methyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_methyladenosine'::text);


ALTER TABLE so.two_methyladenosine OWNER TO postgres;

--
-- Name: two_methylthio_n6_cis_hydroxyisopentenyl_adenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_methylthio_n6_cis_hydroxyisopentenyl_adenosine AS
    SELECT feature.feature_id AS two_methylthio_n6_cis_hydroxyisopentenyl_adenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text);


ALTER TABLE so.two_methylthio_n6_cis_hydroxyisopentenyl_adenosine OWNER TO postgres;

--
-- Name: two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine AS
    SELECT feature.feature_id AS two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text);


ALTER TABLE so.two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine OWNER TO postgres;

--
-- Name: two_methylthio_n6_isopentenyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_methylthio_n6_isopentenyladenosine AS
    SELECT feature.feature_id AS two_methylthio_n6_isopentenyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text);


ALTER TABLE so.two_methylthio_n6_isopentenyladenosine OWNER TO postgres;

--
-- Name: two_methylthio_n6_methyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_methylthio_n6_methyladenosine AS
    SELECT feature.feature_id AS two_methylthio_n6_methyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text);


ALTER TABLE so.two_methylthio_n6_methyladenosine OWNER TO postgres;

--
-- Name: two_methylthio_n6_threonyl_carbamoyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_methylthio_n6_threonyl_carbamoyladenosine AS
    SELECT feature.feature_id AS two_methylthio_n6_threonyl_carbamoyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text);


ALTER TABLE so.two_methylthio_n6_threonyl_carbamoyladenosine OWNER TO postgres;

--
-- Name: two_prime_o_methyladenosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_prime_o_methyladenosine AS
    SELECT feature.feature_id AS two_prime_o_methyladenosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text);


ALTER TABLE so.two_prime_o_methyladenosine OWNER TO postgres;

--
-- Name: two_prime_o_methylcytidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_prime_o_methylcytidine AS
    SELECT feature.feature_id AS two_prime_o_methylcytidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text);


ALTER TABLE so.two_prime_o_methylcytidine OWNER TO postgres;

--
-- Name: two_prime_o_methylguanosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_prime_o_methylguanosine AS
    SELECT feature.feature_id AS two_prime_o_methylguanosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text);


ALTER TABLE so.two_prime_o_methylguanosine OWNER TO postgres;

--
-- Name: two_prime_o_methylinosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_prime_o_methylinosine AS
    SELECT feature.feature_id AS two_prime_o_methylinosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_prime_O_methylinosine'::text);


ALTER TABLE so.two_prime_o_methylinosine OWNER TO postgres;

--
-- Name: two_prime_o_methylpseudouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_prime_o_methylpseudouridine AS
    SELECT feature.feature_id AS two_prime_o_methylpseudouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text);


ALTER TABLE so.two_prime_o_methylpseudouridine OWNER TO postgres;

--
-- Name: two_prime_o_methyluridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_prime_o_methyluridine AS
    SELECT feature.feature_id AS two_prime_o_methyluridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_prime_O_methyluridine'::text);


ALTER TABLE so.two_prime_o_methyluridine OWNER TO postgres;

--
-- Name: two_prime_o_riboa_phosphate; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_prime_o_riboa_phosphate AS
    SELECT feature.feature_id AS two_prime_o_riboa_phosphate_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text);


ALTER TABLE so.two_prime_o_riboa_phosphate OWNER TO postgres;

--
-- Name: two_prime_o_ribosylguanosine_phosphate; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_prime_o_ribosylguanosine_phosphate AS
    SELECT feature.feature_id AS two_prime_o_ribosylguanosine_phosphate_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text);


ALTER TABLE so.two_prime_o_ribosylguanosine_phosphate OWNER TO postgres;

--
-- Name: two_thio_two_prime_o_methyluridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_thio_two_prime_o_methyluridine AS
    SELECT feature.feature_id AS two_thio_two_prime_o_methyluridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text);


ALTER TABLE so.two_thio_two_prime_o_methyluridine OWNER TO postgres;

--
-- Name: two_thiocytidine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_thiocytidine AS
    SELECT feature.feature_id AS two_thiocytidine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_thiocytidine'::text);


ALTER TABLE so.two_thiocytidine OWNER TO postgres;

--
-- Name: two_thiouridine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW two_thiouridine AS
    SELECT feature.feature_id AS two_thiouridine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'two_thiouridine'::text);


ALTER TABLE so.two_thiouridine OWNER TO postgres;

--
-- Name: twokb_upstream_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW twokb_upstream_variant AS
    SELECT feature.feature_id AS twokb_upstream_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = '2KB_upstream_variant'::text);


ALTER TABLE so.twokb_upstream_variant OWNER TO postgres;

--
-- Name: tyrosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tyrosine AS
    SELECT feature.feature_id AS tyrosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tyrosine'::text);


ALTER TABLE so.tyrosine OWNER TO postgres;

--
-- Name: tyrosine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tyrosine_trna_primary_transcript AS
    SELECT feature.feature_id AS tyrosine_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text);


ALTER TABLE so.tyrosine_trna_primary_transcript OWNER TO postgres;

--
-- Name: tyrosyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW tyrosyl_trna AS
    SELECT feature.feature_id AS tyrosyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'tyrosyl_tRNA'::text);


ALTER TABLE so.tyrosyl_trna OWNER TO postgres;

--
-- Name: u11_snrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u11_snrna AS
    SELECT feature.feature_id AS u11_snrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U11_snRNA'::text);


ALTER TABLE so.u11_snrna OWNER TO postgres;

--
-- Name: u12_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u12_intron AS
    SELECT feature.feature_id AS u12_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U12_intron'::text);


ALTER TABLE so.u12_intron OWNER TO postgres;

--
-- Name: u12_snrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u12_snrna AS
    SELECT feature.feature_id AS u12_snrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U12_snRNA'::text);


ALTER TABLE so.u12_snrna OWNER TO postgres;

--
-- Name: u14_snorna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u14_snorna AS
    SELECT feature.feature_id AS u14_snorna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U14_snoRNA'::text);


ALTER TABLE so.u14_snorna OWNER TO postgres;

--
-- Name: u14_snorna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u14_snorna_primary_transcript AS
    SELECT feature.feature_id AS u14_snorna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text);


ALTER TABLE so.u14_snorna_primary_transcript OWNER TO postgres;

--
-- Name: u1_snrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u1_snrna AS
    SELECT feature.feature_id AS u1_snrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U1_snRNA'::text);


ALTER TABLE so.u1_snrna OWNER TO postgres;

--
-- Name: u2_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u2_intron AS
    SELECT feature.feature_id AS u2_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U2_intron'::text);


ALTER TABLE so.u2_intron OWNER TO postgres;

--
-- Name: u2_snrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u2_snrna AS
    SELECT feature.feature_id AS u2_snrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U2_snRNA'::text);


ALTER TABLE so.u2_snrna OWNER TO postgres;

--
-- Name: u3_five_prime_ltr_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u3_five_prime_ltr_region AS
    SELECT feature.feature_id AS u3_five_prime_ltr_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text);


ALTER TABLE so.u3_five_prime_ltr_region OWNER TO postgres;

--
-- Name: u3_ltr_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u3_ltr_region AS
    SELECT feature.feature_id AS u3_ltr_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'U3_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_LTR_region'::text));


ALTER TABLE so.u3_ltr_region OWNER TO postgres;

--
-- Name: u3_snorna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u3_snorna AS
    SELECT feature.feature_id AS u3_snorna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U3_snoRNA'::text);


ALTER TABLE so.u3_snorna OWNER TO postgres;

--
-- Name: u3_three_prime_ltr_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u3_three_prime_ltr_region AS
    SELECT feature.feature_id AS u3_three_prime_ltr_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text);


ALTER TABLE so.u3_three_prime_ltr_region OWNER TO postgres;

--
-- Name: u4_snrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u4_snrna AS
    SELECT feature.feature_id AS u4_snrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U4_snRNA'::text);


ALTER TABLE so.u4_snrna OWNER TO postgres;

--
-- Name: u4atac_snrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u4atac_snrna AS
    SELECT feature.feature_id AS u4atac_snrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U4atac_snRNA'::text);


ALTER TABLE so.u4atac_snrna OWNER TO postgres;

--
-- Name: u5_five_prime_ltr_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u5_five_prime_ltr_region AS
    SELECT feature.feature_id AS u5_five_prime_ltr_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text);


ALTER TABLE so.u5_five_prime_ltr_region OWNER TO postgres;

--
-- Name: u5_ltr_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u5_ltr_region AS
    SELECT feature.feature_id AS u5_ltr_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'U5_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_LTR_region'::text));


ALTER TABLE so.u5_ltr_region OWNER TO postgres;

--
-- Name: u5_snrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u5_snrna AS
    SELECT feature.feature_id AS u5_snrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U5_snRNA'::text);


ALTER TABLE so.u5_snrna OWNER TO postgres;

--
-- Name: u5_three_prime_ltr_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u5_three_prime_ltr_region AS
    SELECT feature.feature_id AS u5_three_prime_ltr_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text);


ALTER TABLE so.u5_three_prime_ltr_region OWNER TO postgres;

--
-- Name: u6_snrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u6_snrna AS
    SELECT feature.feature_id AS u6_snrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U6_snRNA'::text);


ALTER TABLE so.u6_snrna OWNER TO postgres;

--
-- Name: u6atac_snrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u6atac_snrna AS
    SELECT feature.feature_id AS u6atac_snrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U6atac_snRNA'::text);


ALTER TABLE so.u6atac_snrna OWNER TO postgres;

--
-- Name: u_box; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW u_box AS
    SELECT feature.feature_id AS u_box_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'U_box'::text);


ALTER TABLE so.u_box OWNER TO postgres;

--
-- Name: uaa_stop_codon_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW uaa_stop_codon_signal AS
    SELECT feature.feature_id AS uaa_stop_codon_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'UAA_stop_codon_signal'::text);


ALTER TABLE so.uaa_stop_codon_signal OWNER TO postgres;

--
-- Name: uag_stop_codon_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW uag_stop_codon_signal AS
    SELECT feature.feature_id AS uag_stop_codon_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'UAG_stop_codon_signal'::text);


ALTER TABLE so.uag_stop_codon_signal OWNER TO postgres;

--
-- Name: uga_stop_codon_signal; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW uga_stop_codon_signal AS
    SELECT feature.feature_id AS uga_stop_codon_signal_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'UGA_stop_codon_signal'::text);


ALTER TABLE so.uga_stop_codon_signal OWNER TO postgres;

--
-- Name: ultracontig; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ultracontig AS
    SELECT feature.feature_id AS ultracontig_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'ultracontig'::text);


ALTER TABLE so.ultracontig OWNER TO postgres;

--
-- Name: uncharacterised_chromosomal_mutation; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW uncharacterised_chromosomal_mutation AS
    SELECT feature.feature_id AS uncharacterised_chromosomal_mutation_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text));


ALTER TABLE so.uncharacterised_chromosomal_mutation OWNER TO postgres;

--
-- Name: undermodified_hydroxywybutosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW undermodified_hydroxywybutosine AS
    SELECT feature.feature_id AS undermodified_hydroxywybutosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text);


ALTER TABLE so.undermodified_hydroxywybutosine OWNER TO postgres;

--
-- Name: unedited_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW unedited_region AS
    SELECT feature.feature_id AS unedited_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'unedited_region'::text);


ALTER TABLE so.unedited_region OWNER TO postgres;

--
-- Name: unigene_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW unigene_cluster AS
    SELECT feature.feature_id AS unigene_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'unigene_cluster'::text);


ALTER TABLE so.unigene_cluster OWNER TO postgres;

--
-- Name: uninvert_insert_dup; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW uninvert_insert_dup AS
    SELECT feature.feature_id AS uninvert_insert_dup_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'uninverted_insertional_duplication'::text);


ALTER TABLE so.uninvert_insert_dup OWNER TO postgres;

--
-- Name: uninvert_inter_transposition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW uninvert_inter_transposition AS
    SELECT feature.feature_id AS uninvert_inter_transposition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text);


ALTER TABLE so.uninvert_inter_transposition OWNER TO postgres;

--
-- Name: uninvert_intra_transposition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW uninvert_intra_transposition AS
    SELECT feature.feature_id AS uninvert_intra_transposition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text);


ALTER TABLE so.uninvert_intra_transposition OWNER TO postgres;

--
-- Name: unique_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW unique_variant AS
    SELECT feature.feature_id AS unique_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'unique_variant'::text);


ALTER TABLE so.unique_variant OWNER TO postgres;

--
-- Name: unitary_pseudogene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW unitary_pseudogene AS
    SELECT feature.feature_id AS unitary_pseudogene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'unitary_pseudogene'::text);


ALTER TABLE so.unitary_pseudogene OWNER TO postgres;

--
-- Name: unorient_insert_dup; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW unorient_insert_dup AS
    SELECT feature.feature_id AS unorient_insert_dup_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'unoriented_insertional_duplication'::text);


ALTER TABLE so.unorient_insert_dup OWNER TO postgres;

--
-- Name: unoriented_interchromosomal_transposition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW unoriented_interchromosomal_transposition AS
    SELECT feature.feature_id AS unoriented_interchromosomal_transposition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text);


ALTER TABLE so.unoriented_interchromosomal_transposition OWNER TO postgres;

--
-- Name: unoriented_intrachromosomal_transposition; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW unoriented_intrachromosomal_transposition AS
    SELECT feature.feature_id AS unoriented_intrachromosomal_transposition_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text);


ALTER TABLE so.unoriented_intrachromosomal_transposition OWNER TO postgres;

--
-- Name: untranslated_region_polycistronic_mrna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW untranslated_region_polycistronic_mrna AS
    SELECT feature.feature_id AS untranslated_region_polycistronic_mrna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text);


ALTER TABLE so.untranslated_region_polycistronic_mrna OWNER TO postgres;

--
-- Name: upd; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW upd AS
    SELECT feature.feature_id AS upd_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'maternal_uniparental_disomy'::text) OR ((cvterm.name)::text = 'paternal_uniparental_disomy'::text)) OR ((cvterm.name)::text = 'UPD'::text));


ALTER TABLE so.upd OWNER TO postgres;

--
-- Name: upstream_aug_codon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW upstream_aug_codon AS
    SELECT feature.feature_id AS upstream_aug_codon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'upstream_AUG_codon'::text);


ALTER TABLE so.upstream_aug_codon OWNER TO postgres;

--
-- Name: upstream_gene_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW upstream_gene_variant AS
    SELECT feature.feature_id AS upstream_gene_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = '5KB_upstream_variant'::text) OR ((cvterm.name)::text = '2KB_upstream_variant'::text)) OR ((cvterm.name)::text = 'upstream_gene_variant'::text));


ALTER TABLE so.upstream_gene_variant OWNER TO postgres;

--
-- Name: uridine_five_oxyacetic_acid; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW uridine_five_oxyacetic_acid AS
    SELECT feature.feature_id AS uridine_five_oxyacetic_acid_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text);


ALTER TABLE so.uridine_five_oxyacetic_acid OWNER TO postgres;

--
-- Name: uridine_five_oxyacetic_acid_methyl_ester; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW uridine_five_oxyacetic_acid_methyl_ester AS
    SELECT feature.feature_id AS uridine_five_oxyacetic_acid_methyl_ester_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text);


ALTER TABLE so.uridine_five_oxyacetic_acid_methyl_ester OWNER TO postgres;

--
-- Name: ust; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ust AS
    SELECT feature.feature_id AS ust_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'three_prime_UST'::text) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'UST'::text));


ALTER TABLE so.ust OWNER TO postgres;

--
-- Name: ust_match; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW ust_match AS
    SELECT feature.feature_id AS ust_match_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'UST_match'::text);


ALTER TABLE so.ust_match OWNER TO postgres;

--
-- Name: utr; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW utr AS
    SELECT feature.feature_id AS utr_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'five_prime_UTR'::text) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'UTR'::text));


ALTER TABLE so.utr OWNER TO postgres;

--
-- Name: utr_intron; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW utr_intron AS
    SELECT feature.feature_id AS utr_intron_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = 'five_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text));


ALTER TABLE so.utr_intron OWNER TO postgres;

--
-- Name: utr_region; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW utr_region AS
    SELECT feature.feature_id AS utr_region_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'upstream_AUG_codon'::text) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'UTR_region'::text));


ALTER TABLE so.utr_region OWNER TO postgres;

--
-- Name: utr_variant; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW utr_variant AS
    SELECT feature.feature_id AS utr_variant_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((cvterm.name)::text = '5_prime_UTR_variant'::text) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text)) OR ((cvterm.name)::text = 'UTR_variant'::text));


ALTER TABLE so.utr_variant OWNER TO postgres;

--
-- Name: v_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_cluster AS
    SELECT feature.feature_id AS v_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_cluster'::text);


ALTER TABLE so.v_cluster OWNER TO postgres;

--
-- Name: v_d_dj_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_d_dj_c_cluster AS
    SELECT feature.feature_id AS v_d_dj_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text);


ALTER TABLE so.v_d_dj_c_cluster OWNER TO postgres;

--
-- Name: v_d_dj_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_d_dj_cluster AS
    SELECT feature.feature_id AS v_d_dj_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_D_DJ_cluster'::text);


ALTER TABLE so.v_d_dj_cluster OWNER TO postgres;

--
-- Name: v_d_dj_j_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_d_dj_j_c_cluster AS
    SELECT feature.feature_id AS v_d_dj_j_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text);


ALTER TABLE so.v_d_dj_j_c_cluster OWNER TO postgres;

--
-- Name: v_d_dj_j_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_d_dj_j_cluster AS
    SELECT feature.feature_id AS v_d_dj_j_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text);


ALTER TABLE so.v_d_dj_j_cluster OWNER TO postgres;

--
-- Name: v_d_j_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_d_j_c_cluster AS
    SELECT feature.feature_id AS v_d_j_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_D_J_C_cluster'::text);


ALTER TABLE so.v_d_j_c_cluster OWNER TO postgres;

--
-- Name: v_d_j_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_d_j_cluster AS
    SELECT feature.feature_id AS v_d_j_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_D_J_cluster'::text);


ALTER TABLE so.v_d_j_cluster OWNER TO postgres;

--
-- Name: v_dj_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_dj_c_cluster AS
    SELECT feature.feature_id AS v_dj_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_DJ_C_cluster'::text);


ALTER TABLE so.v_dj_c_cluster OWNER TO postgres;

--
-- Name: v_dj_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_dj_cluster AS
    SELECT feature.feature_id AS v_dj_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_DJ_cluster'::text);


ALTER TABLE so.v_dj_cluster OWNER TO postgres;

--
-- Name: v_dj_j_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_dj_j_c_cluster AS
    SELECT feature.feature_id AS v_dj_j_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text);


ALTER TABLE so.v_dj_j_c_cluster OWNER TO postgres;

--
-- Name: v_dj_j_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_dj_j_cluster AS
    SELECT feature.feature_id AS v_dj_j_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_DJ_J_cluster'::text);


ALTER TABLE so.v_dj_j_cluster OWNER TO postgres;

--
-- Name: v_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_gene AS
    SELECT feature.feature_id AS v_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_gene'::text);


ALTER TABLE so.v_gene OWNER TO postgres;

--
-- Name: v_gene_recombination_feature; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_gene_recombination_feature AS
    SELECT feature.feature_id AS v_gene_recombination_feature_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_gene_recombination_feature'::text);


ALTER TABLE so.v_gene_recombination_feature OWNER TO postgres;

--
-- Name: v_heptamer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_heptamer AS
    SELECT feature.feature_id AS v_heptamer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_heptamer'::text);


ALTER TABLE so.v_heptamer OWNER TO postgres;

--
-- Name: v_j_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_j_c_cluster AS
    SELECT feature.feature_id AS v_j_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_J_C_cluster'::text);


ALTER TABLE so.v_j_c_cluster OWNER TO postgres;

--
-- Name: v_j_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_j_cluster AS
    SELECT feature.feature_id AS v_j_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_J_cluster'::text);


ALTER TABLE so.v_j_cluster OWNER TO postgres;

--
-- Name: v_nonamer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_nonamer AS
    SELECT feature.feature_id AS v_nonamer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_nonamer'::text);


ALTER TABLE so.v_nonamer OWNER TO postgres;

--
-- Name: v_spacer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_spacer AS
    SELECT feature.feature_id AS v_spacer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_spacer'::text);


ALTER TABLE so.v_spacer OWNER TO postgres;

--
-- Name: v_vdj_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_vdj_c_cluster AS
    SELECT feature.feature_id AS v_vdj_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_VDJ_C_cluster'::text);


ALTER TABLE so.v_vdj_c_cluster OWNER TO postgres;

--
-- Name: v_vdj_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_vdj_cluster AS
    SELECT feature.feature_id AS v_vdj_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_VDJ_cluster'::text);


ALTER TABLE so.v_vdj_cluster OWNER TO postgres;

--
-- Name: v_vdj_j_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_vdj_j_c_cluster AS
    SELECT feature.feature_id AS v_vdj_j_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text);


ALTER TABLE so.v_vdj_j_c_cluster OWNER TO postgres;

--
-- Name: v_vdj_j_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_vdj_j_cluster AS
    SELECT feature.feature_id AS v_vdj_j_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_VDJ_J_cluster'::text);


ALTER TABLE so.v_vdj_j_cluster OWNER TO postgres;

--
-- Name: v_vj_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_vj_c_cluster AS
    SELECT feature.feature_id AS v_vj_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_VJ_C_cluster'::text);


ALTER TABLE so.v_vj_c_cluster OWNER TO postgres;

--
-- Name: v_vj_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_vj_cluster AS
    SELECT feature.feature_id AS v_vj_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_VJ_cluster'::text);


ALTER TABLE so.v_vj_cluster OWNER TO postgres;

--
-- Name: v_vj_j_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_vj_j_c_cluster AS
    SELECT feature.feature_id AS v_vj_j_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text);


ALTER TABLE so.v_vj_j_c_cluster OWNER TO postgres;

--
-- Name: v_vj_j_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW v_vj_j_cluster AS
    SELECT feature.feature_id AS v_vj_j_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'V_VJ_J_cluster'::text);


ALTER TABLE so.v_vj_j_cluster OWNER TO postgres;

--
-- Name: validated; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW validated AS
    SELECT feature.feature_id AS validated_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'experimentally_determined'::text) OR ((cvterm.name)::text = 'validated'::text));


ALTER TABLE so.validated OWNER TO postgres;

--
-- Name: validated_cdna_clone; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW validated_cdna_clone AS
    SELECT feature.feature_id AS validated_cdna_clone_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'validated_cDNA_clone'::text);


ALTER TABLE so.validated_cdna_clone OWNER TO postgres;

--
-- Name: valine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW valine AS
    SELECT feature.feature_id AS valine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'valine'::text);


ALTER TABLE so.valine OWNER TO postgres;

--
-- Name: valine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW valine_trna_primary_transcript AS
    SELECT feature.feature_id AS valine_trna_primary_transcript_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text);


ALTER TABLE so.valine_trna_primary_transcript OWNER TO postgres;

--
-- Name: valyl_trna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW valyl_trna AS
    SELECT feature.feature_id AS valyl_trna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'valyl_tRNA'::text);


ALTER TABLE so.valyl_trna OWNER TO postgres;

--
-- Name: variant_collection; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW variant_collection AS
    SELECT feature.feature_id AS variant_collection_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'chromosome_variation'::text) OR ((cvterm.name)::text = 'allele'::text)) OR ((cvterm.name)::text = 'haplotype'::text)) OR ((cvterm.name)::text = 'genotype'::text)) OR ((cvterm.name)::text = 'diplotype'::text)) OR ((cvterm.name)::text = 'assortment_derived_variation'::text)) OR ((cvterm.name)::text = 'chromosome_number_variation'::text)) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text)) OR ((cvterm.name)::text = 'assortment_derived_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text)) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text)) OR ((cvterm.name)::text = 'aneuploid'::text)) OR ((cvterm.name)::text = 'polyploid'::text)) OR ((cvterm.name)::text = 'hyperploid'::text)) OR ((cvterm.name)::text = 'hypoploid'::text)) OR ((cvterm.name)::text = 'autopolyploid'::text)) OR ((cvterm.name)::text = 'allopolyploid'::text)) OR ((cvterm.name)::text = 'free_chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosomal_transposition'::text)) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text)) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosomal_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome'::text)) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'chromosomal_deletion'::text)) OR ((cvterm.name)::text = 'chromosomal_inversion'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome_fission'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'translocation_element'::text)) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'free_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text)) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text)) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text)) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'polymorphic_sequence_variant'::text)) OR ((cvterm.name)::text = 'variant_collection'::text));


ALTER TABLE so.variant_collection OWNER TO postgres;

--
-- Name: variant_frequency; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW variant_frequency AS
    SELECT feature.feature_id AS variant_frequency_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'unique_variant'::text) OR ((cvterm.name)::text = 'rare_variant'::text)) OR ((cvterm.name)::text = 'polymorphic_variant'::text)) OR ((cvterm.name)::text = 'common_variant'::text)) OR ((cvterm.name)::text = 'fixed_variant'::text)) OR ((cvterm.name)::text = 'variant_frequency'::text));


ALTER TABLE so.variant_frequency OWNER TO postgres;

--
-- Name: variant_genome; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW variant_genome AS
    SELECT feature.feature_id AS variant_genome_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((cvterm.name)::text = 'chromosomally_aberrant_genome'::text) OR ((cvterm.name)::text = 'variant_genome'::text));


ALTER TABLE so.variant_genome OWNER TO postgres;

--
-- Name: variant_origin; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW variant_origin AS
    SELECT feature.feature_id AS variant_origin_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'maternal_variant'::text) OR ((cvterm.name)::text = 'paternal_variant'::text)) OR ((cvterm.name)::text = 'somatic_variant'::text)) OR ((cvterm.name)::text = 'germline_variant'::text)) OR ((cvterm.name)::text = 'pedigree_specific_variant'::text)) OR ((cvterm.name)::text = 'population_specific_variant'::text)) OR ((cvterm.name)::text = 'de_novo_variant'::text)) OR ((cvterm.name)::text = 'variant_origin'::text));


ALTER TABLE so.variant_origin OWNER TO postgres;

--
-- Name: variant_phenotype; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW variant_phenotype AS
    SELECT feature.feature_id AS variant_phenotype_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((cvterm.name)::text = 'benign_variant'::text) OR ((cvterm.name)::text = 'disease_associated_variant'::text)) OR ((cvterm.name)::text = 'disease_causing_variant'::text)) OR ((cvterm.name)::text = 'lethal_variant'::text)) OR ((cvterm.name)::text = 'quantitative_variant'::text)) OR ((cvterm.name)::text = 'variant_phenotype'::text));


ALTER TABLE so.variant_phenotype OWNER TO postgres;

--
-- Name: variant_quality; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW variant_quality AS
    SELECT feature.feature_id AS variant_quality_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((((((((((((((((cvterm.name)::text = 'variant_origin'::text) OR ((cvterm.name)::text = 'variant_frequency'::text)) OR ((cvterm.name)::text = 'variant_phenotype'::text)) OR ((cvterm.name)::text = 'maternal_variant'::text)) OR ((cvterm.name)::text = 'paternal_variant'::text)) OR ((cvterm.name)::text = 'somatic_variant'::text)) OR ((cvterm.name)::text = 'germline_variant'::text)) OR ((cvterm.name)::text = 'pedigree_specific_variant'::text)) OR ((cvterm.name)::text = 'population_specific_variant'::text)) OR ((cvterm.name)::text = 'de_novo_variant'::text)) OR ((cvterm.name)::text = 'unique_variant'::text)) OR ((cvterm.name)::text = 'rare_variant'::text)) OR ((cvterm.name)::text = 'polymorphic_variant'::text)) OR ((cvterm.name)::text = 'common_variant'::text)) OR ((cvterm.name)::text = 'fixed_variant'::text)) OR ((cvterm.name)::text = 'benign_variant'::text)) OR ((cvterm.name)::text = 'disease_associated_variant'::text)) OR ((cvterm.name)::text = 'disease_causing_variant'::text)) OR ((cvterm.name)::text = 'lethal_variant'::text)) OR ((cvterm.name)::text = 'quantitative_variant'::text)) OR ((cvterm.name)::text = 'variant_quality'::text));


ALTER TABLE so.variant_quality OWNER TO postgres;

--
-- Name: vault_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vault_rna AS
    SELECT feature.feature_id AS vault_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'vault_RNA'::text);


ALTER TABLE so.vault_rna OWNER TO postgres;

--
-- Name: vd_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vd_gene AS
    SELECT feature.feature_id AS vd_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'VD_gene'::text);


ALTER TABLE so.vd_gene OWNER TO postgres;

--
-- Name: vdj_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vdj_c_cluster AS
    SELECT feature.feature_id AS vdj_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'VDJ_C_cluster'::text);


ALTER TABLE so.vdj_c_cluster OWNER TO postgres;

--
-- Name: vdj_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vdj_gene AS
    SELECT feature.feature_id AS vdj_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'VDJ_gene'::text);


ALTER TABLE so.vdj_gene OWNER TO postgres;

--
-- Name: vdj_j_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vdj_j_c_cluster AS
    SELECT feature.feature_id AS vdj_j_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'VDJ_J_C_cluster'::text);


ALTER TABLE so.vdj_j_c_cluster OWNER TO postgres;

--
-- Name: vdj_j_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vdj_j_cluster AS
    SELECT feature.feature_id AS vdj_j_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'VDJ_J_cluster'::text);


ALTER TABLE so.vdj_j_cluster OWNER TO postgres;

--
-- Name: vector_replicon; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vector_replicon AS
    SELECT feature.feature_id AS vector_replicon_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((cvterm.name)::text = 'YAC'::text) OR ((cvterm.name)::text = 'BAC'::text)) OR ((cvterm.name)::text = 'PAC'::text)) OR ((cvterm.name)::text = 'cosmid'::text)) OR ((cvterm.name)::text = 'phagemid'::text)) OR ((cvterm.name)::text = 'fosmid'::text)) OR ((cvterm.name)::text = 'lambda_vector'::text)) OR ((cvterm.name)::text = 'plasmid_vector'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'vector_replicon'::text));


ALTER TABLE so.vector_replicon OWNER TO postgres;

--
-- Name: vertebrate_ig_t_cell_receptor_rearranged_gene_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vertebrate_ig_t_cell_receptor_rearranged_gene_cluster AS
    SELECT feature.feature_id AS vertebrate_ig_t_cell_receptor_rearranged_gene_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((cvterm.name)::text = 'DJ_J_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text));


ALTER TABLE so.vertebrate_ig_t_cell_receptor_rearranged_gene_cluster OWNER TO postgres;

--
-- Name: vertebrate_immune_system_gene_recombination_feature; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vertebrate_immune_system_gene_recombination_feature AS
    SELECT feature.feature_id AS vertebrate_immune_system_gene_recombination_feature_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text));


ALTER TABLE so.vertebrate_immune_system_gene_recombination_feature OWNER TO postgres;

--
-- Name: vertebrate_immune_system_gene_recombination_signal_feature; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vertebrate_immune_system_gene_recombination_signal_feature AS
    SELECT feature.feature_id AS vertebrate_immune_system_gene_recombination_signal_feature_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((((((((cvterm.name)::text = 'J_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text));


ALTER TABLE so.vertebrate_immune_system_gene_recombination_signal_feature OWNER TO postgres;

--
-- Name: vertebrate_immune_system_gene_recombination_spacer; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vertebrate_immune_system_gene_recombination_spacer AS
    SELECT feature.feature_id AS vertebrate_immune_system_gene_recombination_spacer_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'three_prime_D_spacer'::text) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text));


ALTER TABLE so.vertebrate_immune_system_gene_recombination_spacer OWNER TO postgres;

--
-- Name: vertebrate_immunoglobulin_t_cell_receptor_gene_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vertebrate_immunoglobulin_t_cell_receptor_gene_cluster AS
    SELECT feature.feature_id AS vertebrate_immunoglobulin_t_cell_receptor_gene_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((((cvterm.name)::text = 'D_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text));


ALTER TABLE so.vertebrate_immunoglobulin_t_cell_receptor_gene_cluster OWNER TO postgres;

--
-- Name: vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment AS
    SELECT feature.feature_id AS vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'VD_gene'::text) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text));


ALTER TABLE so.vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment OWNER TO postgres;

--
-- Name: vertebrate_immunoglobulin_t_cell_receptor_segment; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vertebrate_immunoglobulin_t_cell_receptor_segment AS
    SELECT feature.feature_id AS vertebrate_immunoglobulin_t_cell_receptor_segment_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((cvterm.name)::text = 'D_gene'::text) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text));


ALTER TABLE so.vertebrate_immunoglobulin_t_cell_receptor_segment OWNER TO postgres;

--
-- Name: viral_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW viral_sequence AS
    SELECT feature.feature_id AS viral_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE (((((((((cvterm.name)::text = 'phage_sequence'::text) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text));


ALTER TABLE so.viral_sequence OWNER TO postgres;

--
-- Name: virtual_sequence; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW virtual_sequence AS
    SELECT feature.feature_id AS virtual_sequence_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'virtual_sequence'::text);


ALTER TABLE so.virtual_sequence OWNER TO postgres;

--
-- Name: vj_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vj_c_cluster AS
    SELECT feature.feature_id AS vj_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'VJ_C_cluster'::text);


ALTER TABLE so.vj_c_cluster OWNER TO postgres;

--
-- Name: vj_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vj_gene AS
    SELECT feature.feature_id AS vj_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'VJ_gene'::text);


ALTER TABLE so.vj_gene OWNER TO postgres;

--
-- Name: vj_j_c_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vj_j_c_cluster AS
    SELECT feature.feature_id AS vj_j_c_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'VJ_J_C_cluster'::text);


ALTER TABLE so.vj_j_c_cluster OWNER TO postgres;

--
-- Name: vj_j_cluster; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW vj_j_cluster AS
    SELECT feature.feature_id AS vj_j_cluster_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'VJ_J_cluster'::text);


ALTER TABLE so.vj_j_cluster OWNER TO postgres;

--
-- Name: wc_base_pair; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW wc_base_pair AS
    SELECT feature.feature_id AS wc_base_pair_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'WC_base_pair'::text);


ALTER TABLE so.wc_base_pair OWNER TO postgres;

--
-- Name: whole_genome_sequence_status; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW whole_genome_sequence_status AS
    SELECT feature.feature_id AS whole_genome_sequence_status_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((((((((cvterm.name)::text = 'standard_draft'::text) OR ((cvterm.name)::text = 'high_quality_draft'::text)) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text)) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text)) OR ((cvterm.name)::text = 'noncontiguous_finished'::text)) OR ((cvterm.name)::text = 'finished_genome'::text)) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text));


ALTER TABLE so.whole_genome_sequence_status OWNER TO postgres;

--
-- Name: wild_type; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW wild_type AS
    SELECT feature.feature_id AS wild_type_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'wild_type'::text);


ALTER TABLE so.wild_type OWNER TO postgres;

--
-- Name: wild_type_rescue_gene; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW wild_type_rescue_gene AS
    SELECT feature.feature_id AS wild_type_rescue_gene_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'wild_type_rescue_gene'::text);


ALTER TABLE so.wild_type_rescue_gene OWNER TO postgres;

--
-- Name: wobble_base_pair; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW wobble_base_pair AS
    SELECT feature.feature_id AS wobble_base_pair_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'wobble_base_pair'::text);


ALTER TABLE so.wobble_base_pair OWNER TO postgres;

--
-- Name: wybutosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW wybutosine AS
    SELECT feature.feature_id AS wybutosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'wybutosine'::text);


ALTER TABLE so.wybutosine OWNER TO postgres;

--
-- Name: wyosine; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW wyosine AS
    SELECT feature.feature_id AS wyosine_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'wyosine'::text);


ALTER TABLE so.wyosine OWNER TO postgres;

--
-- Name: x_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW x_element AS
    SELECT feature.feature_id AS x_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'X_element'::text);


ALTER TABLE so.x_element OWNER TO postgres;

--
-- Name: x_element_combinatorial_repeat; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW x_element_combinatorial_repeat AS
    SELECT feature.feature_id AS x_element_combinatorial_repeat_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text);


ALTER TABLE so.x_element_combinatorial_repeat OWNER TO postgres;

--
-- Name: y_prime_element; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW y_prime_element AS
    SELECT feature.feature_id AS y_prime_element_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'Y_prime_element'::text);


ALTER TABLE so.y_prime_element OWNER TO postgres;

--
-- Name: y_rna; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW y_rna AS
    SELECT feature.feature_id AS y_rna_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'Y_RNA'::text);


ALTER TABLE so.y_rna OWNER TO postgres;

--
-- Name: yac; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW yac AS
    SELECT feature.feature_id AS yac_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'YAC'::text);


ALTER TABLE so.yac OWNER TO postgres;

--
-- Name: yac_end; Type: VIEW; Schema: so; Owner: postgres
--

CREATE VIEW yac_end AS
    SELECT feature.feature_id AS yac_end_id, feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM (public.feature JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id))) WHERE ((cvterm.name)::text = 'YAC_end'::text);


ALTER TABLE so.yac_end OWNER TO postgres;

SET search_path = frange, pg_catalog;

--
-- Name: featuregroup_id; Type: DEFAULT; Schema: frange; Owner: postgres
--

ALTER TABLE ONLY featuregroup ALTER COLUMN featuregroup_id SET DEFAULT nextval('featuregroup_featuregroup_id_seq'::regclass);


SET search_path = public, pg_catalog;

--
-- Name: acquisition_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY acquisition ALTER COLUMN acquisition_id SET DEFAULT nextval('acquisition_acquisition_id_seq'::regclass);


--
-- Name: acquisition_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY acquisition_relationship ALTER COLUMN acquisition_relationship_id SET DEFAULT nextval('acquisition_relationship_acquisition_relationship_id_seq'::regclass);


--
-- Name: acquisitionprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY acquisitionprop ALTER COLUMN acquisitionprop_id SET DEFAULT nextval('acquisitionprop_acquisitionprop_id_seq'::regclass);


--
-- Name: analysis_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysis ALTER COLUMN analysis_id SET DEFAULT nextval('analysis_analysis_id_seq'::regclass);


--
-- Name: analysisfeature_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisfeature ALTER COLUMN analysisfeature_id SET DEFAULT nextval('analysisfeature_analysisfeature_id_seq'::regclass);


--
-- Name: analysisfeatureprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisfeatureprop ALTER COLUMN analysisfeatureprop_id SET DEFAULT nextval('analysisfeatureprop_analysisfeatureprop_id_seq'::regclass);


--
-- Name: analysisprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisprop ALTER COLUMN analysisprop_id SET DEFAULT nextval('analysisprop_analysisprop_id_seq'::regclass);


--
-- Name: arraydesign_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY arraydesign ALTER COLUMN arraydesign_id SET DEFAULT nextval('arraydesign_arraydesign_id_seq'::regclass);


--
-- Name: arraydesignprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY arraydesignprop ALTER COLUMN arraydesignprop_id SET DEFAULT nextval('arraydesignprop_arraydesignprop_id_seq'::regclass);


--
-- Name: assay_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY assay ALTER COLUMN assay_id SET DEFAULT nextval('assay_assay_id_seq'::regclass);


--
-- Name: assay_biomaterial_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY assay_biomaterial ALTER COLUMN assay_biomaterial_id SET DEFAULT nextval('assay_biomaterial_assay_biomaterial_id_seq'::regclass);


--
-- Name: assay_project_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY assay_project ALTER COLUMN assay_project_id SET DEFAULT nextval('assay_project_assay_project_id_seq'::regclass);


--
-- Name: assayprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY assayprop ALTER COLUMN assayprop_id SET DEFAULT nextval('assayprop_assayprop_id_seq'::regclass);


--
-- Name: biomaterial_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterial ALTER COLUMN biomaterial_id SET DEFAULT nextval('biomaterial_biomaterial_id_seq'::regclass);


--
-- Name: biomaterial_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterial_dbxref ALTER COLUMN biomaterial_dbxref_id SET DEFAULT nextval('biomaterial_dbxref_biomaterial_dbxref_id_seq'::regclass);


--
-- Name: biomaterial_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterial_relationship ALTER COLUMN biomaterial_relationship_id SET DEFAULT nextval('biomaterial_relationship_biomaterial_relationship_id_seq'::regclass);


--
-- Name: biomaterial_treatment_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterial_treatment ALTER COLUMN biomaterial_treatment_id SET DEFAULT nextval('biomaterial_treatment_biomaterial_treatment_id_seq'::regclass);


--
-- Name: biomaterialprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterialprop ALTER COLUMN biomaterialprop_id SET DEFAULT nextval('biomaterialprop_biomaterialprop_id_seq'::regclass);


--
-- Name: cell_line_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line ALTER COLUMN cell_line_id SET DEFAULT nextval('cell_line_cell_line_id_seq'::regclass);


--
-- Name: cell_line_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_cvterm ALTER COLUMN cell_line_cvterm_id SET DEFAULT nextval('cell_line_cvterm_cell_line_cvterm_id_seq'::regclass);


--
-- Name: cell_line_cvtermprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_cvtermprop ALTER COLUMN cell_line_cvtermprop_id SET DEFAULT nextval('cell_line_cvtermprop_cell_line_cvtermprop_id_seq'::regclass);


--
-- Name: cell_line_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_dbxref ALTER COLUMN cell_line_dbxref_id SET DEFAULT nextval('cell_line_dbxref_cell_line_dbxref_id_seq'::regclass);


--
-- Name: cell_line_feature_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_feature ALTER COLUMN cell_line_feature_id SET DEFAULT nextval('cell_line_feature_cell_line_feature_id_seq'::regclass);


--
-- Name: cell_line_library_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_library ALTER COLUMN cell_line_library_id SET DEFAULT nextval('cell_line_library_cell_line_library_id_seq'::regclass);


--
-- Name: cell_line_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_pub ALTER COLUMN cell_line_pub_id SET DEFAULT nextval('cell_line_pub_cell_line_pub_id_seq'::regclass);


--
-- Name: cell_line_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_relationship ALTER COLUMN cell_line_relationship_id SET DEFAULT nextval('cell_line_relationship_cell_line_relationship_id_seq'::regclass);


--
-- Name: cell_line_synonym_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_synonym ALTER COLUMN cell_line_synonym_id SET DEFAULT nextval('cell_line_synonym_cell_line_synonym_id_seq'::regclass);


--
-- Name: cell_lineprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_lineprop ALTER COLUMN cell_lineprop_id SET DEFAULT nextval('cell_lineprop_cell_lineprop_id_seq'::regclass);


--
-- Name: cell_lineprop_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_lineprop_pub ALTER COLUMN cell_lineprop_pub_id SET DEFAULT nextval('cell_lineprop_pub_cell_lineprop_pub_id_seq'::regclass);


--
-- Name: chadoprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY chadoprop ALTER COLUMN chadoprop_id SET DEFAULT nextval('chadoprop_chadoprop_id_seq'::regclass);


--
-- Name: channel_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY channel ALTER COLUMN channel_id SET DEFAULT nextval('channel_channel_id_seq'::regclass);


--
-- Name: contact_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact ALTER COLUMN contact_id SET DEFAULT nextval('contact_contact_id_seq'::regclass);


--
-- Name: contact_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact_relationship ALTER COLUMN contact_relationship_id SET DEFAULT nextval('contact_relationship_contact_relationship_id_seq'::regclass);


--
-- Name: control_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY control ALTER COLUMN control_id SET DEFAULT nextval('control_control_id_seq'::regclass);


--
-- Name: cv_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cv ALTER COLUMN cv_id SET DEFAULT nextval('cv_cv_id_seq'::regclass);


--
-- Name: cvprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvprop ALTER COLUMN cvprop_id SET DEFAULT nextval('cvprop_cvprop_id_seq'::regclass);


--
-- Name: cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm ALTER COLUMN cvterm_id SET DEFAULT nextval('cvterm_cvterm_id_seq'::regclass);


--
-- Name: cvterm_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_dbxref ALTER COLUMN cvterm_dbxref_id SET DEFAULT nextval('cvterm_dbxref_cvterm_dbxref_id_seq'::regclass);


--
-- Name: cvterm_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_relationship ALTER COLUMN cvterm_relationship_id SET DEFAULT nextval('cvterm_relationship_cvterm_relationship_id_seq'::regclass);


--
-- Name: cvtermpath_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermpath ALTER COLUMN cvtermpath_id SET DEFAULT nextval('cvtermpath_cvtermpath_id_seq'::regclass);


--
-- Name: cvtermprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermprop ALTER COLUMN cvtermprop_id SET DEFAULT nextval('cvtermprop_cvtermprop_id_seq'::regclass);


--
-- Name: cvtermsynonym_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermsynonym ALTER COLUMN cvtermsynonym_id SET DEFAULT nextval('cvtermsynonym_cvtermsynonym_id_seq'::regclass);


--
-- Name: db_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY db ALTER COLUMN db_id SET DEFAULT nextval('db_db_id_seq'::regclass);


--
-- Name: dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dbxref ALTER COLUMN dbxref_id SET DEFAULT nextval('dbxref_dbxref_id_seq'::regclass);


--
-- Name: dbxrefprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dbxrefprop ALTER COLUMN dbxrefprop_id SET DEFAULT nextval('dbxrefprop_dbxrefprop_id_seq'::regclass);


--
-- Name: eimage_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY eimage ALTER COLUMN eimage_id SET DEFAULT nextval('eimage_eimage_id_seq'::regclass);


--
-- Name: element_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY element ALTER COLUMN element_id SET DEFAULT nextval('element_element_id_seq'::regclass);


--
-- Name: element_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY element_relationship ALTER COLUMN element_relationship_id SET DEFAULT nextval('element_relationship_element_relationship_id_seq'::regclass);


--
-- Name: elementresult_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY elementresult ALTER COLUMN elementresult_id SET DEFAULT nextval('elementresult_elementresult_id_seq'::regclass);


--
-- Name: elementresult_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY elementresult_relationship ALTER COLUMN elementresult_relationship_id SET DEFAULT nextval('elementresult_relationship_elementresult_relationship_id_seq'::regclass);


--
-- Name: environment_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY environment ALTER COLUMN environment_id SET DEFAULT nextval('environment_environment_id_seq'::regclass);


--
-- Name: environment_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY environment_cvterm ALTER COLUMN environment_cvterm_id SET DEFAULT nextval('environment_cvterm_environment_cvterm_id_seq'::regclass);


--
-- Name: expression_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expression ALTER COLUMN expression_id SET DEFAULT nextval('expression_expression_id_seq'::regclass);


--
-- Name: expression_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expression_cvterm ALTER COLUMN expression_cvterm_id SET DEFAULT nextval('expression_cvterm_expression_cvterm_id_seq'::regclass);


--
-- Name: expression_cvtermprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expression_cvtermprop ALTER COLUMN expression_cvtermprop_id SET DEFAULT nextval('expression_cvtermprop_expression_cvtermprop_id_seq'::regclass);


--
-- Name: expression_image_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expression_image ALTER COLUMN expression_image_id SET DEFAULT nextval('expression_image_expression_image_id_seq'::regclass);


--
-- Name: expression_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expression_pub ALTER COLUMN expression_pub_id SET DEFAULT nextval('expression_pub_expression_pub_id_seq'::regclass);


--
-- Name: expressionprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expressionprop ALTER COLUMN expressionprop_id SET DEFAULT nextval('expressionprop_expressionprop_id_seq'::regclass);


--
-- Name: feature_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature ALTER COLUMN feature_id SET DEFAULT nextval('feature_feature_id_seq'::regclass);


--
-- Name: feature_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm ALTER COLUMN feature_cvterm_id SET DEFAULT nextval('feature_cvterm_feature_cvterm_id_seq'::regclass);


--
-- Name: feature_cvterm_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_dbxref ALTER COLUMN feature_cvterm_dbxref_id SET DEFAULT nextval('feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq'::regclass);


--
-- Name: feature_cvterm_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_pub ALTER COLUMN feature_cvterm_pub_id SET DEFAULT nextval('feature_cvterm_pub_feature_cvterm_pub_id_seq'::regclass);


--
-- Name: feature_cvtermprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvtermprop ALTER COLUMN feature_cvtermprop_id SET DEFAULT nextval('feature_cvtermprop_feature_cvtermprop_id_seq'::regclass);


--
-- Name: feature_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_dbxref ALTER COLUMN feature_dbxref_id SET DEFAULT nextval('feature_dbxref_feature_dbxref_id_seq'::regclass);


--
-- Name: feature_expression_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_expression ALTER COLUMN feature_expression_id SET DEFAULT nextval('feature_expression_feature_expression_id_seq'::regclass);


--
-- Name: feature_expressionprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_expressionprop ALTER COLUMN feature_expressionprop_id SET DEFAULT nextval('feature_expressionprop_feature_expressionprop_id_seq'::regclass);


--
-- Name: feature_genotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_genotype ALTER COLUMN feature_genotype_id SET DEFAULT nextval('feature_genotype_feature_genotype_id_seq'::regclass);


--
-- Name: feature_phenotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_phenotype ALTER COLUMN feature_phenotype_id SET DEFAULT nextval('feature_phenotype_feature_phenotype_id_seq'::regclass);


--
-- Name: feature_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_pub ALTER COLUMN feature_pub_id SET DEFAULT nextval('feature_pub_feature_pub_id_seq'::regclass);


--
-- Name: feature_pubprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_pubprop ALTER COLUMN feature_pubprop_id SET DEFAULT nextval('feature_pubprop_feature_pubprop_id_seq'::regclass);


--
-- Name: feature_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship ALTER COLUMN feature_relationship_id SET DEFAULT nextval('feature_relationship_feature_relationship_id_seq'::regclass);


--
-- Name: feature_relationship_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship_pub ALTER COLUMN feature_relationship_pub_id SET DEFAULT nextval('feature_relationship_pub_feature_relationship_pub_id_seq'::regclass);


--
-- Name: feature_relationshipprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop ALTER COLUMN feature_relationshipprop_id SET DEFAULT nextval('feature_relationshipprop_feature_relationshipprop_id_seq'::regclass);


--
-- Name: feature_relationshipprop_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop_pub ALTER COLUMN feature_relationshipprop_pub_id SET DEFAULT nextval('feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq'::regclass);


--
-- Name: feature_synonym_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_synonym ALTER COLUMN feature_synonym_id SET DEFAULT nextval('feature_synonym_feature_synonym_id_seq'::regclass);


--
-- Name: featureloc_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc ALTER COLUMN featureloc_id SET DEFAULT nextval('featureloc_featureloc_id_seq'::regclass);


--
-- Name: featureloc_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc_pub ALTER COLUMN featureloc_pub_id SET DEFAULT nextval('featureloc_pub_featureloc_pub_id_seq'::regclass);


--
-- Name: featuremap_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featuremap ALTER COLUMN featuremap_id SET DEFAULT nextval('featuremap_featuremap_id_seq'::regclass);


--
-- Name: featuremap_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featuremap_pub ALTER COLUMN featuremap_pub_id SET DEFAULT nextval('featuremap_pub_featuremap_pub_id_seq'::regclass);


--
-- Name: featurepos_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featurepos ALTER COLUMN featurepos_id SET DEFAULT nextval('featurepos_featurepos_id_seq'::regclass);


--
-- Name: featuremap_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featurepos ALTER COLUMN featuremap_id SET DEFAULT nextval('featurepos_featuremap_id_seq'::regclass);


--
-- Name: featureprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop ALTER COLUMN featureprop_id SET DEFAULT nextval('featureprop_featureprop_id_seq'::regclass);


--
-- Name: featureprop_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop_pub ALTER COLUMN featureprop_pub_id SET DEFAULT nextval('featureprop_pub_featureprop_pub_id_seq'::regclass);


--
-- Name: featurerange_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featurerange ALTER COLUMN featurerange_id SET DEFAULT nextval('featurerange_featurerange_id_seq'::regclass);


--
-- Name: genotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY genotype ALTER COLUMN genotype_id SET DEFAULT nextval('genotype_genotype_id_seq'::regclass);


--
-- Name: genotypeprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY genotypeprop ALTER COLUMN genotypeprop_id SET DEFAULT nextval('genotypeprop_genotypeprop_id_seq'::regclass);


--
-- Name: library_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library ALTER COLUMN library_id SET DEFAULT nextval('library_library_id_seq'::regclass);


--
-- Name: library_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_cvterm ALTER COLUMN library_cvterm_id SET DEFAULT nextval('library_cvterm_library_cvterm_id_seq'::regclass);


--
-- Name: library_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_dbxref ALTER COLUMN library_dbxref_id SET DEFAULT nextval('library_dbxref_library_dbxref_id_seq'::regclass);


--
-- Name: library_feature_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_feature ALTER COLUMN library_feature_id SET DEFAULT nextval('library_feature_library_feature_id_seq'::regclass);


--
-- Name: library_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_pub ALTER COLUMN library_pub_id SET DEFAULT nextval('library_pub_library_pub_id_seq'::regclass);


--
-- Name: library_synonym_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_synonym ALTER COLUMN library_synonym_id SET DEFAULT nextval('library_synonym_library_synonym_id_seq'::regclass);


--
-- Name: libraryprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY libraryprop ALTER COLUMN libraryprop_id SET DEFAULT nextval('libraryprop_libraryprop_id_seq'::regclass);


--
-- Name: libraryprop_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY libraryprop_pub ALTER COLUMN libraryprop_pub_id SET DEFAULT nextval('libraryprop_pub_libraryprop_pub_id_seq'::regclass);


--
-- Name: magedocumentation_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY magedocumentation ALTER COLUMN magedocumentation_id SET DEFAULT nextval('magedocumentation_magedocumentation_id_seq'::regclass);


--
-- Name: mageml_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY mageml ALTER COLUMN mageml_id SET DEFAULT nextval('mageml_mageml_id_seq'::regclass);


--
-- Name: materialized_view_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY materialized_view ALTER COLUMN materialized_view_id SET DEFAULT nextval('materialized_view_materialized_view_id_seq'::regclass);


--
-- Name: nd_experiment_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment ALTER COLUMN nd_experiment_id SET DEFAULT nextval('nd_experiment_nd_experiment_id_seq'::regclass);


--
-- Name: nd_experiment_contact_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_contact ALTER COLUMN nd_experiment_contact_id SET DEFAULT nextval('nd_experiment_contact_nd_experiment_contact_id_seq'::regclass);


--
-- Name: nd_experiment_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_dbxref ALTER COLUMN nd_experiment_dbxref_id SET DEFAULT nextval('nd_experiment_dbxref_nd_experiment_dbxref_id_seq'::regclass);


--
-- Name: nd_experiment_genotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_genotype ALTER COLUMN nd_experiment_genotype_id SET DEFAULT nextval('nd_experiment_genotype_nd_experiment_genotype_id_seq'::regclass);


--
-- Name: nd_experiment_phenotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_phenotype ALTER COLUMN nd_experiment_phenotype_id SET DEFAULT nextval('nd_experiment_phenotype_nd_experiment_phenotype_id_seq'::regclass);


--
-- Name: nd_experiment_project_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_project ALTER COLUMN nd_experiment_project_id SET DEFAULT nextval('nd_experiment_project_nd_experiment_project_id_seq'::regclass);


--
-- Name: nd_experiment_protocol_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_protocol ALTER COLUMN nd_experiment_protocol_id SET DEFAULT nextval('nd_experiment_protocol_nd_experiment_protocol_id_seq'::regclass);


--
-- Name: nd_experiment_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_pub ALTER COLUMN nd_experiment_pub_id SET DEFAULT nextval('nd_experiment_pub_nd_experiment_pub_id_seq'::regclass);


--
-- Name: nd_experiment_stock_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock ALTER COLUMN nd_experiment_stock_id SET DEFAULT nextval('nd_experiment_stock_nd_experiment_stock_id_seq'::regclass);


--
-- Name: nd_experiment_stock_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock_dbxref ALTER COLUMN nd_experiment_stock_dbxref_id SET DEFAULT nextval('nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq'::regclass);


--
-- Name: nd_experiment_stockprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stockprop ALTER COLUMN nd_experiment_stockprop_id SET DEFAULT nextval('nd_experiment_stockprop_nd_experiment_stockprop_id_seq'::regclass);


--
-- Name: nd_experimentprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experimentprop ALTER COLUMN nd_experimentprop_id SET DEFAULT nextval('nd_experimentprop_nd_experimentprop_id_seq'::regclass);


--
-- Name: nd_geolocation_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_geolocation ALTER COLUMN nd_geolocation_id SET DEFAULT nextval('nd_geolocation_nd_geolocation_id_seq'::regclass);


--
-- Name: nd_geolocationprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_geolocationprop ALTER COLUMN nd_geolocationprop_id SET DEFAULT nextval('nd_geolocationprop_nd_geolocationprop_id_seq'::regclass);


--
-- Name: nd_protocol_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocol ALTER COLUMN nd_protocol_id SET DEFAULT nextval('nd_protocol_nd_protocol_id_seq'::regclass);


--
-- Name: nd_protocol_reagent_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocol_reagent ALTER COLUMN nd_protocol_reagent_id SET DEFAULT nextval('nd_protocol_reagent_nd_protocol_reagent_id_seq'::regclass);


--
-- Name: nd_protocolprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocolprop ALTER COLUMN nd_protocolprop_id SET DEFAULT nextval('nd_protocolprop_nd_protocolprop_id_seq'::regclass);


--
-- Name: nd_reagent_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagent ALTER COLUMN nd_reagent_id SET DEFAULT nextval('nd_reagent_nd_reagent_id_seq'::regclass);


--
-- Name: nd_reagent_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagent_relationship ALTER COLUMN nd_reagent_relationship_id SET DEFAULT nextval('nd_reagent_relationship_nd_reagent_relationship_id_seq'::regclass);


--
-- Name: nd_reagentprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagentprop ALTER COLUMN nd_reagentprop_id SET DEFAULT nextval('nd_reagentprop_nd_reagentprop_id_seq'::regclass);


--
-- Name: organism_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism ALTER COLUMN organism_id SET DEFAULT nextval('organism_organism_id_seq'::regclass);


--
-- Name: organism_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism_dbxref ALTER COLUMN organism_dbxref_id SET DEFAULT nextval('organism_dbxref_organism_dbxref_id_seq'::regclass);


--
-- Name: organismprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organismprop ALTER COLUMN organismprop_id SET DEFAULT nextval('organismprop_organismprop_id_seq'::regclass);


--
-- Name: phendesc_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phendesc ALTER COLUMN phendesc_id SET DEFAULT nextval('phendesc_phendesc_id_seq'::regclass);


--
-- Name: phenotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype ALTER COLUMN phenotype_id SET DEFAULT nextval('phenotype_phenotype_id_seq'::regclass);


--
-- Name: phenotype_comparison_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison ALTER COLUMN phenotype_comparison_id SET DEFAULT nextval('phenotype_comparison_phenotype_comparison_id_seq'::regclass);


--
-- Name: phenotype_comparison_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison_cvterm ALTER COLUMN phenotype_comparison_cvterm_id SET DEFAULT nextval('phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq'::regclass);


--
-- Name: phenotype_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_cvterm ALTER COLUMN phenotype_cvterm_id SET DEFAULT nextval('phenotype_cvterm_phenotype_cvterm_id_seq'::regclass);


--
-- Name: phenstatement_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenstatement ALTER COLUMN phenstatement_id SET DEFAULT nextval('phenstatement_phenstatement_id_seq'::regclass);


--
-- Name: phylonode_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode ALTER COLUMN phylonode_id SET DEFAULT nextval('phylonode_phylonode_id_seq'::regclass);


--
-- Name: phylonode_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_dbxref ALTER COLUMN phylonode_dbxref_id SET DEFAULT nextval('phylonode_dbxref_phylonode_dbxref_id_seq'::regclass);


--
-- Name: phylonode_organism_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_organism ALTER COLUMN phylonode_organism_id SET DEFAULT nextval('phylonode_organism_phylonode_organism_id_seq'::regclass);


--
-- Name: phylonode_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_pub ALTER COLUMN phylonode_pub_id SET DEFAULT nextval('phylonode_pub_phylonode_pub_id_seq'::regclass);


--
-- Name: phylonode_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_relationship ALTER COLUMN phylonode_relationship_id SET DEFAULT nextval('phylonode_relationship_phylonode_relationship_id_seq'::regclass);


--
-- Name: phylonodeprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonodeprop ALTER COLUMN phylonodeprop_id SET DEFAULT nextval('phylonodeprop_phylonodeprop_id_seq'::regclass);


--
-- Name: phylotree_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree ALTER COLUMN phylotree_id SET DEFAULT nextval('phylotree_phylotree_id_seq'::regclass);


--
-- Name: phylotree_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree_pub ALTER COLUMN phylotree_pub_id SET DEFAULT nextval('phylotree_pub_phylotree_pub_id_seq'::regclass);


--
-- Name: project_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project ALTER COLUMN project_id SET DEFAULT nextval('project_project_id_seq'::regclass);


--
-- Name: project_contact_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_contact ALTER COLUMN project_contact_id SET DEFAULT nextval('project_contact_project_contact_id_seq'::regclass);


--
-- Name: project_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_pub ALTER COLUMN project_pub_id SET DEFAULT nextval('project_pub_project_pub_id_seq'::regclass);


--
-- Name: project_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_relationship ALTER COLUMN project_relationship_id SET DEFAULT nextval('project_relationship_project_relationship_id_seq'::regclass);


--
-- Name: projectprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY projectprop ALTER COLUMN projectprop_id SET DEFAULT nextval('projectprop_projectprop_id_seq'::regclass);


--
-- Name: protocol_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY protocol ALTER COLUMN protocol_id SET DEFAULT nextval('protocol_protocol_id_seq'::regclass);


--
-- Name: protocolparam_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY protocolparam ALTER COLUMN protocolparam_id SET DEFAULT nextval('protocolparam_protocolparam_id_seq'::regclass);


--
-- Name: pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub ALTER COLUMN pub_id SET DEFAULT nextval('pub_pub_id_seq'::regclass);


--
-- Name: pub_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_dbxref ALTER COLUMN pub_dbxref_id SET DEFAULT nextval('pub_dbxref_pub_dbxref_id_seq'::regclass);


--
-- Name: pub_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_relationship ALTER COLUMN pub_relationship_id SET DEFAULT nextval('pub_relationship_pub_relationship_id_seq'::regclass);


--
-- Name: pubauthor_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubauthor ALTER COLUMN pubauthor_id SET DEFAULT nextval('pubauthor_pubauthor_id_seq'::regclass);


--
-- Name: pubprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubprop ALTER COLUMN pubprop_id SET DEFAULT nextval('pubprop_pubprop_id_seq'::regclass);


--
-- Name: quantification_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quantification ALTER COLUMN quantification_id SET DEFAULT nextval('quantification_quantification_id_seq'::regclass);


--
-- Name: quantification_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quantification_relationship ALTER COLUMN quantification_relationship_id SET DEFAULT nextval('quantification_relationship_quantification_relationship_id_seq'::regclass);


--
-- Name: quantificationprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quantificationprop ALTER COLUMN quantificationprop_id SET DEFAULT nextval('quantificationprop_quantificationprop_id_seq'::regclass);


--
-- Name: stock_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock ALTER COLUMN stock_id SET DEFAULT nextval('stock_stock_id_seq'::regclass);


--
-- Name: stock_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvterm ALTER COLUMN stock_cvterm_id SET DEFAULT nextval('stock_cvterm_stock_cvterm_id_seq'::regclass);


--
-- Name: stock_cvtermprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvtermprop ALTER COLUMN stock_cvtermprop_id SET DEFAULT nextval('stock_cvtermprop_stock_cvtermprop_id_seq'::regclass);


--
-- Name: stock_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxref ALTER COLUMN stock_dbxref_id SET DEFAULT nextval('stock_dbxref_stock_dbxref_id_seq'::regclass);


--
-- Name: stock_dbxrefprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxrefprop ALTER COLUMN stock_dbxrefprop_id SET DEFAULT nextval('stock_dbxrefprop_stock_dbxrefprop_id_seq'::regclass);


--
-- Name: stock_genotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_genotype ALTER COLUMN stock_genotype_id SET DEFAULT nextval('stock_genotype_stock_genotype_id_seq'::regclass);


--
-- Name: stock_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_pub ALTER COLUMN stock_pub_id SET DEFAULT nextval('stock_pub_stock_pub_id_seq'::regclass);


--
-- Name: stock_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship ALTER COLUMN stock_relationship_id SET DEFAULT nextval('stock_relationship_stock_relationship_id_seq'::regclass);


--
-- Name: stock_relationship_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_cvterm ALTER COLUMN stock_relationship_cvterm_id SET DEFAULT nextval('stock_relationship_cvterm_stock_relationship_cvterm_id_seq'::regclass);


--
-- Name: stock_relationship_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_pub ALTER COLUMN stock_relationship_pub_id SET DEFAULT nextval('stock_relationship_pub_stock_relationship_pub_id_seq'::regclass);


--
-- Name: stockcollection_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection ALTER COLUMN stockcollection_id SET DEFAULT nextval('stockcollection_stockcollection_id_seq'::regclass);


--
-- Name: stockcollection_stock_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection_stock ALTER COLUMN stockcollection_stock_id SET DEFAULT nextval('stockcollection_stock_stockcollection_stock_id_seq'::regclass);


--
-- Name: stockcollectionprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollectionprop ALTER COLUMN stockcollectionprop_id SET DEFAULT nextval('stockcollectionprop_stockcollectionprop_id_seq'::regclass);


--
-- Name: stockprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop ALTER COLUMN stockprop_id SET DEFAULT nextval('stockprop_stockprop_id_seq'::regclass);


--
-- Name: stockprop_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop_pub ALTER COLUMN stockprop_pub_id SET DEFAULT nextval('stockprop_pub_stockprop_pub_id_seq'::regclass);


--
-- Name: study_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY study ALTER COLUMN study_id SET DEFAULT nextval('study_study_id_seq'::regclass);


--
-- Name: study_assay_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY study_assay ALTER COLUMN study_assay_id SET DEFAULT nextval('study_assay_study_assay_id_seq'::regclass);


--
-- Name: studydesign_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studydesign ALTER COLUMN studydesign_id SET DEFAULT nextval('studydesign_studydesign_id_seq'::regclass);


--
-- Name: studydesignprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studydesignprop ALTER COLUMN studydesignprop_id SET DEFAULT nextval('studydesignprop_studydesignprop_id_seq'::regclass);


--
-- Name: studyfactor_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studyfactor ALTER COLUMN studyfactor_id SET DEFAULT nextval('studyfactor_studyfactor_id_seq'::regclass);


--
-- Name: studyfactorvalue_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studyfactorvalue ALTER COLUMN studyfactorvalue_id SET DEFAULT nextval('studyfactorvalue_studyfactorvalue_id_seq'::regclass);


--
-- Name: studyprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studyprop ALTER COLUMN studyprop_id SET DEFAULT nextval('studyprop_studyprop_id_seq'::regclass);


--
-- Name: studyprop_feature_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studyprop_feature ALTER COLUMN studyprop_feature_id SET DEFAULT nextval('studyprop_feature_studyprop_feature_id_seq'::regclass);


--
-- Name: synonym_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY synonym ALTER COLUMN synonym_id SET DEFAULT nextval('synonym_synonym_id_seq'::regclass);


--
-- Name: tableinfo_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tableinfo ALTER COLUMN tableinfo_id SET DEFAULT nextval('tableinfo_tableinfo_id_seq'::regclass);


--
-- Name: treatment_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY treatment ALTER COLUMN treatment_id SET DEFAULT nextval('treatment_treatment_id_seq'::regclass);


SET search_path = so, pg_catalog;

--
-- Name: sequence_cv_lookup_table_id; Type: DEFAULT; Schema: so; Owner: postgres
--

ALTER TABLE ONLY sequence_cv_lookup_table ALTER COLUMN sequence_cv_lookup_table_id SET DEFAULT nextval('sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq'::regclass);


SET search_path = frange, pg_catalog;

--
-- Data for Name: featuregroup; Type: TABLE DATA; Schema: frange; Owner: postgres
--

COPY featuregroup (featuregroup_id, subject_id, object_id, group_id, srcfeature_id, fmin, fmax, strand, is_root) FROM stdin;
\.


--
-- Name: featuregroup_featuregroup_id_seq; Type: SEQUENCE SET; Schema: frange; Owner: postgres
--

SELECT pg_catalog.setval('featuregroup_featuregroup_id_seq', 1, false);


SET search_path = genetic_code, pg_catalog;

--
-- Data for Name: gencode; Type: TABLE DATA; Schema: genetic_code; Owner: postgres
--

COPY gencode (gencode_id, organismstr) FROM stdin;
\.


--
-- Data for Name: gencode_codon_aa; Type: TABLE DATA; Schema: genetic_code; Owner: postgres
--

COPY gencode_codon_aa (gencode_id, codon, aa) FROM stdin;
\.


--
-- Data for Name: gencode_startcodon; Type: TABLE DATA; Schema: genetic_code; Owner: postgres
--

COPY gencode_startcodon (gencode_id, codon) FROM stdin;
\.


SET search_path = public, pg_catalog;

--
-- Data for Name: acquisition; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY acquisition (acquisition_id, assay_id, protocol_id, channel_id, acquisitiondate, name, uri) FROM stdin;
\.


--
-- Name: acquisition_acquisition_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('acquisition_acquisition_id_seq', 1, false);


--
-- Data for Name: acquisition_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY acquisition_relationship (acquisition_relationship_id, subject_id, type_id, object_id, value, rank) FROM stdin;
\.


--
-- Name: acquisition_relationship_acquisition_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('acquisition_relationship_acquisition_relationship_id_seq', 1, false);


--
-- Data for Name: acquisitionprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY acquisitionprop (acquisitionprop_id, acquisition_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: acquisitionprop_acquisitionprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('acquisitionprop_acquisitionprop_id_seq', 1, false);


--
-- Data for Name: analysis; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY analysis (analysis_id, name, description, program, programversion, algorithm, sourcename, sourceversion, sourceuri, timeexecuted) FROM stdin;
1	dabg	\N	dabg	dabg	\N	\N	\N	\N	2013-05-07 14:57:24.733232
2	dchip	\N	dchip	dchip	\N	\N	\N	\N	2013-05-07 14:57:24.741552
3	gcrma	\N	gcrma	gcrma	\N	\N	\N	\N	2013-05-07 14:57:24.74992
4	mas5	\N	mas5	mas5	\N	\N	\N	\N	2013-05-07 14:57:24.758238
5	mpam	\N	mpam	mpam	\N	\N	\N	\N	2013-05-07 14:57:24.766561
6	plier	\N	plier	plier	\N	\N	\N	\N	2013-05-07 14:57:24.774896
7	rma	\N	rma	rma	\N	\N	\N	\N	2013-05-07 14:57:24.783219
8	sea	\N	sea	sea	\N	\N	\N	\N	2013-05-07 14:57:24.791542
9	vsn	\N	vsn	vsn	\N	\N	\N	\N	2013-05-07 14:57:24.799922
\.


--
-- Name: analysis_analysis_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('analysis_analysis_id_seq', 9, true);


--
-- Data for Name: analysisfeature; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY analysisfeature (analysisfeature_id, feature_id, analysis_id, rawscore, normscore, significance, identity) FROM stdin;
\.


--
-- Name: analysisfeature_analysisfeature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('analysisfeature_analysisfeature_id_seq', 1, false);


--
-- Data for Name: analysisfeatureprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY analysisfeatureprop (analysisfeatureprop_id, analysisfeature_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: analysisfeatureprop_analysisfeatureprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('analysisfeatureprop_analysisfeatureprop_id_seq', 1, false);


--
-- Data for Name: analysisprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY analysisprop (analysisprop_id, analysis_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: analysisprop_analysisprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('analysisprop_analysisprop_id_seq', 1, false);


--
-- Data for Name: arraydesign; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY arraydesign (arraydesign_id, manufacturer_id, platformtype_id, substratetype_id, protocol_id, dbxref_id, name, version, description, array_dimensions, element_dimensions, num_of_elements, num_array_columns, num_array_rows, num_grid_columns, num_grid_rows, num_sub_columns, num_sub_rows) FROM stdin;
1	2	1	\N	\N	\N	unknown	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
2	2	1	\N	\N	\N	virtual array	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
3	1	4	3	\N	\N	Affymetrix_HG-U133_Plus_2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
4	1	4	3	\N	\N	Affymetrix_HG-U133A	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
5	1	4	3	\N	\N	Affymetrix_HG-U133A_2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
6	1	4	3	\N	\N	Affymetrix_HG-U133B	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
7	1	4	3	\N	\N	Affymetrix_HG-U95Av2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
8	1	4	3	\N	\N	Affymetrix_HG-U95B	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
9	1	4	3	\N	\N	Affymetrix_HG-U95C	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
10	1	4	3	\N	\N	Affymetrix_HG-U95D	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
11	1	4	3	\N	\N	Affymetrix_HG-U95E	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
12	1	4	3	\N	\N	Affymetrix_HuExon1	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
13	1	4	3	\N	\N	Affymetrix_HuGeneFL	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
14	1	4	3	\N	\N	Affymetrix_U74Av2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
15	1	4	3	\N	\N	Affymetrix_MG-U74Av2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
16	1	4	3	\N	\N	Affymetrix_MG-U74Bv2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
17	1	4	3	\N	\N	Affymetrix_MG-U74Cv2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
18	1	4	3	\N	\N	Affymetrix_RG-U34A	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
19	1	4	3	\N	\N	Affymetrix_RG-U34B	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
20	1	4	3	\N	\N	Affymetrix_RG-U34C	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
21	1	4	3	\N	\N	Affymetrix_RT-U34	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
22	1	4	3	\N	\N	Affymetrix_RN-U34	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
23	1	4	3	\N	\N	Affymetrix_YG-S98	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
24	1	4	3	\N	\N	Affymetrix_Yeast_2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
25	1	4	3	\N	\N	Affymetrix_RAE230A	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
26	1	4	3	\N	\N	Affymetrix_RAE230B	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
27	1	4	3	\N	\N	Affymetrix_Rat230_2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
28	1	4	3	\N	\N	Affymetrix_MOE430A	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
29	1	4	3	\N	\N	Affymetrix_MOE430B	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
30	1	4	3	\N	\N	Affymetrix_Mouse430_2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
31	1	4	3	\N	\N	Affymetrix_Mouse430A_2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
32	1	4	3	\N	\N	Affymetrix_ATH1-121501	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
33	1	4	3	\N	\N	Affymetrix_Mapping100K_Hind240	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
34	1	4	3	\N	\N	Affymetrix_Mapping100K_Xba240	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
35	1	4	3	\N	\N	Affymetrix_Mapping10K_Xba131	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
36	1	4	3	\N	\N	Affymetrix_Mapping10K_Xba142	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
37	1	4	3	\N	\N	Affymetrix_Mapping500K_NspI	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
38	1	4	3	\N	\N	Affymetrix_Mapping500K_StyI	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
\.


--
-- Name: arraydesign_arraydesign_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('arraydesign_arraydesign_id_seq', 38, true);


--
-- Data for Name: arraydesignprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY arraydesignprop (arraydesignprop_id, arraydesign_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: arraydesignprop_arraydesignprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('arraydesignprop_arraydesignprop_id_seq', 1, false);


--
-- Data for Name: assay; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY assay (assay_id, arraydesign_id, protocol_id, assaydate, arrayidentifier, arraybatchidentifier, operator_id, dbxref_id, name, description) FROM stdin;
\.


--
-- Name: assay_assay_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('assay_assay_id_seq', 1, false);


--
-- Data for Name: assay_biomaterial; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY assay_biomaterial (assay_biomaterial_id, assay_id, biomaterial_id, channel_id, rank) FROM stdin;
\.


--
-- Name: assay_biomaterial_assay_biomaterial_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('assay_biomaterial_assay_biomaterial_id_seq', 1, false);


--
-- Data for Name: assay_project; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY assay_project (assay_project_id, assay_id, project_id) FROM stdin;
\.


--
-- Name: assay_project_assay_project_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('assay_project_assay_project_id_seq', 1, false);


--
-- Data for Name: assayprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY assayprop (assayprop_id, assay_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: assayprop_assayprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('assayprop_assayprop_id_seq', 1, false);


--
-- Data for Name: biomaterial; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY biomaterial (biomaterial_id, taxon_id, biosourceprovider_id, dbxref_id, name, description) FROM stdin;
\.


--
-- Name: biomaterial_biomaterial_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('biomaterial_biomaterial_id_seq', 1, false);


--
-- Data for Name: biomaterial_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY biomaterial_dbxref (biomaterial_dbxref_id, biomaterial_id, dbxref_id) FROM stdin;
\.


--
-- Name: biomaterial_dbxref_biomaterial_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('biomaterial_dbxref_biomaterial_dbxref_id_seq', 1, false);


--
-- Data for Name: biomaterial_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY biomaterial_relationship (biomaterial_relationship_id, subject_id, type_id, object_id) FROM stdin;
\.


--
-- Name: biomaterial_relationship_biomaterial_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('biomaterial_relationship_biomaterial_relationship_id_seq', 1, false);


--
-- Data for Name: biomaterial_treatment; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY biomaterial_treatment (biomaterial_treatment_id, biomaterial_id, treatment_id, unittype_id, value, rank) FROM stdin;
\.


--
-- Name: biomaterial_treatment_biomaterial_treatment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('biomaterial_treatment_biomaterial_treatment_id_seq', 1, false);


--
-- Data for Name: biomaterialprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY biomaterialprop (biomaterialprop_id, biomaterial_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: biomaterialprop_biomaterialprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('biomaterialprop_biomaterialprop_id_seq', 1, false);


--
-- Data for Name: cell_line; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cell_line (cell_line_id, name, uniquename, organism_id, timeaccessioned, timelastmodified) FROM stdin;
\.


--
-- Name: cell_line_cell_line_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cell_line_cell_line_id_seq', 1, false);


--
-- Data for Name: cell_line_cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cell_line_cvterm (cell_line_cvterm_id, cell_line_id, cvterm_id, pub_id, rank) FROM stdin;
\.


--
-- Name: cell_line_cvterm_cell_line_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cell_line_cvterm_cell_line_cvterm_id_seq', 1, false);


--
-- Data for Name: cell_line_cvtermprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cell_line_cvtermprop (cell_line_cvtermprop_id, cell_line_cvterm_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: cell_line_cvtermprop_cell_line_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cell_line_cvtermprop_cell_line_cvtermprop_id_seq', 1, false);


--
-- Data for Name: cell_line_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cell_line_dbxref (cell_line_dbxref_id, cell_line_id, dbxref_id, is_current) FROM stdin;
\.


--
-- Name: cell_line_dbxref_cell_line_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cell_line_dbxref_cell_line_dbxref_id_seq', 1, false);


--
-- Data for Name: cell_line_feature; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cell_line_feature (cell_line_feature_id, cell_line_id, feature_id, pub_id) FROM stdin;
\.


--
-- Name: cell_line_feature_cell_line_feature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cell_line_feature_cell_line_feature_id_seq', 1, false);


--
-- Data for Name: cell_line_library; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cell_line_library (cell_line_library_id, cell_line_id, library_id, pub_id) FROM stdin;
\.


--
-- Name: cell_line_library_cell_line_library_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cell_line_library_cell_line_library_id_seq', 1, false);


--
-- Data for Name: cell_line_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cell_line_pub (cell_line_pub_id, cell_line_id, pub_id) FROM stdin;
\.


--
-- Name: cell_line_pub_cell_line_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cell_line_pub_cell_line_pub_id_seq', 1, false);


--
-- Data for Name: cell_line_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cell_line_relationship (cell_line_relationship_id, subject_id, object_id, type_id) FROM stdin;
\.


--
-- Name: cell_line_relationship_cell_line_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cell_line_relationship_cell_line_relationship_id_seq', 1, false);


--
-- Data for Name: cell_line_synonym; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cell_line_synonym (cell_line_synonym_id, cell_line_id, synonym_id, pub_id, is_current, is_internal) FROM stdin;
\.


--
-- Name: cell_line_synonym_cell_line_synonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cell_line_synonym_cell_line_synonym_id_seq', 1, false);


--
-- Data for Name: cell_lineprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cell_lineprop (cell_lineprop_id, cell_line_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: cell_lineprop_cell_lineprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cell_lineprop_cell_lineprop_id_seq', 1, false);


--
-- Data for Name: cell_lineprop_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cell_lineprop_pub (cell_lineprop_pub_id, cell_lineprop_id, pub_id) FROM stdin;
\.


--
-- Name: cell_lineprop_pub_cell_lineprop_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cell_lineprop_pub_cell_lineprop_pub_id_seq', 1, false);


--
-- Data for Name: chadoprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY chadoprop (chadoprop_id, type_id, value, rank) FROM stdin;
1	29	1.23	0
\.


--
-- Name: chadoprop_chadoprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('chadoprop_chadoprop_id_seq', 1, true);


--
-- Data for Name: channel; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY channel (channel_id, name, definition) FROM stdin;
\.


--
-- Name: channel_channel_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('channel_channel_id_seq', 1, false);


--
-- Data for Name: contact; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY contact (contact_id, type_id, name, description) FROM stdin;
1	\N	Affymetrix	\N
2	\N	null	null
\.


--
-- Name: contact_contact_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('contact_contact_id_seq', 2, true);


--
-- Data for Name: contact_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY contact_relationship (contact_relationship_id, type_id, subject_id, object_id) FROM stdin;
\.


--
-- Name: contact_relationship_contact_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('contact_relationship_contact_relationship_id_seq', 1, false);


--
-- Data for Name: control; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY control (control_id, type_id, assay_id, tableinfo_id, row_id, name, value, rank) FROM stdin;
\.


--
-- Name: control_control_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('control_control_id_seq', 1, false);


--
-- Data for Name: cv; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cv (cv_id, name, definition) FROM stdin;
1	null	\N
2	local	Locally created terms
3	Statistical Terms	Locally created terms for statistics
4	developmental stages	\N
5	autocreated	Terms that are automatically inserted by loading software
6	chado_properties	Terms that are used in the chadoprop table to describe the state of the database
7	relationship	\N
8	synonym_type	\N
9	cvterm_property_type	\N
10	anonymous	\N
11	sequence	\N
12	feature_property	\N
\.


--
-- Name: cv_cv_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cv_cv_id_seq', 12, true);


--
-- Data for Name: cvprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cvprop (cvprop_id, cv_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: cvprop_cvprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cvprop_cvprop_id_seq', 1, false);


--
-- Data for Name: cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cvterm (cvterm_id, cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype) FROM stdin;
1	1	null	\N	1	0	0
2	1	computer file	\N	2	0	0
3	2	glass	glass array	3	0	0
4	2	photochemical_oligo	in-situ photochemically synthesized oligoes	4	0	0
5	2	fetus	\N	5	0	0
6	4	neonate	\N	6	0	0
7	4	child	\N	7	0	0
8	4	adult_young	\N	8	0	0
9	4	adult	\N	9	0	0
10	4	adult_old	\N	10	0	0
11	2	survival_time	\N	11	0	0
12	3	n	sensu statistica	12	0	0
13	3	minimum	sensu statistica	13	0	0
14	3	maximum	sensu statistica	14	0	0
15	3	modality	sensu statistica	15	0	0
16	3	modality p	sensu statistica	16	0	0
17	3	mean	sensu statistica	17	0	0
18	3	median	sensu statistica	18	0	0
19	3	mode	sensu statistica	19	0	0
20	3	quartile 1	sensu statistica	20	0	0
21	3	quartile 3	sensu statistica	21	0	0
22	3	skewness	sensu statistica	22	0	0
23	3	kurtosis	sensu statistica	23	0	0
24	3	chi square p	sensu statistica	24	0	0
25	3	standard deviation	sensu statistica	25	0	0
26	3	expectation maximization gaussian mean	sensu statistica	26	0	0
27	3	expectation maximization p	sensu statistica	27	0	0
28	3	histogram	sensu statistica	28	0	0
29	6	version	Chado schema version	29	0	0
85	9	is_symmetric	\N	111	0	0
37	7	part_of		39	0	1
73	11	exemplar_of		99	0	1
74	11	finished_by		100	0	1
75	11	finishes		101	0	1
38	7	has_part	\N	41	0	1
76	11	gained		102	0	1
77	11	genome_of	\N	103	0	1
78	11	guided_by	\N	104	0	1
39	7	integral_part_of		43	0	1
79	11	guides	\N	105	0	1
80	11	has_integral_part		106	0	1
81	11	has_origin	\N	107	0	1
40	7	has_integral_part	\N	45	0	1
82	11	has_part		108	0	1
34	9	is_anti_symmetric	\N	34	0	0
83	11	has_quality	\N	109	0	1
41	7	proper_part_of		47	0	1
84	11	homologous_to	\N	110	0	1
42	7	has_proper_part	\N	49	0	1
43	7	located_in		51	0	1
86	11	integral_part_of		112	0	1
87	11	is_consecutive_sequence_of		113	0	1
44	7	location_of	\N	53	0	1
88	11	lost		114	0	1
89	11	maximally_overlaps		115	0	1
45	7	contained_in		55	0	1
46	7	contains	\N	57	0	1
47	7	adjacent_to		59	0	1
48	7	transformation_of		61	0	1
90	11	member_of	\N	116	0	1
49	7	transformed_into	\N	63	1	1
50	7	derives_from		65	0	1
104	11	started_by		130	0	1
30	9	comment	\N	30	0	0
51	7	derived_into	\N	67	0	1
91	11	non_functional_homolog_of		117	0	1
52	7	preceded_by		69	0	1
92	11	orthologous_to	\N	118	0	1
53	7	precedes	\N	71	0	1
105	11	starts		131	0	1
54	7	has_participant		73	0	1
55	7	participates_in	\N	75	0	1
56	7	has_agent		77	0	1
57	7	agent_in	\N	79	0	1
58	7	instance_of		81	0	1
59	7	has_improper_part	\N	83	1	1
93	11	overlaps		119	0	1
94	11	paralogous_to	\N	120	0	1
60	7	improper_part_of		85	1	1
33	9	is_reflexive	\N	33	0	0
31	9	is_anonymous	\N	31	0	0
61	7	relationship		87	1	1
32	7	is_a		32	0	1
62	11	adjacent_to		88	0	1
63	11	associated_with	\N	89	0	1
64	11	complete_evidence_for_feature		90	0	1
95	11	part_of		121	0	1
65	11	connects_on		91	0	1
66	11	contained_by		92	0	1
35	9	is_transitive	\N	35	0	0
67	11	contains		93	0	1
96	11	partial_evidence_for_feature		122	0	1
68	11	derives_from	\N	94	0	1
106	11	trans_spliced_from	\N	132	0	1
69	11	disconnected_from		95	0	1
70	11	edited_from	\N	96	0	1
71	11	edited_to	\N	97	0	1
72	11	evidence_for_feature		98	0	1
97	11	position_of	\N	123	0	1
98	11	processed_from		124	0	1
99	11	processed_into		125	0	1
100	11	recombined_from	\N	126	0	1
101	11	recombined_to	\N	127	0	1
102	11	sequence_of	\N	128	0	1
103	11	similar_to	\N	129	0	1
107	11	trans_spliced_to	\N	133	0	1
108	11	transcribed_from		134	0	1
109	11	transcribed_to		135	0	1
110	11	translates_to		136	0	1
111	11	translation_of		137	0	1
112	11	variant_of		138	0	1
113	11	Sequence_Ontology (obsolete SO:0000000)	\N	139	1	0
114	11	region	A sequence_feature with an extent greater than zero. A nucleotide region is composed of bases and a polypeptide region is composed of amino acids.	140	0	0
115	11	sequence_secondary_structure	A folded sequence.	142	0	0
116	11	G_quartet	G-quartets are unusual nucleic acid structures consisting of a planar arrangement where each guanine is hydrogen bonded by hoogsteen pairing to another guanine in the quartet.	143	0	0
141	11	RNA_hook_turn	\N	182	0	0
151	11	matrix_attachment_site	A DNA region that is required for the binding of chromatin to the nuclear matrix.	200	0	0
366	11	eight_cutter_restriction_site (obsolete SO:0000251)	\N	478	1	0
156	11	sequence_operation (obsolete SO:0000041)	An operation that can be applied to a sequence, that results in a change.	208	1	0
117	11	interior_coding_exon	\N	146	0	0
142	11	base_pair	\N	183	0	0
118	11	satellite_DNA	The many tandem repeats (identical or related) of a short basic repeating unit; many have a base composition or other property different from the genome average that allows them to be separated from the bulk (main band) genomic DNA.	147	0	0
153	11	match_set (obsolete SO:0000038)	A collection of match parts.	205	1	0
119	11	PCR_product	A region amplified by a PCR reaction.	150	0	0
143	11	WC_base_pair	The canonical base pair, where two bases interact via WC edges, with glycosidic bonds oriented cis relative to the axis of orientation.	185	0	0
121	11	read_pair	One of a pair of sequencing reads in which the two members of the pair are related by originating at either end of a clone insert.	153	0	0
154	11	match_part	A part of a match, for example an hsp from blast is a match_part.	206	0	0
155	11	genomic_clone	A clone of a DNA region of a genome.	207	0	0
122	11	gene_sensu_your_favorite_organism (obsolete SO:0000008)	\N	155	1	0
123	11	gene_class (obsolete SO:0000009)	\N	156	1	0
124	11	protein_coding	\N	157	0	0
903	11	validated	An attribute to describe a feature that has been proven.	1201	0	0
125	11	non_protein_coding	\N	158	0	0
157	11	pseudogene_attribute (obsolete SO:0000042)	An attribute of a pseudogene (SO:0000336).	209	1	0
126	11	scRNA_primary_transcript	The primary transcript of any one of several small cytoplasmic RNA molecules present in the cytoplasm and sometimes nucleus of a eukaryote.	159	0	0
158	11	processed_pseudogene	A pseudogene where by an mRNA was retrotransposed. The mRNA sequence is transcribed back into the genome, lacking introns and promoters, but often including a polyA tail.	210	0	0
144	11	sugar_edge_base_pair	A type of non-canonical base-pairing.	187	0	0
904	11	invalidated	An attribute describing a feature that is invalidated.	1202	0	0
145	11	aptamer	DNA or RNA molecules that have been selected from random pools based on their ability to bind other molecules.	188	0	0
146	11	DNA_aptamer	DNA molecules that have been selected from random pools based on their ability to bind other molecules.	191	0	0
127	11	scRNA	A small non coding RNA sequence, present in the cytoplasm.	161	0	0
128	11	INR_motif	A sequence element characteristic of some RNA polymerase II promoters required for the correct positioning of the polymerase for the start of transcription. Overlaps the TSS. The mammalian consensus sequence is YYAN(T|A)YY; the Drosophila consensus sequence is TCA(G|T)t(T|C). In each the A is at position +1 with respect to the TSS. Functionally similar to the TATA box element.	162	0	0
147	11	RNA_aptamer	RNA molecules that have been selected from random pools based on their ability to bind other molecules.	193	0	0
905	11	cloned_genomic (obsolete SO:0000791)	\N	1203	1	0
148	11	morpholino_oligo	Morpholino oligos are synthesized from four different Morpholino subunits, each of which contains one of the four genetic bases (A, C, G, T) linked to a 6-membered morpholine ring. Eighteen to 25 subunits of these four subunit types are joined in a specific order by non-ionic phosphorodiamidate intersubunit linkages to give a Morpholino.	194	0	0
129	11	DPE_motif	A sequence element characteristic of some RNA polymerase II promoters; Positioned from +28 to +32 with respect to the TSS (+1). Experimental results suggest that the DPE acts in conjunction with the INR_motif to provide a binding site for TFIID in the absence of a TATA box to mediate transcription of TATA-less promoters. Consensus sequence (A|G)G(A|T)(C|T)(G|A|C).	165	0	0
906	11	cloned_cDNA (obsolete SO:0000792)	\N	1204	1	0
152	11	locus_control_region	A DNA region that includes DNAse hypersensitive sites located 5' to a gene that confers the high-level, position-independent, and copy number-dependent expression to that gene.	203	0	0
131	11	BREu_motif	A sequence element characteristic of some RNA polymerase II promoters, located immediately upstream of some TATA box elements at -37 to -32 with respect to the TSS (+1). Consensus sequence is (G|C)(G|C)(G|A)CGCC. Binds TFIIB.	168	0	0
150	11	riboswitch	A riboswitch is a part of an mRNA that can act as a direct sensor of small molecules to control their own expression. A riboswitch is a cis element in the 5' end of an mRNA, that acts as a direct sensor of metabolites.	197	0	0
132	11	PSE_motif	A sequence element characteristic of the promoters of snRNA genes transcribed by RNA polymerase II or by RNA polymerase III. Located between -45 and -60 relative to the TSS. The human PSE_motif consensus sequence is TCACCNTNA(C|G)TNAAAAG(T|G).	169	0	0
133	11	linkage_group	A group of loci that can be grouped in a linear order representing the different degrees of linkage among the genes concerned.	170	0	0
134	11	RNA_internal_loop	A region of double stranded RNA where the bases do not conform to WC base pairing. The loop is closed on both sides by canonical base pairing. If the interruption to base pairing occurs on one strand only, it is known as a bulge.	173	0	0
135	11	asymmetric_RNA_internal_loop	An internal RNA loop where one of the strands includes more bases than the corresponding region on the other strand.	174	0	0
136	11	A_minor_RNA_motif	A region forming a motif, composed of adenines, where the minor groove edges are inserted into the minor groove of another helix.	175	0	0
137	11	K_turn_RNA_motif	The kink turn (K-turn) is an RNA structural motif that creates a sharp (~120 degree) bend between two continuous helices.	176	0	0
138	11	sarcin_like_RNA_motif	A loop in ribosomal RNA containing the sites of attack for ricin and sarcin.	178	0	0
139	11	symmetric_RNA_internal_loop	An internal RNA loop where the extent of the loop on both stands is the same size.	180	0	0
140	11	RNA_junction_loop	\N	181	0	0
159	11	pseudogene_by_unequal_crossing_over	A pseudogene caused by unequal crossing over at recombination.	212	0	0
160	11	delete (obsolete SO:0000045)	To remove a subsection of sequence.	213	1	0
161	11	insert (obsolete SO:0000046)	To insert a subsection of sequence.	214	1	0
162	11	invert (obsolete SO:0000047)	To invert a subsection of sequence.	215	1	0
163	11	substitute (obsolete SO:0000048)	To substitute a subsection of sequence for another.	216	1	0
164	11	translocate (obsolete SO:0000049)	To translocate a subsection of sequence.	217	1	0
165	11	gene_part (obsolete SO:0000050)	A part of a gene, that has no other route in the ontology back to region. This concept is necessary for logical inference as these parts must have the properties of region. It also allows us to associate all the parts of genes with a gene.	218	1	0
166	11	probe	A DNA sequence used experimentally to detect the presence or absence of a complementary nucleic acid.	219	0	0
167	11	assortment_derived_deficiency (obsolete SO:0000052)	\N	221	1	0
168	11	sequence_variant_affecting_regulatory_region (obsolete SO:0000053)	A sequence_variant_effect which changes the regulatory region of a gene.	222	1	0
169	11	aneuploid	A kind of chromosome variation where the chromosome complement is not an exact multiple of the haploid number.	223	0	0
170	11	hyperploid	A kind of chromosome variation where the chromosome complement is not an exact multiple of the haploid number as extra chromosomes are present.	225	0	0
171	11	hypoploid	A kind of chromosome variation where the chromosome complement is not an exact multiple of the haploid number as some chromosomes are missing.	227	0	0
172	11	operator	A regulatory element of an operon to which activators or repressors bind thereby effecting translation of genes in that operon.	229	0	0
173	11	assortment_derived_aneuploid (obsolete SO:0000058)	\N	231	1	0
174	11	nuclease_binding_site	A binding site that, of a nucleotide molecule, that interacts selectively and non-covalently with polypeptide residues of a nuclease.	232	0	0
175	11	compound_chromosome_arm	\N	234	0	0
176	11	restriction_enzyme_binding_site	A binding site that, in the nucleotide molecule, interacts selectively and non-covalently with polypeptide residues of a restriction enzyme.	235	0	0
177	11	deficient_intrachromosomal_transposition	An intrachromosomal transposition whereby a translocation in which one of the four broken ends loses a segment before re-joining.	236	0	0
178	11	deficient_interchromosomal_transposition	An interchromosomal transposition whereby a translocation in which one of the four broken ends loses a segment before re-joining.	238	0	0
179	11	gene_by_transcript_attribute (obsolete SO:0000064)	\N	239	1	0
180	11	free_chromosome_arm	A chromosome structure variation whereby an arm exists as an individual chromosome element.	240	0	0
181	11	gene_by_polyadenylation_attribute (obsolete SO:0000066)	\N	241	1	0
182	11	gene_to_gene_feature	\N	242	0	0
183	11	overlapping	An attribute describing a gene that has a sequence that overlaps the sequence of another gene.	243	0	0
184	11	inside_intron	An attribute to describe a gene when it is located within the intron of another gene.	244	0	0
185	11	inside_intron_antiparallel	An attribute to describe a gene when it is located within the intron of another gene and on the opposite strand.	245	0	0
186	11	inside_intron_parallel	An attribute to describe a gene when it is located within the intron of another gene and on the same strand.	246	0	0
187	11	end_overlapping_gene (obsolete SO:0000072)	\N	247	1	0
188	11	five_prime_three_prime_overlap	An attribute to describe a gene when the five prime region overlaps with another gene's 3' region.	248	0	0
189	11	five_prime_five_prime_overlap	An attribute to describe a gene when the five prime region overlaps with another gene's five prime region.	249	0	0
190	11	three_prime_three_prime_overlap	An attribute to describe a gene when the 3' region overlaps with another gene's 3' region.	250	0	0
191	11	three_prime_five_prime_overlap	An attribute to describe a gene when the 3' region overlaps with another gene's 5' region.	251	0	0
192	11	antisense	A region sequence that is complementary to a sequence of messenger RNA.	252	0	0
193	11	polycistronic_transcript	A transcript that is polycistronic.	254	0	0
194	11	dicistronic_transcript	A transcript that is dicistronic.	255	0	0
195	11	operon_member	\N	256	0	0
196	11	gene_array_member	\N	257	0	0
197	11	processed_transcript_attribute (obsolete SO:0000082)	\N	258	1	0
198	11	macronuclear_sequence	\N	259	0	0
199	11	micronuclear_sequence	\N	260	0	0
200	11	gene_by_genome_location (obsolete SO:0000085)	\N	261	1	0
201	11	gene_by_organelle_of_genome (obsolete SO:0000086)	\N	262	1	0
202	11	nuclear_gene	A gene from nuclear sequence.	263	0	0
203	11	mt_gene	A gene located in mitochondrial sequence.	265	0	0
204	11	kinetoplast_gene	A gene located in kinetoplast sequence.	267	0	0
205	11	plastid_gene	A gene from plastid sequence.	268	0	0
206	11	apicoplast_gene	A gene from apicoplast sequence.	269	0	0
207	11	ct_gene	A gene from chloroplast sequence.	270	0	0
208	11	chromoplast_gene	A gene from chromoplast_sequence.	271	0	0
209	11	cyanelle_gene	A gene from cyanelle sequence.	272	0	0
210	11	leucoplast_gene	A plastid gene from leucoplast sequence.	273	0	0
211	11	proplastid_gene	A gene from proplastid sequence.	274	0	0
212	11	nucleomorph_gene	A gene from nucleomorph sequence.	275	0	0
213	11	plasmid_gene	A gene from plasmid sequence.	276	0	0
214	11	proviral_gene	A gene from proviral sequence.	277	0	0
215	11	endogenous_retroviral_gene	A proviral gene with origin endogenous retrovirus.	278	0	0
216	11	transposable_element	A transposon or insertion sequence. An element that can insert in a variety of DNA sequences.	279	0	0
217	11	expressed_sequence_match	A match to an EST or cDNA sequence.	282	0	0
218	11	clone_insert_end	The end of the clone insert.	283	0	0
907	11	engineered_DNA (obsolete SO:0000793)	\N	1205	1	0
219	11	polypeptide	A sequence of amino acids linked by peptide bonds which may lack appreciable tertiary structure and may not be liable to irreversible denaturation.	284	0	0
220	11	chromosome_arm	A region of the chromosome between the centromere and the telomere. Human chromosomes have two arms, the p arm (short) and the q arm (long) which are separated from each other by the centromere.	287	0	0
221	11	non_capped_primary_transcript (obsolete SO:0000106)	\N	289	1	0
222	11	sequencing_primer	\N	290	0	0
223	11	mRNA_with_frameshift	An mRNA with a frameshift.	291	0	0
224	11	sequence_variant_obs (obsolete SO:0000109)	A sequence_variant is a non exact copy of a sequence_feature or genome exhibiting one or more sequence_alteration.	292	1	0
225	11	sequence_feature	An extent of biological sequence.	293	0	0
226	11	transposable_element_gene	A gene encoded within a transposable element. For example gag, int, env and pol are the transposable element genes of the TY element in yeast.	294	0	0
227	11	primer	An oligo to which new deoxyribonucleotides can be added by DNA polymerase.	295	0	0
228	11	proviral_region	A viral sequence which has integrated into a host genome.	297	0	0
229	11	methylated_cytosine	A methylated deoxy-cytosine.	298	0	0
230	11	transcript_feature (obsolete SO:0000115)	\N	299	1	0
231	11	edited	An attribute describing a sequence that is modified by editing.	300	0	0
232	11	transcript_with_readthrough_stop_codon (obsolete SO:0000117)	\N	301	1	0
233	11	transcript_with_translational_frameshift	A transcript with a translational frameshift.	302	0	0
234	11	regulated	An attribute to describe a sequence that is regulated.	303	0	0
235	11	protein_coding_primary_transcript	A primary transcript that, at least in part, encodes one or more proteins.	304	0	0
236	11	forward_primer	A single stranded oligo used for polymerase chain reaction.	305	0	0
237	11	RNA_sequence_secondary_structure	A folded RNA sequence.	307	0	0
265	11	read	A sequence obtained from a single sequencing experiment. Typically a read is produced when a base calling program interprets information from a chromatogram trace file produced from a sequencing machine.	341	0	0
238	11	transcriptionally_regulated	An attribute describing a gene that is regulated at transcription.	308	0	0
257	11	DNA_sequence_secondary_structure	A folded DNA sequence.	331	0	0
239	11	transcriptionally_constitutive	Expressed in relatively constant amounts without regard to cellular environmental conditions such as the concentration of a particular substrate.	309	0	0
266	11	clone	A piece of DNA that has been inserted in a vector so that it can be propagated in a host bacterium or some other organism.	343	0	0
240	11	transcriptionally_induced	An inducer molecule is required for transcription to occur.	310	0	0
258	11	assembly_component	A region of known length which may be used to manufacture a longer region.	332	0	0
241	11	transcriptionally_repressed	A repressor molecule is required for transcription to stop.	311	0	0
267	11	YAC	Yeast Artificial Chromosome, a vector constructed from the telomeric, centromeric, and replication origin sequences needed for replication in yeast cells.	345	0	0
242	11	silenced_gene	A gene that is silenced.	312	0	0
259	11	primary_transcript_attribute (obsolete SO:0000144)	\N	333	1	0
243	11	gene_silenced_by_DNA_modification	A gene that is silenced by DNA modification.	313	0	0
260	11	recoded_codon	A codon that has been redefined at translation. The redefinition may be as a result of translational bypass, translational frameshifting or stop codon readthrough.	334	0	0
244	11	gene_silenced_by_DNA_methylation	A gene that is silenced by DNA methylation.	314	0	0
1545	11	isoleucine	\N	2186	0	0
261	11	capped	An attribute describing when a sequence, usually an mRNA is capped by the addition of a modified guanine nucleotide at the 5' end.	335	0	0
245	11	post_translationally_regulated	An attribute describing a gene that is regulated after it has been translated.	315	0	0
262	11	exon	A region of the transcript sequence within a gene which is not removed from the primary RNA transcript by RNA splicing.	336	0	0
263	11	supercontig	One or more contigs that have been ordered and oriented using end-read information. Contains gaps that are filled with N's.	338	0	0
246	11	translationally_regulated	An attribute describing a gene that is regulated as it is translated.	316	0	0
264	11	contig	A contiguous sequence derived from sequence assembly. Has no gaps, but may contain N's from unavailable bases.	339	0	0
247	11	reverse_primer	A single stranded oligo used for polymerase chain reaction.	317	0	0
1546	11	proline	\N	2187	0	0
268	11	BAC	Bacterial Artificial Chromosome, a cloning vector that can be propagated as mini-chromosomes in a bacterial host.	346	0	0
1547	11	tryptophan	\N	2188	0	0
248	11	epigenetically_modified	This attribute describes a gene where heritable changes other than those in the DNA sequence occur. These changes include: modification to the DNA (such as DNA methylation, the covalent modification of cytosine), and post-translational modification of histones.	318	0	0
249	11	genomically_imprinted	Imprinted genes are epigenetically modified genes that are expressed monoallelically according to their parent of origin.	319	0	0
250	11	maternally_imprinted	The maternal copy of the gene is modified, rendering it transcriptionally silent.	321	0	0
251	11	paternally_imprinted	The paternal copy of the gene is modified, rendering it transcriptionally silent.	322	0	0
252	11	allelically_excluded	Allelic exclusion is a process occurring in diploid organisms, where a gene is inactivated and not expressed in that cell.	323	0	0
253	11	gene_rearranged_at_DNA_level	An epigenetically modified gene, rearranged at the DNA level.	324	0	0
254	11	ribosome_entry_site	Region in mRNA where ribosome assembles.	325	0	0
255	11	attenuator	A sequence segment located within the five prime end of an mRNA that causes premature termination of translation.	326	0	0
256	11	terminator	The sequence of DNA located either at the end of the transcript that causes RNA polymerase to terminate transcription.	329	0	0
269	11	PAC	The P1-derived artificial chromosome are DNA constructs that are derived from the DNA of P1 bacteriophage. They can carry large amounts (about 100-300 kilobases) of other sequences for a variety of bioengineering purposes. It is one type of vector used to clone DNA fragments (100- to 300-kb insert size; average, 150 kb) in Escherichia coli cells.	347	0	0
270	11	plasmid	A self replicating, using the hosts cellular machinery, often circular nucleic acid molecule that is distinct from a chromosome in the organism.	349	0	0
271	11	cosmid	A cloning vector that is a hybrid of lambda phages and a plasmid that can be propagated as a plasmid or packaged as a phage,since they retain the lambda cos sites.	350	0	0
272	11	phagemid	A plasmid which carries within its sequence a bacteriophage replication origin. When the host bacterium is infected with "helper" phage, a phagemid is replicated along with the phage DNA and packaged into phage capsids.	352	0	0
273	11	fosmid	A cloning vector that utilizes the E. coli F factor.	354	0	0
274	11	deletion	The point at which one or more contiguous nucleotides were excised.	356	0	0
275	11	lambda_clone (obsolete SO:0000160)	A linear clone derived from lambda bacteriophage. The genes involved in the lysogenic pathway are removed from the from the viral DNA. Up to 25 kb of foreign DNA can then be inserted into the lambda genome.	360	1	0
276	11	methylated_adenine	A modified  base in which adenine has been methylated.	362	0	0
308	11	RFLP_fragment	A DNA fragment used as a reagent to detect the polymorphic genomic loci by hybridizing against the genomic DNA digested with a given restriction enzyme.	409	0	0
292	11	cross_genome_match	A nucleotide match against a sequence from another organism.	387	0	0
306	11	interior_intron	\N	407	0	0
293	11	operon	A group of contiguous genes transcribed as a single (polycistronic) mRNA from a single regulatory region.	388	0	0
294	11	clone_insert_start	The start of the clone insert.	390	0	0
277	11	splice_site	Consensus region of primary transcript bordering junction of splicing. A region that overlaps exactly 2 base and adjacent_to splice_junction.	363	0	0
302	11	repeat_family (obsolete SO:0000187)	A group of characterized repeat sequences.	402	1	0
278	11	five_prime_cis_splice_site	Intronic 2 bp region bordering the exon, at the 5' edge of the intron. A splice_site that is downstream_adjacent_to exon and starts intron.	366	0	0
295	11	retrotransposon	A transposable element that is incorporated into a chromosome by a mechanism that requires reverse transcriptase.	391	0	0
303	11	intron	A region of a primary transcript that is transcribed, but removed from within the transcript by splicing together the sequences (exons) on either side of it.	403	0	0
304	11	non_LTR_retrotransposon	A retrotransposon without long terminal repeat sequences.	405	0	0
296	11	translated_nucleotide_match	A match against a translated sequence.	394	0	0
279	11	three_prime_cis_splice_site	Intronic 2 bp region bordering the exon, at the 3' edge of the intron. A splice_site that is upstream_adjacent_to exon and finishes intron.	368	0	0
307	11	three_prime_intron	\N	408	0	0
297	11	DNA_transposon	A transposon where the mechanism of transposition is via a DNA intermediate.	395	0	0
305	11	five_prime_intron	\N	406	0	0
280	11	enhancer	A cis-acting sequence that increases the utilization of (some) eukaryotic promoters, and can function in either orientation and in any location (upstream or downstream) relative to the promoter.	369	0	0
281	11	enhancer_bound_by_factor	An enhancer bound by a factor.	371	0	0
282	11	promoter	A regulatory_region composed of the TSS(s) and binding sites for TF_complexes of the basal transcription machinery.	372	0	0
298	11	non_transcribed_region	A region of the gene which is not transcribed.	396	0	0
283	11	restriction_enzyme_cut_site (obsolete SO:0000168)	A specific nucleotide sequence of DNA at or near which a particular restriction enzyme cuts the DNA.	375	1	0
284	11	RNApol_I_promoter	A DNA sequence in eukaryotic DNA to which RNA polymerase I binds, to begin transcription.	376	0	0
311	11	five_prime_coding_exon_coding_region	The sequence of the five_prime_coding_exon that codes for protein.	414	0	0
309	11	LINE_element	A dispersed repeat family with many copies, each from 1 to 6 kb long. New elements are generated by retroposition of a transcribed copy. Typically the LINE contains 2 ORF's one of which is reverse transcriptase, and 3'and 5' direct repeats.	412	0	0
285	11	RNApol_II_promoter	A DNA sequence in eukaryotic DNA to which RNA polymerase II binds, to begin transcription.	377	0	0
299	11	U2_intron	A major type of spliceosomal intron spliced by the U2 spliceosome, that includes U1, U2, U4/U6 and U5 snRNAs.	397	0	0
300	11	primary_transcript	A transcript that in its initial state requires modification to be functional.	399	0	0
286	11	RNApol_III_promoter	A DNA sequence in eukaryotic DNA to which RNA polymerase III binds, to begin transcription.	378	0	0
310	11	coding_exon	An exon whereby at least one base is part of a codon (here, 'codon' is inclusive of the stop_codon).	413	0	0
301	11	LTR_retrotransposon	A retrotransposon flanked by long terminal repeat sequences.	401	0	0
287	11	CAAT_signal	Part of a conserved sequence located about 75-bp upstream of the start point of eukaryotic transcription units which may be involved in RNA polymerase binding; consensus=GG(C|T)CAATCT.	379	0	0
288	11	GC_rich_promoter_region	A conserved GC-rich region located upstream of the start point of eukaryotic transcription units which may occur in multiple copies or in either orientation; consensus=GGGCGG.	381	0	0
289	11	TATA_box	A conserved AT-rich septamer found about 25-bp before the start point of many eukaryotic RNA polymerase II transcript units; may be involved in positioning the enzyme for correct initiation; consensus=TATA(A|T)A(A|T).	382	0	0
290	11	minus_10_signal	A conserved region about 10-bp upstream of the start point of bacterial transcription units which may be involved in binding RNA polymerase; consensus=TAtAaT. This region is associated with sigma factor 70.	384	0	0
291	11	minus_35_signal	A conserved hexamer about 35-bp upstream of the start point of bacterial transcription units; consensus=TTGACa or TGTTGACA. This region is associated with sigma factor 70.	386	0	0
312	11	three_prime_coding_exon_coding_region	The sequence of the three_prime_coding_exon that codes for protein.	415	0	0
313	11	noncoding_exon	An exon that does not contain any codons.	416	0	0
314	11	translocation	A region of nucleotide sequence that has translocated to a new position.	417	0	0
315	11	five_prime_coding_exon	The 5' most coding exon.	418	0	0
316	11	interior_exon	An exon that is bounded by 5' and 3' splice sites.	419	0	0
347	11	snoRNA_primary_transcript	A primary transcript encoding a small nucleolar mRNA (SO:0000275).	455	0	0
317	11	three_prime_coding_exon	The coding exon that is most 3-prime on a given transcript.	421	0	0
358	11	internal_ribosome_entry_site	Sequence element that recruits a ribosomal subunit to internal mRNA for translation initiation.	469	0	0
318	11	UTR	Messenger RNA sequences that are untranslated and lie five prime or three prime to sequences which are translated.	422	0	0
348	11	mature_transcript	A transcript which has undergone the necessary modifications, if any, for its function. In eukaryotes this includes, for example, processing of introns, cleavage, base modification, and modifications to the 5' and/or the 3' ends, other than addition of bases. In bacteria functional mRNAs are usually not modified.	456	0	0
319	11	five_prime_UTR	A region at the 5' end of a mature transcript (preceding the initiation codon) that is not translated into a protein.	423	0	0
356	11	internal_UTR	A UTR bordered by the terminal and initial codons of two CDSs in a polycistronic transcript. Every UTR is either 5', 3' or internal.	467	0	0
349	11	mRNA	Messenger RNA is the intermediate molecule between DNA and protein. It includes UTR and coding sequences. It does not contain introns.	458	0	0
360	11	mRNA_by_polyadenylation_status (obsolete SO:0000245)	\N	472	1	0
320	11	three_prime_UTR	A region at the 3' end of a mature transcript (following the stop codon) that is not translated into a protein.	425	0	0
350	11	TF_binding_site	A region of a nucleotide molecule that binds a Transcription Factor or Transcription Factor complex [GO:0005667].	460	0	0
357	11	untranslated_region_polycistronic_mRNA	The untranslated sequence separating the 'cistrons' of multicistronic mRNA.	468	0	0
321	11	SINE_element	A repetitive element, a few hundred base pairs long, that is dispersed throughout the genome. A common human SINE is the Alu element.	427	0	0
361	11	polyadenylated	A attribute describing the addition of a poly A tail to the 3' end of a mRNA molecule.	473	0	0
351	11	ORF	The in-frame interval between the stop codons of a reading frame which when read as sequential triplets, has the potential of encoding a sequential string of amino acids. TER(NNN)nTER.	461	0	0
362	11	mRNA_not_polyadenylated (obsolete SO:0000247)	\N	474	1	0
322	11	simple_sequence_length_variation	\N	429	0	0
352	11	transcript_attribute	\N	463	0	0
323	11	terminal_inverted_repeat_element	A DNA transposable element defined as having termini with perfect, or nearly perfect short inverted repeats, generally 10 - 40 nucleotides long.	430	0	0
363	11	sequence_length_variation	\N	475	0	0
353	11	foldback_element	A transposable element with extensive secondary structure, characterized by large modular imperfect long inverted repeats.	464	0	0
324	11	rRNA_primary_transcript	A primary transcript encoding a ribosomal RNA.	432	0	0
365	11	modified_RNA_base_feature	A post_transcriptionally modified base.	477	0	0
354	11	flanking_region	The sequences extending on either side of a specific region.	465	0	0
325	11	tRNA_primary_transcript	A primary transcript encoding a transfer RNA (SO:0000253).	433	0	0
359	11	four_cutter_restriction_site (obsolete SO:0000244)	\N	471	1	0
326	11	alanine_tRNA_primary_transcript	A primary transcript encoding alanyl tRNA.	434	0	0
355	11	chromosome_variation	\N	466	0	0
327	11	arginine_tRNA_primary_transcript	A primary transcript encoding arginyl tRNA (SO:0000255).	435	0	0
328	11	asparagine_tRNA_primary_transcript	A primary transcript encoding asparaginyl tRNA (SO:0000256).	436	0	0
364	11	six_cutter_restriction_site (obsolete SO:0000249)	\N	476	1	0
329	11	aspartic_acid_tRNA_primary_transcript	A primary transcript encoding aspartyl tRNA (SO:0000257).	437	0	0
330	11	cysteine_tRNA_primary_transcript	A primary transcript encoding cysteinyl tRNA (SO:0000258).	438	0	0
331	11	glutamic_acid_tRNA_primary_transcript	A primary transcript encoding glutaminyl tRNA (SO:0000260).	439	0	0
332	11	glutamine_tRNA_primary_transcript	A primary transcript encoding glutamyl tRNA (SO:0000260).	440	0	0
333	11	glycine_tRNA_primary_transcript	A primary transcript encoding glycyl tRNA (SO:0000263).	441	0	0
334	11	histidine_tRNA_primary_transcript	A primary transcript encoding histidyl tRNA (SO:0000262).	442	0	0
335	11	isoleucine_tRNA_primary_transcript	A primary transcript encoding isoleucyl tRNA (SO:0000263).	443	0	0
336	11	leucine_tRNA_primary_transcript	A primary transcript encoding leucyl tRNA (SO:0000264).	444	0	0
337	11	lysine_tRNA_primary_transcript	A primary transcript encoding lysyl tRNA (SO:0000265).	445	0	0
338	11	methionine_tRNA_primary_transcript	A primary transcript encoding methionyl tRNA (SO:0000266).	446	0	0
339	11	phenylalanine_tRNA_primary_transcript	A primary transcript encoding phenylalanyl tRNA (SO:0000267).	447	0	0
340	11	proline_tRNA_primary_transcript	A primary transcript encoding prolyl tRNA (SO:0000268).	448	0	0
341	11	serine_tRNA_primary_transcript	A primary transcript encoding seryl tRNA (SO:000269).	449	0	0
342	11	threonine_tRNA_primary_transcript	A primary transcript encoding threonyl tRNA (SO:000270).	450	0	0
343	11	tryptophan_tRNA_primary_transcript	A primary transcript encoding tryptophanyl tRNA (SO:000271).	451	0	0
344	11	tyrosine_tRNA_primary_transcript	A primary transcript encoding tyrosyl tRNA (SO:000272).	452	0	0
345	11	valine_tRNA_primary_transcript	A primary transcript encoding valyl tRNA (SO:000273).	453	0	0
346	11	snRNA_primary_transcript	A primary transcript encoding a small nuclear RNA (SO:0000274).	454	0	0
367	11	rRNA	RNA that comprises part of a ribosome, and that can provide both structural scaffolding and catalytic activity.	479	0	0
368	11	tRNA	Transfer RNA (tRNA) molecules are approximately 80 nucleotides in length. Their secondary structure includes four short double-helical elements and three loops (D, anti-codon, and T loops). Further hydrogen bonds mediate the characteristic L-shaped molecular structure. Transfer RNAs have two regions of fundamental functional importance: the anti-codon, which is responsible for specific mRNA codon recognition, and the 3' end, to which the tRNA's corresponding amino acid is attached (by aminoacyl-tRNA synthetases). Transfer RNAs cope with the degeneracy of the genetic code in two manners: having more than one tRNA (with a specific anti-codon) for a particular amino acid; and 'wobble' base-pairing, i.e. permitting non-standard base-pairing at the 3rd anti-codon position.	482	0	0
369	11	alanyl_tRNA	A tRNA sequence that has an alanine anticodon, and a 3' alanine binding region.	485	0	0
370	11	rRNA_small_subunit_primary_transcript	A primary transcript encoding a small ribosomal subunit RNA.	486	0	0
371	11	asparaginyl_tRNA	A tRNA sequence that has an asparagine anticodon, and a 3' asparagine binding region.	487	0	0
372	11	aspartyl_tRNA	A tRNA sequence that has an aspartic acid anticodon, and a 3' aspartic acid binding region.	488	0	0
373	11	cysteinyl_tRNA	A tRNA sequence that has a cysteine anticodon, and a 3' cysteine binding region.	489	0	0
374	11	glutaminyl_tRNA	A tRNA sequence that has a glutamine anticodon, and a 3' glutamine binding region.	490	0	0
375	11	glutamyl_tRNA	A tRNA sequence that has a glutamic acid anticodon, and a 3' glutamic acid binding region.	491	0	0
376	11	glycyl_tRNA	A tRNA sequence that has a glycine anticodon, and a 3' glycine binding region.	492	0	0
377	11	histidyl_tRNA	A tRNA sequence that has a histidine anticodon, and a 3' histidine binding region.	493	0	0
378	11	isoleucyl_tRNA	A tRNA sequence that has an isoleucine anticodon, and a 3' isoleucine binding region.	494	0	0
379	11	leucyl_tRNA	A tRNA sequence that has a leucine anticodon, and a 3' leucine binding region.	495	0	0
380	11	lysyl_tRNA	A tRNA sequence that has a lysine anticodon, and a 3' lysine binding region.	496	0	0
381	11	methionyl_tRNA	A tRNA sequence that has a methionine anticodon, and a 3' methionine binding region.	497	0	0
382	11	phenylalanyl_tRNA	A tRNA sequence that has a phenylalanine anticodon, and a 3' phenylalanine binding region.	498	0	0
383	11	prolyl_tRNA	A tRNA sequence that has a proline anticodon, and a 3' proline binding region.	499	0	0
384	11	seryl_tRNA	A tRNA sequence that has a serine anticodon, and a 3' serine binding region.	500	0	0
385	11	threonyl_tRNA	A tRNA sequence that has a threonine anticodon, and a 3' threonine binding region.	501	0	0
386	11	tryptophanyl_tRNA	A tRNA sequence that has a tryptophan anticodon, and a 3' tryptophan binding region.	502	0	0
387	11	tyrosyl_tRNA	A tRNA sequence that has a tyrosine anticodon, and a 3' tyrosine binding region.	503	0	0
388	11	valyl_tRNA	A tRNA sequence that has a valine anticodon, and a 3' valine binding region.	504	0	0
389	11	snRNA	A small nuclear RNA molecule involved in pre-mRNA splicing and processing.	505	0	0
390	11	snoRNA	A snoRNA (small nucleolar RNA) is any one of a class of small RNAs that are associated with the eukaryotic nucleus as components of small nucleolar ribonucleoproteins. They participate in the processing or modifications of many RNAs, mostly ribosomal RNAs (rRNAs) though snoRNAs are also known to target other classes of RNA, including spliceosomal RNAs, tRNAs, and mRNAs via a stretch of sequence that is complementary to a sequence in the targeted RNA.	509	0	0
391	11	miRNA	Small, ~22-nt, RNA molecule that is the endogenous transcript of a miRNA gene. Micro RNAs are produced from precursor molecules (SO:0000647) that can form local hairpin structures, which ordinarily are processed (via the Dicer pathway) such that a single miRNA molecule accumulates from one arm of a hairpin precursor molecule. Micro RNAs may trigger the cleavage of their target molecules or act as translational repressors.	512	0	0
392	11	bound_by_factor	An attribute describing a sequence that is bound by another molecule.	515	0	0
393	11	transcript_bound_by_nucleic_acid	A transcript that is bound by a nucleic acid.	516	0	0
394	11	transcript_bound_by_protein	A transcript that is bound by a protein.	517	0	0
395	11	engineered_gene	A gene that is engineered.	518	0	0
396	11	engineered_foreign_gene	A gene that is engineered and foreign.	519	0	0
397	11	mRNA_with_minus_1_frameshift	An mRNA with a minus 1 frameshift.	520	0	0
398	11	engineered_foreign_transposable_element_gene	A transposable_element that is engineered and foreign.	521	0	0
399	11	type_I_enzyme_restriction_site (obsolete SO:0000284)	The recognition site is bipartite and interrupted.	522	1	0
400	11	foreign_gene	A gene that is foreign.	524	0	0
401	11	long_terminal_repeat	A sequence directly repeated at both ends of a defined sequence, of the sort typically found in retroviruses.	525	0	0
402	11	fusion_gene	A gene that is a fusion.	527	0	0
403	11	engineered_fusion_gene	A fusion gene that is engineered.	529	0	0
404	11	microsatellite	A repeat_region containing repeat_units (2 to 4 bp) that is repeated multiple times in tandem.	530	0	0
405	11	dinucleotide_repeat_microsatellite_feature	\N	533	0	0
406	11	trinucleotide_repeat_microsatellite_feature	\N	534	0	0
407	11	repetitive_element (obsolete SO:0000292)	\N	535	1	0
408	11	engineered_foreign_repetitive_element	A repetitive element that is engineered and foreign.	536	0	0
409	11	inverted_repeat	The sequence is complementarily repeated on the opposite strand. It is a palindrome, and it may, or may not be hyphenated. Examples: GCTGATCAGC, or GCTGA-----TCAGC.	537	0	0
410	11	U12_intron	A type of spliceosomal intron spliced by the U12 spliceosome, that includes U11, U12, U4atac/U6atac and U5 snRNAs.	539	0	0
411	11	origin_of_replication	The origin of replication; starting site for duplication of a nucleic acid molecule to give two identical copies.	540	0	0
521	11	rRNA_18S	A large polynucleotide in eukaryotes, which functions as the small subunit of the ribosome.	727	0	0
522	11	site (obsolete SO:0000408)	The interbase position where something (eg an aberration) occurred.	729	1	0
1548	11	phenylalanine	\N	2189	0	0
412	11	D_loop	Displacement loop; a region within mitochondrial DNA in which a short stretch of RNA is paired with one strand of DNA, displacing the original partner DNA strand in this region; also used to describe the displacement of a region of one strand of duplex DNA by a single stranded invader in the reaction catalyzed by RecA protein.	542	0	0
413	11	recombination_feature	\N	544	0	0
414	11	specific_recombination_site	\N	545	0	0
415	11	recombination_feature_of_rearranged_gene	\N	546	0	0
416	11	vertebrate_immune_system_gene_recombination_feature	\N	547	0	0
417	11	J_gene_recombination_feature	Recombination signal including J-heptamer, J-spacer and J-nonamer in 5' of J-region of a J-gene or J-sequence.	548	0	0
418	11	clip	Part of the primary transcript that is clipped off during processing.	550	0	0
419	11	type_II_enzyme_restriction_site (obsolete SO:0000304)	The recognition site is either palindromic, partially palindromic or an interrupted palindrome. Cleavage occurs within the recognition site.	551	1	0
420	11	modified_DNA_base	A modified nucleotide, i.e. a nucleotide other than A, T, C. G.	552	0	0
421	11	methylated_DNA_base_feature	A nucleotide modified by methylation.	553	0	0
422	11	CpG_island	Regions of a few hundred to a few thousand bases in vertebrate genomes that are relatively GC and CpG rich; they are typically unmethylated and often found near the 5' ends of genes.	554	0	0
423	11	sequence_feature_locating_method (obsolete SO:0000308)	\N	556	1	0
424	11	computed_feature (obsolete SO:0000309)	\N	557	1	0
425	11	predicted_ab_initio_computation (obsolete SO:0000310)	\N	558	1	0
426	11	computed_feature_by_similarity (obsolete SO:0000311)	.	559	1	0
427	11	experimentally_determined	Attribute to describe a feature that has been experimentally verified.	560	0	0
428	11	stem_loop	A double-helical region of nucleic acid formed by base-pairing between adjacent (inverted) complementary sequences.	561	0	0
429	11	direct_repeat	A repeat where the same sequence is repeated in the same direction. Example: GCTGA-----GCTGA.	564	0	0
430	11	TSS	The first base where RNA polymerase begins to synthesize the RNA transcript.	566	0	0
431	11	CDS	A contiguous sequence which begins with, and includes, a start codon and ends with, and includes, a stop codon.	567	0	0
432	11	cDNA_clone	Complementary DNA; A piece of DNA copied from an mRNA and spliced into a vector for propagation in a suitable host.	568	0	0
433	11	start_codon	First codon to be translated by a ribosome.	570	0	0
434	11	stop_codon	In mRNA, a set of three nucleotides that indicates the end of information for protein synthesis.	572	0	0
435	11	intronic_splice_enhancer	Sequences within the intron that modulate splice site selection for some introns.	574	0	0
436	11	mRNA_with_plus_1_frameshift	An mRNA with a plus 1 frameshift.	575	0	0
437	11	nuclease_hypersensitive_site	\N	576	0	0
438	11	coding_start	The first base to be translated into protein.	577	0	0
439	11	tag	A nucleotide sequence that may be used to identify a larger sequence.	578	0	0
440	11	rRNA_large_subunit_primary_transcript	A primary transcript encoding a large ribosomal subunit RNA.	579	0	0
441	11	SAGE_tag	A short diagnostic sequence tag, serial analysis of gene expression (SAGE), that allows the quantitative and simultaneous analysis of a large number of transcripts.	580	0	0
442	11	coding_end	The last base to be translated into protein. It does not include the stop codon.	582	0	0
443	11	microarray_oligo	\N	583	0	0
444	11	mRNA_with_plus_2_frameshift	An mRNA with a plus 2 frameshift.	584	0	0
445	11	conserved_region	Region of sequence similarity by descent from a common ancestor.	585	0	0
446	11	STS	Short (typically a few hundred base pairs) DNA sequence that has a single occurrence in a genome and whose location and base sequence are known.	587	0	0
447	11	coding_conserved_region	Coding region of sequence similarity by descent from a common ancestor.	589	0	0
448	11	exon_junction	The boundary between two exons in a processed transcript.	590	0	0
449	11	nc_conserved_region	Non-coding region of sequence similarity by descent from a common ancestor.	591	0	0
450	11	mRNA_with_minus_2_frameshift	A mRNA with a minus 2 frameshift.	592	0	0
451	11	pseudogene	A sequence that closely resembles a known functional gene, at another locus within a genome, that is non-functional as a consequence of (usually several) mutations that prevent either its transcription or translation (or both). In general, pseudogenes result from either reverse transcription of a transcript of their "normal" paralog (SO:0000043) (in which case the pseudogene typically lacks introns and includes a poly(A) tail) or from recombination (SO:0000044) (in which case the pseudogene is typically a tandem duplication of its "normal" paralog).	593	0	0
452	11	RNAi_reagent	A double stranded RNA duplex, at least 20bp long, used experimentally to inhibit gene function by RNA interference.	595	0	0
453	11	MITE	A highly repetitive and short (100-500 base pair) transposable element with terminal inverted repeats (TIR) and target site duplication (TSD). MITEs do not encode proteins.	596	0	0
454	11	recombination_hotspot	A region in a genome which promotes recombination.	598	0	0
455	11	chromosome	Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication.	600	0	0
456	11	chromosome_band	A cytologically distinguishable feature of a chromosome, often made visible by staining, and usually alternating light and dark.	602	0	0
457	11	site_specific_recombination_target_region	\N	604	0	0
458	11	match	A region of sequence, aligned to another sequence with some statistical significance, using an algorithm such as BLAST or SIM4.	605	0	0
459	11	splice_enhancer	Region of a transcript that regulates splicing.	606	0	0
460	11	EST	A tag produced from a single sequencing read from a cDNA clone or PCR product; typically a few hundred base pairs long.	607	0	0
461	11	loxP_site	\N	608	0	0
462	11	nucleotide_match	A match against a nucleotide sequence.	609	0	0
622	11	D_DJ_J_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one D-gene, one DJ-gene, and one J-gene.	845	0	0
463	11	nucleic_acid	An attribute describing a sequence consisting of nucleobases bound to repeating units. The forms found in nature are deoxyribonucleic acid (DNA), where the repeating units are 2-deoxy-D-ribose rings connected to a phosphate backbone, and ribonucleic acid (RNA), where the repeating units are D-ribose rings connected to a phosphate backbone.	610	0	0
464	11	protein_match	A match against a protein sequence.	614	0	0
465	11	FRT_site	An inversion site found on the Saccharomyces cerevisiae 2 micron plasmid.	615	0	0
466	11	synthetic_sequence	An attribute to decide a sequence of nucleotides, nucleotide analogs, or amino acids that has been designed by an experimenter and which may, or may not, correspond with any natural sequence.	616	0	0
467	11	DNA	An attribute describing a sequence consisting of nucleobases bound to a repeating unit made of a 2-deoxy-D-ribose ring connected to a phosphate backbone.	617	0	0
468	11	sequence_assembly	A sequence of nucleotides that has been algorithmically derived from an alignment of two or more different sequences.	618	0	0
469	11	group_1_intron_homing_endonuclease_target_region	A region of intronic nucleotide sequence targeted by a nuclease enzyme.	620	0	0
470	11	haplotype_block	A region of the genome which is co-inherited as the result of the lack of historic recombination within it.	621	0	0
471	11	RNA	An attribute describing a sequence consisting of nucleobases bound to a repeating unit made of a D-ribose ring connected to a phosphate backbone.	622	0	0
472	11	flanked	An attribute describing a region that is bounded either side by a particular kind of region.	623	0	0
473	11	floxed	An attribute describing sequence that is flanked by Lox-P sites.	624	0	0
474	11	codon	A set of (usually) three nucleotide bases in a DNA or RNA sequence, which together code for a unique amino acid or the termination of translation and are contained within the CDS.	626	0	0
475	11	FRT_flanked	An attribute to describe sequence that is flanked by the FLP recombinase recognition site, FRT.	629	0	0
476	11	invalidated_by_chimeric_cDNA	A cDNA clone constructed from more than one mRNA. Usually an experimental artifact.	630	0	0
477	11	floxed_gene	A transgene that is floxed.	631	0	0
478	11	transposable_element_flanking_region	The region of sequence surrounding a transposable element.	632	0	0
479	11	integron	A region encoding an integrase which acts at a site adjacent to it (attI_site) to insert DNA which must include but is not limited to an attC_site.	633	0	0
480	11	insertion_site	The junction where an insertion occurred.	635	0	0
481	11	attI_site	A region within an integron, adjacent to an integrase, at which site specific recombination involving an attC_site takes place.	636	0	0
482	11	transposable_element_insertion_site	The junction in a genome where a transposable_element has inserted.	637	0	0
483	11	integrase_coding_region (obsolete SO:0000369)	\N	638	1	0
484	11	small_regulatory_ncRNA	A non-coding RNA, usually with a specific secondary structure, that acts to regulate gene expression.	639	0	0
485	11	conjugative_transposon	A transposon that encodes function required for conjugation.	640	0	0
486	11	enzymatic_RNA	An RNA sequence that has catalytic activity with or without an associated ribonucleoprotein.	642	0	0
487	11	recombinationally_inverted_gene	A recombinationally rearranged gene by inversion.	643	0	0
488	11	ribozyme	An RNA with catalytic activity.	644	0	0
489	11	rRNA_5_8S	5_8S ribosomal RNA (5. 8S rRNA) is a component of the large subunit of the eukaryotic ribosome. It is transcribed by RNA polymerase I as part of the 45S precursor that also contains 18S and 28S rRNA. Functionally, it is thought that 5.8S rRNA may be involved in ribosome translocation. It is also known to form covalent linkage to the p53 tumour suppressor protein. 5_8S rRNA is also found in archaea.	646	0	0
490	11	RNA_6S	A small (184-nt in E. coli) RNA that forms a hairpin type structure. 6S RNA associates with RNA polymerase in a highly specific manner. 6S RNA represses expression from a sigma70-dependent promoter during stationary phase.	649	0	0
491	11	CsrB_RsmB_RNA	An enterobacterial RNA that binds the CsrA protein. The CsrB RNAs contain a conserved motif CAGGXXG that is found in up to 18 copies and has been suggested to bind CsrA. The Csr regulatory system has a strong negative regulatory effect on glycogen biosynthesis, glyconeogenesis and glycogen catabolism and a positive regulatory effect on glycolysis. In other bacteria such as Erwinia caratovara the RsmA protein has been shown to regulate the production of virulence determinants, such extracellular enzymes. RsmA binds to RsmB regulatory RNA which is also a member of this family.	652	0	0
492	11	DsrA_RNA	DsrA RNA regulates both transcription, by overcoming transcriptional silencing by the nucleoid-associated H-NS protein, and translation, by promoting efficient translation of the stress sigma factor, RpoS. These two activities of DsrA can be separated by mutation: the first of three stem-loops of the 85 nucleotide RNA is necessary for RpoS translation but not for anti-H-NS action, while the second stem-loop is essential for antisilencing and less critical for RpoS translation. The third stem-loop, which behaves as a transcription terminator, can be substituted by the trp transcription terminator without loss of either DsrA function. The sequence of the first stem-loop of DsrA is complementary with the upstream leader portion of RpoS messenger RNA, suggesting that pairing of DsrA with the RpoS message might be important for translational regulation.	654	0	0
493	11	GcvB_RNA	A small untranslated RNA involved in expression of the dipeptide and oligopeptide transport systems in Escherichia coli.	657	0	0
494	11	hammerhead_ribozyme	A small catalytic RNA motif that catalyzes self-cleavage reaction. Its name comes from its secondary structure which resembles a carpenter's hammer. The hammerhead ribozyme is involved in the replication of some viroid and some satellite RNAs.	660	0	0
495	11	group_IIA_intron	\N	663	0	0
496	11	group_IIB_intron	\N	664	0	0
497	11	MicF_RNA	A non-translated 93 nt antisense RNA that binds its target ompF mRNA and regulates ompF expression by inhibiting translation and inducing degradation of the message.	665	0	0
498	11	OxyS_RNA	A small untranslated RNA which is induced in response to oxidative stress in Escherichia coli. Acts as a global regulator to activate or repress the expression of as many as 40 genes, including the fhlA-encoded transcriptional activator and the rpoS-encoded sigma(s) subunit of RNA polymerase. OxyS is bound by the Hfq protein, that increases the OxyS RNA interaction with its target messages.	668	0	0
499	11	RNase_MRP_RNA	The RNA molecule essential for the catalytic activity of RNase MRP, an enzymatically active ribonucleoprotein with two distinct roles in eukaryotes. In mitochondria it plays a direct role in the initiation of mitochondrial DNA replication. In the nucleus it is involved in precursor rRNA processing, where it cleaves the internal transcribed spacer 1 between 18S and 5.8S rRNAs.	671	0	0
500	11	RNase_P_RNA	The RNA component of Ribonuclease P (RNase P), a ubiquitous endoribonuclease, found in archaea, bacteria and eukarya as well as chloroplasts and mitochondria. Its best characterized activity is the generation of mature 5 prime ends of tRNAs by cleaving the 5 prime leader elements of precursor-tRNAs. Cellular RNase Ps are ribonucleoproteins. RNA from bacterial RNase Ps retains its catalytic activity in the absence of the protein subunit, i.e. it is a ribozyme. Isolated eukaryotic and archaeal RNase P RNA has not been shown to retain its catalytic function, but is still essential for the catalytic activity of the holoenzyme. Although the archaeal and eukaryotic holoenzymes have a much greater protein content than the bacterial ones, the RNA cores from all the three lineages are homologous. Helices corresponding to P1, P2, P3, P4, and P10/11 are common to all cellular RNase P RNAs. Yet, there is considerable sequence variation, particularly among the eukaryotic RNAs.	673	0	0
501	11	RprA_RNA	Translational regulation of the stationary phase sigma factor RpoS is mediated by the formation of a double-stranded RNA stem-loop structure in the upstream region of the rpoS messenger RNA, occluding the translation initiation site. Clones carrying rprA (RpoS regulator RNA) increased the translation of RpoS. The rprA gene encodes a 106 nucleotide regulatory RNA. As with DsrA Rfam:RF00014, RprA is predicted to form three stem-loops. Thus, at least two small RNAs, DsrA and RprA, participate in the positive regulation of RpoS translation. Unlike DsrA, RprA does not have an extensive region of complementarity to the RpoS leader, leaving its mechanism of action unclear. RprA is non-essential.	675	0	0
502	11	RRE_RNA	The Rev response element (RRE) is encoded within the HIV-env gene. Rev is an essential regulatory protein of HIV that binds an internal loop of the RRE leading, encouraging further Rev-RRE binding. This RNP complex is critical for mRNA export and hence for expression of the HIV structural proteins.	678	0	0
503	11	spot_42_RNA	A 109-nucleotide RNA of E. coli that seems to have a regulatory role on the galactose operon. Changes in Spot 42 levels are implicated in affecting DNA polymerase I levels.	680	0	0
504	11	telomerase_RNA	The RNA component of telomerase, a reverse transcriptase that synthesizes telomeric DNA.	683	0	0
505	11	U1_snRNA	U1 is a small nuclear RNA (snRNA) component of the spliceosome (involved in pre-mRNA splicing). Its 5' end forms complementary base pairs with the 5' splice junction, thus defining the 5' donor site of an intron. There are significant differences in sequence and secondary structure between metazoan and yeast U1 snRNAs, the latter being much longer (568 nucleotides as compared to 164 nucleotides in human). Nevertheless, secondary structure predictions suggest that all U1 snRNAs share a 'common core' consisting of helices I, II, the proximal region of III, and IV.	686	0	0
506	11	U2_snRNA	U2 is a small nuclear RNA (snRNA) component of the spliceosome (involved in pre-mRNA splicing). Complementary binding between U2 snRNA (in an area lying towards the 5' end but 3' to hairpin I) and the branchpoint sequence (BPS) of the intron results in the bulging out of an unpaired adenine, on the BPS, which initiates a nucleophilic attack at the intronic 5' splice site, thus starting the first of two transesterification reactions that mediate splicing.	689	0	0
507	11	U4_snRNA	U4 small nuclear RNA (U4 snRNA) is a component of the major U2-dependent spliceosome. It forms a duplex with U6, and with each splicing round, it is displaced from U6 (and the spliceosome) in an ATP-dependent manner, allowing U6 to refold and create the active site for splicing catalysis. A recycling process involving protein Prp24 re-anneals U4 and U6.	692	0	0
508	11	U4atac_snRNA	An snRNA required for the splicing of the minor U12-dependent class of eukaryotic nuclear introns. It forms a base paired complex with U6atac_snRNA (SO:0000397).	695	0	0
509	11	U5_snRNA	U5 RNA is a component of both types of known spliceosome. The precise function of this molecule is unknown, though it is known that the 5' loop is required for splice site selection and p220 binding, and that both the 3' stem-loop and the Sm site are important for Sm protein binding and cap methylation.	697	0	0
510	11	U6_snRNA	U6 snRNA is a component of the spliceosome which is involved in splicing pre-mRNA. The putative secondary structure consensus base pairing is confined to a short 5' stem loop, but U6 snRNA is thought to form extensive base-pair interactions with U4 snRNA.	700	0	0
511	11	U6atac_snRNA	U6atac_snRNA is an snRNA required for the splicing of the minor U12-dependent class of eukaryotic nuclear introns. It forms a base paired complex with U4atac_snRNA (SO:0000394).	702	0	0
512	11	U11_snRNA	U11 snRNA plays a role in splicing of the minor U12-dependent class of eukaryotic nuclear introns, similar to U1 snRNA in the major class spliceosome it base pairs to the conserved 5' splice site sequence.	704	0	0
513	11	U12_snRNA	The U12 small nuclear (snRNA), together with U4atac/U6atac, U5, and U11 snRNAs and associated proteins, forms a spliceosome that cleaves a divergent class of low-abundance pre-mRNA introns.	707	0	0
514	11	sequence_attribute	An attribute describes a quality of sequence.	710	0	0
515	11	gene_attribute	\N	711	0	0
516	11	enhancer_attribute (obsolete SO:0000402)	\N	712	1	0
517	11	U14_snoRNA	U14 small nucleolar RNA (U14 snoRNA) is required for early cleavages of eukaryotic precursor rRNAs. In yeasts, this molecule possess a stem-loop region (known as the Y-domain) which is essential for function. A similar structure, but with a different consensus sequence, is found in plants, but is absent in vertebrates.	713	0	0
518	11	vault_RNA	A family of RNAs are found as part of the enigmatic vault ribonucleoprotein complex. The complex consists of a major vault protein (MVP), two minor vault proteins (VPARP and TEP1), and several small untranslated RNA molecules. It has been suggested that the vault complex is involved in drug resistance.	717	0	0
519	11	Y_RNA	Y RNAs are components of the Ro ribonucleoprotein particle (Ro RNP), in association with Ro60 and La proteins. The Y RNAs and Ro60 and La proteins are well conserved, but the function of the Ro RNP is not known. In humans the RNA component can be one of four small RNAs: hY1, hY3, hY4 and hY5. These small RNAs are predicted to fold into a conserved secondary structure containing three stem structures. The largest of the four, hY1, contains an additional hairpin.	720	0	0
520	11	twintron	An intron within an intron. Twintrons are group II or III introns, into which another group II or III intron has been transposed.	723	0	0
1549	11	methionine	\N	2190	0	0
523	11	binding_site	A biological_region of sequence that, in the molecule, interacts selectively and non-covalently with other molecules. A region on the surface of a molecule that may interact with another molecule. When applied to polypeptides: Amino acids involved in binding or interactions. It can also apply to an amino acid bond which is represented by the positions of the two flanking amino acids.	730	0	0
524	11	protein_binding_site	A binding site that, in the molecule, interacts selectively and non-covalently with polypeptide molecules.	734	0	0
525	11	rescue_region	A region that rescues.	735	0	0
526	11	restriction_fragment	A region of polynucleotide sequence produced by digestion with a restriction endonuclease.	736	0	0
527	11	sequence_difference	A region where the sequence differs from that of a specified sequence.	738	0	0
528	11	invalidated_by_genomic_contamination	An attribute to describe a feature that is invalidated due to genomic contamination.	739	0	0
529	11	invalidated_by_genomic_polyA_primed_cDNA	An attribute to describe a feature that is invalidated due to polyA priming.	740	0	0
530	11	invalidated_by_partial_processing	An attribute to describe a feature that is invalidated due to partial processing.	741	0	0
531	11	polypeptide_domain	A structurally or functionally defined protein region. In proteins with multiple domains, the combination of the domains determines the function of the protein. A region which has been shown to recur throughout evolution.	742	0	0
1080	11	sequence_replication_mode (obsolete SO:0000968)	\N	1397	1	0
532	11	signal_peptide	The signal_peptide is a short region of the peptide located at the N-terminus that directs the protein to be secreted or part of membrane components.	746	0	0
556	11	ds_oligo	A double stranded oligonucleotide.	775	0	0
568	11	rasiRNA	A 17-28-nt, small interfering RNA derived from transcripts of repetitive elements.	787	0	0
576	11	pseudogenic_region	A non-functional descendent of a functional entity.	798	0	0
533	11	mature_protein_region	The polypeptide sequence that remains when the cleaved peptide regions have been cleaved from the immature peptide.	749	0	0
569	11	gene_with_mRNA_with_frameshift	A gene that encodes an mRNA with a frameshift.	790	0	0
557	11	polymer_attribute	An attribute to describe the kind of biological sequence.	776	0	0
573	11	gene_with_trans_spliced_transcript	A gene with a transcript that is trans-spliced.	794	0	0
534	11	five_prime_terminal_inverted_repeat	\N	751	0	0
558	11	three_prime_noncoding_exon	Non-coding exon in the 3' UTR.	777	0	0
570	11	recombinationally_rearranged_gene	A gene that is recombinationally rearranged.	791	0	0
535	11	three_prime_terminal_inverted_repeat	\N	752	0	0
559	11	five_prime_noncoding_exon	Non-coding exon in the 5' UTR.	778	0	0
574	11	vertebrate_immunoglobulin_T_cell_receptor_segment	\N	795	0	0
536	11	U5_LTR_region	\N	753	0	0
571	11	interchromosomal_duplication	A chromosome duplication involving an insertion from another chromosome.	792	0	0
537	11	R_LTR_region	\N	754	0	0
560	11	UTR_intron	Intron located in the untranslated region.	779	0	0
572	11	D_gene_segment	Germline genomic DNA including D-region with 5' UTR and 3' UTR, also designated as D-segment.	793	0	0
538	11	U3_LTR_region	\N	755	0	0
561	11	five_prime_UTR_intron	An intron located in the 5' UTR.	780	0	0
575	11	inversion_derived_bipartite_deficiency	A chromosomal deletion whereby a chromosome generated by recombination between two inversions; has a deficiency at each end of the inversion.	796	0	0
539	11	five_prime_LTR	\N	756	0	0
562	11	three_prime_UTR_intron	An intron located in the 3' UTR.	781	0	0
577	11	encodes_alternately_spliced_transcripts	A gene that encodes more than one transcript.	799	0	0
563	11	random_sequence	A sequence of nucleotides or amino acids which, by design, has a "random" order of components, given a predetermined input frequency of these components.	782	0	0
540	11	three_prime_LTR	\N	757	0	0
578	11	decayed_exon	A non-functional descendant of an exon.	800	0	0
564	11	interband	A light region between two darkly staining bands in a polytene chromosome.	783	0	0
541	11	R_five_prime_LTR_region	\N	758	0	0
565	11	gene_with_polyadenylated_mRNA	A gene that encodes a polyadenylated mRNA.	784	0	0
840	11	repeat_unit	The simplest repeated component of a repeat region. A single repeat.	1123	0	0
542	11	U5_five_prime_LTR_region	\N	759	0	0
566	11	transgene_attribute (obsolete SO:0000452)	\N	785	1	0
567	11	chromosomal_transposition	A chromosome structure variant whereby a region of a chromosome has been transferred to another position. Among interchromosomal rearrangements, the term transposition is reserved for that class in which the telomeres of the chromosomes involved are coupled (that is to say, form the two ends of a single DNA molecule) as in wild-type.	786	0	0
543	11	U3_five_prime_LTR_region	\N	760	0	0
544	11	R_three_prime_LTR_region	\N	761	0	0
545	11	U3_three_prime_LTR_region	\N	762	0	0
546	11	U5_three_prime_LTR_region	\N	763	0	0
547	11	non_LTR_retrotransposon_polymeric_tract	A polymeric tract, such as poly(dA), within a non_LTR_retrotransposon.	764	0	0
548	11	target_site_duplication	A sequence of the target DNA that is duplicated when a transposable element or phage inserts; usually found at each end the insertion.	765	0	0
549	11	RR_tract	A polypurine tract within an LTR_retrotransposon.	767	0	0
550	11	ARS	A sequence that can autonomously replicate, as a plasmid, when transformed into a bacterial host.	768	0	0
551	11	assortment_derived_duplication (obsolete SO:0000437)	\N	769	1	0
552	11	gene_not_polyadenylated (obsolete SO:0000438)	\N	770	1	0
553	11	inverted_ring_chromosome	\N	771	0	0
554	11	vector_replicon	A replicon that has been modified to act as a vector for foreign sequence.	772	0	0
555	11	ss_oligo	A single stranded oligonucleotide.	774	0	0
579	11	inversion_derived_deficiency_plus_duplication	A chromosome deletion whereby a chromosome is generated by recombination between two inversions; there is a deficiency at one end of the inversion and a duplication at the other end of the inversion.	801	0	0
580	11	V_gene_segment	Germline genomic DNA including L-part1, V-intron and V-exon, with the 5' UTR and 3' UTR.	802	0	0
581	11	post_translationally_regulated_by_protein_stability	An attribute describing a gene sequence where the resulting protein is regulated by the stability of the resulting protein.	803	0	0
582	11	golden_path_fragment	One of the pieces of sequence that make up a golden path.	804	0	0
583	11	post_translationally_regulated_by_protein_modification	An attribute describing a gene sequence where the resulting protein is modified to regulate it.	805	0	0
584	11	J_gene_segment	Germline genomic DNA of an immunoglobulin/T-cell receptor gene including J-region with 5' UTR (SO:0000204) and 3' UTR (SO:0000205), also designated as J-segment.	806	0	0
585	11	autoregulated	The gene product is involved in its own transcriptional regulation.	807	0	0
586	11	tiling_path	A set of regions which overlap with minimal polymorphism to form a linear sequence.	808	0	0
587	11	negatively_autoregulated	The gene product is involved in its own transcriptional regulation where it decreases transcription.	809	0	0
588	11	tiling_path_fragment	A piece of sequence that makes up a tiling_path (SO:0000472).	810	0	0
589	11	positively_autoregulated	The gene product is involved in its own transcriptional regulation, where it increases transcription.	811	0	0
590	11	contig_read	A DNA sequencer read which is part of a contig.	812	0	0
591	11	polycistronic_gene (obsolete SO:0000477)	A gene that is polycistronic.	813	1	0
592	11	C_gene_segment	Genomic DNA of immunoglobulin/T-cell receptor gene including C-region (and introns if present) with 5' UTR (SO:0000204) and 3' UTR (SO:0000205).	814	0	0
593	11	trans_spliced_transcript	A transcript that is trans-spliced.	815	0	0
594	11	tiling_path_clone	A clone which is part of a tiling path. A tiling path is a set of sequencing substrates, typically clones, which have been selected in order to efficiently cover a region of the genome in preparation for sequencing and assembly.	816	0	0
595	11	terminal_inverted_repeat	An inverted repeat (SO:0000294) occurring at the termini of a DNA transposon.	817	0	0
596	11	vertebrate_immunoglobulin_T_cell_receptor_gene_cluster	\N	818	0	0
597	11	nc_primary_transcript	A primary transcript that is never translated into a protein.	819	0	0
598	11	three_prime_coding_exon_noncoding_region	The sequence of the 3' exon that is not coding.	820	0	0
599	11	DJ_J_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one DJ-gene, and one J-gene.	821	0	0
600	11	five_prime_coding_exon_noncoding_region	The sequence of the 5' exon preceding the start codon.	822	0	0
601	11	VDJ_J_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one VDJ-gene, one J-gene and one C-gene.	823	0	0
602	11	VDJ_J_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one VDJ-gene and one J-gene.	824	0	0
603	11	VJ_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one VJ-gene and one C-gene.	825	0	0
604	11	VJ_J_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one VJ-gene, one J-gene and one C-gene.	826	0	0
605	11	VJ_J_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one VJ-gene and one J-gene.	827	0	0
606	11	D_gene_recombination_feature	\N	828	0	0
607	11	three_prime_D_heptamer	7 nucleotide recombination site like CACAGTG, part of a 3' D-recombination signal sequence of an immunoglobulin/T-cell receptor gene.	829	0	0
608	11	three_prime_D_nonamer	A 9 nucleotide recombination site (e.g. ACAAAAACC), part of a 3' D-recombination signal sequence of an immunoglobulin/T-cell receptor gene.	830	0	0
609	11	three_prime_D_spacer	A 12 or 23 nucleotide spacer between the 3'D-HEPTAMER and 3'D-NONAMER of a 3'D-RS.	831	0	0
610	11	five_prime_D_heptamer	7 nucleotide recombination site (e.g. CACTGTG), part of a 5' D-recombination signal sequence (SO:0000556) of an immunoglobulin/T-cell receptor gene.	832	0	0
611	11	five_prime_D_nonamer	9 nucleotide recombination site (e.g. GGTTTTTGT), part of a five_prime_D-recombination signal sequence (SO:0000556) of an immunoglobulin/T-cell receptor gene.	833	0	0
612	11	five_prime_D_spacer	12 or 23 nucleotide spacer between the 5' D-heptamer (SO:0000496) and 5' D-nonamer (SO:0000497) of a 5' D-recombination signal sequence (SO:0000556) of an immunoglobulin/T-cell receptor gene.	834	0	0
613	11	virtual_sequence	A continuous piece of sequence similar to the 'virtual contig' concept of the Ensembl database.	835	0	0
614	11	Hoogsteen_base_pair	A type of non-canonical base-pairing. This is less energetically favourable than watson crick base pairing. Hoogsteen GC base pairs only have two hydrogen bonds.	836	0	0
615	11	reverse_Hoogsteen_base_pair	A type of non-canonical base-pairing.	838	0	0
616	11	transcribed_region (obsolete SO:0000502)	A region of sequence that is transcribed. This region may cover the transcript of a gene, it may emcompas the sequence covered by all of the transcripts of a alternately spliced gene, or it may cover the region transcribed by a polycistronic transcript. A gene may have 1 or more transcribed regions and a transcribed_region may belong to one or more genes.	839	1	0
617	11	alternately_spliced_gene_encodeing_one_transcript (obsolete SO:0000503)	\N	840	1	0
618	11	D_DJ_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one D-gene, one DJ-gene and one C-gene.	841	0	0
619	11	D_DJ_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one D-gene and one DJ-gene.	842	0	0
620	11	D_DJ_J_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one D-gene, one DJ-gene, one J-gene and one C-gene.	843	0	0
621	11	pseudogenic_exon	A non functional descendant of an exon, part of a pseudogene.	844	0	0
1550	11	glycine	\N	2191	0	0
1551	11	serine	\N	2192	0	0
623	11	D_J_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in germline configuration including at least one D-gene, one J-gene and one C-gene.	846	0	0
624	11	VD_gene_segment	Genomic DNA of immunoglobulin/T-cell receptor gene in partially rearranged genomic DNA including L-part1, V-intron and V-D-exon, with the 5' UTR (SO:0000204) and 3' UTR (SO:0000205).	847	0	0
625	11	J_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in germline configuration including at least one J-gene and one C-gene.	848	0	0
626	11	inversion_derived_deficiency_plus_aneuploid	A chromosomal deletion whereby a chromosome generated by recombination between two inversions; has a deficiency at one end and presumed to have a deficiency or duplication at the other end of the inversion.	849	0	0
627	11	J_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in germline configuration including more than one J-gene.	850	0	0
628	11	J_nonamer	9 nucleotide recombination site (e.g. GGTTTTTGT), part of a J-gene recombination feature of an immunoglobulin/T-cell receptor gene.	851	0	0
629	11	J_heptamer	7 nucleotide recombination site (e.g. CACAGTG), part of a J-gene recombination feature of an immunoglobulin/T-cell receptor gene.	852	0	0
630	11	pseudogenic_transcript	A non functional descendant of a transcript, part of a pseudogene.	853	0	0
631	11	J_spacer	12 or 23 nucleotide spacer between the J-nonamer and the J-heptamer of a J-gene recombination feature of an immunoglobulin/T-cell receptor gene.	854	0	0
632	11	V_DJ_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene and one DJ-gene.	855	0	0
633	11	V_DJ_J_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene, one DJ-gene and one J-gene.	856	0	0
634	11	V_VDJ_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene, one VDJ-gene and one C-gene.	857	0	0
635	11	V_VDJ_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene and one VDJ-gene.	858	0	0
636	11	V_VDJ_J_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene, one VDJ-gene and one J-gene.	859	0	0
637	11	V_VJ_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene, one VJ-gene and one C-gene.	860	0	0
638	11	V_VJ_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene and one VJ-gene.	861	0	0
639	11	V_VJ_J_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene, one VJ-gene and one J-gene.	862	0	0
640	11	V_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in germline configuration including more than one V-gene.	863	0	0
641	11	V_D_DJ_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene, one D-gene, one DJ-gene and one C-gene.	864	0	0
642	11	V_D_DJ_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene, one D-gene, one DJ-gene.	865	0	0
643	11	V_D_DJ_J_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene, one D-gene, one DJ-gene, one J-gene and one C-gene.	866	0	0
644	11	V_D_DJ_J_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene, one D-gene, one DJ-gene and one J-gene.	867	0	0
645	11	V_D_J_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in germline configuration including at least one V-gene, one D-gene and one J-gene and one C-gene.	868	0	0
646	11	V_D_J_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in germline configuration including at least one V-gene, one D-gene and one J-gene.	869	0	0
647	11	V_heptamer	7 nucleotide recombination site (e.g. CACAGTG), part of V-gene recombination feature of an immunoglobulin/T-cell receptor gene.	870	0	0
648	11	V_J_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in germline configuration including at least one V-gene and one J-gene.	871	0	0
649	11	V_J_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in germline configuration including at least one V-gene, one J-gene and one C-gene.	872	0	0
650	11	V_nonamer	9 nucleotide recombination site (e.g. ACAAAAACC), part of V-gene recombination feature of an immunoglobulin/T-cell receptor gene.	873	0	0
651	11	V_spacer	12 or 23 nucleotide spacer between the V-heptamer and the V-nonamer of a V-gene recombination feature of an immunoglobulin/T-cell receptor gene.	874	0	0
652	11	V_gene_recombination_feature	Recombination signal including V-heptamer, V-spacer and V-nonamer in 3' of V-region of a V-gene or V-sequence of an immunoglobulin/T-cell receptor gene.	875	0	0
653	11	DJ_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one DJ-gene and one C-gene.	876	0	0
654	11	DJ_J_C_cluster	Genomic DNA in rearranged configuration including at least one D-J-GENE, one J-GENE and one C-GENE.	877	0	0
655	11	VDJ_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one VDJ-gene and one C-gene.	878	0	0
656	11	V_DJ_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene, one DJ-gene and one C-gene.	879	0	0
657	11	alternately_spliced_gene_encoding_greater_than_one_transcript (obsolete SO:0000543)	\N	880	1	0
658	11	helitron	A rolling circle transposon. Autonomous helitrons encode a 5'-to-3' DNA helicase and nuclease/ligase similar to those encoded by known rolling-circle replicons.	881	0	0
659	11	recoding_pseudoknot	The pseudoknots involved in recoding are unique in that, as they play their role as a structure, they are immediately unfolded and their now linear sequence serves as a template for decoding.	884	0	0
660	11	designed_sequence	\N	886	0	0
661	11	inversion_derived_bipartite_duplication	A chromosome generated by recombination between two inversions; there is a duplication at each end of the inversion.	887	0	0
662	11	gene_with_edited_transcript	A gene that encodes a transcript that is edited.	888	0	0
900	11	reagent_attribute (obsolete SO:0000786)	\N	1198	1	0
663	11	inversion_derived_duplication_plus_aneuploid	A chromosome generated by recombination between two inversions; has a duplication at one end and presumed to have a deficiency or duplication at the other end of the inversion.	889	0	0
664	11	aneuploid_chromosome	A chromosome structural variation whereby either a chromosome exists in addition to the normal chromosome complement or is lacking.	890	0	0
665	11	polyA_signal_sequence	The recognition sequence necessary for endonuclease cleavage of an RNA transcript that is followed by polyadenylation; consensus=AATAAA.	891	0	0
666	11	Shine_Dalgarno_sequence	A region in the 5' UTR that pairs with the 16S rRNA during formation of the preinitiation complex.	892	0	0
667	11	polyA_site	The site on an RNA transcript to which will be added adenine residues by post-transcriptional polyadenylation. The boundary between the UTR and the polyA sequence.	895	0	0
699	11	C_D_box_snoRNA_encoding	\N	935	0	0
901	11	clone_attribute (obsolete SO:0000787)	\N	1199	1	0
691	11	centromere	A region of chromosome where the spindle fibers attach during mitosis and meiosis.	922	0	0
692	11	snoRNA_encoding	\N	924	0	0
668	11	assortment_derived_deficiency_plus_duplication (obsolete SO:0000554)	\N	897	1	0
669	11	five_prime_clip	5' most region of a precursor transcript that is clipped off during processing.	898	0	0
700	11	tmRNA_primary_transcript	A primary transcript encoding a tmRNA (SO:0000584).	936	0	0
670	11	five_prime_D_recombination_signal_sequence	Recombination signal of an immunoglobulin/T-cell receptor gene, including the 5' D-nonamer (SO:0000497), 5' D-spacer (SO:0000498), and 5' D-heptamer (SO:0000396) in 5' of the D-region of a D-gene, or in 5' of the D-region of DJ-gene.	899	0	0
693	11	edited_transcript_feature	A locatable feature on a transcript that is edited.	925	0	0
902	11	cloned (obsolete SO:0000788)	\N	1200	1	0
694	11	methylation_guide_snoRNA_primary_transcript	A primary transcript encoding a methylation guide small nucleolar RNA.	926	0	0
671	11	three_prime_clip	3'-most region of a precursor transcript that is clipped off during processing.	900	0	0
701	11	group_I_intron	Group I catalytic introns are large self-splicing ribozymes. They catalyze their own excision from mRNA, tRNA and rRNA precursors in a wide range of organisms. The core secondary structure consists of 9 paired regions (P1-P9). These fold to essentially two domains, the P4-P6 domain (formed from the stacking of P5, P4, P6 and P6a helices) and the P3-P9 domain (formed from the P8, P3, P7 and P9 helices). Group I catalytic introns often have long ORFs inserted in loop regions.	937	0	0
695	11	cap	A structure consisting of a 7-methylguanosine in 5'-5' triphosphate linkage with the first nucleotide of an mRNA. It is added post-transcriptionally, and is not encoded in the DNA.	927	0	0
672	11	C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene including more than one C-gene.	901	0	0
696	11	rRNA_cleavage_snoRNA_primary_transcript	A primary transcript encoding an rRNA cleavage snoRNA.	929	0	0
702	11	autocatalytically_spliced_intron	A self spliced intron.	940	0	0
673	11	D_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in germline configuration including more than one D-gene.	902	0	0
697	11	pre_edited_region	The region of a transcript that will be edited.	930	0	0
703	11	SRP_RNA_primary_transcript	A primary transcript encoding a signal recognition particle RNA.	941	0	0
674	11	D_J_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in germline configuration including at least one D-gene and one J-gene.	903	0	0
1552	11	threonine	\N	2193	0	0
698	11	tmRNA	A tmRNA liberates a mRNA from a stalled ribosome. To accomplish this part of the tmRNA is used as a reading frame that ends in a translation stop signal. The broken mRNA is replaced in the ribosome by the tmRNA and translation of the tmRNA leads to addition of a proteolysis tag to the incomplete protein enabling recognition by a protease. Recently a number of permuted tmRNAs genes have been found encoded in two parts. TmRNAs have been identified in eubacteria and some chloroplasts but are absent from archeal and Eukaryote nuclear genomes.	932	0	0
675	11	heptamer_of_recombination_feature_of_vertebrate_immune_system_gene	Seven nucleotide recombination site (e.g. CACAGTG), part of V-gene, D-gene or J-gene recombination feature of an immunoglobulin or T-cell receptor gene.	904	0	0
676	11	nonamer_of_recombination_feature_of_vertebrate_immune_system_gene	\N	905	0	0
677	11	vertebrate_immune_system_gene_recombination_spacer	\N	906	0	0
678	11	V_DJ_J_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene, one DJ-gene, one J-gene and one C-gene.	907	0	0
679	11	V_VDJ_J_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene, one VDJ-gene, one J-gene and one C-gene.	908	0	0
680	11	V_VJ_J_C_cluster	Genomic DNA of immunoglobulin/T-cell receptor gene in rearranged configuration including at least one V-gene, one VJ-gene, one J-gene and one C-gene.	909	0	0
681	11	inversion_derived_aneuploid_chromosome	A chromosome may be generated by recombination between two inversions; presumed to have a deficiency or duplication at each end of the inversion.	910	0	0
682	11	bidirectional_promoter	\N	911	0	0
683	11	retrotransposed	An attribute of a feature that occurred as the product of a reverse transcriptase mediated event.	912	0	0
684	11	three_prime_D_recombination_signal_sequence	Recombination signal of an immunoglobulin/T-cell receptor gene, including the 3' D-heptamer (SO:0000493), 3' D-spacer, and 3' D-nonamer (SO:0000494) in 3' of the D-region of a D-gene.	915	0	0
685	11	miRNA_encoding	\N	916	0	0
686	11	DJ_gene_segment	Genomic DNA of immunoglobulin/T-cell receptor gene in partially rearranged genomic DNA including D-J-region with 5' UTR and 3' UTR, also designated as D-J-segment.	917	0	0
687	11	rRNA_encoding	\N	918	0	0
688	11	VDJ_gene_segment	Rearranged genomic DNA of immunoglobulin/T-cell receptor gene including L-part1, V-intron and V-D-J-exon, with the 5'UTR (SO:0000204) and 3'UTR (SO:0000205).	919	0	0
689	11	scRNA_encoding	\N	920	0	0
690	11	VJ_gene_segment	Rearranged genomic DNA of immunoglobulin/T-cell receptor gene including L-part1, V-intron and V-J-exon, with the 5'UTR (SO:0000204) and 3'UTR (SO:0000205).	921	0	0
704	11	SRP_RNA	The signal recognition particle (SRP) is a universally conserved ribonucleoprotein. It is involved in the co-translational targeting of proteins to membranes. The eukaryotic SRP consists of a 300-nucleotide 7S RNA and six proteins: SRPs 72, 68, 54, 19, 14, and 9. Archaeal SRP consists of a 7S RNA and homologues of the eukaryotic SRP19 and SRP54 proteins. In most eubacteria, the SRP consists of a 4.5S RNA and the Ffh protein (a homologue of the eukaryotic SRP54 protein). Eukaryotic and archaeal 7S RNAs have very similar secondary structures, with eight helical elements. These fold into the Alu and S domains, separated by a long linker region. Eubacterial SRP is generally a simpler structure, with the M domain of Ffh bound to a region of the 4.5S RNA that corresponds to helix 8 of the eukaryotic and archaeal SRP S domain. Some Gram-positive bacteria (e.g. Bacillus subtilis), however, have a larger SRP RNA that also has an Alu domain. The Alu domain is thought to mediate the peptide chain elongation retardation function of the SRP. The universally conserved helix which interacts with the SRP54/Ffh M domain mediates signal sequence recognition. In eukaryotes and archaea, the SRP19-helix 6 complex is thought to be involved in SRP assembly and stabilizes helix 8 for SRP54 binding.	942	0	0
705	11	pseudoknot	A tertiary structure in RNA where nucleotides in a loop form base pairs with a region of RNA downstream of the loop.	944	0	0
706	11	H_pseudoknot	A pseudoknot which contains two stems and at least two loops.	946	0	0
707	11	C_D_box_snoRNA	Most box C/D snoRNAs also contain long (>10 nt) sequences complementary to rRNA. Boxes C and D, as well as boxes C' and D', are usually located in close proximity, and form a structure known as the box C/D motif. This motif is important for snoRNA stability, processing, nucleolar targeting and function. A small number of box C/D snoRNAs are involved in rRNA processing; most, however, are known or predicted to serve as guide RNAs in ribose methylation of rRNA. Targeting involves direct base pairing of the snoRNA at the rRNA site to be modified and selection of a rRNA nucleotide a fixed distance from box D or D'.	948	0	0
725	11	branch_site	A pyrimidine rich sequence near the 3' end of an intron to which the 5'end becomes covalently bound during nuclear splicing. The resulting structure resembles a lariat.	973	0	0
729	11	terminator_of_type_2_RNApol_III_promoter	A terminator signal for RNA polymerase III transcription.	979	0	0
708	11	H_ACA_box_snoRNA	Members of the box H/ACA family contain an ACA triplet, exactly 3 nt upstream from the 3' end and an H-box in a hinge region that links two structurally similar functional domains of the molecule. Both boxes are important for snoRNA biosynthesis and function. A few box H/ACA snoRNAs are involved in rRNA processing; most others are known or predicted to participate in selection of uridine nucleosides in rRNA to be converted to pseudouridines. Site selection is mediated by direct base pairing of the snoRNA with rRNA through one or both targeting domains.	950	0	0
730	11	transcription_end_site	The base where transcription ends.	980	0	0
726	11	polypyrimidine_tract	The polypyrimidine tract is one of the cis-acting sequence elements directing intron removal in pre-mRNA splicing.	974	0	0
731	11	RNApol_III_promoter_type_1	\N	981	0	0
709	11	C_D_box_snoRNA_primary_transcript	A primary transcript encoding a small nucleolar RNA of the box C/D family.	951	0	0
727	11	bacterial_RNApol_promoter	A DNA sequence to which bacterial RNA polymerase binds, to begin transcription.	977	0	0
710	11	H_ACA_box_snoRNA_primary_transcript	A primary transcript encoding a small nucleolar RNA of the box H/ACA family.	952	0	0
732	11	RNApol_III_promoter_type_2	\N	982	0	0
711	11	transcript_edited_by_U_insertion/deletion (obsolete SO:0000597)	The insertion and deletion of uridine (U) residues, usually within coding regions of mRNA transcripts of cryptogenes in the mitochondrial genome of kinetoplastid protozoa.	953	1	0
712	11	edited_by_C_insertion_and_dinucleotide_insertion (obsolete SO:0000598)	\N	955	1	0
713	11	edited_by_C_to_U_substitution (obsolete SO:0000599)	\N	956	1	0
714	11	edited_by_A_to_I_substitution (obsolete SO:0000600)	\N	957	1	0
715	11	edited_by_G_addition (obsolete SO:0000601)	\N	958	1	0
716	11	guide_RNA	A short 3'-uridylated RNA that can form a duplex (except for its post-transcriptionally added oligo_U tail (SO:0000609)) with a stretch of mature edited mRNA.	959	0	0
728	11	bacterial_terminator	A terminator signal for bacterial transcription.	978	0	0
733	11	A_box	A variably distant linear promoter region recognized by TFIIIC, with consensus sequence TGGCnnAGTGG.	983	0	0
717	11	group_II_intron	Group II introns are found in rRNA, tRNA and mRNA of organelles in fungi, plants and protists, and also in mRNA in bacteria. They are large self-splicing ribozymes and have 6 structural domains (usually designated dI to dVI). A subset of group II introns also encode essential splicing proteins in intronic ORFs. The length of these introns can therefore be up to 3kb. Splicing occurs in almost identical fashion to nuclear pre-mRNA splicing with two transesterification steps. The 2' hydroxyl of a bulged adenosine in domain VI attacks the 5' splice site, followed by nucleophilic attack on the 3' splice site by the 3' OH of the upstream exon. Protein machinery is required for splicing in vivo, and long range intron-intron and intron-exon interactions are important for splice site positioning. Group II introns are further sub-classified into groups IIA and IIB which differ in splice site consensus, distance of bulged A from 3' splice site, some tertiary interactions, and intronic ORF phylogeny.	961	0	0
734	11	B_box	A variably distant linear promoter region recognized by TFIIIC, with consensus sequence AGGTTCCAnnCC.	985	0	0
718	11	editing_block	Edited mRNA sequence mediated by a single guide RNA (SO:0000602).	964	0	0
735	11	RNApol_III_promoter_type_3	\N	986	0	0
719	11	intergenic_region	A region containing or overlapping no genes that is bounded on either side by a gene, or bounded by a gene and the end of the chromosome.	965	0	0
736	11	C_box	An RNA polymerase III type 1 promoter with consensus sequence CAnnCCn.	987	0	0
720	11	editing_domain	Edited mRNA sequence mediated by two or more overlapping guide RNAs (SO:0000602).	967	0	0
737	11	snRNA_encoding	\N	988	0	0
721	11	unedited_region	The region of an edited transcript that will not be edited.	968	0	0
722	11	H_ACA_box_snoRNA_encoding	\N	969	0	0
723	11	oligo_U_tail	The string of non-encoded U's at the 3' end of a guide RNA (SO:0000602).	970	0	0
724	11	polyA_sequence	Sequence of about 100 nucleotides of A added to the 3' end of most eukaryotic mRNAs.	972	0	0
738	11	telomere	A specific structure at the end of a linear chromosome, required for the integrity and maintenance of the end.	989	0	0
739	11	silencer	A regulatory region which upon binding of transcription factors, suppress the transcription of the gene or genes they control.	991	0	0
740	11	chromosomal_regulatory_element	\N	993	0	0
741	11	insulator	A transcriptional cis regulatory region that when located between a CM and a gene's promoter prevents the CRM from modulating that genes expression.	994	0	0
768	11	maxicircle_gene	A mitochondrial gene located in a maxicircle.	1033	0	0
742	11	chromosomal_structural_element	\N	996	0	0
781	11	insertion	The sequence of one or more nucleotides added between two adjacent nucleotides in the sequence.	1048	0	0
743	11	five_prime_open_reading_frame	\N	997	0	0
785	11	internal_eliminated_sequence	A sequence eliminated from the genome of ciliates during nuclear differentiation.	1054	0	0
744	11	upstream_AUG_codon	A start codon upstream of the ORF.	998	0	0
769	11	ncRNA	An RNA transcript that does not encode for a protein rather the RNA molecule is the gene product.	1034	0	0
745	11	polycistronic_primary_transcript	A primary transcript encoding for more than one gene product.	999	0	0
788	11	non_canonical_splice_site (obsolete SO:0000674)	A splice site where the donor and acceptor sites differ from the canonical form.	1058	1	0
746	11	monocistronic_primary_transcript	A primary transcript encoding for one gene product.	1000	0	0
770	11	stRNA_encoding	\N	1036	0	0
747	11	monocistronic_mRNA	An mRNA with either a single protein product, or for which the regions encoding all its protein products overlap.	1001	0	0
786	11	macronucleus_destined_segment	A sequence that is conserved, although rearranged relative to the micronucleus, in the macronucleus of a ciliate genome.	1055	0	0
771	11	repeat_region	A region of sequence containing one or more repeat units.	1037	0	0
748	11	polycistronic_mRNA	An mRNA that encodes multiple proteins from at least two non-overlapping regions.	1003	0	0
782	11	EST_match	A match against an EST sequence.	1051	0	0
749	11	mini_exon_donor_RNA	A primary transcript that donates the spliced leader to other mRNA.	1005	0	0
772	11	dispersed_repeat	A repeat that is located at dispersed sites in the genome.	1038	0	0
787	11	transcript	An RNA synthesized on a DNA or RNA template by an RNA polymerase.	1056	0	0
750	11	spliced_leader_RNA	\N	1006	0	0
783	11	sequence_rearrangement_feature	\N	1052	0	0
751	11	engineered_plasmid	A plasmid that is engineered.	1007	0	0
773	11	tmRNA_encoding	\N	1040	0	0
752	11	transcribed_spacer_region	Part of an rRNA transcription unit that is transcribed but discarded during maturation, not giving rise to any part of rRNA.	1008	0	0
790	11	canonical_three_prime_splice_site	The canonical 3' splice site has the sequence "AG".	1060	0	0
753	11	internal_transcribed_spacer_region	Non-coding regions of DNA sequence that separate genes coding for the 28S, 5.8S, and 18S ribosomal RNAs.	1010	0	0
774	11	DNA_invertase_target_sequence (obsolete SO:0000660)	\N	1041	1	0
754	11	external_transcribed_spacer_region	Non-coding regions of DNA that precede the sequence that codes for the ribosomal RNA.	1011	0	0
775	11	intron_attribute (obsolete SO:0000661)	\N	1042	1	0
755	11	tetranucleotide_repeat_microsatellite_feature	\N	1012	0	0
776	11	spliceosomal_intron	An intron which is spliced by the spliceosome.	1043	0	0
756	11	SRP_RNA_encoding	\N	1013	0	0
784	11	chromosome_breakage_sequence	A sequence within the micronuclear DNA of ciliates at which chromosome breakage and telomere addition occurs during nuclear differentiation.	1053	0	0
757	11	minisatellite	A repeat region containing tandemly repeated sequences having a unit length of 10 to 40 bp.	1014	0	0
758	11	antisense_RNA	Antisense RNA is RNA that is transcribed from the coding, rather than the template, strand of DNA. It is therefore complementary to mRNA.	1016	0	0
777	11	tRNA_encoding	\N	1044	0	0
759	11	antisense_primary_transcript	The reverse complement of the primary transcript.	1018	0	0
760	11	siRNA	A small RNA molecule that is the product of a longer exogenous or endogenous dsRNA, which is either a bimolecular duplex or very long hairpin, processed (via the Dicer pathway) such that numerous siRNAs accumulate from both strands of the dsRNA. SRNAs trigger the cleavage of their target molecules.	1019	0	0
778	11	introgressed_chromosome_region	\N	1045	0	0
761	11	miRNA_primary_transcript	A primary transcript encoding a micro RNA.	1021	0	0
789	11	canonical_splice_site (obsolete SO:0000675)	The major class of splice site with dinucleotides GT and AG for donor and acceptor sites, respectively.	1059	1	0
779	11	monocistronic_transcript	A transcript that is monocistronic.	1046	0	0
762	11	stRNA_primary_transcript	A primary transcript encoding a small temporal mRNA (SO:0000649).	1022	0	0
780	11	mobile_intron	An intron (mitochondrial, chloroplast, nuclear or prokaryotic) that encodes a double strand sequence specific endonuclease allowing for mobility.	1047	0	0
763	11	stRNA	Non-coding RNAs of about 21 nucleotides in length that regulate temporal development; first discovered in C. elegans.	1023	0	0
764	11	small_subunit_rRNA	Ribosomal RNA transcript that structures the small subunit of the ribosome.	1026	0	0
765	11	large_subunit_rRNA	Ribosomal RNA transcript that structures the large subunit of the ribosome.	1027	0	0
766	11	rRNA_5S	5S ribosomal RNA (5S rRNA) is a component of the large ribosomal subunit in both prokaryotes and eukaryotes. In eukaryotes, it is synthesised by RNA polymerase III (the other eukaryotic rRNAs are cleaved from a 45S precursor synthesised by RNA polymerase I). In Xenopus oocytes, it has been shown that fingers 4-7 of the nine-zinc finger transcription factor TFIIIA can bind to the central region of 5S RNA. Thus, in addition to positively regulating 5S rRNA transcription, TFIIIA also stabilizes 5S rRNA until it is required for transcription.	1028	0	0
767	11	rRNA_28S	A component of the large ribosomal subunit.	1031	0	0
791	11	canonical_five_prime_splice_site	The canonical 5' splice site has the sequence "GT".	1061	0	0
834	11	foreign_transposable_element	A transposable element that is foreign.	1114	0	0
792	11	non_canonical_three_prime_splice_site	A 3' splice site that does not have the sequence "AG".	1062	0	0
824	11	gene_with_stop_codon_redefined_as_selenocysteine	A gene encoding an mRNA that has the stop codon redefined as selenocysteine.	1101	0	0
1553	11	tyrosine	\N	2194	0	0
793	11	non_canonical_five_prime_splice_site	A 5' splice site which does not have the sequence "GT".	1063	0	0
825	11	gene_with_mRNA_recoded_by_translational_bypass	A gene with mRNA recoded by translational bypass.	1102	0	0
835	11	gene_with_dicistronic_primary_transcript	A gene that encodes a dicistronic primary transcript.	1115	0	0
826	11	gene_with_transcript_with_translational_frameshift	A gene encoding a transcript that has a translational frameshift.	1103	0	0
794	11	non_canonical_start_codon	A start codon that is not the usual AUG sequence.	1064	0	0
838	11	oriT	A region of a DNA molecule where transfer is initiated during the process of conjugation or mobilization.	1119	0	0
827	11	DNA_motif	A motif that is active in the DNA form of the sequence.	1104	0	0
836	11	gene_with_dicistronic_mRNA	A gene that encodes a polycistronic mRNA.	1116	0	0
795	11	aberrant_processed_transcript	A transcript that has been processed "incorrectly", for example by the failure of splicing of one or more exons.	1065	0	0
828	11	nucleotide_motif	A region of nucleotide sequence corresponding to a known motif.	1106	0	0
796	11	splicing_feature (obsolete SO:0000682)	\N	1066	1	0
797	11	exonic_splice_enhancer	Exonic splicing enhancers (ESEs) facilitate exon definition by assisting in the recruitment of splicing factors to the adjacent intron.	1067	0	0
1554	11	cysteine	\N	2195	0	0
798	11	nuclease_sensitive_site	A region of nucleotide sequence targeted by a nuclease enzyme.	1069	0	0
829	11	RNA_motif	A motif that is active in RNA sequence.	1107	0	0
799	11	DNAseI_hypersensitive_site	\N	1070	0	0
837	11	iDNA	Genomic sequence removed from the genome, as a normal event, by a process of recombination.	1117	0	0
830	11	dicistronic_mRNA	An mRNA that has the quality dicistronic.	1108	0	0
800	11	translocation_element	A chromosomal translocation whereby the chromosomes carrying non-homologous centromeres may be recovered independently. These chromosomes are described as translocation elements. This occurs for some translocations, particularly but not exclusively, reciprocal translocations.	1071	0	0
839	11	transit_peptide	The transit_peptide is a short region at the N-terminus of the peptide that directs the protein to an organelle (chloroplast, mitochondrion, microbody or cyanelle).	1121	0	0
801	11	deletion_junction	The space between two bases in a sequence which marks the position where a deletion has occurred.	1072	0	0
831	11	reading_frame	A nucleic acid sequence that when read as sequential triplets, has the potential of encoding a sequential string of amino acids. It need not contain the start or stop codon.	1109	0	0
802	11	golden_path	A set of subregions selected from sequence contigs which when concatenated form a nonredundant linear sequence.	1073	0	0
1555	11	glutamine	\N	2196	0	0
803	11	cDNA_match	A match against cDNA sequence.	1074	0	0
832	11	blocked_reading_frame	A reading_frame that is interrupted by one or more stop codons; usually identified through intergenomic sequence comparisons.	1111	0	0
804	11	gene_with_polycistronic_transcript	A gene that encodes a polycistronic transcript.	1075	0	0
805	11	cleaved_initiator_methionine	The initiator methionine that has been cleaved from a mature polypeptide sequence.	1076	0	0
833	11	ultracontig	An ordered and oriented set of scaffolds based on somewhat weaker sets of inferential evidence such as one set of mate pair reads together with supporting evidence from ESTs or location of markers from SNP or microsatellite maps, or cytogenetic localization of contained markers.	1112	0	0
806	11	gene_with_dicistronic_transcript	A gene that encodes a dicistronic transcript.	1078	0	0
807	11	gene_with_recoded_mRNA	A gene that encodes an mRNA that is recoded.	1079	0	0
808	11	SNP	SNPs are single base pair positions in genomic DNA at which different sequence alternatives exist in normal individuals in some population(s), wherein the least frequent variant has an abundance of 1% or greater.	1080	0	0
809	11	reagent	A sequence used in experiment.	1081	0	0
810	11	oligo	A short oligonucleotide sequence, of length on the order of 10's of bases; either single or double stranded.	1082	0	0
811	11	gene_with_stop_codon_read_through	A gene that encodes a transcript with stop codon readthrough.	1084	0	0
812	11	gene_with_stop_codon_redefined_as_pyrrolysine	A gene encoding an mRNA that has the stop codon redefined as pyrrolysine.	1085	0	0
813	11	junction	A sequence_feature with an extent of zero.	1086	0	0
814	11	remark	A comment about the sequence.	1087	0	0
815	11	possible_base_call_error	A region of sequence where the validity of the base calling is questionable.	1088	0	0
816	11	possible_assembly_error	A region of sequence where there may have been an error in the assembly.	1089	0	0
817	11	experimental_result_region	A region of sequence implicated in an experimental result.	1090	0	0
818	11	gene	A region (or regions) that includes all of the sequence elements necessary to encode a functional transcript. A gene may include regulatory regions, transcribed regions and/or other functional sequence regions.	1091	0	0
819	11	tandem_repeat	Two or more adjcent copies of a region (of length greater than 1).	1094	0	0
820	11	trans_splice_acceptor_site	The 3' splice site of the acceptor primary transcript.	1096	0	0
821	11	trans_splice_donor_site	The 5' five prime splice site region of the donor RNA.	1097	0	0
822	11	SL1_acceptor_site	A trans_splicing_acceptor_site which appends the 22nt SL1 RNA leader sequence to the 5' end of most mRNAs.	1098	0	0
823	11	SL2_acceptor_site	A trans_splicing_acceptor_site which appends the 22nt SL2 RNA leader sequence to the 5' end of mRNAs. SL2 acceptor sites occur in genes in internal segments of polycistronic transcripts.	1100	0	0
841	11	CRM	A regulatory_region where more than 1 TF_binding_site together are regulatorily active.	1124	0	0
842	11	intein	A region of a peptide that is able to excise itself and rejoin the remaining portions with a peptide bond.	1126	0	0
843	11	intein_containing	An attribute of protein-coding genes where the initial protein product contains an intein.	1128	0	0
844	11	gap	A gap in the sequence of known length. The unknown bases are filled in with N's.	1129	0	0
845	11	fragmentary	An attribute to describe a feature that is incomplete.	1130	0	0
846	11	predicted	An attribute describing an unverified region.	1131	0	0
847	11	feature_attribute	An attribute describing a located_sequence_feature.	1133	0	0
848	11	exemplar_mRNA	An exemplar is a representative cDNA sequence for each gene. The exemplar approach is a method that usually involves some initial clustering into gene groups and the subsequent selection of a representative from each gene group.	1134	0	0
849	11	sequence_location	\N	1135	0	0
850	11	organelle_sequence	\N	1136	0	0
851	11	mitochondrial_sequence	\N	1137	0	0
852	11	nuclear_sequence	\N	1138	0	0
853	11	nucleomorphic_sequence	\N	1139	0	0
854	11	plastid_sequence	\N	1140	0	0
855	11	kinetoplast	A kinetoplast is an interlocked network of thousands of minicircles and tens of maxi circles, located near the base of the flagellum of some protozoan species.	1141	0	0
856	11	maxicircle	A maxicircle is a replicon, part of a kinetoplast, that contains open reading frames and replicates via a rolling circle method.	1145	0	0
857	11	apicoplast_sequence	\N	1147	0	0
858	11	chromoplast_sequence	\N	1148	0	0
859	11	chloroplast_sequence	\N	1149	0	0
860	11	cyanelle_sequence	\N	1150	0	0
861	11	leucoplast_sequence	\N	1151	0	0
862	11	proplastid_sequence	\N	1152	0	0
863	11	plasmid_location	\N	1153	0	0
864	11	amplification_origin	An origin_of_replication that is used for the amplification of a chromosomal nucleic acid sequence.	1154	0	0
865	11	proviral_location	\N	1155	0	0
866	11	gene_group_regulatory_region	\N	1156	0	0
867	11	clone_insert	The region of sequence that has been inserted and is being propagated by the clone.	1157	0	0
868	11	lambda_vector	The lambda bacteriophage is the vector for the linear lambda clone. The genes involved in the lysogenic pathway are removed from the from the viral DNA. Up to 25 kb of foreign DNA can then be inserted into the lambda genome.	1158	0	0
869	11	plasmid_vector	\N	1159	0	0
870	11	cDNA	DNA synthesized by reverse transcriptase using RNA as a template.	1161	0	0
871	11	single_stranded_cDNA	\N	1163	0	0
872	11	double_stranded_cDNA	\N	1164	0	0
873	11	plasmid_clone (obsolete SO:0000759)	\N	1165	1	0
874	11	YAC_clone (obsolete SO:0000760)	\N	1166	1	0
875	11	phagemid_clone (obsolete SO:0000761)	\N	1167	1	0
876	11	PAC_clone (obsolete SO:0000762)	\N	1168	1	0
877	11	fosmid_clone (obsolete SO:0000763)	\N	1169	1	0
878	11	BAC_clone (obsolete SO:0000764)	\N	1170	1	0
879	11	cosmid_clone (obsolete SO:0000765)	\N	1171	1	0
880	11	pyrrolysyl_tRNA	A tRNA sequence that has a pyrrolysine anticodon, and a 3' pyrrolysine binding region.	1172	0	0
881	11	clone_insert_start (obsolete SO:0000767)	\N	1173	1	0
882	11	episome	A plasmid that may integrate with a chromosome.	1174	0	0
883	11	tmRNA_coding_piece	The region of a two-piece tmRNA that bears the reading frame encoding the proteolysis tag. The tmRNA gene undergoes circular permutation in some groups of bacteria. Processing of the transcripts from such a gene leaves the mature tmRNA in two pieces, base-paired together.	1175	0	0
895	11	transgenic	Attribute describing sequence that has been integrated with foreign sequence.	1193	0	0
884	11	tmRNA_acceptor_piece	The acceptor region of a two-piece tmRNA that when mature is charged at its 3' end with alanine. The tmRNA gene undergoes circular permutation in some groups of bacteria; processing of the transcripts from such a gene leaves the mature tmRNA in two pieces, base-paired together.	1179	0	0
891	11	pseudogenic_rRNA	A non functional descendent of an rRNA.	1189	0	0
885	11	QTL	A quantitative trait locus (QTL) is a polymorphic locus which contains alleles that differentially affect the expression of a continuously distributed phenotypic trait. Usually it is a marker described by statistical association to quantitative variation in the particular phenotypic trait that is thought to be controlled by the cumulative action of alleles at multiple loci.	1180	0	0
886	11	genomic_island	A genomic island is an integrated mobile genetic element, characterized by size (over 10 Kb). It that has features that suggest a foreign origin. These can include nucleotide distribution (oligonucleotides signature, CG content etc.) that differs from the bulk of the chromosome and/or genes suggesting DNA mobility.	1182	0	0
892	11	pseudogenic_tRNA	A non functional descendent of a tRNA.	1190	0	0
887	11	pathogenic_island	Mobile genetic elements that contribute to rapid changes in virulence potential. They are present on the genomes of pathogenic strains but absent from the genomes of non pathogenic members of the same or related species.	1185	0	0
893	11	engineered_episome	An episome that is engineered.	1191	0	0
888	11	metabolic_island	A transmissible element containing genes involved in metabolism, analogous to the pathogenicity islands of gram negative bacteria.	1186	0	0
894	11	transposable_element_attribute (obsolete SO:0000780)	\N	1192	1	0
889	11	adaptive_island	An adaptive island is a genomic island that provides an adaptive advantage to the host.	1187	0	0
896	11	natural	An attribute describing a feature that occurs in nature.	1194	0	0
890	11	symbiosis_island	A transmissible element containing genes involved in symbiosis, analogous to the pathogenicity islands of gram negative bacteria.	1188	0	0
897	11	engineered	An attribute to describe a region that was modified in vitro.	1195	0	0
898	11	foreign	An attribute to describe a region from another species.	1196	0	0
899	11	cloned_region	\N	1197	0	0
908	11	engineered_rescue_region	A rescue region that is engineered.	1206	0	0
956	11	RNApol_II_promoter_region (obsolete SO:0000844)	A region of sequence which is a promoter for RNA polymerase II.	1262	1	0
909	11	rescue_mini_gene	A mini_gene that rescues.	1207	0	0
944	11	promoter_region (obsolete SO:0000832)	A region of sequence which is part of a promoter.	1247	1	0
945	11	transcript_region	A region of a transcript.	1248	0	0
910	11	transgenic_transposable_element	TE that has been modified in vitro, including insertion of DNA derived from a source other than the originating TE.	1208	0	0
957	11	RNApol_III_promoter_type_1_region (obsolete SO:0000845)	A region of sequence which is a promoter for RNA polymerase III type 1.	1263	1	0
911	11	natural_transposable_element	TE that exists (or existed) in nature.	1210	0	0
946	11	mature_transcript_region	A region of a mature transcript.	1249	0	0
912	11	engineered_transposable_element	TE that has been modified by manipulations in vitro.	1211	0	0
958	11	RNApol_III_promoter_type_2_region (obsolete SO:0000846)	A region of sequence which is a promoter for RNA polymerase III type 2.	1264	1	0
913	11	engineered_foreign_transposable_element	A transposable_element that is engineered and foreign.	1212	0	0
947	11	primary_transcript_region	A part of a primary transcript.	1250	0	0
914	11	assortment_derived_duplication	A multi-chromosome duplication aberration generated by reassortment of other aberration components.	1213	0	0
959	11	tmRNA_region	A region of a tmRNA.	1265	0	0
915	11	assortment_derived_deficiency_plus_duplication	A multi-chromosome aberration generated by reassortment of other aberration components; presumed to have a deficiency and a duplication.	1215	0	0
948	11	mRNA_region	A region of an mRNA.	1251	0	0
916	11	assortment_derived_deficiency	A multi-chromosome deficiency aberration generated by reassortment of other aberration components.	1216	0	0
917	11	assortment_derived_aneuploid	A multi-chromosome aberration generated by reassortment of other aberration components; presumed to have a deficiency or a duplication.	1217	0	0
949	11	UTR_region	A region of UTR.	1252	0	0
918	11	engineered_region	A region that is engineered.	1218	0	0
960	11	LTR_component	\N	1266	0	0
950	11	rRNA_primary_transcript_region	A region of an rRNA primary transcript.	1253	0	0
964	11	exon_region	A region of an exon.	1270	0	0
919	11	engineered_foreign_region	A region that is engineered and foreign.	1219	0	0
951	11	polypeptide_region	Biological sequence region that can be assigned to a specific subsequence of a polypeptide.	1254	0	0
920	11	fusion	\N	1220	0	0
921	11	engineered_tag	A tag that is engineered.	1221	0	0
922	11	validated_cDNA_clone	A cDNA clone that has been validated.	1222	0	0
923	11	invalidated_cDNA_clone	A cDNA clone that is invalid.	1223	0	0
130	8	narrow	\N	167	0	0
924	11	chimeric_cDNA_clone	A cDNA clone invalidated because it is chimeric.	1224	0	0
952	11	repeat_component	A region of a repeated sequence.	1258	0	0
925	11	genomically_contaminated_cDNA_clone	A cDNA clone invalidated by genomic contamination.	1225	0	0
926	11	polyA_primed_cDNA_clone	A cDNA clone invalidated by polyA priming.	1226	0	0
953	11	spliceosomal_intron_region	A region within an intron.	1259	0	0
927	11	partially_processed_cDNA_clone	A cDNA invalidated clone by partial processing.	1227	0	0
961	11	three_prime_LTR_component	\N	1267	0	0
928	11	rescue	An attribute describing a region's ability, when introduced to a mutant organism, to re-establish (rescue) a phenotype.	1228	0	0
929	11	mini_gene	By definition, minigenes are short open-reading frames (ORF), usually encoding approximately 9 to 20 amino acids, which are expressed in vivo (as distinct from being synthesized as peptide or protein ex vivo and subsequently injected). The in vivo synthesis confers a distinct advantage: the expressed sequences can enter both antigen presentation pathways, MHC I (inducing CD8+ T- cells, which are usually cytotoxic T-lymphocytes (CTL)) and MHC II (inducing CD4+ T-cells, usually 'T-helpers' (Th)); and can encounter B-cells, inducing antibody responses. Three main vector approaches have been used to deliver minigenes: viral vectors, bacterial vectors and plasmid DNA.	1229	0	0
954	11	gene_component_region	\N	1260	0	0
930	11	rescue_gene	A gene that rescues.	1231	0	0
962	11	five_prime_LTR_component	\N	1268	0	0
931	11	wild_type	An attribute describing sequence with the genotype found in nature and/or standard laboratory stock.	1232	0	0
955	11	bacterial_RNApol_promoter_region (obsolete SO:0000843)	A region which is part of a bacterial RNA polymerase promoter.	1261	1	0
932	11	wild_type_rescue_gene	A gene that rescues.	1235	0	0
963	11	CDS_region	A region of a CDS.	1269	0	0
933	11	mitochondrial_chromosome	A chromosome originating in a mitochondria.	1236	0	0
965	11	homologous_region	A region that is homologous to another region.	1271	0	0
934	11	chloroplast_chromosome	A chromosome originating in a chloroplast.	1237	0	0
935	11	chromoplast_chromosome	A chromosome originating in a chromoplast.	1238	0	0
1081	11	rolling_circle (obsolete SO:0000969)	\N	1398	1	0
936	11	cyanelle_chromosome	A chromosome originating in a cyanelle.	1239	0	0
1082	11	theta_replication (obsolete SO:0000970)	\N	1400	1	0
937	11	leucoplast_chromosome	A chromosome with origin in a leucoplast.	1240	0	0
938	11	macronuclear_chromosome	A chromosome originating in a macronucleus.	1241	0	0
939	11	micronuclear_chromosome	A chromosome originating in a micronucleus.	1242	0	0
940	11	nuclear_chromosome	A chromosome originating in a nucleus.	1243	0	0
941	11	nucleomorphic_chromosome	A chromosome originating in a nucleomorph.	1244	0	0
942	11	chromosome_part	A region of a chromosome.	1245	0	0
943	11	gene_member_region	A region of a gene.	1246	0	0
966	11	paralogous_region	A homologous_region that is paralogous to another region.	1273	0	0
967	11	orthologous_region	A homologous_region that is orthologous to another region.	1275	0	0
968	11	conserved	\N	1277	0	0
969	11	homologous	Similarity due to common ancestry.	1278	0	0
970	11	orthologous	An attribute describing a kind of homology where divergence occured after a speciation event.	1279	0	0
971	11	paralogous	An attribute describing a kind of homology where divergence occurred after a duplication event.	1280	0	0
972	11	syntenic	Attribute describing sequence regions occurring in same order on chromosome of different species.	1281	0	0
973	11	capped_primary_transcript	A primary transcript that is capped.	1283	0	0
974	11	capped_mRNA	An mRNA that is capped.	1284	0	0
975	11	mRNA_attribute	An attribute describing an mRNA feature.	1285	0	0
976	11	exemplar	An attribute describing a sequence is representative of a class of similar sequences.	1286	0	0
977	11	frameshift	An attribute describing a sequence that contains a mutation involving the deletion or insertion of one or more bases, where this number is not divisible by 3.	1287	0	0
978	11	minus_1_frameshift	A frameshift caused by deleting one base.	1289	0	0
979	11	minus_2_frameshift	A frameshift caused by deleting two bases.	1290	0	0
980	11	plus_1_frameshift	A frameshift caused by inserting one base.	1291	0	0
981	11	plus_2_framshift	A frameshift caused by inserting two bases.	1292	0	0
982	11	trans_spliced	An attribute describing transcript sequence that is created by splicing exons from diferent genes.	1293	0	0
983	11	polyadenylated_mRNA	An mRNA that is polyadenylated.	1294	0	0
984	11	trans_spliced_mRNA	An mRNA that is trans-spliced.	1295	0	0
985	11	edited_transcript	A transcript that is edited.	1296	0	0
986	11	edited_transcript_by_A_to_I_substitution	A transcript that has been edited by A to I substitution.	1297	0	0
987	11	bound_by_protein	An attribute describing a sequence that is bound by a protein.	1298	0	0
988	11	bound_by_nucleic_acid	An attribute describing a sequence that is bound by a nucleic acid.	1299	0	0
989	11	alternatively_spliced	An attribute describing a situation where a gene may encode for more than 1 transcript.	1300	0	0
990	11	monocistronic	An attribute describing a sequence that contains the code for one gene product.	1301	0	0
991	11	dicistronic	An attribute describing a sequence that contains the code for two gene products.	1302	0	0
992	11	polycistronic	An attribute describing a sequence that contains the code for more than one gene product.	1303	0	0
993	11	recoded	An attribute describing an mRNA sequence that has been reprogrammed at translation, causing localized alterations.	1304	0	0
994	11	codon_redefined	An attribute describing the alteration of codon meaning.	1305	0	0
995	11	stop_codon_read_through	A stop codon redefined to be a new amino acid.	1306	0	0
996	11	stop_codon_redefined_as_pyrrolysine	A stop codon redefined to be the new amino acid, pyrrolysine.	1307	0	0
997	11	stop_codon_redefined_as_selenocysteine	A stop codon redefined to be the new amino acid, selenocysteine.	1308	0	0
998	11	recoded_by_translational_bypass	Recoded mRNA where a block of nucleotides is not translated.	1309	0	0
999	11	translationally_frameshifted	Recoding by frameshifting a particular site.	1310	0	0
1000	11	maternally_imprinted_gene	A gene that is maternally_imprinted.	1311	0	0
1001	11	paternally_imprinted_gene	A gene that is paternally imprinted.	1312	0	0
1002	11	post_translationally_regulated_gene	A gene that is post translationally regulated.	1313	0	0
1003	11	negatively_autoregulated_gene	A gene that is negatively autoreguated.	1314	0	0
1004	11	positively_autoregulated_gene	A gene that is positively autoregulated.	1315	0	0
1005	11	silenced	An attribute describing an epigenetic process where a gene is inactivated at transcriptional or translational level.	1316	0	0
1006	11	silenced_by_DNA_modification	An attribute describing an epigenetic process where a gene is inactivated by DNA modifications, resulting in repression of transcription.	1318	0	0
1007	11	silenced_by_DNA_methylation	An attribute describing an epigenetic process where a gene is inactivated by DNA methylation, resulting in repression of transcription.	1319	0	0
1008	11	translationally_regulated_gene	A gene that is translationally regulated.	1320	0	0
1009	11	allelically_excluded_gene	A gene that is allelically_excluded.	1321	0	0
1010	11	epigenetically_modified_gene	A gene that is epigenetically modified.	1322	0	0
1011	11	nuclear_mitochondrial (obsolete SO:0000899)	An attribute describing a nuclear pseudogene of a mitochndrial gene.	1323	1	0
1012	11	processed (obsolete SO:0000900)	An attribute describing a pseudogene where by an mRNA was retrotransposed. The mRNA sequence is transcribed back into the genome, lacking introns and promotors, but often including a polyA tail.	1324	1	0
1013	11	unequally_crossed_over (obsolete SO:0000901)	An attribute describing a pseudogene that was created by tandem duplication and unequal crossing over during recombination.	1325	1	0
1014	11	transgene	A transgene is a gene that has been transferred naturally or by any of a number of genetic engineering techniques from one organism to another.	1326	0	0
1015	11	endogenous_retroviral_sequence	\N	1328	0	0
1016	11	rearranged_at_DNA_level	An attribute to describe the sequence of a feature, where the DNA is rearranged.	1329	0	0
1017	11	status	An attribute describing the status of a feature, based on the available evidence.	1330	0	0
1018	11	independently_known	Attribute to describe a feature that is independently known - not predicted.	1331	0	0
1019	11	supported_by_sequence_similarity	An attribute to describe a feature that has been predicted using sequence similarity techniques.	1332	0	0
1020	11	supported_by_domain_match	An attribute to describe a feature that has been predicted using sequence similarity of a known domain.	1333	0	0
1021	11	supported_by_EST_or_cDNA	An attribute to describe a feature that has been predicted using sequence similarity to EST or cDNA data.	1334	0	0
1022	11	orphan	\N	1335	0	0
1023	11	predicted_by_ab_initio_computation	An attribute describing a feature that is predicted by a computer program that did not rely on sequence similarity.	1336	0	0
1024	11	asx_turn	A motif of three consecutive residues and one H-bond in which: residue(i) is Aspartate or Asparagine (Asx), the side-chain O of residue(i) is H-bonded to the main-chain NH of residue(i+2).	1337	0	0
1025	11	cloned_cDNA_insert	A clone insert made from cDNA.	1340	0	0
1026	11	cloned_genomic_insert	A clone insert made from genomic DNA.	1341	0	0
1027	11	engineered_insert	A clone insert that is engineered.	1342	0	0
1028	11	edit_operation (obsolete SO:0000916)	\N	1343	1	0
1029	11	insert_U (obsolete SO:0000917)	An edit to insert a U.	1344	1	0
1030	11	delete_U (obsolete SO:0000918)	An edit to delete a uridine.	1345	1	0
1031	11	substitute_A_to_I (obsolete SO:0000919)	An edit to substitute an I for an A.	1346	1	0
1032	11	insert_C (obsolete SO:0000920)	An edit to insert a cytidine.	1347	1	0
1033	11	insert_dinucleotide (obsolete SO:0000921)	An edit to insert a dinucleotide.	1348	1	0
1034	11	substitute_C_to_U (obsolete SO:0000922)	An edit to substitute an U for a C.	1349	1	0
1035	11	insert_G (obsolete SO:0000923)	An edit to insert a G.	1350	1	0
1036	11	insert_GC (obsolete SO:0000924)	An edit to insert a GC dinucleotide.	1351	1	0
1037	11	insert_GU (obsolete SO:0000925)	An edit to insert a GU dinucleotide.	1352	1	0
1038	11	insert_CU (obsolete SO:0000926)	An edit to insert a CU dinucleotide.	1353	1	0
1039	11	insert_AU (obsolete SO:0000927)	An edit to insert a AU dinucleotide.	1354	1	0
1040	11	insert_AA (obsolete SO:0000928)	An edit to insert a AA dinucleotide.	1355	1	0
1041	11	edited_mRNA	An mRNA that is edited.	1356	0	0
1042	11	guide_RNA_region	A region of guide RNA.	1357	0	0
1043	11	anchor_region	A region of a guide_RNA that base-pairs to a target mRNA.	1358	0	0
1044	11	pre_edited_mRNA	\N	1360	0	0
1045	11	intermediate	An attribute to describe a feature between stages of processing.	1361	0	0
1046	11	miRNA_target_site	A miRNA target site is a binding site where the molecule is a micro RNA.	1362	0	0
1047	11	edited_CDS	A CDS that is edited.	1364	0	0
1048	11	vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment	\N	1365	0	0
1049	11	vertebrate_immune_system_feature (obsolete SO:0000937)	\N	1366	1	0
1050	11	vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster	\N	1367	0	0
1051	11	vertebrate_immune_system_gene_recombination_signal_feature	\N	1368	0	0
1052	11	recombinationally_rearranged	\N	1369	0	0
1053	11	recombinationally_rearranged_vertebrate_immune_system_gene	A recombinationally rearranged gene of the vertebrate immune system.	1370	0	0
1054	11	attP_site	An integration/excision site of a phage chromosome at which a recombinase acts to insert the phage DNA at a cognate integration/excision site on a bacterial chromosome.	1371	0	0
1055	11	attB_site	An integration/excision site of a bacterial chromosome at which a recombinase acts to insert foreign DNA containing a cognate integration/excision site.	1372	0	0
1056	11	attL_site	A region that results from recombination between attP_site and attB_site, composed of the 5' portion of attB_site and the 3' portion of attP_site.	1373	0	0
1057	11	attR_site	A region that results from recombination between attP_site and attB_site, composed of the 5' portion of attP_site and the 3' portion of attB_site.	1374	0	0
1058	11	integration_excision_site	A region specifically recognised by a recombinase, which inserts or removes another region marked by a distinct cognate integration/excision site.	1375	0	0
1059	11	resolution_site	A region specifically recognised by a recombinase, which separates a physically contiguous circle of DNA into two physically separate circles.	1376	0	0
1060	11	inversion_site	A region specifically recognised by a recombinase, which inverts the region flanked by a pair of sites.	1377	0	0
1061	11	dif_site	A site at which replicated bacterial circular chromosomes are decatenated by site specific resolvase.	1378	0	0
1062	11	attC_site	An attC site is a sequence required for the integration of a DNA of an integron.	1379	0	0
1063	11	eukaryotic_terminator	\N	1380	0	0
1064	11	oriV	An origin of vegetative replication in plasmids and phages.	1381	0	0
1065	11	oriC	An origin of bacterial chromosome replication.	1382	0	0
1066	11	DNA_chromosome	Structural unit composed of a self-replicating, DNA molecule.	1383	0	0
1067	11	double_stranded_DNA_chromosome	Structural unit composed of a self-replicating, double-stranded DNA molecule.	1384	0	0
1068	11	single_stranded_DNA_chromosome	Structural unit composed of a self-replicating, single-stranded DNA molecule.	1385	0	0
1069	11	linear_double_stranded_DNA_chromosome	Structural unit composed of a self-replicating, double-stranded, linear DNA molecule.	1386	0	0
1070	11	circular_double_stranded_DNA_chromosome	Structural unit composed of a self-replicating, double-stranded, circular DNA molecule.	1387	0	0
1071	11	linear_single_stranded_DNA_chromosome	Structural unit composed of a self-replicating, single-stranded, linear DNA molecule.	1388	0	0
1072	11	circular_single_stranded_DNA_chromosome	Structural unit composed of a self-replicating, single-stranded, circular DNA molecule.	1389	0	0
1073	11	RNA_chromosome	Structural unit composed of a self-replicating, RNA molecule.	1390	0	0
1074	11	single_stranded_RNA_chromosome	Structural unit composed of a self-replicating, single-stranded RNA molecule.	1391	0	0
1075	11	linear_single_stranded_RNA_chromosome	Structural unit composed of a self-replicating, single-stranded, linear RNA molecule.	1392	0	0
1076	11	linear_double_stranded_RNA_chromosome	Structural unit composed of a self-replicating, double-stranded, linear RNA molecule.	1393	0	0
1077	11	double_stranded_RNA_chromosome	Structural unit composed of a self-replicating, double-stranded RNA molecule.	1394	0	0
1078	11	circular_single_stranded_RNA_chromosome	Structural unit composed of a self-replicating, single-stranded, circular DNA molecule.	1395	0	0
1079	11	circular_double_stranded_RNA_chromosome	Structural unit composed of a self-replicating, double-stranded, circular RNA molecule.	1396	0	0
1083	11	DNA_replication_mode (obsolete SO:0000971)	\N	1401	1	0
1084	11	RNA_replication_mode (obsolete SO:0000972)	\N	1402	1	0
1085	11	insertion_sequence	A terminal_inverted_repeat_element that is bacterial and only encodes the functions required for its transposition between these inverted repeats.	1403	0	0
1086	11	minicircle_gene	\N	1405	0	0
1087	11	cryptic	A feature_attribute describing a feature that is not manifest under normal conditions.	1406	0	0
1088	11	anchor_binding_site	\N	1407	0	0
1089	11	template_region	A region of a guide_RNA that specifies the insertions and deletions of bases in the editing of a target mRNA.	1408	0	0
1090	11	gRNA_encoding	A non-protein_coding gene that encodes a guide_RNA.	1409	0	0
1091	11	minicircle	A minicircle is a replicon, part of a kinetoplast, that encodes for guide RNAs.	1410	0	0
1092	11	rho_dependent_bacterial_terminator	\N	1413	0	0
1093	11	rho_independent_bacterial_terminator	\N	1414	0	0
1094	11	strand_attribute	\N	1415	0	0
1095	11	single	\N	1416	0	0
1096	11	double	\N	1417	0	0
1097	11	topology_attribute	\N	1418	0	0
1098	11	linear	A quality of a nucleotide polymer that has a 3'-terminal residue and a 5'-terminal residue.	1419	0	0
1556	11	asparagine	\N	2197	0	0
1099	11	circular	A quality of a nucleotide polymer that has no terminal nucleotide residues.	1420	0	0
1125	11	intron_domain	\N	1456	0	0
1100	11	class_II_RNA	Small non-coding RNA (59-60 nt long) containing 5' and 3' ends that are predicted to come together to form a stem structure. Identified in the social amoeba Dictyostelium discoideum and localized in the cytoplasm.	1421	0	0
1101	11	class_I_RNA	Small non-coding RNA (55-65 nt long) containing highly conserved 5' and 3' ends (16 and 8 nt, respectively) that are predicted to come together to form a stem structure. Identified in the social amoeba Dictyostelium discoideum and localized in the cytoplasm.	1423	0	0
1102	11	genomic_DNA	\N	1424	0	0
1103	11	BAC_cloned_genomic_insert	\N	1425	0	0
1104	11	consensus	\N	1426	0	0
1105	11	consensus_region	\N	1427	0	0
1106	11	consensus_mRNA	\N	1428	0	0
1107	11	predicted_gene	\N	1429	0	0
1108	11	gene_fragment	\N	1430	0	0
1109	11	recursive_splice_site	A recursive splice site is a splice site which subdivides a large intron. Recursive splicing is a mechanism that splices large introns by sub dividing the intron at non exonic elements and alternate exons.	1431	0	0
1110	11	BAC_end	A region of sequence from the end of a BAC clone that may provide a highly specific marker.	1433	0	0
1111	11	rRNA_16S	A large polynucleotide in Bacteria and Archaea, which functions as the small subunit of the ribosome.	1434	0	0
1130	11	copy_number_variation	A variation that increases or decreases the copy number of a given region.	1466	0	0
1126	11	wobble_base_pair	A type of non-canonical base pairing, most commonly between G and U, which is important for the secondary structure of RNAs. It has similar thermodynamic stability to the Watson-Crick pairing. Wobble base pairs only have two hydrogen bonds. Other wobble base pair possibilities are I-A, I-U and I-C.	1457	0	0
1136	11	polymorphic_sequence_variant	A sequence variant that is segregating in one or more natural populations of a species.	1476	0	0
1134	11	allele	An allele is one of a set of coexisting sequence variants of a gene.	1472	0	0
1112	11	rRNA_23S	A large polynucleotide in Bacteria and Archaea, which functions as the large subunit of the ribosome.	1436	0	0
1127	11	internal_guide_sequence	A purine-rich sequence in the group I introns which determines the locations of the splice sites in group I intron splicing and has catalytic activity.	1460	0	0
1132	11	chromosome_breakpoint	\N	1469	0	0
1138	11	genotype	A genotype is a variant genome, complete or incomplete.	1479	0	0
1128	11	silent_mutation	A sequence variant that does not affect protein function. Silent mutations may occur in genic ( CDS, UTR, intron etc) and intergenic regions. Silent mutations may have affects on processes such as splicing and regulation.	1461	0	0
1113	11	rRNA_25S	A large polynucleotide which functions as part of the large subunit of the ribosome in some eukaryotes.	1437	0	0
1135	11	haplotype	A haplotype is one of a set of coexisting sequence variants of a haplotype block.	1474	0	0
1129	11	epitope	A binding site that, in the molecule, interacts selectively and non-covalently with antibodies, B cells or T cells.	1464	0	0
1131	11	sequence_variant_affecting_copy_number (obsolete SO:0001020)	\N	1468	1	0
1133	11	inversion_breakpoint	The point within a chromosome where an inversion begins or ends.	1471	0	0
1114	11	solo_LTR	A recombination product between the 2 LTR of the same element.	1438	0	0
1557	11	lysine	\N	2198	0	0
1115	11	low_complexity	\N	1439	0	0
1137	11	genome	A genome is the sum of genetic material within a cell or virion.	1477	0	0
1116	11	low_complexity_region	\N	1440	0	0
1558	11	arginine	\N	2199	0	0
1117	11	prophage	A phage genome after it has established in the host genome in a latent/immune state either as a plasmid or as an integrated "island".	1441	0	0
1118	11	cryptic_prophage	A remnant of an integrated prophage in the host genome or an "island" in the host genome that includes phage like-genes.	1444	0	0
1119	11	tetraloop	A base-paired stem with loop of 4 non-hydrogen bonded nucleotides.	1446	0	0
1120	11	DNA_constraint_sequence	A double-stranded DNA used to control macromolecular structure and function.	1448	0	0
1121	11	i_motif	A cytosine rich domain whereby strands associate both inter- and intramolecularly at moderately acidic pH.	1449	0	0
1122	11	PNA_oligo	Peptide nucleic acid, is a chemical not known to occur naturally but is artificially synthesized and used in some biological research and medical treatments. The PNA backbone is composed of repeating N-(2-aminoethyl)-glycine units linked by peptide bonds. The purine and pyrimidine bases are linked to the backbone by methylene carbonyl bonds.	1451	0	0
1123	11	DNAzyme	A DNA sequence with catalytic activity.	1453	0	0
1124	11	MNP	A multiple nucleotide polymorphism with alleles of common length > 1, for example AAA/TTT.	1454	0	0
1139	11	diplotype	A diplotype is a pair of haplotypes from a given individual. It is a genotype where the phase is known.	1481	0	0
1140	11	direction_attribute	\N	1482	0	0
1141	11	forward	Forward is an attribute of the feature, where the feature is in the 5' to 3' direction.	1483	0	0
1142	11	reverse	Reverse is an attribute of the feature, where the feature is in the 3' to 5' direction. Again could be applied to primer.	1484	0	0
1143	11	mitochondrial_DNA	\N	1485	0	0
1144	11	chloroplast_DNA	\N	1487	0	0
120	8	related	\N	151	0	0
1145	11	mirtron	A de-branched intron which mimics the structure of pre-miRNA and enters the miRNA processing pathway without Drosha mediated cleavage.	1488	0	0
1146	11	piRNA	A small non coding RNA, part of a silencing system that prevents the spreading of selfish genetic elements.	1490	0	0
1175	11	active_peptide	Active peptides are proteins which are biologically active, released from a precursor molecule.	1532	0	0
1147	11	arginyl_tRNA	A tRNA sequence that has an arginine anticodon, and a 3' arginine binding region.	1492	0	0
1181	11	extramembrane_polypeptide_region	Polypeptide region that is localized outside of a lipid bilayer.	1546	0	0
1148	11	mobile_genetic_element	A nucleotide region with either intra-genome or intracellular moblity, of varying length, which often carry the information necessary for transfer and recombination with the host genome.	1493	0	0
1176	11	compositionally_biased_region_of_peptide	Polypeptide region that is rich in a particular amino acid or homopolymeric and greater than three residues in length.	1536	0	0
1149	11	extrachromosomal_mobile_genetic_element	An MGE that is not integrated into the host chromosome.	1496	0	0
1150	11	integrated_mobile_genetic_element	An MGE that is integrated into the host chromosome.	1497	0	0
1151	11	integrated_plasmid	A plasmid sequence that is integrated within the host chromosome.	1498	0	0
1177	11	polypeptide_motif	A sequence motif is a short (up to 20 amino acids) region of biological interest. Such motifs, although they are too short to constitute functional domains, share sequence similarities and are conserved in different proteins. They display a common function (protein-binding, subcellular location etc.).	1538	0	0
1152	11	viral_sequence	The region of nucleotide sequence of a virus, a submicroscopic particle that replicates by infecting a host cell.	1499	0	0
1185	11	membrane_peptide_loop	Polypeptide region localized within the lipid bilayer where both ends traverse the same membrane.	1554	0	0
1178	11	polypeptide_repeat	A polypeptide_repeat is a single copy of an internal sequence repetition.	1540	0	0
1153	11	phage_sequence	The nucleotide sequence of a virus that infects bacteria.	1500	0	0
1182	11	cytoplasmic_polypeptide_region	Polypeptide region that is localized inside the cytoplasm.	1548	0	0
1179	11	polypeptide_structural_region	Region of polypeptide with a given structural property.	1542	0	0
1154	11	attCtn_site	An attachment site located on a conjugative transposon and used for site-specific integration of a conjugative transposon.	1502	0	0
1183	11	non_cytoplasmic_polypeptide_region	Polypeptide region that is localized outside of a lipid bilayer and outside of the cytoplasm.	1550	0	0
1155	11	nuclear_mt_pseudogene	A nuclear pseudogene of either coding or non-coding mitochondria derived sequence.	1503	0	0
1184	11	intramembrane_polypeptide_region	Polypeptide region present in the lipid bilayer.	1552	0	0
1180	11	membrane_structure	Arrangement of the polypeptide with respect to the lipid bilayer.	1544	0	0
1186	11	transmembrane_polypeptide_region	Polypeptide region traversing the lipid bilayer.	1556	0	0
1156	11	cointegrated_plasmid	A MGE region consisting of two fused plasmids resulting from a replicative transposition event.	1505	0	0
1428	11	mannosyl_queuosine	Mannosyl_queuosine is a modified 7-deazoguanosine.	1981	0	0
1157	11	IRLinv_site	Component of the inversion site located at the left of a region susceptible to site-specific inversion.	1507	0	0
1158	11	IRRinv_site	Component of the inversion site located at the right of a region susceptible to site-specific inversion.	1508	0	0
1159	11	inversion_site_part	A region located within an inversion site.	1509	0	0
1160	11	defective_conjugative_transposon	An island that contains genes for integration/excision and the gene and site for the initiation of intercellular transfer by conjugation. It can be complemented for transfer by a conjugative transposon.	1510	0	0
1161	11	repeat_fragment	A portion of a repeat, interrupted by the insertion of another element.	1512	0	0
1162	11	nested_region (obsolete SO:0001051)	\N	1513	1	0
1163	11	nested_repeat (obsolete SO:0001052)	\N	1514	1	0
1164	11	nested_transposon (obsolete SO:0001053)	\N	1515	1	0
1165	11	transposon_fragment	A portion of a transposon, interrupted by the insertion of another element.	1516	0	0
1166	11	transcriptional_cis_regulatory_region	A regulatory_region that modulates the transcription of a gene or genes.	1517	0	0
1167	11	splicing_regulatory_region	A regulatory_region that modulates splicing.	1518	0	0
1168	11	enhanceosome (obsolete SO:0001057)	\N	1519	1	0
1169	11	promoter_targeting_sequence	A transcriptional_cis_regulatory_region that restricts the activity of a CRM to a single promoter and which functions only when both itself and an insulator are located between the CRM and the promoter.	1520	0	0
1170	11	sequence_alteration	A sequence_alteration is a sequence_feature whose extent is the deviation from another sequence.	1521	0	0
1171	11	sequence_variant	A sequence_variant is a non exact copy of a sequence_feature or genome exhibiting one or more sequence_alteration.	1524	0	0
1172	11	propeptide_cleavage_site	The propeptide_cleavage_site is the arginine/lysine boundary on a propeptide where cleavage occurs.	1525	0	0
1173	11	propeptide	Part of a peptide chain which is cleaved off during the formation of the mature protein.	1527	0	0
1174	11	immature_peptide_region	An immature_peptide_region is the extent of the peptide after it has been translated and before any processing occurs.	1530	0	0
1187	11	polypeptide_secondary_structure	A region of peptide with secondary structure has hydrogen bonding along the peptide chain that causes a defined conformation of the chain.	1559	0	0
1188	11	polypeptide_structural_motif	Motif is a three-dimensional structural element within the chain, which appears also in a variety of other molecules. Unlike a domain, a motif does not need to form a stable globular unit.	1562	0	0
1189	11	coiled_coil	A coiled coil is a structural motif in proteins, in which alpha-helices are coiled together like the strands of a rope.	1565	0	0
1190	11	helix_turn_helix	A motif comprising two helices separated by a turn.	1568	0	0
1191	11	polypeptide_sequencing_information	Incompatibility in the sequence due to some experimental problem.	1570	0	0
1192	11	non_adjacent_residues	Indicates that two consecutive residues in a fragment sequence are not consecutive in the full-length protein and that there are a number of unsequenced residues between them.	1572	0	0
1193	11	non_terminal_residue	The residue at an extremity of the sequence is not the terminal residue.	1574	0	0
1194	11	sequence_conflict	Different sources report differing sequences.	1576	0	0
1195	11	sequence_uncertainty	Describes the positions in a sequence where the authors are unsure about the sequence assignment.	1578	0	0
1196	11	cross_link (obsolete SO:0001087)	Posttranslationally formed amino acid bonds.	1580	1	0
1197	11	disulfide_bond (obsolete SO:0001088)	The covalent bond between sulfur atoms that binds two peptide chains or different parts of one peptide chain and is a structural determinant in many protein molecules.	1582	1	0
1198	11	post_translationally_modified_region	A region where a transformation occurs in a protein after it has been synthesized. This which may regulate, stabilize, crosslink or introduce new chemical functionalities in the protein.	1584	0	0
1199	11	covalent_binding_site (obsolete SO:0001090)	Binding involving a covalent bond.	1587	1	0
1200	11	non_covalent_binding_site (obsolete SO:0001091)	Binding site for any chemical group (co-enzyme, prosthetic group, etc.).	1589	1	0
1201	11	polypeptide_metal_contact	A binding site that, in the polypeptide molecule, interacts selectively and non-covalently with metal ions.	1591	0	0
1202	11	protein_protein_contact	A binding site that, in the protein molecule, interacts selectively and non-covalently with polypeptide residues.	1593	0	0
1203	11	polypeptide_calcium_ion_contact_site	A binding site that, in the polypeptide molecule, interacts selectively and non-covalently with calcium ions.	1597	0	0
1204	11	polypeptide_cobalt_ion_contact_site	A binding site that, in the polypeptide molecule, interacts selectively and non-covalently with cobalt ions.	1599	0	0
1205	11	polypeptide_copper_ion_contact_site	A binding site that, in the polypeptide molecule, interacts selectively and non-covalently with copper ions.	1601	0	0
1206	11	polypeptide_iron_ion_contact_site	A binding site that, in the polypeptide molecule, interacts selectively and non-covalently with iron ions.	1603	0	0
1207	11	polypeptide_magnesium_ion_contact_site	A binding site that, in the polypeptide molecule, interacts selectively and non-covalently with magnesium ions.	1605	0	0
1208	11	polypeptide_manganese_ion_contact_site	A binding site that, in the polypeptide molecule, interacts selectively and non-covalently with manganese ions.	1607	0	0
1209	11	polypeptide_molybdenum_ion_contact_site	A binding site that, in the polypeptide molecule, interacts selectively and non-covalently with molybdenum ions.	1609	0	0
1210	11	polypeptide_nickel_ion_contact_site	A binding site that, in the polypeptide molecule, interacts selectively and non-covalently with nickel ions.	1611	0	0
1211	11	polypeptide_tungsten_ion_contact_site	A binding site that, in the polypeptide molecule, interacts selectively and non-covalently with tungsten ions.	1613	0	0
1212	11	polypeptide_zinc_ion_contact_site	A binding site that, in the polypeptide molecule, interacts selectively and non-covalently with zinc ions.	1615	0	0
1213	11	catalytic_residue	Amino acid involved in the activity of an enzyme.	1617	0	0
1214	11	polypeptide_ligand_contact	Residues which interact with a ligand.	1619	0	0
1215	11	asx_motif	A motif of five consecutive residues and two H-bonds in which: Residue(i) is Aspartate or Asparagine (Asx), side-chain O of residue(i) is H-bonded to the main-chain NH of residue(i+2) or (i+3), main-chain CO of residue(i) is H-bonded to the main-chain NH of residue(i+3) or (i+4).	1621	0	0
1216	11	beta_bulge	A motif of three residues within a beta-sheet in which the main chains of two consecutive residues are H-bonded to that of the third, and in which the dihedral angles are as follows: Residue(i): -140 degrees < phi(l) -20 degrees , -90 degrees < psi(l) < 40 degrees. Residue (i+1): -180 degrees < phi < -25 degrees or +120 degrees < phi < +180 degrees, +40 degrees < psi < +180 degrees or -180 degrees < psi < -120 degrees.	1623	0	0
1217	11	beta_bulge_loop	A motif of three residues within a beta-sheet consisting of two H-bonds. Beta bulge loops often occur at the loop ends of beta-hairpins.	1626	0	0
1218	11	beta_bulge_loop_five	A motif of three residues within a beta-sheet consisting of two H-bonds in which: the main-chain NH of residue(i) is H-bonded to the main-chain CO of residue(i+4), the main-chain CO of residue i is H-bonded to the main-chain NH of residue(i+3), these loops have an RL nest at residues i+2 and i+3.	1629	0	0
1219	11	beta_bulge_loop_six	A motif of three residues within a beta-sheet consisting of two H-bonds in which: the main-chain NH of residue(i) is H-bonded to the main-chain CO of residue(i+5), the main-chain CO of residue i is H-bonded to the main-chain NH of residue(i+4), these loops have an RL nest at residues i+3 and i+4.	1631	0	0
1220	11	beta_strand	A beta strand describes a single length of polypeptide chain that forms part of a beta sheet. A single continuous stretch of amino acids adopting an extended conformation of hydrogen bonds between the N-O and the C=O of another part of the peptide. This forms a secondary protein structure in which two or more extended polypeptide regions are hydrogen-bonded to one another in a planar array.	1633	0	0
1244	11	beta_turn_left_handed_type_two	Left handed type II: A motif of four consecutive residues that may contain one H-bond, which, if present, is between the main-chain CO of the first residue and the main-chain NH of the fourth. It is characterized by the dihedral angles: Residue(i+1): -140 degrees > phi > -20 degrees, +80 degrees > psi > +180 degrees. Residue(i+2): +20 degrees > phi > +140 degrees, -40 degrees > psi > +90 degrees.	1686	0	0
1429	11	seven_cyano_seven_deazaguanosine	7_cyano_7_deazaguanosine is a modified 7-deazoguanosine.	1983	0	0
1221	11	antiparallel_beta_strand	A peptide region which hydrogen bonded to another region of peptide running in the oposite direction (one running N-terminal to C-terminal and one running C-terminal to N-terminal). Hydrogen bonding occurs between every other C=O from one strand to every other N-H on the adjacent strand. In this case, if two atoms C-alpha (i) and C-alpha (j) are adjacent in two hydrogen-bonded beta strands, then they form two mutual backbone hydrogen bonds to each other's flanking peptide groups; this is known as a close pair of hydrogen bonds. The peptide backbone dihedral angles (phi, psi) are about (-140 degrees, 135 degrees) in antiparallel sheets.	1636	0	0
1222	11	parallel_beta_strand	A peptide region which hydrogen bonded to another region of peptide running in the oposite direction (both running N-terminal to C-terminal). This orientation is slightly less stable because it introduces nonplanarity in the inter-strand hydrogen bonding pattern. Hydrogen bonding occurs between every other C=O from one strand to every other N-H on the adjacent strand. In this case, if two atoms C-alpha (i)and C-alpha (j) are adjacent in two hydrogen-bonded beta strands, then they do not hydrogen bond to each other; rather, one residue forms hydrogen bonds to the residues that flank the other (but not vice versa). For example, residue i may form hydrogen bonds to residues j - 1 and j + 1; this is known as a wide pair of hydrogen bonds. By contrast, residue j may hydrogen-bond to different residues altogether, or to none at all. The dihedral angles (phi, psi) are about (-120 degrees, 115 degrees) in parallel sheets.	1638	0	0
1223	11	peptide_helix	A helix is a secondary_structure conformation where the peptide backbone forms a coil.	1640	0	0
1224	11	left_handed_peptide_helix	A left handed helix is a region of peptide where the coiled conformation turns in an anticlockwise, left handed screw.	1642	0	0
1225	11	right_handed_peptide_helix	A right handed helix is a region of peptide where the coiled conformation turns in a clockwise, right handed screw.	1644	0	0
1226	11	alpha_helix	The helix has 3.6 residues per turn which corersponds to a translation of 1.5 angstroms (= 0.15 nm) along the helical axis. Every backbone N-H group donates a hydrogen bond to the backbone C=O group of the amino acid four residues earlier.	1646	0	0
1227	11	pi_helix	The pi helix has 4.1 residues per turn and a translation of 1.15  (=0.115 nm) along the helical axis. The N-H group of an amino acid forms a hydrogen bond with the C=O group of the amino acid five residues earlier.	1649	0	0
1228	11	three_ten_helix	The 3-10 helix has 3 residues per turn with a translation of 2.0 angstroms (=0.2 nm) along the helical axis. The N-H group of an amino acid forms a hydrogen bond with the C=O group of the amino acid three residues earlier.	1652	0	0
1229	11	polypeptide_nest_motif	A motif of two consecutive residues with dihedral angles. Nest should not have Proline as any residue. Nests frequently occur as parts of other motifs such as Schellman loops.	1655	0	0
1230	11	polypeptide_nest_left_right_motif	A motif of two consecutive residues with dihedral angles: Residue(i): +20 degrees < phi < +140 degrees, -40 degrees < psi < +90 degrees. Residue(i+1): -140 degrees < phi < -20 degrees, -90 degrees < psi < +40 degrees.	1657	0	0
1231	11	polypeptide_nest_right_left_motif	A motif of two consecutive residues with dihedral angles: Residue(i): -140 degrees < phi < -20 degrees, -90 degrees < psi < +40 degrees. Residue(i+1): +20 degrees < phi < +140 degrees, -40 degrees < psi < +90 degrees.	1659	0	0
1232	11	schellmann_loop	A motif of six or seven consecutive residues that contains two H-bonds.	1661	0	0
1233	11	schellmann_loop_seven	Wild type: A motif of seven consecutive residues that contains two H-bonds in which: the main-chain CO of residue(i) is H-bonded to the main-chain NH of residue(i+6), the main-chain CO of residue(i+1) is H-bonded to the main-chain NH of residue(i+5).	1663	0	0
1234	11	schellmann_loop_six	Common Type: A motif of six consecutive residues that contains two H-bonds in which: the main-chain CO of residue(i) is H-bonded to the main-chain NH of residue(i+5) the main-chain CO of residue(i+1) is H-bonded to the main-chain NH of residue(i+4).	1665	0	0
1235	11	serine_threonine_motif	A motif of five consecutive residues and two hydrogen bonds in which: residue(i) is Serine (S) or Threonine (T), the side-chain O of residue(i) is H-bonded to the main-chain NH of residue(i+2) or (i+3) , the main-chain CO group of residue(i) is H-bonded to the main-chain NH of residue(i+3) or (i+4).	1667	0	0
1236	11	serine_threonine_staple_motif	A motif of four or five consecutive residues and one H-bond in which: residue(i) is Serine (S) or Threonine (T), the side-chain OH of residue(i) is H-bonded to the main-chain CO of residue(i3) or (i4), Phi angles of residues(i1), (i2) and (i3) are negative.	1669	0	0
1237	11	polypeptide_turn_motif	A reversal in the direction of the backbone of a protein that is stabilized by hydrogen bond between backbone NH and CO groups, involving no more than 4 amino acid residues.	1671	0	0
1238	11	asx_turn_left_handed_type_one	Left handed type I (dihedral angles):- Residue(i): -140 degrees < chi (1) -120 degrees < -20 degrees, -90 degrees < psi +120 degrees < +40 degrees. Residue(i+1): -140 degrees < phi < -20 degrees, -90 degrees < psi < +40 degrees.	1674	0	0
1239	11	asx_turn_left_handed_type_two	Left handed type II (dihedral angles):- Residue(i): -140 degrees < chi (1) -120 degrees < -20 degrees, +80 degrees < psi +120 degrees < +180 degrees. Residue(i+1): +20 degrees < phi < +140 degrees, -40 degrees < psi < +90 degrees.	1676	0	0
1240	11	asx_turn_right_handed_type_two	Right handed type II (dihedral angles):- Residue(i): -140 degrees < chi (1) -120 degrees < -20 degrees, +80 degrees < psi +120 degrees < +180 degrees. Residue(i+1): +20 degrees < phi < +140 degrees, -40 degrees < psi < +90 degrees.	1678	0	0
1241	11	asx_turn_right_handed_type_one	Right handed type I (dihedral angles):- Residue(i): -140 degrees < chi (1) -120 degrees < -20 degrees, -90 degrees < psi +120 degrees < +40 degrees. Residue(i+1): -140 degrees < phi < -20 degrees, -90 degrees < psi < +40 degrees.	1680	0	0
1242	11	beta_turn	A motif of four consecutive residues that may contain one H-bond, which, if present, is between the main-chain CO of the first residue and the main-chain NH of the fourth. It is characterized by the dihedral angles of the second and third residues, which are the basis for sub-categorization.	1682	0	0
1243	11	beta_turn_left_handed_type_one	Left handed type I:A motif of four consecutive residues that may contain one H-bond, which, if present, is between the main-chain CO of the first residue and the main-chain NH of the fourth. It is characterized by the dihedral angles:- Residue(i+1): -140 degrees > phi > -20 degrees, -90 degrees > psi > +40 degrees. Residue(i+2): -140 degrees > phi > -20 degrees, -90 degrees > psi > +40 degrees.	1684	0	0
1359	11	STS_map	An STS map is a physical map organized by the unique STS landmarks.	1864	0	0
1360	11	RH_map	A radiation hybrid map is a physical map.	1865	0	0
1245	11	beta_turn_right_handed_type_one	Right handed type I:A motif of four consecutive residues that may contain one H-bond, which, if present, is between the main-chain CO of the first residue and the main-chain NH of the fourth. It is characterized by the dihedral angles: Residue(i+1): -140 degrees < phi < -20 degrees, -90 degrees < psi < +40 degrees. Residue(i+2): -140 degrees < phi < -20 degrees, -90 degrees < psi < +40 degrees.	1688	0	0
1246	11	beta_turn_right_handed_type_two	Right handed type II:A motif of four consecutive residues that may contain one H-bond, which, if present, is between the main-chain CO of the first residue and the main-chain NH of the fourth. It is characterized by the dihedral angles: Residue(i+1): -140 degrees < phi < -20 degrees, +80 degrees < psi < +180 degrees. Residue(i+2): +20 degrees < phi < +140 degrees, -40 degrees < psi < +90 degrees.	1690	0	0
1247	11	gamma_turn	Gamma turns, defined for 3 residues i,( i+1),( i+2) if a hydrogen bond exists between residues i and i+2 and the phi and psi angles of residue i+1 fall within 40 degrees.	1692	0	0
1248	11	gamma_turn_classic	Gamma turns, defined for 3 residues i, i+1, i+2 if a hydrogen bond exists between residues i and i+2 and the phi and psi angles of residue i+1 fall within 40 degrees: phi(i+1)=75.0 - psi(i+1)=-64.0.	1694	0	0
1249	11	gamma_turn_inverse	Gamma turns, defined for 3 residues i, i+1, i+2 if a hydrogen bond exists between residues i and i+2 and the phi and psi angles of residue i+1 fall within 40 degrees: phi(i+1)=-79.0 - psi(i+1)=69.0.	1696	0	0
1250	11	serine_threonine_turn	A motif of three consecutive residues and one H-bond in which: residue(i) is Serine (S) or Threonine (T), the side-chain O of residue(i) is H-bonded to the main-chain NH of residue(i+2).	1698	0	0
1251	11	st_turn_left_handed_type_one	The peptide twists in an anticlockwise, left handed manner. The dihedral angles for this turn are: Residue(i): -140 degrees < chi(1) -120 degrees < -20 degrees, -90 degrees psi +120 degrees < +40 degrees, residue(i+1): -140 degrees < phi < -20 degrees, -90 < psi < +40 degrees.	1700	0	0
1252	11	st_turn_left_handed_type_two	The peptide twists in an anticlockwise, left handed manner. The dihedral angles for this turn are: Residue(i): -140 degrees < chi(1) -120 degrees < -20 degrees, +80 degrees psi +120 degrees < +180 degrees, residue(i+1): +20 degrees < phi < +140 degrees, -40 < psi < +90 degrees.	1702	0	0
1253	11	st_turn_right_handed_type_one	The peptide twists in an clockwise, right handed manner. The dihedral angles for this turn are: Residue(i): -140 degrees < chi(1) -120 degrees < -20 degrees, -90 degrees psi +120 degrees < +40 degrees, residue(i+1): -140 degrees < phi < -20 degrees, -90 < psi < +40 degrees.	1704	0	0
1254	11	st_turn_right_handed_type_two	The peptide twists in an clockwise, right handed manner. The dihedral angles for this turn are: Residue(i): -140 degrees < chi(1) -120 degrees < -20 degrees, +80 degrees psi +120 degrees < +180 degrees, residue(i+1): +20 degrees < phi < +140 degrees, -40 < psi < +90 degrees.	1706	0	0
1255	11	polypeptide_variation_site	A site of sequence variation (alteration). Alternative sequence due to naturally occuring events such as polymorphisms and altermatve splicing or experimental methods such as site directed mutagenesis.	1708	0	0
1256	11	natural_variant_site	Describes the natural sequence variants due to polymorphisms, disease-associated mutations, RNA editing and variations between strains, isolates or cultivars.	1710	0	0
1257	11	mutated_variant_site	Site which has been experimentally altered.	1712	0	0
1258	11	alternate_sequence_site	Description of sequence variants produced by alternative splicing, alternative promoter usage, alternative initiation and ribosomal frameshifting.	1714	0	0
1259	11	beta_turn_type_six	A motif of four consecutive peptide resides of type VIa or type VIb and where the i+2 residue is cis-proline.	1717	0	0
1260	11	beta_turn_type_six_a	A motif of four consecutive peptide residues, of which the i+2 residue is proline, and that may contain one H-bond, which, if present, is between the main-chain CO of the first residue and the main-chain NH of the fourth and is characterized by the dihedral angles: Residue(i+1): phi ~ -60 degrees, psi ~ 120 degrees. Residue(i+2): phi ~ -90 degrees, psi ~ 0 degrees.	1718	0	0
1261	11	beta_turn_type_six_a_one	\N	1720	0	0
1262	11	beta_turn_type_six_a_two	\N	1721	0	0
1263	11	beta_turn_type_six_b	A motif of four consecutive peptide residues, of which the i+2 residue is proline, and that may contain one H-bond, which, if present, is between the main-chain CO of the first residue and the main-chain NH of the fourth and is characterized by the dihedral angles: Residue(i+1): phi ~ -120 degrees, psi ~ 120 degrees. Residue(i+2): phi ~ -60 degrees, psi ~ 0 degrees.	1722	0	0
1264	11	beta_turn_type_eight	A motif of four consecutive peptide residues that may contain one H-bond, which, if present, is between the main-chain CO of the first residue and the main-chain NH of the fourth and is characterized by the dihedral angles: Residue(i+1): phi ~ -60 degrees, psi ~ -30 degrees. Residue(i+2): phi ~ -120 degrees, psi ~ 120 degrees.	1723	0	0
1265	11	DRE_motif	A sequence element characteristic of some RNA polymerase II promoters, usually located between -10 and -60 relative to the TSS. Consensus sequence is WATCGATW.	1724	0	0
1266	11	DMv4_motif	A sequence element characteristic of some RNA polymerase II promoters, located immediately upstream of some TATA box elements with respect to the TSS (+1). Consensus sequence is YGGTCACACTR. Marked spatial preference within core promoter; tend to occur near the TSS, although not as tightly as INR (SO:0000014).	1726	0	0
1267	11	E_box_motif	A sequence element characteristic of some RNA polymerase II promoters, usually located between -60 and +1 relative to the TSS. Consensus sequence is AWCAGCTGWT. Tends to co-occur with DMv2 (SO:0001161). Tends to not occur with DPE motif (SO:0000015).	1728	0	0
1268	11	DMv5_motif	A sequence element characteristic of some RNA polymerase II promoters, usually located between -50 and -10 relative to the TSS. Consensus sequence is KTYRGTATWTTT. Tends to co-occur with DMv4 (SO:0001157) . Tends to not occur with DPE motif (SO:0000015) or MTE (SO:0001162).	1730	0	0
1269	11	DMv3_motif	A sequence element characteristic of some RNA polymerase II promoters, usually located between -30 and +15 relative to the TSS. Consensus sequence is KNNCAKCNCTRNY. Tends to co-occur with DMv2 (SO:0001161). Tends to not occur with DPE motif (SO:0000015) or MTE (0001162).	1731	0	0
1270	11	DMv2_motif	A sequence element characteristic of some RNA polymerase II promoters, usually located between -60 and -45 relative to the TSS. Consensus sequence is MKSYGGCARCGSYSS. Tends to co-occur with DMv3 (SO:0001160). Tends to not occur with DPE motif (SO:0000015) or MTE (SO:0001162).	1732	0	0
1430	11	seven_aminomethyl_seven_deazaguanosine	7_aminomethyl_7_deazaguanosine is a modified 7-deazoguanosine.	1985	0	0
1271	11	MTE	A sequence element characteristic of some RNA polymerase II promoters, usually located between +20 and +30 relative to the TSS. Consensus sequence is CSARCSSAACGS. Tends to co-occur with INR motif (SO:0000014). Tends to not occur with DPE motif (SO:0000015) or DMv5 (SO:0001159).	1733	0	0
1272	11	INR1_motif	A promoter motif with consensus sequence TCATTCG.	1735	0	0
1273	11	DPE1_motif	A promoter motif with consensus sequence CGGACGT.	1737	0	0
1274	11	DMv1_motif	A promoter motif with consensus sequence CARCCCT.	1738	0	0
1275	11	GAGA_motif	A non directional promoter motif with consensus sequence GAGAGCG.	1739	0	0
1276	11	NDM2_motif	A non directional promoter motif with consensus CGMYGYCR.	1740	0	0
1277	11	NDM3_motif	A non directional promoter motif with consensus sequence GAAAGCT.	1741	0	0
1278	11	ds_RNA_viral_sequence	A ds_RNA_viral_sequence is a viral_sequence that is the sequence of a virus that exists as double stranded RNA.	1742	0	0
1279	11	polinton	A kind of DNA transposon that populates the genomes of protists, fungi, and animals, characterized by a unique set of proteins necessary for their transposition, including a protein-primed DNA polymerase B, retroviral integrase, cysteine protease, and ATPase. Polintons are characterized by 6-bp target site duplications, terminal-inverted repeats that are several hundred nucleotides long, and 5'-AG and TC-3' termini. Polintons exist as autonomous and nonautonomous elements.	1743	0	0
1280	11	rRNA_21S	A component of the large ribosomal subunit in mitochondrial rRNA.	1745	0	0
1281	11	tRNA_region	A region of a tRNA.	1746	0	0
1282	11	anticodon_loop	A sequence of seven nucleotide bases in tRNA which contains the anticodon. It has the sequence 5'-pyrimidine-purine-anticodon-modified purine-any base-3.	1747	0	0
1283	11	anticodon	A sequence of three nucleotide bases in tRNA which recognizes a codon in mRNA.	1749	0	0
1284	11	CCA_tail	Base sequence at the 3' end of a tRNA. The 3'-hydroxyl group on the terminal adenosine is the attachment point for the amino acid.	1751	0	0
1285	11	DHU_loop	Non-base-paired sequence of nucleotide bases in tRNA. It contains several dihydrouracil residues.	1752	0	0
1286	11	T_loop	Non-base-paired sequence of three nucleotide bases in tRNA. It has sequence T-Psi-C.	1754	0	0
1287	11	pyrrolysine_tRNA_primary_transcript	A primary transcript encoding pyrrolysyl tRNA (SO:0000766).	1755	0	0
1288	11	U3_snoRNA	U3 snoRNA is a member of the box C/D class of small nucleolar RNAs. The U3 snoRNA secondary structure is characterised by a small 5' domain (with boxes A and A'), and a larger 3' domain (with boxes B, C, C', and D), the two domains being linked by a single-stranded hinge. Boxes B and C form the B/C motif, which appears to be exclusive to U3 snoRNAs, and boxes C' and D form the C'/D motif. The latter is functionally similar to the C/D motifs found in other snoRNAs. The 5' domain and the hinge region act as a pre-rRNA-binding domain. The 3' domain has conserved protein-binding sites. Both the box B/C and box C'/D motifs are sufficient for nuclear retention of U3 snoRNA. The box C'/D motif is also necessary for nucleolar localization, stability and hypermethylation of U3 snoRNA. Both box B/C and C'/D motifs are involved in specific protein interactions and are necessary for the rRNA processing functions of U3 snoRNA.	1756	0	0
1289	11	AU_rich_element	A cis-acting element found in the 3' UTR of some mRNA which is rich in AUUUA pentamers. Messenger RNAs bearing multiple AU-rich elements are often unstable.	1759	0	0
1290	11	Bruno_response_element	A cis-acting element found in the 3' UTR of some mRNA which is bound by the Drosophila Bruno protein and its homologs.	1762	0	0
1291	11	iron_responsive_element	A regulatory sequence found in the 5' and 3' UTRs of many mRNAs which encode iron-binding proteins. It has a hairpin structure and is recognized by trans-acting proteins known as iron-regulatory proteins.	1764	0	0
1292	11	morpholino_backbone	An attribute describing a sequence composed of nucleobases bound to a morpholino backbone. A morpholino backbone consists of morpholine (CHEBI:34856) rings connected by phosphorodiamidate linkages.	1768	0	0
1293	11	PNA	An attribute describing a sequence composed of peptide nucleic acid (CHEBI:48021), a chemical consisting of nucleobases bound to a backbone composed of repeating N-(2-aminoethyl)-glycine units linked by peptide bonds. The purine and pyrimidine bases are linked to the backbone by methylene carbonyl bonds.	1770	0	0
1294	11	enzymatic	An attribute describing the sequence of a transcript that has catalytic activity with or without an associated ribonucleoprotein.	1771	0	0
1295	11	ribozymic	An attribute describing the sequence of a transcript that has catalytic activity even without an associated ribonucleoprotein.	1772	0	0
1296	11	pseudouridylation_guide_snoRNA	A snoRNA that specifies the site of pseudouridylation in an RNA molecule by base pairing with a short sequence around the target residue.	1773	0	0
1297	11	LNA	An attribute describing a sequence consisting of nucleobases attached to a repeating unit made of 'locked' deoxyribose rings connected to a phosphate backbone. The deoxyribose unit's conformation is 'locked' by a 2'-C,4'-C-oxymethylene link.	1776	0	0
1298	11	LNA_oligo	An oligo composed of LNA residues.	1778	0	0
1299	11	TNA	An attribute describing a sequence consisting of nucleobases attached to a repeating unit made of threose rings connected to a phosphate backbone.	1780	0	0
1300	11	TNA_oligo	An oligo composed of TNA residues.	1782	0	0
1301	11	GNA	An attribute describing a sequence consisting of nucleobases attached to a repeating unit made of an acyclic three-carbon propylene glycol connected to a phosphate backbone. It has two enantiomeric forms, (R)-GNA and (S)-GNA.	1784	0	0
1302	11	GNA_oligo	An oligo composed of GNA residues.	1786	0	0
1303	11	R_GNA	An attribute describing a GNA sequence in the (R)-GNA enantiomer.	1788	0	0
1304	11	R_GNA_oligo	An oligo composed of (R)-GNA residues.	1790	0	0
1305	11	S_GNA	An attribute describing a GNA sequence in the (S)-GNA enantiomer.	1791	0	0
1306	11	S_GNA_oligo	An oligo composed of (S)-GNA residues.	1793	0	0
1307	11	ds_DNA_viral_sequence	A ds_DNA_viral_sequence is a viral_sequence that is the sequence of a virus that exists as double stranded DNA.	1794	0	0
1308	11	ss_RNA_viral_sequence	A ss_RNA_viral_sequence is a viral_sequence that is the sequence of a virus that exists as single stranded RNA.	1795	0	0
1361	11	sonicate_fragment	A DNA fragment generated by sonication. Sonication is a technique used to sheer DNA into smaller fragments.	1866	0	0
1542	11	alanine	\N	2183	0	0
1309	11	negative_sense_ssRNA_viral_sequence	A negative_sense_RNA_viral_sequence is a ss_RNA_viral_sequence that is the sequence of a single stranded RNA virus that is complementary to mRNA and must be converted to positive sense RNA by RNA polymerase before translation.	1796	0	0
1310	11	positive_sense_ssRNA_viral_sequence	A positive_sense_RNA_viral_sequence is a ss_RNA_viral_sequence that is the sequence of a single stranded RNA virus that can be immediately translated by the host.	1797	0	0
1311	11	ambisense_ssRNA_viral_sequence	A ambisense_RNA_virus is a ss_RNA_viral_sequence that is the sequence of a single stranded RNA virus with both messenger and anti messenger polarity.	1798	0	0
1312	11	RNA_polymerase_promoter	A region (DNA) to which RNA polymerase binds, to begin transcription.	1799	0	0
1313	11	Phage_RNA_Polymerase_Promoter	A region (DNA) to which Bacteriophage RNA polymerase binds, to begin transcription.	1801	0	0
1314	11	SP6_RNA_Polymerase_Promoter	A region (DNA) to which the SP6 RNA polymerase binds, to begin transcription.	1802	0	0
1315	11	T3_RNA_Polymerase_Promoter	A DNA sequence to which the T3 RNA polymerase binds, to begin transcription.	1803	0	0
1316	11	T7_RNA_Polymerase_Promoter	A region (DNA) to which the T7 RNA polymerase binds, to begin transcription.	1804	0	0
1317	11	five_prime_EST	An EST read from the 5' end of a transcript that usually codes for a protein. These regions tend to be conserved across species and do not change much within a gene family.	1805	0	0
1318	11	three_prime_EST	An EST read from the 3' end of a transcript. They are more likely to fall within non-coding, or untranslated regions(UTRs).	1807	0	0
1319	11	translational_frameshift	The region of mRNA (not divisible by 3 bases) that is skipped during the process of translational frameshifting (GO:0006452), causing the reading frame to be different.	1808	0	0
1320	11	plus_1_translational_frameshift	The region of mRNA 1 base long that is skipped during the process of translational frameshifting (GO:0006452), causing the reading frame to be different.	1810	0	0
1321	11	plus_2_translational_frameshift	The region of mRNA 2 bases long that is skipped during the process of translational frameshifting (GO:0006452), causing the reading frame to be different.	1811	0	0
1322	11	group_III_intron	Group III introns are introns found in the mRNA of the plastids of euglenoid protists. They are spliced by a two step transesterification with bulged adenosine as initiating nucleophile.	1812	0	0
1323	11	noncoding_region_of_exon	The maximal intersection of exon and UTR.	1815	0	0
1324	11	coding_region_of_exon	The region of an exon that encodes for protein sequence.	1816	0	0
1325	11	endonuclease_spliced_intron	An intron that spliced via endonucleolytic cleavage and ligation rather than transesterification.	1817	0	0
1326	11	protein_coding_gene	\N	1818	0	0
1327	11	transgenic_insertion	An insertion that derives from another organism, via the use of recombinant DNA technology.	1819	0	0
1328	11	retrogene	\N	1821	0	0
1329	11	silenced_by_RNA_interference	An attribute describing an epigenetic process where a gene is inactivated by RNA interference.	1822	0	0
1330	11	silenced_by_histone_modification	An attribute describing an epigenetic process where a gene is inactivated by histone modification.	1823	0	0
1331	11	silenced_by_histone_methylation	An attribute describing an epigenetic process where a gene is inactivated by histone methylation.	1824	0	0
1332	11	silenced_by_histone_deacetylation	An attribute describing an epigenetic process where a gene is inactivated by histone deacetylation.	1825	0	0
1333	11	gene_silenced_by_RNA_interference	A gene that is silenced by RNA interference.	1826	0	0
1334	11	gene_silenced_by_histone_modification	A gene that is silenced by histone modification.	1827	0	0
1335	11	gene_silenced_by_histone_methylation	A gene that is silenced by histone methylation.	1828	0	0
1336	11	gene_silenced_by_histone_deacetylation	A gene that is silenced by histone deacetylation.	1829	0	0
1337	11	dihydrouridine	A modified RNA base in which the 5,6-dihydrouracil is bound to the ribose ring.	1830	0	0
1338	11	pseudouridine	A modified RNA base in which the 5- position of the uracil is bound to the ribose ring instead of the 4- position.	1833	0	0
1339	11	inosine	A modified RNA base in which hypoxanthine is bound to the ribose ring.	1836	0	0
1340	11	seven_methylguanine	A modified RNA base in which guanine is methylated at the 7- position.	1839	0	0
1341	11	ribothymidine	A modified RNA base in which thymine is bound to the ribose ring.	1840	0	0
1342	11	methylinosine	A modified RNA base in which methylhypoxanthine is bound to the ribose ring.	1841	0	0
1343	11	mobile	An attribute describing a feature that has either intra-genome or intracellular mobility.	1842	0	0
1344	11	replicon	A region containing at least one unique origin of replication and a unique termination site.	1844	0	0
1345	11	base	A base is a sequence feature that corresponds to a single unit of a nucleotide polymer.	1846	0	0
1346	11	amino_acid	A sequence feature that corresponds to a single amino acid residue in a polypeptide.	1848	0	0
1347	11	major_TSS	\N	1850	0	0
1348	11	minor_TSS	\N	1851	0	0
1349	11	TSS_region	The region of a gene from the 5' most TSS to the 3' TSS.	1852	0	0
1350	11	encodes_alternate_transcription_start_sites	\N	1854	0	0
1351	11	miRNA_primary_transcript_region	A part of an miRNA primary_transcript.	1855	0	0
1352	11	pre_miRNA	The 60-70 nucleotide region remain after Drosha processing of the primary transcript, that folds back upon itself to form a hairpin sructure.	1856	0	0
1353	11	miRNA_stem	The stem of the hairpin loop formed by folding of the pre-miRNA.	1857	0	0
1354	11	miRNA_loop	The loop of the hairpin loop formed by folding of the pre-miRNA.	1858	0	0
1355	11	synthetic_oligo	An oligo composed of synthetic nucleotides.	1859	0	0
1356	11	assembly	A region of the genome of known length that is composed by ordering and aligning two or more different regions.	1860	0	0
1357	11	fragment_assembly	A fragment assembly is a genome assembly that orders overlapping fragments of the genome based on landmark sequences. The base pair distance between the landmarks is known allowing additivity of lengths.	1862	0	0
1358	11	fingerprint_map	A fingerprint_map is a physical map composed of restriction fragments.	1863	0	0
1543	11	valine	\N	2184	0	0
1362	11	polyploid	A kind of chromosome variation where the chromosome complement is an exact multiple of the haploid number and is greater than the diploid number.	1867	0	0
1363	11	autopolyploid	A polyploid where the multiple chromosome set was derived from the same organism.	1869	0	0
1364	11	allopolyploid	A polyploid where the multiple chromosome set was derived from a different organism.	1871	0	0
1365	11	homing_endonuclease_binding_site	The binding site (recognition site) of a homing endonuclease. The binding site is typically large.	1873	0	0
1366	11	octamer_motif	A sequence element characteristic of some RNA polymerase II promoters with sequence ATTGCAT that binds Pou-domain transcription factors.	1874	0	0
1367	11	apicoplast_chromosome	A chromosome originating in an apicoplast.	1877	0	0
1368	11	sequence_collection	A collection of discontinuous sequences.	1878	0	0
1369	11	overlapping_feature_set	A continuous region of sequence composed of the overlapping of multiple sequence_features, which ultimately provides evidence for another sequence_feature.	1879	0	0
1370	11	overlapping_EST_set	A continous experimental result region extending the length of multiple overlapping EST's.	1880	0	0
1371	11	ncRNA_gene	\N	1881	0	0
1372	11	gRNA_gene	\N	1882	0	0
1373	11	miRNA_gene	\N	1883	0	0
1374	11	scRNA_gene	\N	1884	0	0
1375	11	snoRNA_gene	\N	1885	0	0
1376	11	snRNA_gene	\N	1886	0	0
1377	11	SRP_RNA_gene	\N	1887	0	0
1378	11	stRNA_gene	\N	1888	0	0
1379	11	tmRNA_gene	\N	1889	0	0
1380	11	tRNA_gene	\N	1890	0	0
1381	11	modified_adenosine	A modified adenine is an adenine base feature that has been altered.	1891	0	0
1382	11	modified_inosine	A modified inosine is an inosine base feature that has been altered.	1892	0	0
1383	11	modified_cytidine	A modified cytidine is a cytidine base feature which has been altered.	1893	0	0
1384	11	modified_guanosine	\N	1894	0	0
1385	11	modified_uridine	\N	1895	0	0
1386	11	one_methylinosine	1-methylinosine is a modified insosine.	1896	0	0
1387	11	one_two_prime_O_dimethylinosine	1,2'-O-dimethylinosine is a modified inosine.	1898	0	0
1388	11	two_prime_O_methylinosine	2'-O-methylinosine is a modified inosine.	1900	0	0
1389	11	three_methylcytidine	3-methylcytidine is a modified cytidine.	1902	0	0
1390	11	five_methylcytidine	5-methylcytidine is a modified cytidine.	1904	0	0
1391	11	two_prime_O_methylcytidine	2'-O-methylcytidine is a modified cytidine.	1906	0	0
1392	11	two_thiocytidine	2-thiocytidine is a modified cytidine.	1908	0	0
1393	11	N4_acetylcytidine	N4-acetylcytidine is a modified cytidine.	1910	0	0
1394	11	five_formylcytidine	5-formylcytidine is a modified cytidine.	1912	0	0
1395	11	five_two_prime_O_dimethylcytidine	5,2'-O-dimethylcytidine is a modified cytidine.	1914	0	0
1396	11	N4_acetyl_2_prime_O_methylcytidine	N4-acetyl-2'-O-methylcytidine is a modified cytidine.	1916	0	0
1397	11	lysidine	Lysidine is a modified cytidine.	1918	0	0
1398	11	N4_methylcytidine	N4-methylcytidine is a modified cytidine.	1921	0	0
1399	11	N4_2_prime_O_dimethylcytidine	N4,2'-O-dimethylcytidine is a modified cytidine.	1923	0	0
1400	11	five_hydroxymethylcytidine	5-hydroxymethylcytidine is a modified cytidine.	1925	0	0
1401	11	five_formyl_two_prime_O_methylcytidine	5-formyl-2'-O-methylcytidine is a modified cytidine.	1927	0	0
1402	11	N4_N4_2_prime_O_trimethylcytidine	N4_N4_2_prime_O_trimethylcytidine is a modified cytidine.	1929	0	0
1403	11	one_methyladenosine	1_methyladenosine is a modified adenosine.	1931	0	0
1404	11	two_methyladenosine	2_methyladenosine is a modified adenosine.	1933	0	0
1405	11	N6_methyladenosine	N6_methyladenosine is a modified adenosine.	1935	0	0
1406	11	two_prime_O_methyladenosine	2prime_O_methyladenosine is a modified adenosine.	1937	0	0
1407	11	two_methylthio_N6_methyladenosine	2_methylthio_N6_methyladenosine is a modified adenosine.	1939	0	0
1408	11	N6_isopentenyladenosine	N6_isopentenyladenosine is a modified adenosine.	1941	0	0
1409	11	two_methylthio_N6_isopentenyladenosine	2_methylthio_N6_isopentenyladenosine is a modified adenosine.	1943	0	0
1410	11	N6_cis_hydroxyisopentenyl_adenosine	N6_cis_hydroxyisopentenyl_adenosine is a modified adenosine.	1945	0	0
1411	11	two_methylthio_N6_cis_hydroxyisopentenyl_adenosine	2_methylthio_N6_cis_hydroxyisopentenyl_adenosine is a modified adenosine.	1947	0	0
1412	11	N6_glycinylcarbamoyladenosine	N6_glycinylcarbamoyladenosine is a modified adenosine.	1949	0	0
1413	11	N6_threonylcarbamoyladenosine	N6_threonylcarbamoyladenosine is a modified adenosine.	1951	0	0
1414	11	two_methylthio_N6_threonyl_carbamoyladenosine	2_methylthio_N6_threonyl_carbamoyladenosine is a modified adenosine.	1953	0	0
1415	11	N6_methyl_N6_threonylcarbamoyladenosine	N6_methyl_N6_threonylcarbamoyladenosine is a modified adenosine.	1955	0	0
1416	11	N6_hydroxynorvalylcarbamoyladenosine	N6_hydroxynorvalylcarbamoyladenosine is a modified adenosine.	1957	0	0
1417	11	two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine	2_methylthio_N6_hydroxynorvalyl_carbamoyladenosine is a modified adenosine.	1959	0	0
1418	11	two_prime_O_ribosyladenosine_phosphate	2prime_O_ribosyladenosine_phosphate is a modified adenosine.	1961	0	0
1419	11	N6_N6_dimethyladenosine	N6_N6_dimethyladenosine is a modified adenosine.	1963	0	0
1420	11	N6_2_prime_O_dimethyladenosine	N6_2prime_O_dimethyladenosine is a modified adenosine.	1965	0	0
1421	11	N6_N6_2_prime_O_trimethyladenosine	N6_N6_2prime_O_trimethyladenosine is a modified adenosine.	1967	0	0
1422	11	one_two_prime_O_dimethyladenosine	1,2'-O-dimethyladenosine is a modified adenosine.	1969	0	0
1423	11	N6_acetyladenosine	N6_acetyladenosine is a modified adenosine.	1971	0	0
1424	11	seven_deazaguanosine	7-deazaguanosine is a moddified guanosine.	1973	0	0
1425	11	queuosine	Queuosine is a modified 7-deazoguanosine.	1974	0	0
1426	11	epoxyqueuosine	Epoxyqueuosine is a modified 7-deazoguanosine.	1977	0	0
1427	11	galactosyl_queuosine	Galactosyl_queuosine is a modified 7-deazoguanosine.	1979	0	0
1431	11	archaeosine	Archaeosine is a modified 7-deazoguanosine.	1987	0	0
1432	11	one_methylguanosine	1_methylguanosine is a modified guanosine base feature.	1989	0	0
1433	11	N2_methylguanosine	N2_methylguanosine is a modified guanosine base feature.	1991	0	0
1434	11	seven_methylguanosine	7_methylguanosine is a modified guanosine base feature.	1993	0	0
1435	11	two_prime_O_methylguanosine	2prime_O_methylguanosine is a modified guanosine base feature.	1995	0	0
1436	11	N2_N2_dimethylguanosine	N2_N2_dimethylguanosine is a modified guanosine base feature.	1997	0	0
1437	11	N2_2_prime_O_dimethylguanosine	N2_2prime_O_dimethylguanosine is a modified guanosine base feature.	1999	0	0
1438	11	N2_N2_2_prime_O_trimethylguanosine	N2_N2_2prime_O_trimethylguanosine is a modified guanosine base feature.	2001	0	0
1439	11	two_prime_O_ribosylguanosine_phosphate	2prime_O_ribosylguanosine_phosphate is a modified guanosine base feature.	2003	0	0
1440	11	wybutosine	Wybutosine is a modified guanosine base feature.	2005	0	0
1441	11	peroxywybutosine	Peroxywybutosine is a modified guanosine base feature.	2007	0	0
1442	11	hydroxywybutosine	Hydroxywybutosine is a modified guanosine base feature.	2009	0	0
1443	11	undermodified_hydroxywybutosine	Undermodified_hydroxywybutosine is a modified guanosine base feature.	2011	0	0
1444	11	wyosine	Wyosine is a modified guanosine base feature.	2013	0	0
1445	11	methylwyosine	Methylwyosine is a modified guanosine base feature.	2015	0	0
1446	11	N2_7_dimethylguanosine	N2_7_dimethylguanosine is a modified guanosine base feature.	2017	0	0
1447	11	N2_N2_7_trimethylguanosine	N2_N2_7_trimethylguanosine is a modified guanosine base feature.	2019	0	0
1448	11	one_two_prime_O_dimethylguanosine	1_2prime_O_dimethylguanosine is a modified guanosine base feature.	2021	0	0
1449	11	four_demethylwyosine	4_demethylwyosine is a modified guanosine base feature.	2023	0	0
1450	11	isowyosine	Isowyosine is a modified guanosine base feature.	2025	0	0
1451	11	N2_7_2prirme_O_trimethylguanosine	N2_7_2prirme_O_trimethylguanosine is a modified guanosine base feature.	2027	0	0
1452	11	five_methyluridine	5_methyluridine is a modified uridine base feature.	2029	0	0
1453	11	two_prime_O_methyluridine	2prime_O_methyluridine is a modified uridine base feature.	2032	0	0
1454	11	five_two_prime_O_dimethyluridine	5_2_prime_O_dimethyluridine is a modified uridine base feature.	2034	0	0
1455	11	one_methylpseudouridine	1_methylpseudouridine is a modified uridine base feature.	2036	0	0
1456	11	two_prime_O_methylpseudouridine	2prime_O_methylpseudouridine is a modified uridine base feature.	2038	0	0
1457	11	two_thiouridine	2_thiouridine is a modified uridine base feature.	2040	0	0
1458	11	four_thiouridine	4_thiouridine is a modified uridine base feature.	2042	0	0
1459	11	five_methyl_2_thiouridine	5_methyl_2_thiouridine is a modified uridine base feature.	2044	0	0
1460	11	two_thio_two_prime_O_methyluridine	2_thio_2prime_O_methyluridine is a modified uridine base feature.	2046	0	0
1461	11	three_three_amino_three_carboxypropyl_uridine	3_3_amino_3_carboxypropyl_uridine is a modified uridine base feature.	2048	0	0
1462	11	five_hydroxyuridine	5_hydroxyuridine is a modified uridine base feature.	2050	0	0
1463	11	five_methoxyuridine	5_methoxyuridine is a modified uridine base feature.	2051	0	0
1464	11	uridine_five_oxyacetic_acid	Uridine_5_oxyacetic_acid is a modified uridine base feature.	2053	0	0
1465	11	uridine_five_oxyacetic_acid_methyl_ester	Uridine_5_oxyacetic_acid_methyl_ester is a modified uridine base feature.	2055	0	0
1466	11	five_carboxyhydroxymethyl_uridine	5_carboxyhydroxymethyl_uridine is a modified uridine base feature.	2057	0	0
1467	11	five_carboxyhydroxymethyl_uridine_methyl_ester	5_carboxyhydroxymethyl_uridine_methyl_ester is a modified uridine base feature.	2059	0	0
1468	11	five_methoxycarbonylmethyluridine	Five_methoxycarbonylmethyluridine is a modified uridine base feature.	2061	0	0
1469	11	five_methoxycarbonylmethyl_two_prime_O_methyluridine	Five_methoxycarbonylmethyl_2_prime_O_methyluridine is a modified uridine base feature.	2063	0	0
1470	11	five_methoxycarbonylmethyl_two_thiouridine	5_methoxycarbonylmethyl_2_thiouridine is a modified uridine base feature.	2065	0	0
1471	11	five_aminomethyl_two_thiouridine	5_aminomethyl_2_thiouridine is a modified uridine base feature.	2067	0	0
1472	11	five_methylaminomethyluridine	5_methylaminomethyluridine is a modified uridine base feature.	2069	0	0
1473	11	five_methylaminomethyl_two_thiouridine	5_methylaminomethyl_2_thiouridine is a modified uridine base feature.	2071	0	0
1474	11	five_methylaminomethyl_two_selenouridine	5_methylaminomethyl_2_selenouridine is a modified uridine base feature.	2073	0	0
1475	11	five_carbamoylmethyluridine	5_carbamoylmethyluridine is a modified uridine base feature.	2075	0	0
1476	11	five_carbamoylmethyl_two_prime_O_methyluridine	5_carbamoylmethyl_2_prime_O_methyluridine is a modified uridine base feature.	2077	0	0
1477	11	five_carboxymethylaminomethyluridine	5_carboxymethylaminomethyluridine is a modified uridine base feature.	2079	0	0
1478	11	five_carboxymethylaminomethyl_two_prime_O_methyluridine	5_carboxymethylaminomethyl_2_prime_O_methyluridine is a modified uridine base feature.	2081	0	0
1479	11	five_carboxymethylaminomethyl_two_thiouridine	5_carboxymethylaminomethyl_2_thiouridine is a modified uridine base feature.	2083	0	0
1480	11	three_methyluridine	3_methyluridine is a modified uridine base feature.	2085	0	0
1481	11	one_methyl_three_three_amino_three_carboxypropyl_pseudouridine	1_methyl_3_3_amino_3_carboxypropyl_pseudouridine is a modified uridine base feature.	2087	0	0
1482	11	five_carboxymethyluridine	5_carboxymethyluridine is a modified uridine base feature.	2089	0	0
1483	11	three_two_prime_O_dimethyluridine	3_2prime_O_dimethyluridine is a modified uridine base feature.	2091	0	0
1484	11	five_methyldihydrouridine	5_methyldihydrouridine is a modified uridine base feature.	2093	0	0
1485	11	three_methylpseudouridine	3_methylpseudouridine is a modified uridine base feature.	2095	0	0
1486	11	five_taurinomethyluridine	5_taurinomethyluridine is a modified uridine base feature.	2097	0	0
1544	11	leucine	\N	2185	0	0
1487	11	five_taurinomethyl_two_thiouridine	5_taurinomethyl_2_thiouridineis a modified uridine base feature.	2099	0	0
1488	11	five_isopentenylaminomethyl_uridine	5_isopentenylaminomethyl_uridine is a modified uridine base feature.	2101	0	0
1489	11	five_isopentenylaminomethyl_two_thiouridine	5_isopentenylaminomethyl_2_thiouridine is a modified uridine base feature.	2103	0	0
1490	11	five_isopentenylaminomethyl_two_prime_O_methyluridine	5_isopentenylaminomethyl_2prime_O_methyluridine is a modified uridine base feature.	2105	0	0
1491	11	histone_binding_site	A binding site that, in the nucleotide molecule, interacts selectively and non-covalently with polypeptide residues of a histone.	2107	0	0
1492	11	CDS_fragment	\N	2108	0	0
1493	11	modified_amino_acid_feature	A post translationally modified amino acid feature.	2109	0	0
1494	11	modified_glycine	A post translationally modified glycine amino acid feature.	2110	0	0
1495	11	modified_L_alanine	A post translationally modified alanine amino acid feature.	2112	0	0
1496	11	modified_L_asparagine	A post translationally modified asparagine amino acid feature.	2114	0	0
1497	11	modified_L_aspartic_acid	A post translationally modified aspartic acid amino acid feature.	2116	0	0
1498	11	modified_L_cysteine	A post translationally modified cysteine amino acid feature.	2118	0	0
1499	11	modified_L_glutamic_acid	\N	2120	0	0
1500	11	modified_L_threonine	A post translationally modified threonine amino acid feature.	2122	0	0
1501	11	modified_L_tryptophan	A post translationally modified tryptophan amino acid feature.	2124	0	0
1502	11	modified_L_glutamine	A post translationally modified glutamine amino acid feature.	2126	0	0
1503	11	modified_L_methionine	A post translationally modified methionine amino acid feature.	2128	0	0
1504	11	modified_L_isoleucine	A post translationally modified isoleucine amino acid feature.	2130	0	0
1505	11	modified_L_phenylalanine	A post translationally modified phenylalanine amino acid feature.	2132	0	0
1506	11	modified_L_histidine	A post translationally modified histidie amino acid feature.	2134	0	0
1507	11	modified_L_serine	A post translationally modified serine amino acid feature.	2136	0	0
1508	11	modified_L_lysine	A post translationally modified lysine amino acid feature.	2138	0	0
1509	11	modified_L_leucine	A post translationally modified leucine amino acid feature.	2140	0	0
1510	11	modified_L_selenocysteine	A post translationally modified selenocysteine amino acid feature.	2142	0	0
1511	11	modified_L_valine	A post translationally modified valine amino acid feature.	2144	0	0
1512	11	modified_L_proline	A post translationally modified proline amino acid feature.	2146	0	0
1513	11	modified_L_tyrosine	A post translationally modified tyrosine amino acid feature.	2148	0	0
1514	11	modified_L_arginine	A post translationally modified arginine amino acid feature.	2150	0	0
1515	11	peptidyl	An attribute describing the nature of a proteinaceous polymer, where by the amino acid units are joined by peptide bonds.	2152	0	0
1516	11	cleaved_for_gpi_anchor_region	The C-terminal residues of a polypeptide which are exchanged for a GPI-anchor.	2153	0	0
1517	11	biomaterial_region	A region which is intended for use in an experiment.	2155	0	0
1518	11	experimental_feature	A region which is the result of some arbitrary experimental procedure. The procedure may be carried out with biological material or inside a computer.	2156	0	0
1519	11	biological_region	A region defined by its disposition to be involved in a biological process.	2157	0	0
1520	11	topologically_defined_region	A region that is defined according to its relations with other regions within the same sequence.	2158	0	0
1521	11	translocation_breakpoint	The point within a chromosome where a translocation begins or ends.	2159	0	0
1522	11	insertion_breakpoint	The point within a chromosome where a insertion begins or ends.	2160	0	0
1523	11	deletion_breakpoint	The point within a chromosome where a deletion begins or ends.	2161	0	0
1524	11	five_prime_flanking_region	A flanking region located five prime of a specific region.	2162	0	0
1525	11	three_prime_flanking_region	A flanking region located three prime of a specific region.	2164	0	0
1526	11	transcribed_fragment	An experimental region, defined by a tiling array experiment to be transcribed at some level.	2165	0	0
1527	11	cis_splice_site	Intronic 2 bp region bordering exon. A splice_site that adjacent_to exon and overlaps intron.	2166	0	0
1528	11	trans_splice_site	Primary transcript region bordering trans-splice junction.	2167	0	0
1529	11	splice_junction	The boundary between an intron and an exon.	2168	0	0
1530	11	conformational_switch	A region of a polypeptide, involved in the transition from one conformational state to another.	2169	0	0
1531	11	dye_terminator_read	A read produced by the dye terminator method of sequencing.	2170	0	0
1532	11	pyrosequenced_read	A read produced by pyrosequencing technology.	2171	0	0
1533	11	ligation_based_read	A read produced by ligation based sequencing technologies.	2172	0	0
1534	11	polymerase_synthesis_read	A read produced by the polymerase based sequence by synthesis method.	2173	0	0
1535	11	cis_regulatory_frameshift_element	A structural region in an RNA molecule which promotes ribosomal frameshifting of cis coding sequence.	2174	0	0
1536	11	expressed_sequence_assembly	A sequence assembly derived from expressed sequences.	2176	0	0
1537	11	DNA_binding_site	A binding site that, in the molecule, interacts selectively and non-covalently with DNA.	2177	0	0
1538	11	cryptic_gene	A gene that is not transcribed under normal conditions and is not critical to normal cellular functioning.	2178	0	0
1539	11	sequence_variant_affecting_polyadenylation (obsolete SO:0001432)	\N	2179	1	0
1540	11	three_prime_RACE_clone	A three prime RACE (Rapid Amplification of cDNA Ends) clone is a cDNA clone copied from the 3' end of an mRNA (using a poly-dT primer to capture the polyA tail and a gene-specific or randomly primed 5' primer), and spliced into a vector for propagation in a suitable host.	2180	0	0
1541	11	cassette_pseudogene	A cassette pseudogene is a kind of gene in an inactive form which may recombine at a telomeric locus to form a functional copy.	2182	0	0
1559	11	histidine	\N	2200	0	0
1560	11	aspartic_acid	\N	2201	0	0
1561	11	glutamic_acid	\N	2202	0	0
1562	11	selenocysteine	\N	2203	0	0
1563	11	pyrrolysine	\N	2204	0	0
1564	11	transcribed_cluster	A region defined by a set of transcribed sequences from the same gene or expressed pseudogene.	2205	0	0
1565	11	unigene_cluster	A kind of transcribed_cluster defined by a set of transcribed sequences from the a unique gene.	2206	0	0
1566	11	CRISPR	Clustered Palindromic Repeats interspersed with bacteriophage derived spacer sequences.	2207	0	0
1567	11	insulator_binding_site	A binding site that, in an insulator region of a nucleotide molecule, interacts selectively and non-covalently with polypeptide residues.	2209	0	0
1568	11	enhancer_binding_site	A binding site that, in the enhancer region of a nucleotide molecule, interacts selectively and non-covalently with polypeptide residues.	2210	0	0
1569	11	contig_collection	A collection of contigs.	2211	0	0
1570	11	lincRNA	A multiexonic non-coding RNA transcribed by RNA polymerase II.	2212	0	0
1571	11	UST	An EST spanning part or all of the untranslated regions of a protein-coding transcript.	2214	0	0
1572	11	three_prime_UST	A UST located in the 3'UTR of a protein-coding transcript.	2215	0	0
1573	11	five_prime_UST	An UST located in the 5'UTR of a protein-coding transcript.	2216	0	0
1574	11	RST	A tag produced from a single sequencing read from a RACE product; typically a few hundred base pairs long.	2217	0	0
1575	11	three_prime_RST	A tag produced from a single sequencing read from a 3'-RACE product; typically a few hundred base pairs long.	2218	0	0
1576	11	five_prime_RST	A tag produced from a single sequencing read from a 5'-RACE product; typically a few hundred base pairs long.	2219	0	0
1577	11	UST_match	A match against an UST sequence.	2220	0	0
1578	11	RST_match	A match against an RST sequence.	2221	0	0
1579	11	primer_match	A nucleotide match to a primer sequence.	2222	0	0
1580	11	miRNA_antiguide	A region of the pri miRNA that basepairs with the guide to form the hairpin.	2223	0	0
1581	11	trans_splice_junction	The boundary between the spliced leader and the first exon of the mRNA.	2224	0	0
1582	11	outron	A region of a primary transcript, that is removed via trans splicing.	2225	0	0
1583	11	natural_plasmid	A plasmid that occurs naturally.	2227	0	0
1584	11	gene_trap_construct	A gene trap construct is a type of engineered plasmid which is designed to integrate into a genome and produce a fusion transcript between exons of the gene into which it inserts and a reporter element in the construct. Gene traps contain a splice acceptor, do not contain promoter elements for the reporter, and are mutagenic. Gene traps may be bicistronic with the second cassette containing a promoter driving an a selectable marker.	2228	0	0
1585	11	promoter_trap_construct	A promoter trap construct is a type of engineered plasmid which is designed to integrate into a genome and express a reporter when inserted in close proximity to a promoter element. Promoter traps typically do not contain promoter elements and are mutagenic.	2230	0	0
1586	11	enhancer_trap_construct	An enhancer trap construct is a type of engineered plasmid which is designed to integrate into a genome and express a reporter when the expression from a basic minimal promoter is enhanced by genomic enhancer elements. Enhancer traps contain promoter elements and are not usually mutagenic.	2231	0	0
1587	11	PAC_end	A region of sequence from the end of a PAC clone that may provide a highly specific marker.	2232	0	0
1588	11	RAPD	RAPD is a 'PCR product' where a sequence variant is identified through the use of PCR with random primers.	2234	0	0
1589	11	shadow_enhancer	\N	2235	0	0
1590	11	SNV	SNVs are single nucleotide positions in genomic DNA at which different sequence alternatives exist.	2236	0	0
1591	11	X_element_combinatorial_repeat	An X element combinatorial repeat is a repeat region located between the X element and the telomere or adjacent Y' element.	2237	0	0
1592	11	Y_prime_element	A Y' element is a repeat region (SO:0000657) located adjacent to telomeric repeats or X element combinatorial repeats, either as a single copy or tandem repeat of two to four copies.	2239	0	0
1593	11	standard_draft	The status of a whole genome sequence, where the data is minimally filtered or un-filtered, from any number of sequencing platforms, and is assembled into contigs. Genome sequence of this quality may harbour regions of poor quality and can be relatively incomplete.	2241	0	0
1594	11	high_quality_draft	The status of a whole genome sequence, where overall coverage represents at least 90 percent of the genome.	2243	0	0
1595	11	improved_high_quality_draft	The status of a whole genome sequence, where additional work has been performed, using either manual or automated methods, such as gap resolution.	2244	0	0
1596	11	annotation_directed_improved_draft	The status of a whole genome sequence,where annotation, and verification of coding regions has occurred.	2245	0	0
1597	11	noncontiguous_finished	The status of a whole genome sequence, where the assembly is high quality, closure approaches have been successful for most gaps, misassemblies and low quality regions.	2246	0	0
1598	11	finished_genome	The status of a whole genome sequence, with less than 1 error per 100,000 base pairs.	2247	0	0
1599	11	intronic_regulatory_region	A regulatory region that is part of an intron.	2248	0	0
1600	11	centromere_DNA_Element_I	A centromere DNA Element I (CDEI) is a conserved region, part of the centromere, consisting of a consensus region composed of 8-11bp which enables binding by the centromere binding factor 1(Cbf1p).	2249	0	0
1601	11	centromere_DNA_Element_II	A centromere DNA Element II (CDEII) is part a conserved region of the centromere, consisting of a consensus region that is AT-rich and ~ 75-100 bp in length.	2251	0	0
1602	11	centromere_DNA_Element_III	A centromere DNA Element I (CDEI) is a conserved region, part of the centromere, consisting of a consensus region that consists of a 25-bp which enables binding by the centromere DNA binding factor 3 (CBF3) complex.	2252	0	0
1603	11	telomeric_repeat	The telomeric repeat is a repeat region, part of the chromosome, which in yeast, is a G-rich terminal sequence of the form (TG(1-3))n or more precisely ((TG)(1-6)TG(2-3))n.	2253	0	0
1604	11	X_element	The X element is a conserved region, of the telomere, of ~475 bp that contains an ARS sequence and in most cases an Abf1p binding site.	2255	0	0
1605	11	YAC_end	A region of sequence from the end of a YAC clone that may provide a highly specific marker.	2257	0	0
1606	11	whole_genome_sequence_status	The status of whole genome sequence.	2258	0	0
1607	11	heritable_phenotypic_marker	A biological_region characterized as a single heritable trait in a phenotype screen. The heritable phenotype may be mapped to a chromosome but generally has not been characterized to a specific gene locus.	2259	0	0
1608	11	peptide_collection	A collection of peptide sequences.	2261	0	0
1609	11	high_identity_region	An experimental feature with high sequence identity to another sequence.	2263	0	0
1610	11	processed_transcript	A transcript for which no open reading frame has been identified and for which no other function has been determined.	2264	0	0
1611	11	assortment_derived_variation	A chromosome variation derived from an event during meiosis.	2266	0	0
1612	11	reference_genome	A collection of sequences (often chromosomes) taken as the standard for a given organism and genome assembly.	2267	0	0
1613	11	variant_genome	A collection of sequences (often chromosomes) of an individual.	2268	0	0
1614	11	variant_collection	A collection of one or more sequences of an individual.	2269	0	0
1615	11	alteration_attribute	\N	2270	0	0
1616	11	chromosomal_variation_attribute	\N	2271	0	0
1617	11	intrachromosomal	\N	2272	0	0
1618	11	interchromosomal	\N	2273	0	0
1619	11	insertion_attribute	A quality of a chromosomal insertion,.	2274	0	0
1620	11	tandem	\N	2275	0	0
1621	11	direct	A quality of an insertion where the insert is not in a cytologically inverted orientation.	2276	0	0
1622	11	inverted	A quality of an insertion where the insert is in a cytologically inverted orientation.	2277	0	0
1623	11	free	The quality of a duplication where the new region exists independently of the original.	2278	0	0
1624	11	inversion_attribute	\N	2279	0	0
1625	11	pericentric	\N	2280	0	0
1626	11	paracentric	\N	2281	0	0
1627	11	translocaton_attribute	\N	2282	0	0
1628	11	reciprocal	\N	2283	0	0
1629	11	insertional	\N	2284	0	0
1630	11	duplication_attribute	\N	2285	0	0
1631	11	chromosomally_aberrant_genome	\N	2286	0	0
1632	11	assembly_error_correction	A region of sequence where the final nucleotide assignment differs from the original assembly due to an improvement that replaces a mistake.	2287	0	0
1633	11	base_call_error_correction	A region of sequence where the final nucleotide assignment is different from that given by the base caller due to an improvement that replaces a mistake.	2288	0	0
1634	11	peptide_localization_signal	A region of peptide sequence used to target the polypeptide molecule to a specific organelle.	2289	0	0
1635	11	nuclear_localization_signal	A polypeptide region that targets a polypeptide to the nucleus.	2290	0	0
1636	11	endosomal_localization_signal	A polypeptide region that targets a polypeptide to the endosome.	2292	0	0
1637	11	lysosomal_localization_signal	A polypeptide region that targets a polypeptide to the lysosome.	2293	0	0
1638	11	nuclear_export_signal	A polypeptide region that targets a polypeptide to he cytoplasm.	2294	0	0
1639	11	recombination_signal_sequence	A region recognized by a recombinase.	2296	0	0
1640	11	cryptic_splice_site	A splice site that is in part of the transcript not normally spliced. They occur via mutation or transcriptional error.	2298	0	0
1641	11	nuclear_rim_localization_signal	A polypeptide region that targets a polypeptide to the nuclear rim.	2299	0	0
1642	11	p_element	A P_element is a DNA transposon responsible for hybrid dysgenesis.	2301	0	0
1643	11	functional_variant	A sequence variant in which the function of a gene product is altered with respect to a reference.	2302	0	0
1644	11	structural_variant	A sequence variant that changes one or more sequence features.	2303	0	0
1645	11	transcript_function_variant	A sequence variant which alters the functioning of a transcript with respect to a reference sequence.	2304	0	0
1646	11	translational_product_function_variant	A sequence variant that affects the functioning of a translational product with respect to a reference sequence.	2305	0	0
1647	11	level_of_transcript_variant	A sequence variant which alters the level of a transcript.	2306	0	0
1648	11	decreased_transcript_level_variant	A sequence variant that increases the level of mature, spliced and processed RNA with respect to a reference sequence.	2307	0	0
1649	11	increased_transcript_level_variant	A sequence variant that increases the level of mature, spliced and processed RNA with respect to a reference sequence.	2308	0	0
1650	11	transcript_processing_variant	A sequence variant that affects the post transcriptional processing of a transcript with respect to a reference sequence.	2309	0	0
1651	11	editing_variant	A transcript processing variant whereby the process of editing is disrupted with respect to the reference.	2310	0	0
1652	11	polyadenylation_variant	A sequence variant that changes polyadenylation with respect to a reference sequence.	2311	0	0
1653	11	transcript_stability_variant	A variant that changes the stability of a transcript with respect to a reference sequence.	2312	0	0
1654	11	decreased_transcript_stability_variant	A sequence variant that decreases transcript stability with respect to a reference sequence.	2313	0	0
1655	11	increased_transcript_stability_variant	A sequence variant that increases transcript stability with respect to a reference sequence.	2314	0	0
1656	11	transcription_variant	A variant that changes alters the transcription of a transcript with respect to a reference sequence.	2315	0	0
1657	11	rate_of_transcription_variant	A sequence variant that changes the rate of transcription with respect to a reference sequence.	2316	0	0
1658	11	increased_transcription_rate_variant	A sequence variant that increases the rate of transcription with respect to a reference sequence.	2317	0	0
1659	11	decreased_transcription_rate_variant	A sequence variant that decreases the rate of transcription with respect to a reference sequence.	2318	0	0
1660	11	translational_product_level_variant	A functional variant that changes the translational product level with respect to a reference sequence.	2319	0	0
1661	11	polypeptide_function_variant	A sequence variant which changes polypeptide functioning with respect to a reference sequence.	2320	0	0
1662	11	decreased_translational_product_level	A sequence variant which decreases the translational product level with respect to a reference sequence.	2321	0	0
1663	11	increased_translational_product_level	A sequence variant which increases the translational product level with respect to a reference sequence.	2322	0	0
1664	11	polypeptide_gain_of_function_variant	A sequence variant which causes gain of polypeptide function with respect to a reference sequence.	2323	0	0
1665	11	polypeptide_localization_variant	A sequence variant which changes the localization of a polypeptide with respect to a reference sequence.	2324	0	0
1666	11	polypeptide_loss_of_function_variant	A sequence variant that causes the loss of a polypeptide function with respect to a reference sequence.	2325	0	0
1667	11	inactive_ligand_binding_site	A sequence variant that causes the inactivation of a ligand binding site with respect to a reference sequence.	2326	0	0
1668	11	polypeptide_partial_loss_of_function	A sequence variant that causes some but not all loss of polypeptide function with respect to a reference sequence.	2327	0	0
1669	11	polypeptide_post_translational_processing_variant	A sequence variant that causes a change in post translational processing of the peptide with respect to a reference sequence.	2328	0	0
1670	11	copy_number_change	A sequence variant where copies of a feature (CNV) are either increased or decreased.	2329	0	0
1671	11	gene_variant	A sequence variant where the structure of the gene is changed.	2330	0	0
1672	11	gene_fusion	A sequence variant whereby a two genes have become joined.	2331	0	0
1673	11	regulatory_region_variant	A sequence variant located within a regulatory region.	2332	0	0
1674	11	stop_retained_variant	A sequence variant where at least one base in the terminator codon is changed, but the terminator remains.	2333	0	0
1675	11	splicing_variant	A sequence variant that changes the process of splicing.	2334	0	0
1676	11	cryptic_splice_site_variant	A sequence variant causing a new (functional) splice site.	2336	0	0
1677	11	cryptic_splice_acceptor	A sequence variant whereby a new splice site is created due to the activation of a new acceptor.	2337	0	0
1678	11	cryptic_splice_donor	A sequence variant whereby a new splice site is created due to the activation of a new donor.	2338	0	0
1679	11	exon_loss	A sequence variant whereby an exon is lost from the transcript.	2339	0	0
1680	11	intron_gain	A sequence variant whereby an intron is gained by the processed transcript; usually a result of an alteration of the donor or acceptor.	2340	0	0
1681	11	splice_acceptor_variant	A splice variant that changes the 2 base region at the 3' end of an intron.	2341	0	0
1682	11	splice_donor_variant	A splice variant that changes the2 base region at the 5' end of an intron.	2342	0	0
1683	11	transcript_variant	A sequence variant that changes the structure of the transcript.	2343	0	0
1684	11	complex_transcript_variant	A transcript variant with a complex INDEL- Insertion or deletion that spans an exon/intron border or a coding sequence/UTR border.	2344	0	0
1685	11	stop_lost	A sequence variant where at least one base of the terminator codon (stop) is changed, resulting in an elongated transcript.	2346	0	0
1686	11	transcript_sequence_variant (obsolete SO:0001579)	\N	2347	1	0
1687	11	coding_sequence_variant	A sequence variant that changes the coding sequence.	2348	0	0
1688	11	initiator_codon_variant	A codon variant that changes at least one base of the first codon of a transcript.	2350	0	0
1696	11	minus_1_frameshift_variant	A sequence variant which causes a disruption of the translational reading frame, by shifting one base ahead.	2369	0	0
1689	11	missense_variant	A sequence variant, that changes one or more bases, resulting in a different amino acid sequence but where the length is preserved.	2352	0	0
1701	11	compensatory_transcript_secondary_structure_variant	A secondary structure variant that compensate for the change made by a previous variant.	2375	0	0
1697	11	minus_2_frameshift_variant	\N	2371	0	0
1702	11	translational_product_structure_variant	A sequence variant within the transcript that changes the structure of the translational product.	2376	0	0
1703	11	3D_polypeptide_structure_variant	A sequence variant that changes the resulting polypeptide structure.	2377	0	0
1690	11	conservative_missense_variant	A sequence variant whereby at least one base of a codon is changed resulting in a codon that encodes for a different but similar amino acid. These variants may or may not be deleterious.	2359	0	0
1698	11	plus_1_frameshift_variant	A sequence variant which causes a disruption of the translational reading frame, by shifting one base backward.	2372	0	0
1704	11	complex_3D_structural_variant	A sequence variant that changes the resulting polypeptide structure.	2378	0	0
1691	11	non_conservative_missense_variant	A sequence variant whereby at least one base of a codon is changed resulting in a codon that encodes for an amino acid with different biochemical properties.	2360	0	0
1705	11	conformational_change_variant	A sequence variant in the CDS region that causes a conformational change in the resulting polypeptide sequence.	2379	0	0
1699	11	plus_2_frameshift_variant	\N	2373	0	0
1692	11	stop_gained	A sequence variant whereby at least one base of a codon is changed, resulting in a premature stop codon, leading to a shortened transcript.	2361	0	0
1706	11	complex_change_of_translational_product_variant	\N	2380	0	0
1707	11	polypeptide_sequence_variant	A sequence variant with in the CDS that causes a change in the resulting polypeptide sequence.	2381	0	0
1700	11	transcript_secondary_structure_variant	A sequence variant within a transcript that changes the secondary structure of the RNA product.	2374	0	0
1693	11	frameshift_variant	A sequence variant which causes a disruption of the translational reading frame, because the number of nucleotides inserted or deleted is not a multiple of three.	2363	0	0
1694	11	terminator_codon_variant	A sequence variant whereby at least one of the bases in the terminator codon is changed.	2365	0	0
1695	11	frame_restoring_variant	A sequence variant that reverts the sequence of a previous frameshift mutation back to the initial frame.	2368	0	0
1708	11	amino_acid_deletion	A sequence variant within a CDS resulting in the loss of an amino acid from the resulting polypeptide.	2382	0	0
1709	11	amino_acid_insertion	A sequence variant within a CDS resulting in the gain of an amino acid to the resulting polypeptide.	2383	0	0
1710	11	amino_acid_substitution	A sequence variant of a codon resulting in the substitution of one amino acid for another in the resulting polypeptide.	2384	0	0
1711	11	conservative_amino_acid_substitution	A sequence variant of a codon causing the substitution of a similar amino acid for another in the resulting polypeptide.	2385	0	0
1712	11	non_conservative_amino_acid_substitution	A sequence variant of a codon causing the substitution of a non conservative amino acid for another in the resulting polypeptide.	2386	0	0
1713	11	elongated_polypeptide	A sequence variant with in the CDS that causes elongation of the resulting polypeptide sequence.	2387	0	0
1714	11	elongated_polypeptide_C_terminal	A sequence variant with in the CDS that causes elongation of the resulting polypeptide sequence at the C terminus.	2388	0	0
1715	11	elongated_polypeptide_N_terminal	A sequence variant with in the CDS that causes elongation of the resulting polypeptide sequence at the N terminus.	2389	0	0
1716	11	elongated_in_frame_polypeptide_C_terminal	A sequence variant with in the CDS that causes in frame elongation of the resulting polypeptide sequence at the C terminus.	2390	0	0
1717	11	elongated_out_of_frame_polypeptide_C_terminal	A sequence variant with in the CDS that causes out of frame elongation of the resulting polypeptide sequence at the C terminus.	2391	0	0
1718	11	elongated_in_frame_polypeptide_N_terminal_elongation	A sequence variant with in the CDS that causes in frame elongation of the resulting polypeptide sequence at the N terminus.	2392	0	0
1719	11	elongated_out_of_frame_polypeptide_N_terminal	A sequence variant with in the CDS that causes out of frame elongation of the resulting polypeptide sequence at the N terminus.	2393	0	0
1720	11	polypeptide_fusion	A sequence variant that causes a fusion of two polypeptide sequences.	2394	0	0
1721	11	polypeptide_truncation	A sequence variant of the CD that causes a truncation of the resulting polypeptide.	2395	0	0
1722	11	inactive_catalytic_site	A sequence variant that causes the inactivation of a catalytic site with respect to a reference sequence.	2396	0	0
1723	11	nc_transcript_variant	A transcript variant of a non coding RNA gene.	2397	0	0
1749	11	DArT_marker	A genetic marker, discovered using Diversity Arrays Technology (DArT) technology.	2428	0	0
1724	11	mature_miRNA_variant	A transcript variant located with the sequence of the mature miRNA.	2398	0	0
1740	11	rRNA_gene	A gene that encodes for ribosomal RNA.	2414	0	0
1725	11	NMD_transcript_variant	A variant in a transcript that is the target of NMD.	2399	0	0
1750	11	kozak_sequence	A kind of ribosome entry site, specific to Eukaryotic organisms that overlaps part of both 5' UTR and CDS sequence.	2429	0	0
1741	11	piRNA_gene	A gene that encodes for an piwi associated RNA.	2415	0	0
1726	11	UTR_variant	A transcript variant that is located within the UTR.	2400	0	0
1752	11	nested_repeat	A repeat that is disrupted by the insertion of another element.	2432	0	0
1742	11	RNase_P_RNA_gene	A gene that encodes an RNase P RNA.	2416	0	0
1727	11	5_prime_UTR_variant	A UTR variant of the 5' UTR.	2401	0	0
1753	11	inframe_variant	A sequence variant which does not cause a disruption of the translational reading frame.	2433	0	0
1743	11	RNase_MRP_RNA_gene	A gene that encodes a RNase_MRP_RNA.	2417	0	0
1744	11	lincRNA_gene	A gene that encodes large intervening non-coding RNA.	2418	0	0
1728	11	3_prime_UTR_variant	A UTR variant of the 3' UTR.	2402	0	0
1745	11	mathematically_defined_repeat	A mathematically defined repeat (MDR) is a experimental feature that is determined by querying overlapping oligomers of length k against a database of shotgun sequence data and identifying regions in the query sequence that exceed a statistically determined threshold of repetitiveness.	2419	0	0
1751	11	nested_transposon	A transposon that is disrupted by the insertion of another element.	2431	0	0
1746	11	telomerase_RNA_gene	A telomerase RNA gene is a non coding RNA gene the RNA product of which is a component of telomerase.	2421	0	0
1729	11	incomplete_terminal_codon_variant	A sequence variant where at least one base of the final codon of an incompletely annotated transcript is changed.	2403	0	0
1754	11	retinoic_acid_responsive_element	A transcription factor binding site of variable direct repeats of the sequence PuGGTCA spaced by five nucleotides (DR5) found in the promoters of retinoic acid-responsive genes, to which retinoic acid receptors bind.	2434	0	0
1730	11	intron_variant	A transcript variant occurring within an intron.	2404	0	0
1747	11	targeting_vector	An engineered vector that is able to take part in homologous recombination in a host with the intent of introducing site specific genomic modifications.	2423	0	0
1748	11	genetic_marker	A measurable sequence feature that varies within a population.	2426	0	0
1731	11	intergenic_variant	A sequence variant located in the intergenic region, between genes.	2405	0	0
1732	11	splice_site_variant	A sequence variant that changes the first two or last two bases of an intron, or the 5th base from the start of the intron in the orientation of the transcript.	2406	0	0
1733	11	splice_region_variant	A sequence variant in which a change has occurred within the region of the splice site, either within 1-3 bases of the exon or 3-8 bases of the intron.	2407	0	0
1734	11	upstream_gene_variant	A sequence variant located 5' of a gene.	2408	0	0
1735	11	downstream_gene_variant	A sequence variant located 3' of a gene.	2409	0	0
1736	11	5KB_downstream_variant	A sequence variant located within 5 KB of the end of a gene.	2410	0	0
1737	11	500B_downstream_variant	A sequence variant located within a half KB of the end of a gene.	2411	0	0
1738	11	5KB_upstream_variant	A sequence variant located within 5KB 5' of a gene.	2412	0	0
1739	11	2KB_upstream_variant	A sequence variant located within 2KB 5' of a gene.	2413	0	0
1755	11	nucleotide_to_protein_binding_site	A binding site that, in the nucleotide molecule, interacts selectively and non-covalently with polypeptide residues.	2437	0	0
1756	11	nucleotide_binding_site	A binding site that, in the molecule, interacts selectively and non-covalently with nucleotide residues.	2438	0	0
1757	11	metal_binding_site	A binding site that, in the molecule, interacts selectively and non-covalently with metal ions.	2439	0	0
1758	11	ligand_binding_site	A binding site that, in the molecule, interacts selectively and non-covalently with a small molecule such as a drug, or hormone.	2440	0	0
1759	11	nested_tandem_repeat	An NTR is a nested repeat of two distinct tandem motifs interspersed with each other.	2441	0	0
1760	11	promoter_element	\N	2443	0	0
1761	11	core_promoter_element	\N	2444	0	0
1762	11	RNA_polymerase_II_TATA_box	A TATA box core promoter of a gene transcribed by RNA polymerase II.	2445	0	0
1763	11	RNA_polymerase_III_TATA_box	A TATA box core promoter of a gene transcribed by RNA polymerase III.	2446	0	0
1764	11	BREd_motif	A core TRNA polymerase II promoter element with consensus (G/A)T(T/G/A)(T/A)(G/T)(T/G)(T/G).	2447	0	0
1765	11	DCE	A discontinuous core element of RNA polymerase II transcribed genes, situated downstream of the TSS. It is composed of three sub elements: SI, SII and SIII.	2448	0	0
1766	11	DCE_SI	A sub element of the DCE core promoter element, with consensus sequence CTTC.	2449	0	0
1767	11	DCE_SII	A sub element of the DCE core promoter element with consensus sequence CTGT.	2450	0	0
1768	11	DCE_SIII	A sub element of the DCE core promoter element with consensus sequence AGC.	2451	0	0
1769	11	proximal_promoter_element	\N	2452	0	0
1770	11	RNApol_II_core_promoter	The minimal portion of the promoter required to properly initiate transcription in RNA polymerase II transcribed genes.	2453	0	0
1771	11	distal_promoter_element	\N	2454	0	0
1772	11	bacterial_RNApol_promoter_sigma_70	\N	2455	0	0
1773	11	bacterial_RNApol_promoter_sigma54	\N	2456	0	0
1774	11	minus_12_signal	A conserved region about 12-bp upstream of the start point of bacterial transcription units, involved with sigma factor 54.	2457	0	0
1775	11	minus_24_signal	A conserved region about 12-bp upstream of the start point of bacterial transcription units, involved with sigma factor 54.	2459	0	0
1776	11	A_box_type_1	An A box within an RNA polymerase III type 1 promoter.	2460	0	0
1777	11	A_box_type_2	An A box within an RNA polymerase III type 2 promoter.	2461	0	0
1778	11	intermediate_element	A core promoter region of RNA polymerase III type 1 promoters.	2462	0	0
1779	11	regulatory_promoter_element	A promoter element that is not part of the core promoter, but provides the promoter with a specific regulatory region.	2464	0	0
1780	11	transcription_regulatory_region	A regulatory region that is involved in the control of the process of transcription.	2465	0	0
1781	11	translation_regulatory_region	A regulatory region that is involved in the control of the process of translation.	2466	0	0
1782	11	recombination_regulatory_region	A regulatory region that is involved in the control of the process of recombination.	2467	0	0
1783	11	replication_regulatory_region	A regulatory region that is involved in the control of the process of nucleotide replication.	2468	0	0
1784	11	sequence_motif	A sequence motif is a nucleotide or amino-acid sequence pattern that may have biological significance.	2469	0	0
1785	11	experimental_feature_attribute	An attribute of an experimentally derived feature.	2471	0	0
1786	11	score	The score of an experimentally derived feature such as a p-value.	2472	0	0
1787	11	quality_value	An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score.	2473	0	0
1788	11	restriction_enzyme_recognition_site	The nucleotide region (usually a palindrome) that is recognized by a restriction enzyme. This may or may not be equal to the restriction enzyme binding site.	2474	0	0
1789	11	restriction_enzyme_cleavage_junction	The boundary at which a restriction enzyme breaks the nucleotide sequence.	2475	0	0
1790	11	five_prime_restriction_enzyme_junction	The restriction enzyme cleavage junction on the 5' strand of the nucleotide sequence.	2476	0	0
1791	11	three_prime_restriction_enzyme_junction	\N	2477	0	0
1792	11	blunt_end_restriction_enzyme_cleavage_site	\N	2478	0	0
1793	11	sticky_end_restriction_enzyme_cleavage_site	\N	2479	0	0
1794	11	blunt_end_restriction_enzyme_cleavage_junction	A restriction enzyme cleavage site where both strands are cut at the same position.	2480	0	0
1795	11	single_strand_restriction_enzyme_cleavage_site	A restriction enzyme cleavage site whereby only one strand is cut.	2481	0	0
1796	11	restriction_enzyme_single_strand_overhang	A terminal region of DNA sequence where the end of the region is not blunt ended.	2482	0	0
1797	11	experimentally_defined_binding_region	A region that has been implicated in binding although the exact coordinates of binding may be unknown.	2483	0	0
1798	11	ChIP_seq_region	A region of sequence identified by CHiP seq technology to contain a protein binding site.	2484	0	0
1799	11	ASPE_primer	"A primer containing an SNV at the 3' end for accurate genotyping.	2485	0	0
1800	11	dCAPS_primer	A primer with one or more mis-matches to the DNA template corresponding to a position within a restriction enzyme recognition site.	2487	0	0
1801	11	histone_modification	Histone modification is a post translationally modified region whereby residues of the histone protein are modified by methylation, acetylation, phosphorylation, ubiquitination, sumoylation, citrullination, or ADP-ribosylation.	2489	0	0
1802	11	histone_methylation_site	A histone modification site where the modification is the methylation of the residue.	2491	0	0
1803	11	histone_acetylation_site	A histone modification where the modification is the acylation of the residue.	2492	0	0
1804	11	H3K9_acetylation_site	A kind of histone modification site, whereby the 9th residue (a lysine), from the start of the H3 histone protein is acylated.	2493	0	0
1805	11	H3K14_acetylation_site	A kind of histone modification site, whereby the 14th residue (a lysine), from the start of the H3 histone protein is acylated.	2495	0	0
1943	11	CRE	A promoter element with consensus sequence TGACGTCA; bound by the ATF/CREB family of transcription factors.	2674	0	0
1806	11	H3K4_monomethylation_site	A kind of histone modification, whereby the 4th residue (a lysine), from the start of the H3 protein is mono-methylated.	2496	0	0
1807	11	H3K4_trimethylation	A kind of histone modification site, whereby the 4th residue (a lysine), from the start of the H3 protein is tri-methylated.	2497	0	0
1808	11	H3K9_trimethylation_site	A kind of histone modification site, whereby the 9th residue (a lysine), from the start of the H3 histone protein is tri-methylated.	2498	0	0
1809	11	H3K27_monomethylation_site	A kind of histone modification site, whereby the 27th residue (a lysine), from the start of the H3 histone protein is mono-methylated.	2499	0	0
1810	11	H3K27_trimethylation_site	A kind of histone modification site, whereby the 27th residue (a lysine), from the start of the H3 histone protein is tri-methylated.	2500	0	0
1811	11	H3K79_monomethylation_site	A kind of histone modification site, whereby the 79th residue (a lysine), from the start of the H3 histone protein is mono- methylated.	2501	0	0
1812	11	H3K79_dimethylation_site	A kind of histone modification site, whereby the 79th residue (a lysine), from the start of the H3 histone protein is di-methylated.	2502	0	0
1813	11	H3K79_trimethylation_site	A kind of histone modification site, whereby the 79th residue (a lysine), from the start of the H3 histone protein is tri-methylated.	2503	0	0
1814	11	H4K20_monomethylation_site	A kind of histone modification site, whereby the 20th residue (a lysine), from the start of the H34histone protein is mono-methylated.	2504	0	0
1815	11	H2BK5_monomethylation_site	A kind of histone modification site, whereby the 5th residue (a lysine), from the start of the H2B protein is methylated.	2505	0	0
1816	11	ISRE	An ISRE is a transcriptional cis regulatory region, containing the consensus region: YAGTTTC(A/T)YTTTYCC, responsible for increased transcription via interferon binding.	2506	0	0
1817	11	histone_ubiqitination_site	A histone modification site where ubiquitin may be added.	2508	0	0
1818	11	H2B_ubiquitination_site	A histone modification site on H2B where ubiquitin may be added.	2509	0	0
1819	11	H3K18_acetylation_site	A kind of histone modification site, whereby the 14th residue (a lysine), from the start of the H3 histone protein is acylated.	2510	0	0
1820	11	H3K23_acylation_site	A kind of histone modification, whereby the 23rd residue (a lysine), from the start of the H3 histone protein is acylated.	2511	0	0
1821	11	epigenetically_modified_region	A biological region implicated in inherited changes caused by mechanisms other than changes in the underlying DNA sequence.	2512	0	0
1822	11	H3K27_acylation_site	A kind of histone modification site, whereby the 27th residue (a lysine), from the start of the H3 histone protein is acylated.	2514	0	0
1823	11	H3K36_monomethylation_site	A kind of histone modification site, whereby the 36th residue (a lysine), from the start of the H3 histone protein is mono-methylated.	2515	0	0
1824	11	H3K36_dimethylation_site	A kind of histone modification site, whereby the 36th residue (a lysine), from the start of the H3 histone protein is dimethylated.	2516	0	0
1825	11	H3K36_trimethylation_site	A kind of histone modification site, whereby the 36th residue (a lysine), from the start of the H3 histone protein is tri-methylated.	2517	0	0
1826	11	H3K4_dimethylation_site	A kind of histone modification site, whereby the 4th residue (a lysine), from the start of the H3 histone protein is di-methylated.	2518	0	0
1827	11	H3K27_dimethylation_site	A kind of histone modification site, whereby the 27th residue (a lysine), from the start of the H3 histone protein is di-methylated.	2519	0	0
1828	11	H3K9_monomethylation_site	A kind of histone modification site, whereby the 9th residue (a lysine), from the start of the H3 histone protein is mono-methylated.	2520	0	0
1829	11	H3K9_dimethylation_site	A kind of histone modification site, whereby the 9th residue (a lysine), from the start of the H3 histone protein may be dimethylated.	2521	0	0
1830	11	H4K16_acylation_site	A kind of histone modification site, whereby the 16th residue (a lysine), from the start of the H4 histone protein is acylated.	2522	0	0
1831	11	H4K5_acylation_site	A kind of histone modification site, whereby the 5th residue (a lysine), from the start of the H4 histone protein is acylated.	2523	0	0
1832	11	H4K8_acylation_site	A kind of histone modification site, whereby the 8th residue (a lysine), from the start of the H4 histone protein is acylated.	2524	0	0
1833	11	H3K27_methylation_site	A kind of histone modification site, whereby the 27th residue (a lysine), from the start of the H3 histone protein is methylated.	2526	0	0
1834	11	H3K36_methylation_site	A kind of histone modification site, whereby the 36th residue (a lysine), from the start of the H3 histone protein is methylated.	2527	0	0
1835	11	H3K4_methylation_site	A kind of histone modification, whereby the 4th residue (a lysine), from the start of the H3 protein is methylated.	2528	0	0
1836	11	H3K79_methylation_site	A kind of histone modification site, whereby the 79th residue (a lysine), from the start of the H3 histone protein is methylated.	2529	0	0
1837	11	H3K9_methylation_site	A kind of histone modification site, whereby the 9th residue (a lysine), from the start of the H3 histone protein is methylated.	2530	0	0
1838	11	histone_acylation_region	A histone modification, whereby the histone protein is acylated at multiple sites in a region.	2531	0	0
1839	11	H4K_acylation_region	A region of the H4 histone whereby multiple lysines are acylated.	2532	0	0
1840	11	gene_with_non_canonical_start_codon	A gene with a start codon other than AUG.	2533	0	0
1841	11	gene_with_start_codon_CUG	A gene with a translational start codon of CUG.	2534	0	0
1842	11	pseudogenic_gene_segment	A gene segment which when incorporated by somatic recombination in the final gene transcript results in a nonfunctional product.	2536	0	0
1843	11	copy_number_gain	A sequence alteration whereby the copy number of a given regions is greater than the reference sequence.	2538	0	0
1844	11	copy_number_loss	A sequence alteration whereby the copy number of a given region is less than the reference sequence.	2539	0	0
1845	11	UPD	Uniparental disomy is a sequence_alteration where a diploid individual receives two copies for all or part of a chromosome from one parent and no copies of the same chromosome or region from the other parent.	2540	0	0
1983	11	transcript_translocation	A feature translocation where the region contains a transcript.	2749	0	0
1846	11	maternal_uniparental_disomy	Uniparental disomy is a sequence_alteration where a diploid individual receives two copies for all or part of a chromosome from the mother and no copies of the same chromosome or region from the father.	2543	0	0
1847	11	paternal_uniparental_disomy	Uniparental disomy is a sequence_alteration where a diploid individual receives two copies for all or part of a chromosome from the father and no copies of the same chromosome or region from the mother.	2544	0	0
1848	11	open_chromatin_region	A DNA sequence that in the normal state of the chromosome corresponds to an unfolded, un-complexed stretch of double-stranded DNA.	2545	0	0
1849	11	SL3_acceptor_site	A SL2_acceptor_site which appends the SL3 RNA leader sequence to the 5' end of an mRNA. SL3 acceptor sites occur in genes in internal segments of polycistronic transcripts.	2546	0	0
1850	11	SL4_acceptor_site	A SL2_acceptor_site which appends the SL4 RNA leader sequence to the 5' end of an mRNA. SL4 acceptor sites occur in genes in internal segments of polycistronic transcripts.	2547	0	0
1851	11	SL5_acceptor_site	A SL2_acceptor_site which appends the SL5 RNA leader sequence to the 5' end of an mRNA. SL5 acceptor sites occur in genes in internal segments of polycistronic transcripts.	2548	0	0
1852	11	SL6_acceptor_site	A SL2_acceptor_site which appends the SL6 RNA leader sequence to the 5' end of an mRNA. SL6 acceptor sites occur in genes in internal segments of polycistronic transcripts.	2549	0	0
1853	11	SL7_acceptor_site	A SL2_acceptor_site which appends the SL7 RNA leader sequence to the 5' end of an mRNA. SL7 acceptor sites occur in genes in internal segments of polycistronic transcripts.	2550	0	0
1854	11	SL8_acceptor_site	A SL2_acceptor_site which appends the SL8 RNA leader sequence to the 5' end of an mRNA. SL8 acceptor sites occur in genes in internal segments of polycistronic transcripts.	2551	0	0
1855	11	SL9_acceptor_site	A SL2_acceptor_site which appends the SL9 RNA leader sequence to the 5' end of an mRNA. SL9 acceptor sites occur in genes in internal segments of polycistronic transcripts.	2552	0	0
1856	11	SL10_acceptor_site	A SL2_acceptor_site which appends the SL10 RNA leader sequence to the 5' end of an mRNA. SL10 acceptor sites occur in genes in internal segments of polycistronic transcripts.	2553	0	0
1857	11	SL11_acceptor_site	A SL2_acceptor_site which appends the SL11 RNA leader sequence to the 5' end of an mRNA. SL11 acceptor sites occur in genes in internal segments of polycistronic transcripts.	2554	0	0
1858	11	SL12_acceptor_site	A SL2_acceptor_site which appends the SL12 RNA leader sequence to the 5' end of an mRNA. SL12 acceptor sites occur in genes in internal segments of polycistronic transcripts.	2555	0	0
1859	11	duplicated_pseudogene	A pseudogene that arose via gene duplication. Generally duplicated pseudogenes have the same structure as the original gene, including intron-exon structure and some regulatory sequence.	2556	0	0
1860	11	unitary_pseudogene	A pseudogene, deactivated from original state by mutation, fixed in a population.	2557	0	0
1861	11	non_processed_pseudogene	A pseudogene that arose from a means other than retrotransposition.	2558	0	0
1862	11	variant_quality	A dependent entity that inheres in a bearer, a sequence variant.	2559	0	0
1863	11	variant_origin	A quality inhering in a variant by virtue of its origin.	2561	0	0
1864	11	variant_frequency	A physical quality which inheres to the variant by virtue of the number instances of the variant within a population.	2562	0	0
1865	11	unique_variant	A physical quality which inheres to the variant by virtue of the number instances of the variant within a population.	2563	0	0
1866	11	rare_variant	\N	2564	0	0
1867	11	polymorphic_variant	\N	2565	0	0
1868	11	common_variant	\N	2566	0	0
1869	11	fixed_variant	\N	2567	0	0
1870	11	variant_phenotype	A quality inhering in a variant by virtue of its phenotype.	2568	0	0
1871	11	benign_variant	\N	2569	0	0
1872	11	disease_associated_variant	\N	2570	0	0
1873	11	disease_causing_variant	\N	2571	0	0
1874	11	lethal_variant	\N	2572	0	0
1875	11	quantitative_variant	\N	2573	0	0
1876	11	maternal_variant	\N	2574	0	0
1877	11	paternal_variant	\N	2575	0	0
1878	11	somatic_variant	\N	2576	0	0
1879	11	germline_variant	\N	2577	0	0
1880	11	pedigree_specific_variant	\N	2578	0	0
1881	11	population_specific_variant	\N	2579	0	0
1882	11	de_novo_variant	\N	2580	0	0
1883	11	TF_binding_site_variant	A sequence variant located within a transcription factor binding site.	2581	0	0
1884	11	complex_structural_alteration	A structural sequence alteration or rearrangement encompassing one or more genome fragments.	2582	0	0
1885	11	structural_alteration	\N	2584	0	0
1886	11	loss_of_heterozygosity	A functional variant whereby the sequence alteration causes a loss of function of one allele of a gene.	2585	0	0
1887	11	splice_donor_5th_base_variant	A sequence variant that causes a change at the 5th base pair after the start of the intron in the orientation of the transcript.	2586	0	0
1888	11	U_box	An U-box is a conserved T-rich region upstream of a retroviral polypurine tract that is involved in PPT primer creation during reverse transcription.	2587	0	0
1889	11	mating_type_region	A specialized region in the genomes of some yeast and fungi, the genes of which regulate mating type.	2591	0	0
1890	11	paired_end_fragment	An assembly region that has been sequenced from both ends resulting in a read_pair (mate_pair).	2593	0	0
1891	11	exon_variant	A sequence variant that changes exon sequence.	2594	0	0
1892	11	non_coding_exon_variant	A sequence variant that changes non-coding exon sequence.	2595	0	0
1893	11	clone_end	A read from an end of the clone sequence.	2596	0	0
1894	11	point_centromere	A point centromere is a relatively small centromere (about 125 bp DNA) in discrete sequence, found in some yeast including S. cerevisiae.	2597	0	0
1895	11	regional_centromere	A regional centromere is a large modular centromere found in fission yeast and higher eukaryotes. It consist of a central core region flanked by inverted inner and outer repeat regions.	2600	0	0
1896	11	regional_centromere_central_core	A conserved region within the central region of a modular centromere, where the kinetochore is formed.	2601	0	0
1897	11	centromeric_repeat	A repeat region found within the modular centromere.	2602	0	0
1898	11	regional_centromere_inner_repeat_region	The inner inverted repeat region of a modular centromere and part of the entral core surrounding a non-conserved central region. This region is adjacent to the central core, on each chromosome arm.	2603	0	0
1899	11	regional_centromere_outer_repeat_region	The heterochromatic outer repeat region of a modular centromere. These repeats exist in tandem arrays on both chromosome arms.	2604	0	0
1900	11	tasiRNA	The sequence of a 21 nucleotide double stranded, polyadenylated non coding RNA, transcribed from the TAS gene.	2605	0	0
1901	11	tasiRNA_primary_transcript	A primary transcript encoding a tasiRNA.	2607	0	0
1902	11	increased_polyadenylation_variant	A transcript processing variant whereby polyadenylation of the encoded transcript is increased with respect to the reference.	2608	0	0
1903	11	decreased_polyadenylation_variant	A transcript processing variant whereby polyadenylation of the encoded transcript is decreased with respect to the reference.	2609	0	0
1904	11	DDB_box	A conserved polypeptide motif that mediates protein-protein interaction and defines adaptor proteins for DDB1/cullin 4 ubiquitin ligases.	2610	0	0
1905	11	destruction_box	A conserved polypeptide motif that can be recognized by both Fizzy/Cdc20- and FZR/Cdh1-activated anaphase-promoting complex/cyclosome (APC/C) and targets a protein for ubiquitination and subsequent degradation by the APC/C. The consensus sequence is RXXLXXXXN.	2613	0	0
1906	11	ER_retention_signal	A C-terminal tetrapeptide motif that mediates retention of a protein in (or retrieval to) the endoplasmic reticulum. In mammals the sequence is KDEL, and in fungi HDEL or DDEL.	2616	0	0
1907	11	KEN_box	A conserved polypeptide motif that can be recognized by FZR/Cdh1-activated anaphase-promoting complex/cyclosome (APC/C) and targets a protein for ubiquitination and subsequent degradation by the APC/C. The consensus sequence is KENXXXN.	2619	0	0
1908	11	mitochondrial_targeting_signal	A polypeptide region that targets a polypeptide to the mitochondrion.	2623	0	0
1909	11	signal_anchor	A signal sequence that is not cleaved from the polypeptide. Anchors a Type II membrane protein to the membrane.	2625	0	0
1910	11	PIP_box	A polypeptide region that mediates binding to PCNA. The consensus sequence is QXX(hh)XX(aa), where (h) denotes residues with moderately hydrophobic side chains and (a) denotes residues with highly hydrophobic aromatic side chains.	2627	0	0
1911	11	phosphorylation_site	A post-translationally modified region in which residues of the protein are modified by phosphorylation.	2629	0	0
1912	11	transmembrane_helix	A region that traverses the lipid bilayer and adopts a helical secondary structure.	2630	0	0
1913	11	vacuolar_sorting_signal	A polypeptide region that targets a polypeptide to the vacuole.	2631	0	0
1914	11	coding_variant_quality	\N	2632	0	0
1915	11	synonymous	\N	2633	0	0
1916	11	non_synonymous	\N	2634	0	0
1917	11	inframe	An attribute describing a sequence that contains a mutation involving the deletion or insertion of one or more bases, where this number is divisible by 3.	2635	0	0
1918	11	protein_altering_variant	A sequence_variant which is predicted to change the protein encoded in the coding sequence.	2636	0	0
1919	11	synonymous_variant	A sequence variant where there is no resulting change to the encoded amino acid.	2637	0	0
1920	11	inframe_indel	A coding sequence variant where the change does not alter the frame of the transcript.	2640	0	0
1921	11	inframe_insertion	An inframe non synonymous variant that inserts bases into in the coding sequence.	2641	0	0
1922	11	inframe_deletion	An inframe non synonymous variant that deletes bases from the coding sequence.	2643	0	0
1923	11	conservative_inframe_insertion	An inframe increase in cds length that inserts one or more codons into the coding sequence between existing codons.	2645	0	0
1924	11	disruptive_inframe_insertion	An inframe_increase_in_cds_length that inserts one or more codons into the coding sequence within an existing codon.	2646	0	0
1925	11	conservative_inframe_deletion	An inframe decrease in cds length that deletes one or more entire codons from the coding sequence but does not change any remaining codons.	2647	0	0
1926	11	disruptive_inframe_deletion	An inframe decrease in cds length that deletes bases from the coding sequence starting within an existing codon.	2648	0	0
1927	11	mRNA_read	A sequencer read of an mRNA substrate.	2649	0	0
1928	11	genomic_DNA_read	A sequencer read of a genomic DNA substrate.	2650	0	0
1929	11	mRNA_contig	A contig composed of mRNA_reads.	2651	0	0
1930	11	AFLP_fragment	A PCR product obtained by applying the AFLP technique, based on a restriction enzyme digestion of genomic DNA and an amplification of the resulting fragments.	2652	0	0
1931	11	protein_hmm_match	A match to a protein HMM such as pfam.	2655	0	0
2154	11	mutation_causing_polypeptide_C_terminal_elongation (obsolete SO:1000101)	.	2962	1	0
1932	11	immunoglobulin_region	A region of immunoglobulin sequence, either constant or variable.	2656	0	0
1938	11	novel_sequence_insertion	An insertion the sequence of which cannot be mapped to the reference genome.	2663	0	0
1933	11	V_region	The variable region of an immunoglobulin polypeptide sequence.	2657	0	0
1934	11	C_region	The constant region of an immunoglobulin polypeptide sequence.	2658	0	0
1939	11	CSL_response_element	A promoter element with consensus sequence GTGRGAA, bound by CSL (CBF1/RBP-JK/Suppressor of Hairless/LAG-1) transcription factors.	2664	0	0
1935	11	N_region	Extra nucleotides inserted between rearranged immunoglobulin segments.	2659	0	0
1940	11	GATA_box	A GATA transcription factor element containing the consensus sequence WGATAR (in which W indicates A/T and R indicates A/G).	2666	0	0
1936	11	S_region	The switch region of immunoglobulin heavy chains; it is involved in the rearrangement of heavy chain DNA leading to the expression of a different immunoglobulin classes from the same B-cell.	2660	0	0
1941	11	polymorphic_pseudogene	Pseudogene owing to a SNP/DIP but in other individuals/haplotypes/strains the gene is translated.	2668	0	0
1937	11	mobile_element_insertion	A kind of insertion where the inserted sequence is a mobile element.	2661	0	0
1942	11	AP_1_binding_site	A promoter element with consensus sequence TGACTCA, bound by AP-1 and related transcription factors.	2670	0	0
1944	11	CuRE	A promoter element bound by copper ion-sensing transcription factors such as S. cerevisiae Mac1p or S. pombe Cuf1; the consensus sequence is HTHNNGCTGD (more specifically TTTGCKCR in budding yeast).	2677	0	0
1945	11	DRE	A promoter element with consensus sequence CGWGGWNGMM, bound by transcription factors related to RecA and found in promoters of genes expressed following several types of DNA damage or inhibition of DNA synthesis.	2681	0	0
1946	11	FLEX_element	A promoter element that has consensus sequence GTAAACAAACAAAM and contains a heptameric core GTAAACA, bound by transcription factors with a forkhead DNA-binding domain.	2684	0	0
1947	11	forkhead_motif	A promoter element with consensus sequence TTTRTTTACA, bound by transcription factors with a forkhead DNA-binding domain.	2687	0	0
1948	11	homol_D_box	A core promoter element that has the consensus sequence CAGTCACA (or its inverted form TGTGACTG), and plays the role of a TATA box in promoters that do not contain a canonical TATA sequence.	2689	0	0
1949	11	homol_E_box	A core promoter element that has the consensus sequence ACCCTACCCT (or its inverted form AGGGTAGGGT), and is found near the homol D box in some promoters that use a homol D box instead of a canonical TATA sequence.	2692	0	0
1950	11	HSE	A promoter element that consists of at least three copies of the pentanucleotide NGAAN, bound by the heat shock transcription factor HSF.	2693	0	0
1951	11	iron_repressed_GATA_element	A GATA promoter element with consensus sequence WGATAA, found in promoters of genes repressed in the presence of iron.	2696	0	0
1952	11	mating_type_M_box	A promoter element with consensus sequence ACAAT, found in promoters of mating type M-specific genes in fission yeast and bound by the transcription factor Mat1-Mc.	2699	0	0
1953	11	androgen_response_element	A non-palindromic sequence found in the promoters of genes whose expression is regulated in response to androgen.	2701	0	0
1954	11	smFISH_probe	A smFISH is a probe that binds RNA in a single molecule in situ hybridization experiment.	2703	0	0
1955	11	MCB	A promoter element with consensus sequence ACGCGT, bound by the transcription factor complex MBF (MCB-binding factor) and found in promoters of genes expressed during the G1/S transition of the cell cycle.	2705	0	0
1956	11	CCAAT_motif	A promoter element with consensus sequence CCAAT, bound by a protein complex that represses transcription in response to low iron levels.	2707	0	0
1957	11	Ace2_UAS	A promoter element with consensus sequence CCAGCC, bound by the fungal transcription factor Ace2.	2709	0	0
1958	11	TR_box	A promoter element with consensus sequence TTCTTTGTTY, bound an HMG-box transcription factor such as S. pombe Ste11, and found in promoters of genes up-regulated early in meiosis.	2711	0	0
1959	11	STREP_motif	A promoter element with consensus sequence CCCCTC, bound by the PKA-responsive zinc finger transcription factor Rst2.	2713	0	0
1960	11	rDNA_intergenic_spacer_element	A DNA motif that contains a core consensus sequence AGGTAAGGGTAATGCAC, is found in the intergenic regions of rDNA repeats, and is bound by an RNA polymerase I transcription termination factor (e.g. S. pombe Reb1).	2715	0	0
1961	11	sterol_regulatory_element	A 10-bp promoter element bound by sterol regulatory element binding proteins (SREBPs), found in promoters of genes involved in sterol metabolism. Many variants of the sequence ATCACCCCAC function as SREs.	2717	0	0
1962	11	GT_dinucleotide_repeat	A dinucleotide repeat region composed of GT repeating elements.	2721	0	0
1963	11	GTT_trinucleotide_repeat	A trinucleotide repeat region composed of GTT repeating elements.	2722	0	0
1964	11	Sap1_recognition_motif	A DNA motif to which the S. pombe Sap1 protein binds. The consensus sequence is 5'-TARGCAGNTNYAACGMG-3'; it is found at the mating type locus, where it is important for mating type switching, and at replication fork barriers in rDNA repeats.	2723	0	0
1965	11	CDRE_motif	An RNA polymerase II promoter element found in the promoters of genes regulated by calcineurin. The consensus sequence is GNGGCKCA.	2726	0	0
1966	11	BAC_read_contig	A contig of BAC reads.	2728	0	0
1967	11	candidate_gene	A gene suspected of being involved in the expression of a trait.	2729	0	0
1968	11	positional_candidate_gene	A candidate gene whose association with a trait is based on the gene's location on a chromosome.	2730	0	0
1969	11	functional_candidate_gene	A candidate gene whose function has something in common biologically with the trait under investigation.	2731	0	0
1970	11	enhancerRNA	A short ncRNA that is transcribed from an enhancer. May have a regulatory function.	2732	0	0
1971	11	PCB	A promoter element with consensus sequence GNAACR, bound by the transcription factor complex PBF (PCB-binding factor) and found in promoters of genes expressed during the M/G1 transition of the cell cycle.	2734	0	0
1972	11	rearrangement_breakpoint	A region of a chromosome, where the chromosome has undergone a large structural rearrangement that altered the genome organization. There is no longer synteny to the reference genome.	2736	0	0
1973	11	interchromosomal_breakpoint	A rearrangement breakpoint between two different chromosomes.	2738	0	0
1974	11	intrachromosomal_breakpoint	A rearrangement breakpoint within the same chromosome.	2739	0	0
1975	11	unassigned_supercontig	A supercontig that is not been assigned to any ultracontig during a genome assembly project.	2740	0	0
1976	11	partial_genomic_sequence_assembly	A partial DNA sequence assembly of a chromosome or full genome, which contains gaps that are filled with N's.	2741	0	0
149	8	broad	\N	196	0	0
1977	11	lnc_RNA	A non-coding RNA over 200nucleotides in length.	2742	0	0
1978	11	feature_variant	A sequence variant that falls entirely or partially within a genomic feature.	2744	0	0
1979	11	feature_ablation	A sequence variant, caused by an alteration of the genomic sequence, where the deletion, is greater than the extent of the underlying genomic features.	2745	0	0
1980	11	feature_amplification	A sequence variant, caused by an alteration of the genomic sequence, where the structural change, an amplification of sequence, is greater than the extent of the underlying genomic features.	2746	0	0
1981	11	feature_translocation	A sequence variant, caused by an alteration of the genomic sequence, where the structural change, a translocation, is greater than the extent of the underlying genomic features.	2747	0	0
1982	11	feature_fusion	A sequence variant, caused by an alteration of the genomic sequence, where a deletion fuses genomic features.	2748	0	0
1984	11	regulatory_region_translocation	A feature translocation where the region contains a regulatory region.	2750	0	0
1985	11	TFBS_translocation	A feature translocation where the region contains a transcription factor binding site.	2751	0	0
1986	11	transcript_fusion	A feature fusion where the deletion brings together transcript regions.	2752	0	0
1987	11	regulatory_region_fusion	A feature fusion where the deletion brings together regulatory regions.	2753	0	0
1988	11	TFBS_fusion	A fusion where the deletion brings together transcription factor binding sites.	2754	0	0
1989	11	transcript_amplification	A feature amplification of a region containing a transcript.	2755	0	0
1990	11	transcript_regulatory_region_fusion	A feature fusion where the deletion brings together a regulatory region and a transcript region.	2756	0	0
1991	11	regulatory_region_amplification	A feature amplification of a region containing a regulatory region.	2757	0	0
1992	11	TFBS_amplification	A feature amplification of a region containing a transcription factor binding site.	2758	0	0
1993	11	transcript_ablation	A feature ablation whereby the deleted region includes a transcript feature.	2759	0	0
1994	11	regulatory_region_ablation	A feature ablation whereby the deleted region includes a regulatory region.	2760	0	0
1995	11	TFBS_ablation	A feature ablation whereby the deleted region includes a transcription factor binding site.	2761	0	0
1996	11	transposable_element_CDS	A CDS that is part of a transposable element.	2762	0	0
1997	11	transposable_element_pseudogene	A pseudogene contained within a transposable element.	2763	0	0
1998	11	dg_repeat	A repeat region which is part of the regional centromere outer repeat region.	2764	0	0
1999	11	dh_repeat	A repeat region which is part of the regional centromere outer repeat region.	2766	0	0
2000	11	m26_site	A promoter element that contains a core sequence TGACGT, bound by a protein complex that regulates transcription of genes encoding PKA pathway components.	2767	0	0
2001	11	AACCCT_box	A conserved 17-bp sequence (5'-ATCA(C/A)AACCCTAACCCT-3') commonly present upstream of the start site of histone transcription units functioning as a transcription factor binding site.	2769	0	0
2002	11	splice_region	A region surrounding a cis_splice site, either within 1-3 bases of the exon or 3-8 bases of the intron.	2772	0	0
2003	11	intronic_lncRNA	A lnc_RNA totally contained within an intron.	2773	0	0
2004	11	antisense_lncRNA	Non-coding RNA transcribed from the opposite DNA strand compared with other transcripts and overlap in part with sense RNA.	2775	0	0
2005	11	regional_centromere_outer_repeat_transcript	A transcript that is transcribed from the outer repeat region of a regional centromere.	2777	0	0
2006	11	feature_truncation	A sequence variant that causes the reduction of a genomic feature, with regard to the reference sequence.	2778	0	0
2007	11	feature_elongation	A sequence variant that causes the extension of a genomic feature, with regard to the reference sequence.	2779	0	0
2008	11	internal_feature_elongation	A sequence variant that causes the extension of a genomic feature from within the feature rather than from the terminus of the feature, with regard to the reference sequence.	2780	0	0
2009	11	frameshift_elongation	A frameshift variant that causes the translational reading frame to be extended relative to the reference feature.	2781	0	0
2010	11	frameshift_truncation	A frameshift variant that causes the translational reading frame to be shortened relative to the reference feature.	2782	0	0
2011	11	copy_number_increase	A sequence variant where copies of a feature are increased relative to the reference.	2783	0	0
2012	11	copy_number_decrease	A sequence variant where copies of a feature are decreased relative to the reference.	2784	0	0
2013	11	bacterial_RNApol_promoter_sigma_ecf	A bacterial promoter with sigma ecf factor binding dependency. This is a type of bacterial promoters that requires a sigma ECF factor to bind to identified -10 and -35 sequence regions in order to mediate binding of the RNA polymerase to the promoter region as part of transcription initiation.	2785	0	0
2014	11	rDNA_replication_fork_barrier	A DNA motif that is found in eukaryotic rDNA repeats, and is a site of replication fork pausing.	2787	0	0
2024	11	ARRET	A non coding RNA transcript, complementary to subtelomeric tract of TERRA transcript but devoid of the repeats.	2805	0	0
2015	11	transcription_start_cluster	A region defined by a cluster of experimentally determined transcription starting sites.	2789	0	0
2025	11	ARIA	A non-coding RNA transcript, derived from the transcription of the telomere. These  transcripts consist of C rich repeats.	2807	0	0
2026	11	anti_ARRET	A non-coding RNA transcript, derived from the transcription of the telomere. These  transcripts are antisense of ARRET transcripts.	2808	0	0
2021	11	mitochondrial_contig	A contig of mitochondria derived sequences.	2801	0	0
2016	11	CAGE_tag	A CAGE tag is a sequence tag hat corresponds to 5' ends of mRNA at cap sites, produced by cap analysis gene expression and used to identify transcriptional start sites.	2793	0	0
2027	11	telomeric_transcript	A non-coding transcript derived from thetranscript of the telomere.	2809	0	0
2017	11	CAGE_cluster	A kind of transcription_initiation_cluster defined by the clustering of CAGE tags on a sequence region.	2794	0	0
2022	11	mitochondrial_supercontig	A scaffold composed of mitochondrial contigs.	2802	0	0
2028	11	distal_duplication	A duplication of the distal region of a chromosome.	2810	0	0
2018	11	5_methylcytosine	A cytosine methylated at the 5 carbon.	2796	0	0
2029	11	regulatory_region	A region of sequence that is involved in the control of a biological process.	2811	0	0
2023	11	TERRA	A non-coding RNA transcript, derived from the transcription of the telomere. These  transcripts contain G rich telomeric RNA repeats and RNA tracts corresponding to adjacent subtelomeric sequences. They are 100-9000 bases long.	2803	0	0
2067	11	substitution	A sequence alteration where the length of the change in the variant is the same as that of the reference.	2855	0	0
2019	11	N4-methylcytosine	A cytosine methylated at the 4 nitrogen.	2799	0	0
2020	11	N6_methyladenine	An adenine methylated at the 6 nitrogen.	2800	0	0
2030	11	U14_snoRNA_primary_transcript	The primary transcript of an evolutionarily conserved eukaryotic low molecular weight RNA capable of intermolecular hybridization with both homologous and heterologous 18S rRNA.	2813	0	0
2031	11	methylation_guide_snoRNA	A snoRNA that specifies the site of 2'-O-ribose methylation in an RNA molecule by base pairing with a short sequence around the target residue.	2815	0	0
2032	11	rRNA_cleavage_RNA	An ncRNA that is part of a ribonucleoprotein that cleaves the primary pre-rRNA transcript in the process of producing mature rRNA molecules.	2816	0	0
2033	11	exon_of_single_exon_gene	An exon that is the only exon in a gene.	2817	0	0
2034	11	cassette_array_member	\N	2818	0	0
2035	11	gene_cassette_member	\N	2819	0	0
2036	11	gene_subarray_member	\N	2820	0	0
2037	11	primer_binding_site	Non-covalent primer binding site for initiation of replication, transcription, or reverse transcription.	2821	0	0
2038	11	gene_array	An array includes two or more genes, or two or more gene subarrays, contiguously arranged where the individual genes, or subarrays, are either identical in sequence, or essentially so.	2823	0	0
2039	11	gene_subarray	A subarray is, by defintition, a member of a gene array (SO:0005851); the members of a subarray may differ substantially in sequence, but are closely related in function.	2824	0	0
2040	11	gene_cassette	A gene that can be substituted for a related gene at a different site in the genome.	2825	0	0
2041	11	gene_cassette_array	An array of non-functional genes whose members, when captured by recombination form functional genes.	2828	0	0
2042	11	gene_group	A collection of related genes.	2829	0	0
2043	11	selenocysteine_tRNA_primary_transcript	A primary transcript encoding seryl tRNA (SO:000269).	2830	0	0
2044	11	selenocysteinyl_tRNA	A tRNA sequence that has a selenocysteine anticodon, and a 3' selenocysteine binding region.	2831	0	0
2045	11	syntenic_region	A region in which two or more pairs of homologous markers occur on the same chromosome in two or more species.	2832	0	0
2046	11	biochemical_region_of_peptide	A region of a peptide that is involved in a biochemical function.	2834	0	0
2047	11	molecular_contact_region	A region that is involved a contact with another molecule.	2835	0	0
2048	11	intrinsically_unstructured_polypeptide_region	A region of polypeptide chain with high conformational flexibility.	2836	0	0
2049	11	catmat_left_handed_three	A motif of 3 consecutive residues with dihedral angles as follows: res i: phi -90 bounds -120 to -60, res i: psi -10 bounds -50 to 30, res i+1: phi -75 bounds -100 to -50, res i+1: psi 140 bounds 110 to 170. An extra restriction of the length of the O to O distance would be useful, that it be less than 5 Angstrom. More precisely these two oxygens are the main chain carbonyl oxygen atoms of residues i-1 and i+1.	2837	0	0
2050	11	catmat_left_handed_four	A motif of 4 consecutive residues with dihedral angles as follows: res i: phi -90 bounds -120 to -60, res i psi -10 bounds -50 to 30, res i+1: phi -90 bounds -120 to -60, res i+1: psi -10 bounds -50 to 30, res i+2: phi -75 bounds -100 to -50, res i+2: psi 140 bounds 110 to 170.  The extra restriction of the length of the O to O distance is similar, that it be less than 5 Angstrom. In this case these two Oxygen atoms are the main chain carbonyl oxygen atoms of residues i-1 and i+2.	2838	0	0
2051	11	catmat_right_handed_three	A motif of 3 consecutive residues with dihedral angles as follows: res i: phi -90 bounds -120 to -60, res i: psi -10 bounds -50 to 30, res i+1: phi -75 bounds -100 to -50, res i+1: psi 140 bounds 110 to 170. An extra restriction of the length of the O to O distance would be useful, that it be less than 5 Angstrom. More precisely these two oxygens are the main chain carbonyl oxygen atoms of residues i-1 and i+1.	2839	0	0
2052	11	catmat_right_handed_four	A motif of 4 consecutive residues with dihedral angles as follows: res i: phi -90 bounds -120 to -60, res i: psi -10 bounds -50 to 30, res i+1: phi -90 bounds -120 to -60, res i+1: psi -10 bounds -50 to 30, res i+2: phi -75 bounds -100 to -50, res i+2: psi 140 bounds 110 to 170. The extra restriction of the length of the O to O distance is similar, that it be less than 5 Angstrom. In this case these two Oxygen atoms are the main chain carbonyl oxygen atoms of residues i-1 and i+2.	2840	0	0
2053	11	alpha_beta_motif	A motif of five consecutive residues and two H-bonds in which: H-bond between CO of residue(i) and NH of residue(i+4), H-bond between CO of residue(i) and NH of residue(i+3),Phi angles of residues(i+1), (i+2) and (i+3) are negative.	2841	0	0
2054	11	lipoprotein_signal_peptide	A peptide that acts as a signal for both membrane translocation and lipid attachment in prokaryotes.	2842	0	0
2055	11	no_output	An experimental region wherean analysis has been run and not produced any annotation.	2843	0	0
2056	11	cleaved_peptide_region	The cleaved_peptide_regon is the a region of peptide sequence that is cleaved during maturation.	2844	0	0
2057	11	peptide_coil	Irregular, unstructured regions of a protein's backbone, as distinct from the regular region (namely alpha helix and beta strand - characterised by specific patterns of main-chain hydrogen bonds).	2845	0	0
2058	11	hydrophobic_region_of_peptide	Hydrophobic regions are regions with a low affinity for water.	2846	0	0
2059	11	n_terminal_region	The amino-terminal positively-charged region of a signal peptide (approx 1-5 aa).	2847	0	0
2060	11	c_terminal_region	The more polar, carboxy-terminal region of the signal peptide (approx 3-7 aa).	2848	0	0
2061	11	central_hydrophobic_region_of_signal_peptide	The central, hydrophobic region of the signal peptide (approx 7-15 aa).	2849	0	0
2062	11	polypeptide_conserved_motif	A conserved motif is a short (up to 20 amino acids) region of biological interest that is conserved in different proteins. They may or may not have functional or structural significance within the proteins in which they are found.	2850	0	0
2063	11	polypeptide_binding_motif	A polypeptide binding motif is a short (up to 20 amino acids) polypeptide region of biological interest that contains one or more amino acids experimentally shown to bind to a ligand.	2851	0	0
2064	11	polypeptide_catalytic_motif	A polypeptide catalytic motif is a short (up to 20 amino acids) polypeptide region that contains one or more active site residues.	2852	0	0
2065	11	polypeptide_DNA_contact	A binding site that, in the polypeptide molecule, interacts selectively and non-covalently with DNA.	2853	0	0
2066	11	polypeptide_conserved_region	A subsection of sequence with biological interest that is conserved in different proteins. They may or may not have functional or structural significance within the proteins in which they are found.	2854	0	0
2068	11	complex_substitution	When no simple or well defined DNA mutation event describes the observed DNA change, the keyword "complex" should be used. Usually there are multiple equally plausible explanations for the change.	2857	0	0
2069	11	point_mutation	A single nucleotide change which has occurred at the same position of a corresponding nucleotide in a reference sequence.	2858	0	0
2070	11	transition	Change of a pyrimidine nucleotide, C or T, into an other pyrimidine nucleotide, or change of a purine nucleotide, A or G, into an other purine nucleotide.	2860	0	0
2071	11	pyrimidine_transition	A substitution of a pyrimidine, C or T, for another pyrimidine.	2861	0	0
2072	11	C_to_T_transition	A transition of a cytidine to a thymine.	2862	0	0
2073	11	C_to_T_transition_at_pCpG_site	The transition of cytidine to thymine occurring at a pCpG site as a consequence of the spontaneous deamination of 5'-methylcytidine.	2863	0	0
2074	11	T_to_C_transition	\N	2864	0	0
2075	11	purine_transition	A substitution of a purine, A or G, for another purine.	2865	0	0
2076	11	A_to_G_transition	A transition of an adenine to a guanine.	2866	0	0
2077	11	G_to_A_transition	A transition of a guanine to an adenine.	2867	0	0
2078	11	transversion	Change of a pyrimidine nucleotide, C or T, into a purine nucleotide, A or G, or vice versa.	2868	0	0
2079	11	pyrimidine_to_purine_transversion	Change of a pyrimidine nucleotide, C or T, into a purine nucleotide, A or G.	2870	0	0
2080	11	C_to_A_transversion	A transversion from cytidine to adenine.	2871	0	0
2081	11	C_to_G_transversion	\N	2872	0	0
2082	11	T_to_A_transversion	A transversion from T to A.	2873	0	0
2083	11	T_to_G_transversion	A transversion from T to G.	2874	0	0
2084	11	purine_to_pyrimidine_transversion	Change of a purine nucleotide, A or G , into a pyrimidine nucleotide C or T.	2875	0	0
2085	11	A_to_C_transversion	A transversion from adenine to cytidine.	2876	0	0
2086	11	A_to_T_transversion	A transversion from adenine to thymine.	2877	0	0
2087	11	G_to_C_transversion	A transversion from guanine to cytidine.	2878	0	0
2088	11	G_to_T_transversion	A transversion from guanine to thymine.	2879	0	0
2089	11	intrachromosomal_mutation	A chromosomal structure variation within a single chromosome.	2880	0	0
2090	11	chromosomal_deletion	An incomplete chromosome.	2881	0	0
2091	11	chromosomal_inversion	An interchromosomal mutation where a region of the chromosome is inverted with respect to wild type.	2883	0	0
2092	11	interchromosomal_mutation	A chromosomal structure variation whereby more than one chromosome is involved.	2885	0	0
2093	11	indel	A sequence alteration which included an insertion and a deletion, affecting 2 or more bases.	2886	0	0
2094	11	duplication	One or more nucleotides are added between two adjacent nucleotides in the sequence; the inserted sequence derives from, or is identical in sequence to, nucleotides adjacent to insertion point.	2890	0	0
2095	11	inversion	A continuous nucleotide sequence is inverted in the same position.	2892	0	0
2096	11	chromosomal_duplication	An extra chromosome.	2894	0	0
2097	11	intrachromosomal_duplication	A duplication that occurred within a chromosome.	2896	0	0
2098	11	direct_tandem_duplication	A tandem duplication where the individual regions are in the same orientation.	2897	0	0
2099	11	inverted_tandem_duplication	A tandem duplication where the individual regions are not in the same orientation.	2898	0	0
2100	11	intrachromosomal_transposition	A chromosome structure variation whereby a transposition occurred within a chromosome.	2899	0	0
2101	11	compound_chromosome	A chromosome structure variant where a monocentric element is caused by the fusion of two chromosome arms.	2900	0	0
2102	11	Robertsonian_fusion	A non reciprocal translocation whereby the participating chromosomes break at their centromeres and the long arms fuse to form a single chromosome with a single centromere.	2901	0	0
2103	11	chromosomal_translocation	An interchromosomal mutation. Rearrangements that alter the pairing of telomeres are classified as translocations.	2904	0	0
2111	11	sequence_variant_causing_initiator_codon_change_in_transcript (obsolete SO:1000055)	The DNA mutation changes, usually destroys, the first coding triplet of a gene. Usually prevents translation although another initiator codon may be used.	2916	1	0
2104	11	ring_chromosome	A ring chromosome is a chromosome whose arms have fused together to form a ring, often with the loss of the ends of the chromosome.	2906	0	0
2105	11	pericentric_inversion	A chromosomal inversion that includes the centromere.	2908	0	0
2112	11	sequence_variant_causing_amino_acid_coding_codon_change_in_transcript (obsolete SO:1000056)	The DNA mutation affects the amino acid coding sequence of a gene; this region includes both the initiator and terminator codons.	2917	1	0
2106	11	paracentric_inversion	A chromosomal inversion that does not include the centromere.	2909	0	0
2107	11	reciprocal_chromosomal_translocation	A chromosomal translocation with two breaks; two chromosome segments have simply been exchanged.	2910	0	0
2113	11	sequence_variant_causing_synonymous_codon_change_in_transcript (obsolete SO:1000057)	The changed codon has the same translation product as the original codon.	2918	1	0
2108	11	sequence_variation_affecting_transcript (obsolete SO:1000049)	Any change in mature, spliced and processed, RNA that results from a change in the corresponding DNA sequence.	2911	1	0
2114	11	sequence_variant_causing_non_synonymous_codon_change_in_transcript (obsolete SO:1000058)	A DNA point mutation that causes a substitution of an amino acid by an other.	2919	1	0
2153	11	mutation_causing_polypeptide_N_terminal_elongation (obsolete SO:1000100)	.	2961	1	0
2115	11	sequence_variant_causing_missense_codon_change_in_transcript (obsolete SO:1000059)	The nucleotide change in the codon leads to a new codon coding for a new amino acid.	2920	1	0
2109	11	sequence_variant_causing_no_change_in_transcript (obsolete SO:1000050)	No effect on the state of the RNA.	2914	1	0
2110	11	sequence_variation_affecting_coding_sequence (obsolete SO:1000054)	Any of the amino acid coding triplets of a gene are affected by the DNA mutation.	2915	1	0
2116	11	sequence_variant_causing_conservative_missense_codon_change_in_transcript (obsolete SO:1000060)	The amino acid change following from the codon change does not change the gross properties (size, charge, hydrophobicity) of the amino acid at that position.	2921	1	0
2117	11	sequence_variant_causing_nonconservative_missense_codon_change_in_transcript (obsolete SO:1000061)	The amino acid change following from the codon change changes the gross properties (size, charge, hydrophobicity) of the amino acid in that position.	2922	1	0
2118	11	sequence_variant_causing_nonsense_codon_change_in_transcript (obsolete SO:1000062)	The nucleotide change in the codon triplet creates a terminator codon.	2923	1	0
2119	11	sequence_variant_causing_terminator_codon_change_in_transcript (obsolete SO:1000063)	The nucleotide change in the codon triplet changes the stop codon, causing an elongated transcript sequence.	2924	1	0
2120	11	sequence_variation_affecting_reading_frame (obsolete SO:1000064)	An umbrella term for terms describing an effect of a sequence variation on the frame of translation.	2925	1	0
2121	11	frameshift_sequence_variation (obsolete SO:1000065)	A mutation causing a disruption of the translational reading frame, because the number of nucleotides inserted or deleted is not a multiple of three.	2926	1	0
2122	11	sequence_variant_causing_plus_1_frameshift_mutation (obsolete SO:1000066)	A mutation causing a disruption of the translational reading frame, due to the insertion of a nucleotide.	2928	1	0
2123	11	sequence_variant_causing_minus_1_frameshift (obsolete SO:1000067)	A mutation causing a disruption of the translational reading frame, due to the deletion of a nucleotide.	2929	1	0
2124	11	sequence_variant_causing_plus_2_frameshift (obsolete SO:1000068)	A mutation causing a disruption of the translational reading frame, due to the insertion of two nucleotides.	2930	1	0
2125	11	sequence_variant_causing_minus_2_frameshift (obsolete SO:1000069)	A mutation causing a disruption of the translational reading frame, due to the deletion of two nucleotides.	2931	1	0
2126	11	sequence_variant_affecting_transcript_processing (obsolete SO:1000070)	Sequence variant affects the way in which the primary transcriptional product is processed to form the mature transcript.	2932	1	0
2127	11	sequence_variant_affecting_splicing (obsolete SO:1000071)	A sequence_variant_effect where the way in which the primary transcriptional product is processed to form the mature transcript, specifically by the removal (splicing) of intron sequences is changed.	2933	1	0
2128	11	sequence_variant_affecting_splice_donor (obsolete SO:1000072)	A sequence_variant_effect that changes the splice donor sequence.	2934	1	0
2129	11	sequence_variant_affecting_splice_acceptor (obsolete SO:1000073)	A sequence_variant_effect that changes the splice acceptor sequence.	2935	1	0
2130	11	sequence_variant_causing_cryptic_splice_activation (obsolete SO:1000074)	A sequence variant causing a new (functional) splice site.	2936	1	0
2131	11	sequence_variant_affecting_editing (obsolete SO:1000075)	Sequence variant affects the editing of the transcript.	2937	1	0
2132	11	sequence_variant_affecting_transcription (obsolete SO:1000076)	Mutation affects the process of transcription, its initiation, progression or termination.	2938	1	0
2133	11	sequence_variant_decreasing_rate_of_transcription (obsolete SO:1000078)	A sequence variation that decreases the rate a which transcription of the sequence occurs.	2939	1	0
2134	11	sequence_variation_affecting_transcript_sequence (obsolete SO:1000079)	\N	2940	1	0
2135	11	sequence_variant_increasing_rate_of_transcription (obsolete SO:1000080)	\N	2941	1	0
2136	11	sequence_variant_affecting_rate_of_transcription (obsolete SO:1000081)	A mutation that alters the rate a which transcription of the sequence occurs.	2942	1	0
2137	11	sequence variant_affecting_transcript_stability (obsolete SO:1000082)	Sequence variant affects the stability of the transcript.	2943	1	0
2138	11	sequence_variant_increasing_transcript_stability (obsolete SO:1000083)	Sequence variant increases the stability (half-life) of the transcript.	2944	1	0
2139	11	sequence_variant_decreasing_transcript_stability (obsolete SO:1000084)	Sequence variant decreases the stability (half-life) of the transcript.	2945	1	0
2140	11	sequence_variation_affecting_level_of_transcript (obsolete SO:1000085)	A sequence variation that causes a change in the level of mature, spliced and processed RNA, resulting from a change in the corresponding DNA sequence.	2946	1	0
2141	11	sequence_variation_decreasing_level_of_transcript (obsolete SO:1000086)	A sequence variation that causes a decrease in the level of mature, spliced and processed RNA, resulting from a change in the corresponding DNA sequence.	2947	1	0
2142	11	sequence_variation_increasing_level_of_transcript (obsolete SO:1000087)	A sequence_variation that causes an increase in the level of mature, spliced and processed RNA, resulting from a change in the corresponding DNA sequence.	2948	1	0
2143	11	sequence_variant_affecting_translational_product (obsolete SO:1000088)	A sequence variant causing a change in primary translation product of a transcript.	2949	1	0
2144	11	sequence_variant_causing_no_change_of_translational_product (obsolete SO:1000089)	The sequence variant at RNA level does not lead to any change in polypeptide.	2952	1	0
2145	11	sequence_variant_causing_complex_change_of_translational_product (obsolete SO:1000092)	Any sequence variant effect that is known at nucleotide level but cannot be explained by using other key terms.	2953	1	0
2146	11	sequence_variant_causing_amino_acid_substitution (obsolete SO:1000093)	The replacement of a single amino acid by another.	2954	1	0
2147	11	sequence_variant_causing_conservative_amino_acid_substitution (obsolete SO:1000094)	\N	2955	1	0
2148	11	sequence_variant_causing_nonconservative_amino_acid_substitution (obsolete SO:1000095)	\N	2956	1	0
2149	11	sequence_variant_causing_amino_acid_insertion (obsolete SO:1000096)	The insertion of one or more amino acids from the polypeptide, without affecting the surrounding sequence.	2957	1	0
2150	11	sequence_variant_causing_amino_acid_deletion (obsolete SO:1000097)	The deletion of one or more amino acids from the polypeptide, without affecting the surrounding sequence.	2958	1	0
2151	11	sequence_variant_causing_polypeptide_truncation (obsolete SO:1000098)	The translational product is truncated at its C-terminus, usually a result of a nonsense codon change in transcript (SO:1000062).	2959	1	0
2152	11	sequence_variant_causing_polypeptide_elongation (obsolete SO:1000099)	The extension of the translational product at either (or both) the N-terminus and/or the C-terminus.	2960	1	0
2155	11	sequence_variant_affecting_level_of_translational_product (obsolete SO:1000102)	\N	2963	1	0
2156	11	sequence_variant_decreasing_level_of_translation_product (obsolete SO:1000103)	\N	2964	1	0
2157	11	sequence_variant_increasing_level_of_translation_product (obsolete SO:1000104)	\N	2965	1	0
2158	11	sequence_variant_affecting_polypeptide_amino_acid_sequence (obsolete SO:1000105)	\N	2966	1	0
2159	11	mutation_causing_inframe_polypeptide_N_terminal_elongation (obsolete SO:1000106)	\N	2967	1	0
2160	11	mutation_causing_out_of_frame_polypeptide_N_terminal_elongation (obsolete SO:1000107)	\N	2968	1	0
2161	11	mutaton_causing_inframe_polypeptide_C_terminal_elongation (obsolete SO:1000108)	\N	2969	1	0
2162	11	mutation_causing_out_of_frame_polypeptide_C_terminal_elongation (obsolete SO:1000109)	\N	2970	1	0
2163	11	frame_restoring_sequence_variant (obsolete SO:1000110)	A mutation that reverts the sequence of a previous frameshift mutation back to the initial frame.	2971	1	0
2164	11	sequence_variant_affecting_3D_structure_of_polypeptide (obsolete SO:1000111)	A mutation that changes the amino acid sequence of the peptide in such a way that it changes the 3D structure of the molecule.	2972	1	0
2191	11	inversion_cum_translocation	A chromosomal translocation whereby the first two breaks are in the same chromosome, and the region between them is rejoined in inverted order to the other side of the first break, such that both sides of break one are present on the same chromosome. The remaining free ends are joined as a translocation with those resulting from the third break.	3003	0	0
36	8	exact	\N	36	0	0
2165	11	sequence_variant_causing_no_3D_structural_change (obsolete SO:1000112)	\N	2975	1	0
2192	11	bipartite_duplication	An interchromosomal mutation whereby the (large) region between the first two breaks listed is lost, and the two flanking segments (one of them centric) are joined as a translocation to the free ends resulting from the third break.	3004	0	0
2166	11	sequence_variant_causing_complex_3D_structural_change (obsolete SO:1000115)	\N	2976	1	0
2196	11	inverted_insertional_duplication	An insertional duplication where a copy of the segment between the first two breaks listed is inserted at the third break; the insertion is in cytologically inverted orientation with respect to its flanking segments.	3008	0	0
2167	11	sequence_variant_causing_conformational_change (obsolete SO:1000116)	\N	2977	1	0
2193	11	cyclic_translocation	A chromosomal translocation whereby three breaks occurred in three different chromosomes. The centric segment resulting from the first break listed is joined to the acentric segment resulting from the second, rather than the third.	3005	0	0
2168	11	sequence_variant_affecting_polypeptide_function (obsolete SO:1000117)	\N	2978	1	0
2169	11	sequence_variant_causing_loss_of_function_of_polypeptide (obsolete SO:1000118)	\N	2979	1	0
2194	11	bipartite_inversion	A chromosomal inversion caused by three breaks in the same chromosome; both central segments are inverted in place (i.e., they are not transposed).	3006	0	0
2170	11	sequence_variant_causing_inactive_ligand_binding_site (obsolete SO:1000119)	\N	2980	1	0
2197	11	insertional_duplication	A chromosome duplication involving the insertion of a duplicated region (as opposed to a free duplication).	3009	0	0
2171	11	sequence_variant_causing_inactive_catalytic_site (obsolete SO:1000120)	\N	2981	1	0
2195	11	uninverted_insertional_duplication	An insertional duplication where a copy of the segment between the first two breaks listed is inserted at the third break; the insertion is in cytologically the same orientation as its flanking segments.	3007	0	0
2172	11	sequence_variant_causing_polypeptide_localization_change (obsolete SO:1000121)	\N	2982	1	0
2198	11	interchromosomal_transposition	A chromosome structure variation whereby a transposition occurred between chromosomes.	3010	0	0
2173	11	sequence_variant_causing_polypeptide_post_translational_processing_change (obsolete SO:1000122)	\N	2983	1	0
2241	11	plus_1_translationally_frameshifted	An attribute describing a translational frameshift of +1.	3055	0	0
2174	11	polypeptide_post_translational_processing_affected (obsolete SO:1000123)	\N	2984	1	0
2175	11	sequence_variant_causing_partial_loss_of_function_of_polypeptide (obsolete SO:1000124)	\N	2985	1	0
2176	11	sequence_variant_causing_gain_of_function_of_polypeptide (obsolete SO:1000125)	\N	2986	1	0
2177	11	sequence_variant_affecting_transcript_secondary_structure (obsolete SO:1000126)	A sequence variant that affects the secondary structure (folding) of the RNA transcript molecule.	2987	1	0
2178	11	sequence_variant_causing_compensatory_transcript_secondary_structure_mutation (obsolete SO:1000127)	\N	2988	1	0
2179	11	sequence_variant_effect (obsolete SO:1000132)	The effect of a change in nucleotide sequence.	2989	1	0
2180	11	sequence_variant_causing_polypeptide_fusion (obsolete SO:1000134)	\N	2990	1	0
2181	11	autosynaptic_chromosome	An autosynaptic chromosome is the aneuploid product of recombination between a pericentric inversion and a cytologically wild-type chromosome.	2991	0	0
2182	11	homo_compound_chromosome	A compound chromosome whereby two copies of the same chromosomal arm attached to a common centromere. The chromosome is diploid for the arm involved.	2993	0	0
2183	11	hetero_compound_chromosome	A compound chromosome whereby two arms from different chromosomes are connected through the centromere of one of them.	2994	0	0
2184	11	chromosome_fission	A chromosome that occurred by the division of a larger chromosome.	2995	0	0
2185	11	dexstrosynaptic_chromosome	An autosynaptic chromosome carrying the two right (D = dextro) telomeres.	2996	0	0
2186	11	laevosynaptic_chromosome	LS is an autosynaptic chromosome carrying the two left (L = levo) telomeres.	2998	0	0
2187	11	free_duplication	A chromosome structure variation whereby the duplicated sequences are carried as a free centric element.	2999	0	0
2188	11	free_ring_duplication	A ring chromosome which is a copy of another chromosome.	3000	0	0
2189	11	complex_chromosomal_mutation	A chromosome structure variant with 4 or more breakpoints.	3001	0	0
2190	11	deficient_translocation	A chromosomal deletion whereby a translocation occurs in which one of the four broken ends loses a segment before re-joining.	3002	0	0
2199	11	inverted_interchromosomal_transposition	An interchromosomal transposition whereby a copy of the segment between the first two breaks listed is inserted at the third break; the insertion is in cytologically inverted orientation with respect to its flanking segment.	3011	0	0
2200	11	uninverted_interchromosomal_transposition	An interchromosomal transition where the segment between the first two breaks listed is removed and inserted at the third break; the insertion is in cytologically the same orientation as its flanking segments.	3012	0	0
2201	11	inverted_intrachromosomal_transposition	An intrachromosomal transposition whereby the segment between the first two breaks listed is removed and inserted at the third break; the insertion is in cytologically inverted orientation with respect to its flanking segments.	3013	0	0
2202	11	uninverted_intrachromosomal_transposition	An intrachromosomal transposition whereby the segment between the first two breaks listed is removed and inserted at the third break; the insertion is in cytologically the same orientation as its flanking segments.	3014	0	0
2203	11	unoriented_insertional_duplication	An insertional duplication where a copy of the segment between the first two breaks listed is inserted at the third break; the orientation of the insertion with respect to its flanking segments is not recorded.	3015	0	0
2204	11	unoriented_interchromosomal_transposition	An interchromosomal transposition whereby a copy of the segment between the first two breaks listed is inserted at the third break; the orientation of the insertion with respect to its flanking segments is not recorded.	3016	0	0
2205	11	unoriented_intrachromosomal_transposition	An intrachromosomal transposition whereby the segment between the first two breaks listed is removed and inserted at the third break; the orientation of the insertion with respect to its flanking segments is not recorded.	3017	0	0
2206	11	uncharacterised_chromosomal_mutation	\N	3018	0	0
2207	11	deficient_inversion	A chromosomal deletion whereby three breaks occur in the same chromosome; one central region is lost, and the other is inverted.	3019	0	0
2208	11	tandem_duplication	A duplication consisting of 2 identical adjacent regions.	3020	0	0
2209	11	partially_characterised_chromosomal_mutation	\N	3021	0	0
2210	11	sequence_variant_affecting_gene_structure (obsolete SO:1000180)	A sequence_variant_effect that changes the gene structure.	3022	1	0
2211	11	sequence_variant_causing_gene_fusion (obsolete SO:1000181)	A sequence_variant_effect that changes the gene structure by causing a fusion to another gene.	3023	1	0
2212	11	chromosome_number_variation	A kind of chromosome variation where the chromosome complement is not an exact multiple of the haploid number.	3024	0	0
2213	11	chromosome_structure_variation	\N	3025	0	0
2214	11	sequence_variant_causes_exon_loss (obsolete SO:1000184)	A sequence variant affecting splicing and causes an exon loss.	3026	1	0
2215	11	sequence_variant_causes_intron_gain (obsolete SO:1000185)	A sequence variant effect, causing an intron to be gained by the processed transcript; usually a result of a donor acceptor mutation (SO:1000072).	3027	1	0
2216	11	sequence_variant_causing_cryptic_splice_donor_activation (obsolete SO:1000186)	\N	3028	1	0
2217	11	sequence_variant_causing_cryptic_splice_acceptor_activation (obsolete SO:1001186)	\N	3029	1	0
2218	11	alternatively_spliced_transcript	A transcript that is alternatively spliced.	3030	0	0
2219	11	encodes_1_polypeptide	A gene that is alternately spliced, but encodes only one polypeptide.	3031	0	0
2220	11	encodes_greater_than_1_polypeptide	A gene that is alternately spliced, and encodes more than one polypeptide.	3032	0	0
2221	11	encodes_different_polypeptides_different_stop	A gene that is alternately spliced, and encodes more than one polypeptide, that have overlapping peptide sequences, but use different stop codons.	3033	0	0
2222	11	encodes_overlapping_peptides_different_start	A gene that is alternately spliced, and encodes more than one polypeptide, that have overlapping peptide sequences, but use different start codons.	3034	0	0
2223	11	encodes_disjoint_polypeptides	A gene that is alternately spliced, and encodes more than one polypeptide, that do not have overlapping peptide sequences.	3035	0	0
2224	11	encodes_overlapping_polypeptides_different_start_and_stop	A gene that is alternately spliced, and encodes more than one polypeptide, that have overlapping peptide sequences, but use different start and stop codons.	3036	0	0
2225	11	alternatively_spliced_gene_encoding_greater_than_1_polypeptide_coding_regions_overlapping (obsolete SO:1001194)	\N	3037	1	0
2226	11	encodes_overlapping_peptides	A gene that is alternately spliced, and encodes more than one polypeptide, that have overlapping peptide sequences.	3038	0	0
2227	11	cryptogene	A maxicircle gene so extensively edited that it cannot be matched to its edited mRNA sequence.	3039	0	0
2228	11	dicistronic_primary_transcript	A primary transcript that has the quality dicistronic.	3040	0	0
2229	11	member_of_regulon	\N	3041	0	0
2230	11	alternatively_spliced_transcript_encoding_greater_than_1_polypeptide_different_start_codon_different_stop_codon_coding_regions_non_overlapping (obsolete SO:1001244)	\N	3042	1	0
2231	11	CDS_independently_known	A CDS with the evidence status of being independently known.	3043	0	0
2232	11	orphan_CDS	A CDS whose predicted amino acid sequence is unsupported by any experimental evidence or by any match with any other known sequence.	3044	0	0
2233	11	CDS_supported_by_domain_match_data	A CDS that is supported by domain similarity.	3045	0	0
2234	11	CDS_supported_by_sequence_similarity_data	A CDS that is supported by sequence similarity data.	3046	0	0
2235	11	CDS_predicted	A CDS that is predicted.	3047	0	0
2236	11	status_of_coding_sequence (obsolete SO:1001255)	\N	3048	1	0
2237	11	CDS_supported_by_EST_or_cDNA_data	A CDS that is supported by similarity to EST or cDNA data.	3049	0	0
2238	11	internal_Shine_Dalgarno_sequence	A Shine-Dalgarno sequence that stimulates recoding through interactions with the anti-Shine-Dalgarno in the RNA of small ribosomal subunits of translating ribosomes. The signal is only operative in Bacteria.	3050	0	0
2239	11	recoded_mRNA	The sequence of a mature mRNA transcript, modified before translation or during translation, usually by special cis-acting signals.	3052	0	0
2240	11	minus_1_translationally_frameshifted	An attribute describing a translational frameshift of -1.	3054	0	0
2242	11	mRNA_recoded_by_translational_bypass	A recoded_mRNA where translation was suspended at a particular codon and resumed at a particular non-overlapping downstream codon.	3056	0	0
2243	11	mRNA_recoded_by_codon_redefinition	A recoded_mRNA that was modified by an alteration of codon meaning.	3057	0	0
2244	11	stop_codon_redefinition_as_selenocysteine (obsolete SO:1001266)	\N	3058	1	0
2245	11	stop_codon_readthrough (obsolete SO:1001267)	\N	3059	1	0
2246	11	recoding_stimulatory_region	A site in an mRNA sequence that stimulates the recoding of a region in the same mRNA.	3060	0	0
2247	11	four_bp_start_codon	A non-canonical start codon with 4 base pairs.	3062	0	0
2248	11	stop_codon_redefinition_as_pyrrolysine (obsolete SO:1001270)	\N	3063	1	0
2249	11	archaeal_intron	An intron characteristic of Archaeal tRNA and rRNA genes, where intron transcript generates a bulge-helix-bulge motif that is recognised by a splicing endoribonuclease.	3064	0	0
2250	11	tRNA_intron	An intron found in tRNA that is spliced via endonucleolytic cleavage and ligation rather than transesterification.	3066	0	0
2251	11	CTG_start_codon	A non-canonical start codon of sequence CTG.	3067	0	0
2252	11	SECIS_element	The incorporation of selenocysteine into a protein sequence is directed by an in-frame UGA codon (usually a stop codon) within the coding region of the mRNA. Selenoprotein mRNAs contain a conserved secondary structure in the 3' UTR that is required for the distinction of UGA stop from UGA selenocysteine. The selenocysteine insertion sequence (SECIS) is around 60 nt in length and adopts a hairpin structure which is sufficiently well-defined and conserved to act as a computational screen for selenoprotein genes.	3068	0	0
2253	11	retron	Sequence coding for a short, single-stranded, DNA sequence via a retrotransposed RNA intermediate; characteristic of some microbial genomes.	3071	0	0
2254	11	three_prime_recoding_site	The recoding stimulatory signal located downstream of the recoding site.	3072	0	0
2255	11	three_prime_stem_loop_structure	A recoding stimulatory region, the stem-loop secondary structural element is downstream of the redefined region.	3073	0	0
2256	11	five_prime_recoding_site	The recoding stimulatory signal located upstream of the recoding site.	3074	0	0
2257	11	flanking_three_prime_quadruplet_recoding_signal	Four base pair sequence immediately downstream of the redefined region. The redefined region is a frameshift site. The quadruplet is 2 overlapping codons.	3075	0	0
2258	11	UAG_stop_codon_signal	A stop codon signal for a UAG stop codon redefinition.	3076	0	0
2259	11	UAA_stop_codon_signal	A stop codon signal for a UAA stop codon redefinition.	3077	0	0
2260	11	regulon	A group of genes, whether linked as a cluster or not, that respond to a common regulatory signal.	3078	0	0
2261	11	UGA_stop_codon_signal	A stop codon signal for a UGA stop codon redefinition.	3080	0	0
2262	11	three_prime_repeat_recoding_signal	A recoding stimulatory signal, downstream sequence important for recoding that contains repetitive elements.	3081	0	0
2263	11	distant_three_prime_recoding_signal	A recoding signal that is found many hundreds of nucleotides 3' of a redefined stop codon.	3082	0	0
2264	11	stop_codon_signal	A recoding stimulatory signal that is a stop codon and has effect on efficiency of recoding.	3084	0	0
2265	11	databank_entry	The sequence referred to by an entry in a databank such as Genbank or SwissProt.	3085	0	0
2266	11	gene_segment	A gene component region which acts as a recombinational unit of a gene whose functional form is generated through somatic recombination.	3086	0	0
2267	12	feature_property		3088	0	1
2268	12	aminoacid		3089	0	1
2269	12	anticodon		3090	0	1
2270	12	citation	\N	3091	0	1
2271	12	comment		3092	0	1
2272	12	cyto_range		3093	0	1
2273	12	description		3094	0	1
2274	12	dicistronic		3095	0	1
2275	12	element		3096	0	1
2276	12	encoded_symbol		3097	0	1
2277	12	evidenceGB	\N	3098	0	1
2278	12	linked_to	\N	3099	0	1
2279	12	missing_start_codon		3100	0	1
2280	12	missing_stop_codon		3101	0	1
2281	12	na_change		3102	0	1
2282	12	non_canonical_start_codon		3103	0	1
2283	12	owner	\N	3104	0	1
2284	12	pr_change		3105	0	1
2285	12	problem		3106	0	1
2286	12	readthrough_stop_codon	\N	3107	0	1
2287	12	reported_na_change	\N	3108	0	1
2288	12	reported_pr_change	\N	3109	0	1
2289	12	sp_comment	\N	3110	0	1
2290	12	sp_status	\N	3111	0	1
2291	12	status		3112	0	1
2292	12	source		3113	0	1
2293	12	symbol		3114	0	1
2294	12	validation_flag	\N	3115	0	1
2295	12	synonym		3116	0	1
2296	12	date	\N	3117	0	1
2297	12	internal_synonym	\N	3118	0	1
2298	12	qseq_type	\N	3119	0	1
2299	12	unixdate	\N	3120	0	1
2300	12	gbunit		3121	0	1
2301	12	keywords	\N	3122	0	1
2302	12	orf_classification		3123	0	1
2303	12	ontology_term		3124	0	1
2304	12	protein_id		3125	0	1
2305	12	organism		3126	0	1
2306	12	mol_type		3127	0	1
2307	12	dev_stage		3128	0	1
2308	12	chromosome		3129	0	1
2309	12	map		3130	0	1
2310	12	finished		3131	0	1
2311	12	Note		3132	0	1
2312	12	Gap		3133	0	1
2313	12	score		3134	0	1
\.


--
-- Name: cvterm_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cvterm_cvterm_id_seq', 2313, true);


--
-- Data for Name: cvterm_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cvterm_dbxref (cvterm_dbxref_id, cvterm_id, dbxref_id, is_for_definition) FROM stdin;
1	32	37	0
2	32	38	0
3	37	40	0
4	38	42	0
5	39	44	0
6	40	46	0
7	41	48	0
8	42	50	0
9	43	52	0
10	44	54	0
11	45	56	0
12	46	58	0
13	47	60	0
14	48	62	0
15	49	64	0
16	50	66	0
17	51	68	0
18	52	70	0
19	53	72	0
20	54	74	0
21	55	76	0
22	56	78	0
23	57	80	0
24	58	82	0
25	59	84	0
26	60	86	0
27	114	141	1
28	115	141	1
29	116	144	1
30	116	145	0
31	118	148	1
32	118	149	0
33	119	141	1
34	119	152	0
35	121	154	1
36	126	160	1
37	127	141	1
38	128	163	1
39	128	164	1
40	129	166	1
41	129	164	1
42	131	163	1
43	131	164	1
44	132	163	1
45	133	171	1
46	133	172	0
47	134	141	1
48	135	141	1
49	136	141	1
50	137	141	1
51	137	177	0
52	138	179	1
53	139	141	1
54	142	184	0
55	143	186	1
56	144	186	1
57	145	189	1
58	145	190	0
59	146	192	1
60	147	189	1
61	148	195	1
62	150	198	1
63	150	199	0
64	151	201	1
65	151	202	0
66	152	201	1
67	152	204	0
68	153	141	1
69	154	141	1
70	155	201	1
71	156	141	1
72	157	201	1
73	158	211	1
74	159	141	1
75	160	141	1
76	161	141	1
77	162	141	1
78	163	141	1
79	164	141	1
80	165	141	1
81	166	201	1
82	166	220	0
83	168	141	1
84	169	141	1
85	169	224	0
86	170	141	1
87	170	226	0
88	171	141	1
89	171	228	0
90	172	201	1
91	172	230	0
92	174	233	1
93	176	233	1
94	177	237	1
95	178	141	1
96	180	141	1
97	183	141	1
98	184	141	1
99	185	141	1
100	186	141	1
101	188	141	1
102	189	141	1
103	190	141	1
104	191	141	1
105	192	141	1
106	192	253	0
107	193	211	1
108	194	141	1
109	202	211	1
110	202	264	0
111	203	211	1
112	203	266	0
113	204	211	1
114	205	211	1
115	206	211	1
116	207	211	1
117	208	211	1
118	209	211	1
119	210	211	1
120	211	141	1
121	212	211	1
122	213	211	1
123	214	211	1
124	215	211	1
125	216	280	1
126	216	281	0
127	217	141	1
128	218	141	1
129	219	201	1
130	219	285	0
131	219	286	0
132	220	288	1
133	223	211	1
134	224	141	1
135	225	141	1
136	226	141	1
137	227	141	1
138	227	296	0
139	228	141	1
140	229	141	1
141	231	141	1
142	233	211	1
143	234	141	1
144	235	141	1
145	236	306	1
146	237	141	1
147	238	201	1
148	239	141	1
149	240	141	1
150	241	141	1
151	242	211	1
152	243	211	1
153	244	211	1
154	245	141	1
155	246	141	1
156	247	306	1
157	248	141	1
158	249	141	1
159	249	320	0
160	250	141	1
161	251	141	1
162	252	141	1
163	253	211	1
164	254	141	1
165	255	327	1
166	255	328	0
167	256	148	1
168	256	330	0
169	257	141	1
170	258	141	1
171	260	211	1
172	261	141	1
173	262	141	1
174	262	337	0
175	263	154	1
176	264	154	1
177	264	340	0
178	265	342	1
179	266	141	1
180	266	344	0
181	267	201	1
182	268	201	1
183	269	348	1
184	270	201	1
185	271	201	1
186	271	351	0
187	272	201	1
188	272	353	0
189	273	201	1
190	273	355	0
191	274	141	1
192	274	357	0
193	274	358	0
194	274	359	0
195	275	361	1
196	276	141	1
197	277	364	1
198	277	141	1
199	277	365	0
200	278	367	1
201	278	364	1
202	278	141	1
203	279	367	1
204	279	364	1
205	279	141	1
206	280	148	1
207	280	370	0
208	281	211	1
209	282	373	1
210	282	374	0
211	283	201	1
212	284	141	1
213	285	141	1
214	286	141	1
215	287	148	1
216	287	380	0
217	288	148	1
218	289	148	1
219	289	164	1
220	289	383	0
221	290	148	1
222	290	385	0
223	291	148	1
224	292	201	1
225	293	201	1
226	293	389	0
227	294	141	1
228	295	392	1
229	295	393	0
230	296	141	1
231	297	141	1
232	298	141	1
233	299	398	1
234	300	201	1
235	300	400	0
236	301	141	1
237	302	141	1
238	303	148	1
239	303	404	0
240	304	141	1
241	308	410	1
242	308	411	0
243	309	367	1
244	310	141	1
245	311	364	1
246	312	364	1
247	313	141	1
248	314	141	1
249	315	141	1
250	316	420	1
251	317	201	1
252	318	141	1
253	319	148	1
254	319	424	0
255	320	148	1
256	320	426	0
257	321	141	1
258	321	428	0
259	323	431	1
260	324	141	1
261	325	141	1
262	326	141	1
263	327	141	1
264	328	141	1
265	329	141	1
266	330	141	1
267	331	141	1
268	332	141	1
269	333	141	1
270	334	141	1
271	335	141	1
272	336	141	1
273	337	141	1
274	338	141	1
275	339	141	1
276	340	141	1
277	341	141	1
278	342	141	1
279	343	141	1
280	344	141	1
281	345	141	1
282	346	141	1
283	347	141	1
284	348	141	1
285	348	457	0
286	349	201	1
287	349	459	0
288	350	141	1
289	351	462	1
290	351	201	1
291	353	431	1
292	354	141	1
293	356	364	1
294	357	141	1
295	358	141	1
296	358	470	0
297	361	141	1
298	365	141	1
299	367	148	1
300	367	480	1
301	367	481	0
302	368	483	1
303	368	480	1
304	368	484	0
305	369	141	1
306	370	141	1
307	371	141	1
308	372	141	1
309	373	141	1
310	374	141	1
311	375	141	1
312	376	141	1
313	377	141	1
314	378	141	1
315	379	141	1
316	380	141	1
317	381	141	1
318	382	141	1
319	383	141	1
320	384	141	1
321	385	141	1
322	386	141	1
323	387	141	1
324	388	141	1
325	389	148	1
326	389	506	1
327	389	507	1
328	389	508	0
329	390	510	1
330	390	511	0
331	391	513	1
332	391	514	0
333	392	141	1
334	393	211	1
335	394	211	1
336	395	211	1
337	396	211	1
338	397	211	1
339	398	211	1
340	399	523	1
341	400	211	1
342	401	148	1
343	401	526	0
344	402	211	1
345	402	528	0
346	403	211	1
347	404	531	1
348	404	532	0
349	408	211	1
350	409	141	1
351	409	538	0
352	410	398	1
353	411	148	1
354	411	541	0
355	412	148	1
356	412	543	0
357	417	549	1
358	418	141	1
359	419	523	1
360	420	148	1
361	421	141	1
362	422	342	1
363	422	555	0
364	426	201	1
365	427	141	1
366	428	148	1
367	428	562	0
368	428	563	0
369	429	141	1
370	429	565	0
371	430	141	1
372	431	201	1
373	432	569	1
374	433	141	1
375	433	571	0
376	434	141	1
377	434	573	0
378	435	141	1
379	436	141	1
380	438	141	1
381	439	141	1
382	440	141	1
383	441	581	1
384	442	141	1
385	444	211	1
386	445	141	1
387	445	586	0
388	446	588	1
389	447	141	1
390	448	141	1
391	449	141	1
392	450	141	1
393	451	367	1
394	451	594	0
395	452	342	1
396	453	597	1
397	454	342	1
398	454	599	0
399	455	201	1
400	455	601	0
401	456	201	1
402	456	603	0
403	458	141	1
404	459	141	1
405	460	141	1
406	462	141	1
407	463	611	1
408	463	612	1
409	463	613	0
410	464	141	1
411	465	201	1
412	466	201	1
413	467	612	1
414	468	201	1
415	468	619	0
416	469	141	1
417	470	201	1
418	471	612	1
419	472	141	1
420	473	141	1
421	473	625	0
422	474	627	1
423	474	141	1
424	474	628	0
425	475	141	1
426	476	201	1
427	477	211	1
428	478	141	1
429	479	327	1
430	479	634	0
431	480	141	1
432	481	327	1
433	482	141	1
434	484	201	1
435	485	641	1
436	486	612	1
437	487	211	1
438	488	201	1
439	488	645	0
440	489	647	1
441	489	648	0
442	490	650	1
443	490	651	0
444	491	653	1
445	492	655	1
446	492	656	0
447	493	658	1
448	493	659	0
449	494	661	1
450	494	662	0
451	497	666	1
452	497	667	0
453	498	669	1
454	498	670	0
455	499	672	1
456	500	674	1
457	501	676	1
458	501	677	0
459	502	679	1
460	503	681	1
461	503	682	0
462	504	684	1
463	504	685	0
464	505	687	1
465	505	688	0
466	506	690	1
467	506	691	0
468	507	693	1
469	507	694	0
470	508	696	1
471	509	698	1
472	509	699	0
473	510	693	1
474	510	701	0
475	511	703	1
476	512	705	1
477	512	706	0
478	513	708	1
479	513	709	0
480	514	141	1
481	517	714	1
482	517	715	1
483	517	716	0
484	518	718	1
485	518	719	0
486	519	721	1
487	519	722	0
488	520	724	1
489	520	725	1
490	520	726	0
491	521	141	1
492	521	728	0
493	522	141	1
494	523	731	1
495	523	141	1
496	523	732	0
497	523	733	0
498	524	141	1
499	525	211	1
500	526	141	1
501	526	737	0
502	527	141	1
503	528	141	1
504	529	141	1
505	530	141	1
506	531	731	1
507	531	743	0
508	531	744	0
509	531	745	0
510	532	148	1
511	532	747	0
512	532	748	0
513	533	731	1
514	533	148	1
515	533	233	1
516	533	750	0
517	547	141	1
518	548	766	1
519	549	141	1
520	550	201	1
521	554	201	1
522	554	773	0
523	555	141	1
524	556	141	1
525	557	141	1
526	558	141	1
527	559	141	1
528	560	141	1
529	561	141	1
530	562	141	1
531	563	201	1
532	564	201	1
533	565	211	1
534	567	237	1
535	567	141	1
536	568	788	1
537	568	789	0
538	569	211	1
539	570	141	1
540	571	141	1
541	572	549	1
542	573	211	1
543	575	797	1
544	576	364	1
545	577	141	1
546	578	141	1
547	579	797	1
548	580	549	1
549	581	141	1
550	582	342	1
551	583	141	1
552	584	549	1
553	585	141	1
554	586	364	1
555	587	141	1
556	588	141	1
557	589	141	1
558	590	141	1
559	591	141	1
560	592	549	1
561	593	211	1
562	594	141	1
563	595	141	1
564	597	141	1
565	598	141	1
566	599	549	1
567	600	141	1
568	601	549	1
569	602	549	1
570	603	549	1
571	604	549	1
572	605	549	1
573	607	549	1
574	608	549	1
575	609	549	1
576	610	549	1
577	611	549	1
578	612	549	1
579	613	141	1
580	614	186	1
581	614	837	0
582	615	141	1
583	616	141	1
584	618	549	1
585	619	549	1
586	620	549	1
587	621	141	1
588	622	549	1
589	623	549	1
590	624	549	1
591	625	549	1
592	626	797	1
593	627	549	1
594	628	549	1
595	629	549	1
596	630	141	1
597	631	549	1
598	632	549	1
599	633	549	1
600	634	549	1
601	635	549	1
602	636	549	1
603	637	549	1
604	638	549	1
605	639	549	1
606	640	549	1
607	641	549	1
608	642	549	1
609	643	549	1
610	644	549	1
611	645	549	1
612	646	549	1
613	647	549	1
614	648	549	1
615	649	549	1
616	650	549	1
617	651	549	1
618	652	549	1
619	653	549	1
620	654	549	1
621	655	549	1
622	656	549	1
623	658	882	1
624	658	883	0
625	659	885	1
626	661	797	1
627	662	211	1
628	663	797	1
629	664	141	1
630	665	148	1
631	666	893	1
632	666	894	0
633	667	148	1
634	667	896	0
635	669	148	1
636	670	549	1
637	671	148	1
638	672	549	1
639	673	549	1
640	674	549	1
641	675	549	1
642	678	549	1
643	679	549	1
644	680	549	1
645	681	797	1
646	683	141	1
647	683	913	0
648	683	914	0
649	684	549	1
650	686	549	1
651	688	549	1
652	690	549	1
653	691	141	1
654	691	923	0
655	693	201	1
656	694	141	1
657	695	569	1
658	695	928	0
659	696	141	1
660	697	931	1
661	698	933	1
662	698	934	0
663	700	141	1
664	701	938	1
665	701	939	0
666	702	141	1
667	703	141	1
668	704	943	1
669	705	612	1
670	705	945	0
671	706	947	1
672	707	949	1
673	708	949	1
674	709	141	1
675	710	141	1
676	711	954	1
677	716	954	1
678	716	960	0
679	717	962	1
680	717	963	0
681	718	931	1
682	719	364	1
683	719	966	0
684	720	931	1
685	721	931	1
686	723	971	1
687	724	141	1
688	725	141	1
689	726	975	1
690	726	976	0
691	727	141	1
692	728	141	1
693	729	141	1
694	730	141	1
695	733	141	1
696	733	984	0
697	734	141	1
698	736	141	1
699	738	201	1
700	738	990	0
701	739	141	1
702	739	992	0
703	741	373	1
704	741	995	0
705	744	141	1
706	745	141	1
707	746	141	1
708	747	342	1
709	747	1002	0
710	748	342	1
711	748	1004	0
712	749	141	1
713	751	211	1
714	752	1009	1
715	753	141	1
716	754	141	1
717	757	531	1
718	757	1015	0
719	758	141	1
720	758	1017	0
721	759	141	1
722	760	513	1
723	760	1020	0
724	761	141	1
725	762	141	1
726	763	1024	1
727	763	1025	0
728	764	141	1
729	765	141	1
730	766	1029	1
731	766	1030	0
732	767	141	1
733	767	1032	0
734	768	211	1
735	769	141	1
736	769	1035	0
737	771	141	1
738	772	141	1
739	772	1039	0
740	776	141	1
741	779	211	1
742	780	141	1
743	781	141	1
744	781	1049	0
745	781	1050	0
746	782	141	1
747	784	201	1
748	785	201	1
749	786	201	1
750	787	201	1
751	787	1057	0
752	788	141	1
753	789	141	1
754	790	141	1
755	791	141	1
756	792	141	1
757	793	141	1
758	794	141	1
759	795	141	1
760	797	1068	1
761	798	201	1
762	800	201	1
763	801	141	1
764	802	154	1
765	803	141	1
766	804	211	1
767	805	731	1
768	805	1077	0
769	806	211	1
770	807	211	1
771	808	233	1
772	809	141	1
773	810	201	1
774	810	1083	0
775	811	211	1
776	812	211	1
777	813	141	1
778	814	141	1
779	815	141	1
780	816	141	1
781	817	141	1
782	818	1092	1
783	818	1093	0
784	819	141	1
785	819	1095	0
786	819	280	0
787	820	141	1
788	821	141	1
789	822	1099	1
790	823	1099	1
791	824	211	1
792	825	211	1
793	826	211	1
794	827	141	1
795	827	1105	0
796	828	141	1
797	829	141	1
798	830	141	1
799	831	462	1
800	831	1110	0
801	832	462	1
802	833	1113	1
803	834	141	1
804	835	211	1
805	836	211	1
806	837	201	1
807	837	1118	0
808	838	148	1
809	838	1120	0
810	839	148	1
811	839	1122	0
812	840	141	1
813	840	148	0
814	841	1125	1
815	842	141	1
816	842	1127	0
817	843	141	1
818	844	141	1
819	845	141	1
820	846	141	1
821	846	1132	0
822	847	141	1
823	848	306	1
824	855	1142	1
825	855	1143	0
826	855	1144	0
827	856	1142	1
828	856	1146	0
829	864	201	1
830	867	141	1
831	868	361	1
832	869	1160	0
833	870	201	1
834	870	1162	0
835	880	141	1
836	882	201	1
837	883	1176	1
838	883	1177	1
839	883	1178	1
840	884	1176	1
841	884	1177	1
842	885	1181	1
843	886	1183	1
844	886	141	1
845	886	1184	0
846	887	141	1
847	888	141	1
848	889	141	1
849	890	141	1
850	891	141	1
851	892	141	1
852	893	211	1
853	895	141	1
854	896	141	1
855	897	141	1
856	898	141	1
857	903	141	1
858	904	141	1
859	908	211	1
860	909	211	1
861	910	1209	1
862	911	1209	1
863	912	1209	1
864	913	1209	1
865	914	1214	1
866	915	1214	1
867	916	1214	1
868	917	1214	1
869	918	211	1
870	919	211	1
871	921	211	1
872	922	211	1
873	923	211	1
874	924	211	1
875	925	211	1
876	926	211	1
877	927	211	1
878	928	141	1
879	929	1230	1
880	930	211	1
881	931	141	1
882	931	1233	0
883	931	1234	0
884	932	211	1
885	933	211	1
886	934	211	1
887	935	211	1
888	936	211	1
889	937	211	1
890	938	211	1
891	939	211	1
892	940	211	1
893	941	211	1
894	942	141	1
895	943	141	1
896	944	141	1
897	945	141	1
898	946	141	1
899	947	141	1
900	948	233	1
901	949	141	1
902	950	141	1
903	951	1255	1
904	951	141	1
905	951	1256	0
906	951	1257	0
907	952	141	1
908	953	141	1
909	955	141	1
910	956	141	1
911	957	141	1
912	958	141	1
913	959	233	1
914	963	233	1
915	964	612	1
916	965	141	1
917	965	1272	0
918	966	141	1
919	966	1274	0
920	967	141	1
921	967	1276	0
922	969	141	1
923	970	141	1
924	971	141	1
925	972	141	1
926	972	1282	0
927	973	211	1
928	974	211	1
929	975	141	1
930	976	141	1
931	977	141	1
932	977	1288	0
933	978	141	1
934	979	141	1
935	980	141	1
936	981	141	1
937	982	141	1
938	983	211	1
939	984	211	1
940	985	141	1
941	986	141	1
942	987	141	1
943	988	141	1
944	989	141	1
945	990	141	1
946	991	141	1
947	992	141	1
948	993	141	1
949	994	141	1
950	995	141	1
951	996	141	1
952	997	141	1
953	998	141	1
954	999	141	1
955	1000	211	1
956	1001	211	1
957	1002	211	1
958	1003	211	1
959	1004	211	1
960	1005	141	1
961	1005	1317	0
962	1006	141	1
963	1007	141	1
964	1008	211	1
965	1009	211	1
966	1010	141	1
967	1011	141	1
968	1012	141	1
969	1013	141	1
970	1014	211	1
971	1014	1327	0
972	1016	141	1
973	1017	141	1
974	1018	141	1
975	1019	141	1
976	1020	141	1
977	1021	141	1
978	1023	141	1
979	1024	1338	1
980	1024	1339	0
981	1025	211	1
982	1026	211	1
983	1027	211	1
984	1029	141	1
985	1030	141	1
986	1031	141	1
987	1032	141	1
988	1033	141	1
989	1034	141	1
990	1035	141	1
991	1036	141	1
992	1037	141	1
993	1038	141	1
994	1039	141	1
995	1040	141	1
996	1041	211	1
997	1042	201	1
998	1043	1359	1
999	1045	141	1
1000	1046	1363	1
1001	1047	211	1
1002	1053	211	1
1003	1054	327	1
1004	1055	327	1
1005	1056	327	1
1006	1057	327	1
1007	1058	327	1
1008	1059	327	1
1009	1060	201	1
1010	1061	327	1
1011	1062	327	1
1012	1064	327	1
1013	1065	327	1
1014	1066	201	1
1015	1067	201	1
1016	1068	201	1
1017	1069	201	1
1018	1070	201	1
1019	1071	201	1
1020	1072	201	1
1021	1073	201	1
1022	1074	201	1
1023	1075	201	1
1024	1076	201	1
1025	1077	201	1
1026	1078	201	1
1027	1079	201	1
1028	1081	1399	0
1029	1085	327	1
1030	1085	1404	0
1031	1087	141	1
1032	1089	1359	1
1033	1090	201	1
1034	1091	1142	1
1035	1091	1411	0
1036	1091	1412	0
1037	1098	233	1
1038	1099	233	1
1039	1100	1422	1
1040	1101	1422	1
1041	1109	1432	1
1042	1110	141	1
1043	1111	141	1
1044	1111	1435	0
1045	1112	141	1
1046	1113	612	1
1047	1114	141	1
1048	1117	1442	1
1049	1117	1443	0
1050	1118	1442	1
1051	1118	1445	0
1052	1119	141	1
1053	1119	1447	0
1054	1121	1450	1
1055	1122	141	1
1056	1122	1452	0
1057	1123	233	1
1058	1124	1455	1
1059	1126	1458	1
1060	1126	1459	0
1061	1127	233	1
1062	1128	141	1
1063	1128	1462	0
1064	1128	1463	0
1065	1129	1465	1
1066	1129	233	1
1067	1130	141	1
1068	1130	1467	0
1069	1132	1470	0
1070	1133	233	1
1071	1134	1092	1
1072	1134	1473	0
1073	1135	1092	1
1074	1135	1475	0
1075	1136	1092	1
1076	1137	1092	1
1077	1137	1478	0
1078	1138	1092	1
1079	1138	1480	0
1080	1139	1092	1
1081	1141	141	1
1082	1142	141	1
1083	1143	1486	0
1084	1145	1489	1
1085	1145	201	1
1086	1146	141	1
1087	1146	1491	0
1088	1147	141	1
1089	1148	1494	1
1090	1148	1495	0
1091	1149	141	1
1092	1150	141	1
1093	1151	141	1
1094	1152	141	1
1095	1153	141	1
1096	1153	1501	0
1097	1154	1183	1
1098	1155	211	1
1099	1155	1504	0
1100	1156	1506	1
1101	1157	1183	1
1102	1158	1183	1
1103	1159	141	1
1104	1160	1511	1
1105	1161	141	1
1106	1165	141	1
1107	1166	373	1
1108	1167	141	1
1109	1169	373	1
1110	1170	141	1
1111	1170	1522	0
1112	1170	1523	0
1113	1171	141	1
1114	1172	731	1
1115	1172	1526	0
1116	1173	731	1
1117	1173	1528	0
1118	1173	1529	0
1119	1174	731	1
1120	1174	1531	0
1121	1175	731	1
1122	1175	1533	1
1123	1175	1534	0
1124	1175	1535	0
1125	1176	731	1
1126	1176	1533	1
1127	1176	1537	0
1128	1177	731	1
1129	1177	1533	1
1130	1177	1539	0
1131	1178	731	1
1132	1178	1541	0
1133	1179	731	1
1134	1179	233	1
1135	1179	1543	0
1136	1180	731	1
1137	1180	1545	0
1138	1181	731	1
1139	1181	233	1
1140	1181	1547	0
1141	1182	731	1
1142	1182	233	1
1143	1182	1549	0
1144	1183	731	1
1145	1183	233	1
1146	1183	1551	0
1147	1184	731	1
1148	1184	1553	0
1149	1185	731	1
1150	1185	233	1
1151	1185	1555	0
1152	1186	731	1
1153	1186	1557	1
1154	1186	1558	0
1155	1187	731	1
1156	1187	1560	0
1157	1187	1561	0
1158	1188	731	1
1159	1188	1563	0
1160	1188	1564	0
1161	1189	731	1
1162	1189	1533	1
1163	1189	1566	0
1164	1189	1567	0
1165	1190	731	1
1166	1190	1569	0
1167	1191	731	1
1168	1191	1571	0
1169	1192	731	1
1170	1192	1533	1
1171	1192	1573	0
1172	1193	731	1
1173	1193	1533	1
1174	1193	1575	0
1175	1194	731	1
1176	1194	1533	1
1177	1194	1577	0
1178	1195	731	1
1179	1195	1533	1
1180	1195	1579	0
1181	1196	731	1
1182	1196	1533	1
1183	1196	1581	0
1184	1197	731	1
1185	1197	1533	1
1186	1197	1583	0
1187	1198	731	1
1188	1198	1533	1
1189	1198	1585	0
1190	1198	1586	0
1191	1199	731	1
1192	1199	1588	0
1193	1200	731	1
1194	1200	1590	0
1195	1201	731	1
1196	1201	233	1
1197	1201	1533	1
1198	1201	1592	0
1199	1202	731	1
1200	1202	1594	1
1201	1202	1595	0
1202	1202	1596	0
1203	1203	731	1
1204	1203	1598	0
1205	1204	731	1
1206	1204	233	1
1207	1204	1600	0
1208	1205	731	1
1209	1205	233	1
1210	1205	1602	0
1211	1206	731	1
1212	1206	233	1
1213	1206	1604	0
1214	1207	731	1
1215	1207	233	1
1216	1207	1606	0
1217	1208	731	1
1218	1208	233	1
1219	1208	1608	0
1220	1209	731	1
1221	1209	233	1
1222	1209	1610	0
1223	1210	731	1
1224	1210	1612	0
1225	1211	731	1
1226	1211	233	1
1227	1211	1614	0
1228	1212	731	1
1229	1212	233	1
1230	1212	1616	0
1231	1213	731	1
1232	1213	1533	1
1233	1213	1618	0
1234	1214	731	1
1235	1214	1620	0
1236	1215	731	1
1237	1215	1338	1
1238	1215	1622	0
1239	1216	731	1
1240	1216	1338	1
1241	1216	1624	0
1242	1216	1625	0
1243	1217	731	1
1244	1217	1627	1
1245	1217	1628	0
1246	1218	731	1
1247	1218	1338	1
1248	1218	1630	0
1249	1219	731	1
1250	1219	1338	1
1251	1219	1632	0
1252	1220	731	1
1253	1220	1533	1
1254	1220	1634	0
1255	1220	1635	0
1256	1221	731	1
1257	1221	1533	1
1258	1221	1637	0
1259	1222	731	1
1260	1222	1533	1
1261	1222	1639	0
1262	1223	731	1
1263	1223	1641	0
1264	1224	731	1
1265	1224	1643	0
1266	1225	731	1
1267	1225	1645	0
1268	1226	731	1
1269	1226	1647	0
1270	1226	1648	0
1271	1227	731	1
1272	1227	1650	0
1273	1227	1651	0
1274	1228	731	1
1275	1228	1653	0
1276	1228	1654	0
1277	1229	731	1
1278	1229	1338	1
1279	1229	1656	0
1280	1230	731	1
1281	1230	1338	1
1282	1230	1658	0
1283	1231	731	1
1284	1231	1338	1
1285	1231	1660	0
1286	1232	731	1
1287	1232	1338	1
1288	1232	1662	0
1289	1233	731	1
1290	1233	1338	1
1291	1233	1664	0
1292	1234	731	1
1293	1234	1338	1
1294	1234	1666	0
1295	1235	731	1
1296	1235	1338	1
1297	1235	1668	0
1298	1236	731	1
1299	1236	1338	1
1300	1236	1670	0
1301	1237	731	1
1302	1237	1672	1
1303	1237	1673	0
1304	1238	731	1
1305	1238	1338	1
1306	1238	1675	0
1307	1239	731	1
1308	1239	1338	1
1309	1239	1677	0
1310	1240	731	1
1311	1240	1338	1
1312	1240	1679	0
1313	1241	731	1
1314	1241	1338	1
1315	1241	1681	0
1316	1242	731	1
1317	1242	1338	1
1318	1242	1683	0
1319	1243	731	1
1320	1243	1338	1
1321	1243	1685	0
1322	1244	731	1
1323	1244	1338	1
1324	1244	1687	0
1325	1245	731	1
1326	1245	1338	1
1327	1245	1689	0
1328	1246	731	1
1329	1246	1338	1
1330	1246	1691	0
1331	1247	731	1
1332	1247	1338	1
1333	1247	1693	0
1334	1248	731	1
1335	1248	1338	1
1336	1248	1695	0
1337	1249	731	1
1338	1249	1338	1
1339	1249	1697	0
1340	1250	731	1
1341	1250	1338	1
1342	1250	1699	0
1343	1251	731	1
1344	1251	1338	1
1345	1251	1701	0
1346	1252	731	1
1347	1252	1338	1
1348	1252	1703	0
1349	1253	731	1
1350	1253	1338	1
1351	1253	1705	0
1352	1254	731	1
1353	1254	1338	1
1354	1254	1707	0
1355	1255	731	1
1356	1255	141	1
1357	1255	1709	0
1358	1256	731	1
1359	1256	1533	1
1360	1256	1711	0
1361	1257	731	1
1362	1257	1533	1
1363	1257	1713	0
1364	1258	731	1
1365	1258	1533	1
1366	1258	1715	0
1367	1258	1716	0
1368	1259	233	1
1369	1260	1719	1
1370	1260	233	1
1371	1263	1719	1
1372	1263	233	1
1373	1264	1719	1
1374	1264	233	1
1375	1265	1725	1
1376	1266	1727	1
1377	1267	1729	1
1378	1268	1729	1
1379	1269	1729	1
1380	1270	1729	1
1381	1271	1734	1
1382	1271	164	1
1383	1272	1736	1
1384	1273	1736	1
1385	1274	1736	1
1386	1275	1736	1
1387	1276	1736	1
1388	1277	1736	1
1389	1278	141	1
1390	1279	1744	1
1391	1280	612	1
1392	1281	612	1
1393	1282	1748	1
1394	1283	612	1
1395	1283	1750	0
1396	1284	1748	1
1397	1285	1753	1
1398	1286	1748	1
1399	1287	612	1
1400	1288	1757	1
1401	1288	1758	0
1402	1289	1760	1
1403	1289	1761	0
1404	1290	1763	1
1405	1291	1765	1
1406	1291	1766	1
1407	1291	1767	0
1408	1292	612	1
1409	1292	1769	0
1410	1293	612	1
1411	1294	612	1
1412	1295	612	1
1413	1296	1774	1
1414	1296	1775	1
1415	1297	1777	1
1416	1298	612	1
1417	1298	1779	0
1418	1299	1781	1
1419	1300	612	1
1420	1300	1783	0
1421	1301	1785	1
1422	1302	612	1
1423	1302	1787	0
1424	1303	1789	1
1425	1304	612	1
1426	1305	1792	1
1427	1306	612	1
1428	1307	141	1
1429	1308	141	1
1430	1309	141	1
1431	1310	141	1
1432	1311	141	1
1433	1312	1800	1
1434	1313	1800	1
1435	1314	1800	1
1436	1315	1800	1
1437	1316	1800	1
1438	1317	1806	1
1439	1318	1806	1
1440	1319	141	1
1441	1319	1809	0
1442	1320	141	1
1443	1321	141	1
1444	1322	1813	1
1445	1322	1814	0
1446	1323	141	1
1447	1324	141	1
1448	1325	141	1
1449	1327	1820	1
1450	1329	612	1
1451	1330	612	1
1452	1331	612	1
1453	1332	612	1
1454	1333	211	1
1455	1334	211	1
1456	1335	211	1
1457	1336	211	1
1458	1337	612	1
1459	1337	1831	0
1460	1337	1832	0
1461	1338	612	1
1462	1338	1834	0
1463	1338	1835	0
1464	1339	1837	1
1465	1339	612	1
1466	1339	1838	0
1467	1340	612	1
1468	1341	612	1
1469	1342	612	1
1470	1343	612	1
1471	1343	1843	0
1472	1344	1748	1
1473	1344	1845	0
1474	1345	141	1
1475	1345	1847	0
1476	1346	612	1
1477	1346	1849	0
1478	1349	1853	1
1479	1351	141	1
1480	1352	141	1
1481	1353	141	1
1482	1354	141	1
1483	1355	141	1
1484	1356	141	1
1485	1356	1861	0
1486	1357	141	1
1487	1358	141	1
1488	1359	141	1
1489	1360	141	1
1490	1361	141	1
1491	1362	141	1
1492	1362	1868	0
1493	1363	141	1
1494	1363	1870	0
1495	1364	141	1
1496	1364	1872	0
1497	1365	141	1
1498	1366	1875	1
1499	1366	1876	1
1500	1367	211	1
1501	1368	141	1
1502	1369	141	1
1503	1370	141	1
1504	1381	141	1
1505	1382	141	1
1506	1383	141	1
1507	1386	1837	1
1508	1386	1897	0
1509	1387	1837	1
1510	1387	1899	0
1511	1388	1837	1
1512	1388	1901	0
1513	1389	1837	1
1514	1389	1903	0
1515	1390	1837	1
1516	1390	1905	0
1517	1391	1837	1
1518	1391	1907	0
1519	1392	1837	1
1520	1392	1909	0
1521	1393	1837	1
1522	1393	1911	0
1523	1394	1837	1
1524	1394	1913	0
1525	1395	1837	1
1526	1395	1915	0
1527	1396	1837	1
1528	1396	1917	0
1529	1397	1837	1
1530	1397	1919	0
1531	1397	1920	0
1532	1398	1837	1
1533	1398	1922	0
1534	1399	1837	1
1535	1399	1924	0
1536	1400	1837	1
1537	1400	1926	0
1538	1401	1837	1
1539	1401	1928	0
1540	1402	1837	1
1541	1402	1930	0
1542	1403	1837	1
1543	1403	1932	0
1544	1404	1837	1
1545	1404	1934	0
1546	1405	1837	1
1547	1405	1936	0
1548	1406	1837	1
1549	1406	1938	0
1550	1407	1837	1
1551	1407	1940	0
1552	1408	1837	1
1553	1408	1942	0
1554	1409	1837	1
1555	1409	1944	0
1556	1410	1837	1
1557	1410	1946	0
1558	1411	1837	1
1559	1411	1948	0
1560	1412	1837	1
1561	1412	1950	0
1562	1413	1837	1
1563	1413	1952	0
1564	1414	1837	1
1565	1414	1954	0
1566	1415	1837	1
1567	1415	1956	0
1568	1416	1837	1
1569	1416	1958	0
1570	1417	1837	1
1571	1417	1960	0
1572	1418	1837	1
1573	1418	1962	0
1574	1419	1837	1
1575	1419	1964	0
1576	1420	1837	1
1577	1420	1966	0
1578	1421	1837	1
1579	1421	1968	0
1580	1422	1837	1
1581	1422	1970	0
1582	1423	1837	1
1583	1423	1972	0
1584	1424	1837	1
1585	1425	1837	1
1586	1425	1975	0
1587	1425	1976	0
1588	1426	1837	1
1589	1426	1978	0
1590	1427	1837	1
1591	1427	1980	0
1592	1428	1837	1
1593	1428	1982	0
1594	1429	1837	1
1595	1429	1984	0
1596	1430	1837	1
1597	1430	1986	0
1598	1431	1837	1
1599	1431	1988	0
1600	1432	1837	1
1601	1432	1990	0
1602	1433	1837	1
1603	1433	1992	0
1604	1434	1837	1
1605	1434	1994	0
1606	1435	1837	1
1607	1435	1996	0
1608	1436	1837	1
1609	1436	1998	0
1610	1437	1837	1
1611	1437	2000	0
1612	1438	1837	1
1613	1438	2002	0
1614	1439	1837	1
1615	1439	2004	0
1616	1440	1837	1
1617	1440	2006	0
1618	1441	1837	1
1619	1441	2008	0
1620	1442	1837	1
1621	1442	2010	0
1622	1443	1837	1
1623	1443	2012	0
1624	1444	1837	1
1625	1444	2014	0
1626	1445	1837	1
1627	1445	2016	0
1628	1446	1837	1
1629	1446	2018	0
1630	1447	1837	1
1631	1447	2020	0
1632	1448	1837	1
1633	1448	2022	0
1634	1449	1837	1
1635	1449	2024	0
1636	1450	1837	1
1637	1450	2026	0
1638	1451	1837	1
1639	1451	2028	0
1640	1452	1837	1
1641	1452	2030	0
1642	1452	2031	0
1643	1453	1837	1
1644	1453	2033	0
1645	1454	1837	1
1646	1454	2035	0
1647	1455	1837	1
1648	1455	2037	0
1649	1456	1837	1
1650	1456	2039	0
1651	1457	1837	1
1652	1457	2041	0
1653	1458	1837	1
1654	1458	2043	0
1655	1459	1837	1
1656	1459	2045	0
1657	1460	1837	1
1658	1460	2047	0
1659	1461	1837	1
1660	1461	2049	0
1661	1462	1837	1
1662	1462	2047	0
1663	1463	1837	1
1664	1463	2052	0
1665	1464	1837	1
1666	1464	2054	0
1667	1465	1837	1
1668	1465	2056	0
1669	1466	1837	1
1670	1466	2058	0
1671	1467	1837	1
1672	1467	2060	0
1673	1468	1837	1
1674	1468	2062	0
1675	1469	1837	1
1676	1469	2064	0
1677	1470	1837	1
1678	1470	2066	0
1679	1471	1837	1
1680	1471	2068	0
1681	1472	1837	1
1682	1472	2070	0
1683	1473	1837	1
1684	1473	2072	0
1685	1474	1837	1
1686	1474	2074	0
1687	1475	1837	1
1688	1475	2076	0
1689	1476	1837	1
1690	1476	2078	0
1691	1477	1837	1
1692	1477	2080	0
1693	1478	1837	1
1694	1478	2082	0
1695	1479	1837	1
1696	1479	2084	0
1697	1480	1837	1
1698	1480	2086	0
1699	1481	1837	1
1700	1481	2088	0
1701	1482	1837	1
1702	1482	2090	0
1703	1483	1837	1
1704	1483	2092	0
1705	1484	1837	1
1706	1484	2094	0
1707	1485	1837	1
1708	1485	2096	0
1709	1486	1837	1
1710	1486	2098	0
1711	1487	1837	1
1712	1487	2100	0
1713	1488	1837	1
1714	1488	2102	0
1715	1489	1837	1
1716	1489	2104	0
1717	1490	1837	1
1718	1490	2106	0
1719	1491	141	1
1720	1493	141	1
1721	1494	141	1
1722	1494	2111	0
1723	1495	141	1
1724	1495	2113	0
1725	1496	141	1
1726	1496	2115	0
1727	1497	141	1
1728	1497	2117	0
1729	1498	141	1
1730	1498	2119	0
1731	1499	2121	0
1732	1500	141	1
1733	1500	2123	0
1734	1501	141	1
1735	1501	2125	0
1736	1502	141	1
1737	1502	2127	0
1738	1503	141	1
1739	1503	2129	0
1740	1504	141	1
1741	1504	2131	0
1742	1505	141	1
1743	1505	2133	0
1744	1506	141	1
1745	1506	2135	0
1746	1507	141	1
1747	1507	2137	0
1748	1508	141	1
1749	1508	2139	0
1750	1509	141	1
1751	1509	2141	0
1752	1510	141	1
1753	1510	2143	0
1754	1511	141	1
1755	1511	2145	0
1756	1512	141	1
1757	1512	2147	0
1758	1513	141	1
1759	1513	2149	0
1760	1514	141	1
1761	1514	2151	0
1762	1515	141	1
1763	1516	2154	1
1764	1517	233	1
1765	1518	233	1
1766	1519	233	1
1767	1520	233	1
1768	1521	233	1
1769	1522	233	1
1770	1523	233	1
1771	1524	2163	1
1772	1525	2163	1
1773	1526	141	1
1774	1527	364	1
1775	1527	141	1
1776	1528	141	1
1777	1529	141	1
1778	1530	141	1
1779	1531	141	1
1780	1532	141	1
1781	1533	141	1
1782	1534	141	1
1783	1535	2175	1
1784	1536	141	1
1785	1537	141	1
1786	1538	141	1
1787	1540	2181	1
1788	1541	141	1
1789	1564	141	1
1790	1565	141	1
1791	1566	2175	1
1792	1566	2208	0
1793	1567	141	1
1794	1568	141	1
1795	1569	141	1
1796	1570	2213	1
1797	1570	141	1
1798	1571	1099	1
1799	1572	1099	1
1800	1573	1099	1
1801	1574	1099	1
1802	1575	1099	1
1803	1576	1099	1
1804	1577	1099	1
1805	1578	1099	1
1806	1579	1099	1
1807	1580	141	1
1808	1581	141	1
1809	1582	2226	1
1810	1582	141	1
1811	1583	211	1
1812	1584	2229	1
1813	1585	2229	1
1814	1586	2229	1
1815	1587	2233	1
1816	1588	2233	1
1817	1590	1820	1
1818	1591	2238	1
1819	1592	2240	1
1820	1593	2242	1
1821	1594	2242	1
1822	1595	2242	1
1823	1596	2242	1
1824	1597	2242	1
1825	1598	2242	1
1826	1599	141	1
1827	1600	2250	1
1828	1601	2250	1
1829	1602	2250	1
1830	1603	2254	1
1831	1604	2256	1
1832	1605	141	1
1833	1606	2242	1
1834	1607	2260	1
1835	1608	2262	1
1836	1609	141	1
1837	1610	2265	1
1838	1611	141	1
1839	1612	141	1
1840	1613	141	1
1841	1614	141	1
1842	1619	141	1
1843	1621	141	1
1844	1622	141	1
1845	1623	141	1
1846	1632	141	1
1847	1633	141	1
1848	1634	141	1
1849	1635	141	1
1850	1635	2291	0
1851	1636	141	1
1852	1637	141	1
1853	1638	141	1
1854	1638	2295	0
1855	1639	141	1
1856	1639	2297	0
1857	1640	141	1
1858	1641	141	1
1859	1641	2300	0
1860	1642	141	1
1861	1643	141	1
1862	1644	141	1
1863	1645	141	1
1864	1646	141	1
1865	1647	141	1
1866	1648	141	1
1867	1649	141	1
1868	1650	141	1
1869	1651	141	1
1870	1652	141	1
1871	1653	141	1
1872	1654	141	1
1873	1655	141	1
1874	1656	141	1
1875	1657	141	1
1876	1658	141	1
1877	1659	141	1
1878	1660	141	1
1879	1661	141	1
1880	1662	141	1
1881	1663	141	1
1882	1664	141	1
1883	1665	141	1
1884	1666	141	1
1885	1667	141	1
1886	1668	141	1
1887	1669	141	1
1888	1670	141	1
1889	1671	141	1
1890	1672	141	1
1891	1673	141	1
1892	1674	141	1
1893	1675	141	1
1894	1675	2335	0
1895	1676	2335	1
1896	1677	141	1
1897	1678	141	1
1898	1679	141	1
1899	1680	2335	1
1900	1681	141	1
1901	1682	141	1
1902	1683	141	1
1903	1683	2335	0
1904	1684	2345	1
1905	1685	141	1
1906	1687	141	1
1907	1687	2349	0
1908	1687	2335	0
1909	1688	141	1
1910	1688	2335	0
1911	1688	2351	0
1912	1689	2353	1
1913	1689	2354	1
1914	1689	141	1
1915	1689	2355	0
1916	1689	2356	0
1917	1689	2335	0
1918	1689	2357	0
1919	1689	2358	0
1920	1690	141	1
1921	1690	2335	0
1922	1691	141	1
1923	1691	2335	0
1924	1692	141	1
1925	1692	2362	0
1926	1693	141	1
1927	1693	2364	0
1928	1694	141	1
1929	1694	2366	0
1930	1694	2367	0
1931	1695	141	1
1932	1696	2370	1
1933	1698	2370	1
1934	1700	141	1
1935	1701	141	1
1936	1702	141	1
1937	1702	2335	0
1938	1703	141	1
1939	1704	141	1
1940	1705	141	1
1941	1707	141	1
1942	1708	141	1
1943	1708	2335	0
1944	1709	141	1
1945	1709	2335	0
1946	1710	141	1
1947	1710	2335	0
1948	1711	141	1
1949	1712	141	1
1950	1713	141	1
1951	1713	2335	0
1952	1714	141	1
1953	1715	141	1
1954	1716	141	1
1955	1717	141	1
1956	1718	141	1
1957	1719	141	1
1958	1720	141	1
1959	1721	141	1
1960	1721	2335	0
1961	1722	141	1
1962	1723	141	1
1963	1724	141	1
1964	1725	141	1
1965	1726	141	1
1966	1727	141	1
1967	1728	141	1
1968	1729	141	1
1969	1730	141	1
1970	1731	141	1
1971	1732	2345	1
1972	1733	2345	1
1973	1734	141	1
1974	1735	141	1
1975	1736	141	1
1976	1737	141	1
1977	1738	141	1
1978	1739	141	1
1979	1740	141	1
1980	1741	141	1
1981	1742	141	1
1982	1743	141	1
1983	1744	141	1
1984	1745	2420	1
1985	1746	141	1
1986	1746	2422	0
1987	1747	2424	1
1988	1747	2425	1
1989	1748	2427	1
1990	1749	141	1
1991	1750	141	1
1992	1750	2430	0
1993	1751	141	1
1994	1752	141	1
1995	1753	141	1
1996	1754	2435	1
1997	1754	2436	1
1998	1755	141	1
1999	1756	233	1
2000	1757	233	1
2001	1758	141	1
2002	1759	2442	1
2003	1762	164	1
2004	1763	141	1
2005	1764	164	1
2006	1765	164	1
2007	1766	164	1
2008	1766	141	1
2009	1767	164	1
2010	1767	141	1
2011	1768	164	1
2012	1768	141	1
2013	1770	164	1
2014	1774	2458	1
2015	1775	2458	1
2016	1776	141	1
2017	1777	141	1
2018	1778	2463	1
2019	1779	2463	1
2020	1780	141	1
2021	1781	141	1
2022	1782	141	1
2023	1783	141	1
2024	1784	2470	1
2025	1785	141	1
2026	1786	141	1
2027	1787	141	1
2028	1788	141	1
2029	1789	141	1
2030	1790	141	1
2031	1794	141	1
2032	1795	141	1
2033	1796	141	1
2034	1797	141	1
2035	1798	141	1
2036	1799	2486	1
2037	1800	2488	1
2038	1801	2490	1
2039	1802	141	1
2040	1803	141	1
2041	1804	2494	1
2042	1805	2494	1
2043	1806	2494	1
2044	1807	2494	1
2045	1808	2494	1
2046	1809	2494	1
2047	1810	2494	1
2048	1811	2494	1
2049	1812	2494	1
2050	1813	2494	1
2051	1814	2494	1
2052	1815	2494	1
2053	1816	2507	1
2054	1817	141	1
2055	1818	141	1
2056	1819	141	1
2057	1820	141	1
2058	1821	2513	1
2059	1821	141	1
2060	1822	141	1
2061	1823	141	1
2062	1824	141	1
2063	1825	141	1
2064	1826	141	1
2065	1827	141	1
2066	1828	141	1
2067	1829	141	1
2068	1830	141	1
2069	1831	141	1
2070	1832	2525	1
2071	1833	141	1
2072	1834	141	1
2073	1835	141	1
2074	1836	141	1
2075	1837	141	1
2076	1838	141	1
2077	1839	141	1
2078	1840	211	1
2079	1841	2535	1
2080	1842	2537	1
2081	1843	141	1
2082	1844	141	1
2083	1845	2541	1
2084	1845	2542	0
2085	1846	1820	1
2086	1847	1820	1
2087	1848	233	1
2088	1849	1099	1
2089	1850	1099	1
2090	1851	1099	1
2091	1852	1099	1
2092	1853	1099	1
2093	1854	1099	1
2094	1855	1099	1
2095	1856	1099	1
2096	1857	1099	1
2097	1858	1099	1
2098	1859	594	1
2099	1860	594	1
2100	1860	141	1
2101	1861	141	1
2102	1862	2560	1
2103	1862	141	1
2104	1863	2560	1
2105	1863	141	1
2106	1864	2560	1
2107	1864	141	1
2108	1865	141	1
2109	1870	2560	1
2110	1870	141	1
2111	1883	2353	1
2112	1884	2583	1
2113	1884	141	1
2114	1886	141	1
2115	1887	2354	1
2116	1888	2588	1
2117	1888	2589	1
2118	1888	2590	1
2119	1889	141	1
2120	1889	2592	0
2121	1890	141	1
2122	1891	141	1
2123	1892	141	1
2124	1893	141	1
2125	1894	2598	1
2126	1894	2599	1
2127	1895	2598	1
2128	1895	2599	1
2129	1896	2599	1
2130	1897	141	1
2131	1898	2599	1
2132	1899	2599	1
2133	1900	2606	1
2134	1901	2606	1
2135	1902	141	1
2136	1903	141	1
2137	1904	2611	1
2138	1904	2612	1
2139	1905	2614	1
2140	1905	2615	1
2141	1906	2617	1
2142	1906	2618	1
2143	1907	2620	1
2144	1907	2621	1
2145	1907	2622	1
2146	1908	2624	1
2147	1909	2626	1
2148	1910	2628	1
2149	1911	2624	1
2150	1912	2624	1
2151	1913	2624	1
2152	1917	141	1
2153	1918	2354	1
2154	1919	141	1
2155	1919	2638	0
2156	1919	2335	0
2157	1919	1462	0
2158	1919	2639	0
2159	1920	141	1
2160	1921	2354	1
2161	1921	2642	0
2162	1922	2354	1
2163	1922	2644	0
2164	1923	2354	1
2165	1924	2354	1
2166	1925	2354	1
2167	1926	2354	1
2168	1927	141	1
2169	1928	141	1
2170	1929	141	1
2171	1930	2653	1
2172	1930	2654	0
2173	1931	141	1
2174	1932	141	1
2175	1933	141	1
2176	1934	141	1
2177	1935	141	1
2178	1936	141	1
2179	1937	2662	1
2180	1938	2583	1
2181	1939	2665	1
2182	1940	2667	1
2183	1941	2669	1
2184	1942	2671	1
2185	1942	2672	1
2186	1942	2673	1
2187	1943	2675	1
2188	1943	2676	1
2189	1944	2678	1
2190	1944	2679	1
2191	1944	2680	1
2192	1945	2682	1
2193	1945	2683	1
2194	1946	2685	1
2195	1946	2686	1
2196	1947	2688	1
2197	1948	2690	1
2198	1948	2691	1
2199	1949	2690	1
2200	1950	2694	1
2201	1950	2695	1
2202	1951	2697	1
2203	1951	2698	1
2204	1952	2700	1
2205	1953	2702	1
2206	1954	2704	1
2207	1955	2706	1
2208	1956	2708	1
2209	1957	2710	1
2210	1958	2712	1
2211	1959	2714	1
2212	1960	2716	1
2213	1961	2718	1
2214	1961	2719	1
2215	1961	2720	1
2216	1962	141	1
2217	1963	141	1
2218	1964	2724	1
2219	1964	2725	1
2220	1965	2727	1
2221	1966	2653	1
2222	1967	2653	1
2223	1968	2653	1
2224	1969	2653	1
2225	1970	2733	1
2226	1970	364	1
2227	1971	2718	1
2228	1971	2735	1
2229	1972	2583	1
2230	1972	2737	1
2231	1973	2583	1
2232	1974	2583	1
2233	1975	2653	1
2234	1976	2653	1
2235	1977	2743	1
2236	1978	2353	1
2237	1978	141	1
2238	1979	141	1
2239	1980	141	1
2240	1981	141	1
2241	1982	141	1
2242	1983	141	1
2243	1984	141	1
2244	1985	141	1
2245	1986	141	1
2246	1987	141	1
2247	1988	141	1
2248	1989	141	1
2249	1990	141	1
2250	1991	141	1
2251	1992	141	1
2252	1993	141	1
2253	1994	141	1
2254	1995	141	1
2255	1996	141	1
2256	1997	141	1
2257	1998	2765	1
2258	1998	2599	1
2259	1999	2765	1
2260	1999	2599	1
2261	2000	2768	1
2262	2001	2770	1
2263	2001	2771	1
2264	2002	1820	1
2265	2003	2774	1
2266	2003	141	1
2267	2004	2776	1
2268	2005	2624	1
2269	2006	141	1
2270	2007	141	1
2271	2008	141	1
2272	2009	141	1
2273	2010	141	1
2274	2011	141	1
2275	2012	141	1
2276	2013	2786	1
2277	2014	2788	1
2278	2015	2790	1
2279	2015	2791	1
2280	2015	2792	1
2281	2016	2792	1
2282	2017	2795	1
2283	2017	2792	1
2284	2018	2797	1
2285	2018	2798	0
2286	2019	2797	1
2287	2019	2798	0
2288	2020	2797	1
2289	2021	2653	1
2290	2022	2653	1
2291	2023	2804	1
2292	2024	2806	1
2293	2025	2804	1
2294	2026	2804	1
2295	2027	2804	1
2296	2028	1820	1
2297	2029	141	1
2298	2029	2812	0
2299	2030	2814	1
2300	2031	1774	1
2301	2031	1775	1
2302	2032	510	1
2303	2033	612	1
2304	2037	148	1
2305	2037	2822	0
2306	2038	201	1
2307	2039	201	1
2308	2040	2826	1
2309	2040	2827	0
2310	2041	201	1
2311	2042	201	1
2312	2043	141	1
2313	2044	141	1
2314	2045	2833	1
2315	2046	731	1
2316	2047	731	1
2317	2048	731	1
2318	2049	731	1
2319	2049	1338	1
2320	2050	731	1
2321	2050	1338	1
2322	2051	731	1
2323	2051	1338	1
2324	2052	731	1
2325	2052	1338	1
2326	2053	731	1
2327	2053	1338	1
2328	2054	731	1
2329	2055	731	1
2330	2056	731	1
2331	2057	731	1
2332	2058	731	1
2333	2059	731	1
2334	2060	731	1
2335	2061	731	1
2336	2062	731	1
2337	2063	731	1
2338	2064	731	1
2339	2065	731	1
2340	2065	141	1
2341	2066	731	1
2342	2067	141	1
2343	2067	2856	0
2344	2068	2335	1
2345	2069	1092	1
2346	2069	2859	0
2347	2070	2335	1
2348	2071	141	1
2349	2072	141	1
2350	2073	2335	1
2351	2075	141	1
2352	2076	141	1
2353	2077	141	1
2354	2078	2335	1
2355	2078	2869	0
2356	2079	141	1
2357	2080	141	1
2358	2082	141	1
2359	2083	141	1
2360	2084	141	1
2361	2085	141	1
2362	2086	141	1
2363	2087	141	1
2364	2088	141	1
2365	2089	141	1
2366	2090	141	1
2367	2090	2882	0
2368	2091	141	1
2369	2091	2884	0
2370	2092	141	1
2371	2093	2335	1
2372	2093	2887	1
2373	2093	2888	0
2374	2093	2889	0
2375	2094	2335	1
2376	2094	2891	0
2377	2095	2335	1
2378	2095	2893	0
2379	2096	141	1
2380	2096	2895	0
2381	2097	141	1
2382	2098	141	1
2383	2099	141	1
2384	2100	141	1
2385	2101	141	1
2386	2102	2902	1
2387	2102	2903	0
2388	2103	237	1
2389	2103	2905	0
2390	2104	2907	1
2391	2105	237	1
2392	2106	237	1
2393	2107	237	1
2394	2108	2335	1
2395	2108	2912	0
2396	2108	2913	0
2397	2109	2335	1
2398	2110	2335	1
2399	2111	2335	1
2400	2112	2335	1
2401	2113	2335	1
2402	2114	2335	1
2403	2115	2335	1
2404	2116	2335	1
2405	2117	2335	1
2406	2118	2335	1
2407	2119	141	1
2408	2120	2335	1
2409	2121	141	1
2410	2121	2927	0
2411	2122	141	1
2412	2123	141	1
2413	2124	141	1
2414	2125	141	1
2415	2126	2335	1
2416	2127	2335	1
2417	2128	141	1
2418	2129	141	1
2419	2130	2335	1
2420	2131	2335	1
2421	2132	2335	1
2422	2133	141	1
2423	2136	141	1
2424	2137	2335	1
2425	2138	2335	1
2426	2139	2335	1
2427	2140	141	1
2428	2141	141	1
2429	2142	141	1
2430	2143	2335	1
2431	2143	2950	0
2432	2143	2951	0
2433	2144	2335	1
2434	2145	2335	1
2435	2146	2335	1
2436	2149	2335	1
2437	2150	2335	1
2438	2151	2335	1
2439	2152	2335	1
2440	2153	2335	1
2441	2154	2335	1
2442	2163	141	1
2443	2164	141	1
2444	2164	2973	0
2445	2164	2974	0
2446	2177	141	1
2447	2179	141	1
2448	2181	2992	1
2449	2182	141	1
2450	2183	237	1
2451	2183	141	1
2452	2184	141	1
2453	2185	2997	1
2454	2186	2997	1
2455	2187	237	1
2456	2188	141	1
2457	2189	237	1
2458	2189	141	1
2459	2190	237	1
2460	2191	237	1
2461	2192	237	1
2462	2193	237	1
2463	2194	237	1
2464	2195	237	1
2465	2196	237	1
2466	2197	141	1
2467	2198	141	1
2468	2199	237	1
2469	2200	237	1
2470	2201	237	1
2471	2202	237	1
2472	2203	237	1
2473	2204	237	1
2474	2205	237	1
2475	2207	237	1
2476	2207	141	1
2477	2208	141	1
2478	2210	141	1
2479	2211	141	1
2480	2212	141	1
2481	2214	141	1
2482	2215	2335	1
2483	2218	211	1
2484	2219	141	1
2485	2220	141	1
2486	2221	141	1
2487	2222	141	1
2488	2223	141	1
2489	2224	141	1
2490	2226	141	1
2491	2227	201	1
2492	2228	211	1
2493	2231	211	1
2494	2232	201	1
2495	2233	211	1
2496	2234	211	1
2497	2235	141	1
2498	2237	211	1
2499	2238	3051	1
2500	2238	141	1
2501	2239	3053	1
2502	2240	141	1
2503	2241	141	1
2504	2242	3053	1
2505	2243	201	1
2506	2246	3061	1
2507	2247	141	1
2508	2249	3065	1
2509	2249	201	1
2510	2250	141	1
2511	2251	141	1
2512	2252	3069	1
2513	2252	3070	0
2514	2253	201	1
2515	2254	141	1
2516	2255	3051	1
2517	2255	141	1
2518	2256	141	1
2519	2257	3051	1
2520	2257	141	1
2521	2258	141	1
2522	2259	141	1
2523	2260	480	1
2524	2260	3079	0
2525	2261	141	1
2526	2262	3051	1
2527	2262	141	1
2528	2263	3083	1
2529	2264	3051	1
2530	2264	141	1
2531	2265	141	1
2532	2266	3087	1
\.


--
-- Name: cvterm_dbxref_cvterm_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cvterm_dbxref_cvterm_dbxref_id_seq', 2532, true);


--
-- Data for Name: cvterm_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cvterm_relationship (cvterm_relationship_id, type_id, subject_id, object_id) FROM stdin;
1	32	39	37
2	32	40	38
3	32	41	37
4	32	42	38
5	32	56	54
6	32	57	55
7	32	59	38
8	32	60	37
9	32	114	225
10	32	115	1519
11	32	116	115
12	32	117	310
13	32	118	819
14	32	119	809
15	32	121	265
16	32	124	515
17	32	125	515
18	32	126	597
19	32	127	769
20	32	128	1761
21	32	129	1761
22	32	131	1761
23	32	132	827
24	32	133	1519
25	32	134	829
26	32	135	134
27	32	136	829
28	32	137	135
29	32	138	135
30	32	139	134
31	32	140	829
32	32	141	140
33	32	142	115
34	32	143	142
35	32	144	142
36	32	145	810
37	32	146	145
38	32	147	145
39	32	148	1355
40	32	150	948
41	32	151	740
42	32	152	841
43	32	154	1518
44	32	155	266
45	32	158	451
46	32	159	1861
47	32	166	810
48	32	169	2212
49	32	170	169
50	32	171	169
51	32	172	866
52	32	174	1755
53	32	175	2101
54	32	176	174
55	32	177	2090
56	32	177	2100
57	32	178	2198
58	32	180	2213
59	32	182	515
60	32	183	182
61	32	184	183
62	32	185	184
63	32	186	184
64	32	188	183
65	32	189	183
66	32	190	183
67	32	191	183
68	32	192	183
69	32	193	787
70	32	194	193
71	32	195	196
72	32	196	515
73	32	198	850
74	32	199	850
75	32	202	818
76	32	203	818
77	32	204	203
78	32	205	818
79	32	206	205
80	32	207	205
81	32	208	205
82	32	209	205
83	32	210	205
84	32	211	205
85	32	212	818
86	32	213	818
87	32	214	818
88	32	215	214
89	32	216	1150
90	32	217	462
91	32	218	813
92	32	219	1519
93	32	220	942
94	32	222	227
95	32	223	349
96	32	226	818
97	32	227	555
98	32	228	1150
99	32	229	421
100	32	231	352
101	32	233	787
102	32	234	515
103	32	235	300
104	32	236	227
105	32	237	115
106	32	238	234
107	32	239	238
108	32	240	238
109	32	241	238
110	32	242	818
111	32	243	242
112	32	244	243
113	32	245	234
114	32	246	234
115	32	247	227
116	32	248	515
117	32	249	234
118	32	249	248
119	32	250	249
120	32	251	249
121	32	252	248
122	32	253	1010
123	32	254	948
124	32	255	1781
125	32	256	1780
126	32	257	115
127	32	258	1518
128	32	260	474
129	32	261	352
130	32	262	945
131	32	263	1976
132	32	264	258
133	32	264	468
134	32	265	258
135	32	266	809
136	32	267	554
137	32	268	554
138	32	269	554
139	32	270	1344
140	32	271	554
141	32	272	554
142	32	273	554
143	32	274	1170
144	32	274	1519
145	32	276	421
146	32	277	947
147	32	278	1527
148	32	279	1527
149	32	280	841
150	32	281	280
151	32	282	1166
152	32	284	1312
153	32	285	1312
154	32	286	1312
155	32	287	827
156	32	288	1760
157	32	289	1761
158	32	290	827
159	32	291	827
160	32	292	462
161	32	293	2042
162	32	294	813
163	32	295	216
164	32	296	462
165	32	297	216
166	32	298	954
167	32	299	776
168	32	300	787
169	32	301	295
170	32	303	947
171	32	304	295
172	32	305	303
173	32	306	303
174	32	307	303
175	32	308	526
176	32	309	304
177	32	310	262
178	32	311	1324
179	32	312	1324
180	32	313	262
181	32	314	1170
182	32	315	310
183	32	316	262
184	32	317	310
185	32	318	948
186	32	319	318
187	32	320	318
188	32	321	304
189	32	322	363
190	32	323	297
191	32	324	597
192	32	325	597
193	32	326	325
194	32	327	325
195	32	328	325
196	32	329	325
197	32	330	325
198	32	331	325
199	32	332	325
200	32	333	325
201	32	334	325
202	32	335	325
203	32	336	325
204	32	337	325
205	32	338	325
206	32	339	325
207	32	340	325
208	32	341	325
209	32	342	325
210	32	343	325
211	32	344	325
212	32	345	325
213	32	346	597
214	32	347	597
215	32	348	787
216	32	349	348
217	32	350	1755
218	32	350	1780
219	32	351	831
220	32	352	847
221	32	353	297
222	32	354	1520
223	32	355	1614
224	32	356	318
225	32	357	318
226	32	358	254
227	32	361	975
228	32	363	2067
229	32	365	1345
230	32	367	769
231	32	368	769
232	32	369	368
233	32	370	324
234	32	371	368
235	32	372	368
236	32	373	368
237	32	374	368
238	32	375	368
239	32	376	368
240	32	377	368
241	32	378	368
242	32	379	368
243	32	380	368
244	32	381	368
245	32	382	368
246	32	383	368
247	32	384	368
248	32	385	368
249	32	386	368
250	32	387	368
251	32	388	368
252	32	389	769
253	32	390	769
254	32	391	484
255	32	392	847
256	32	393	787
257	32	394	787
258	32	395	818
259	32	395	918
260	32	396	395
261	32	396	400
262	32	396	919
263	32	397	223
264	32	398	226
265	32	398	396
266	32	400	818
267	32	401	771
268	32	402	818
269	32	403	395
270	32	403	402
271	32	404	118
272	32	405	404
273	32	406	404
274	32	408	771
275	32	408	919
276	32	409	771
277	32	410	776
278	32	411	1519
279	32	412	411
280	32	413	1519
281	32	414	783
282	32	415	414
283	32	416	415
284	32	417	1051
285	32	418	947
286	32	420	1345
287	32	420	1821
288	32	421	420
289	32	422	1519
290	32	427	903
291	32	428	237
292	32	429	771
293	32	430	947
294	32	431	948
295	32	432	266
296	32	433	474
297	32	434	474
298	32	435	459
299	32	435	953
300	32	436	223
301	32	437	798
302	32	438	963
303	32	439	810
304	32	440	324
305	32	441	439
306	32	442	963
307	32	443	166
308	32	444	223
309	32	445	1518
310	32	446	439
311	32	447	445
312	32	448	813
313	32	449	445
314	32	450	223
315	32	451	1519
316	32	452	556
317	32	453	323
318	32	454	413
319	32	455	1344
320	32	456	942
321	32	457	414
322	32	458	1518
323	32	459	1167
324	32	460	439
325	32	461	1059
326	32	462	458
327	32	463	557
328	32	464	458
329	32	465	1060
330	32	466	557
331	32	467	463
332	32	468	1356
333	32	469	798
334	32	470	413
335	32	471	463
336	32	472	847
337	32	473	472
338	32	474	963
339	32	475	472
340	32	476	904
341	32	477	1014
342	32	478	354
343	32	479	1150
344	32	480	813
345	32	481	1058
346	32	482	480
347	32	484	769
348	32	485	297
349	32	486	787
350	32	487	570
351	32	488	486
352	32	489	765
353	32	490	484
354	32	491	484
355	32	492	484
356	32	493	492
357	32	494	829
358	32	495	717
359	32	496	717
360	32	497	758
361	32	498	484
362	32	499	769
363	32	500	769
364	32	501	484
365	32	502	484
366	32	503	484
367	32	504	769
368	32	505	389
369	32	506	389
370	32	507	389
371	32	508	389
372	32	509	389
373	32	510	389
374	32	511	389
375	32	512	389
376	32	513	389
377	32	515	847
378	32	517	707
379	32	518	769
380	32	519	769
381	32	520	303
382	32	521	764
383	32	523	1519
384	32	524	523
385	32	525	809
386	32	526	258
387	32	527	814
388	32	528	904
389	32	529	904
390	32	530	904
391	32	531	1179
392	32	531	2066
393	32	532	1634
394	32	533	951
395	32	534	595
396	32	535	595
397	32	536	960
398	32	537	960
399	32	538	960
400	32	539	401
401	32	540	401
402	32	541	537
403	32	541	962
404	32	542	536
405	32	542	962
406	32	543	538
407	32	543	962
408	32	544	961
409	32	545	961
410	32	546	961
411	32	547	771
412	32	547	952
413	32	548	429
414	32	549	445
415	32	550	411
416	32	553	2091
417	32	553	2104
418	32	554	1344
419	32	555	810
420	32	556	810
421	32	557	514
422	32	558	313
423	32	559	313
424	32	560	303
425	32	561	560
426	32	562	560
427	32	563	466
428	32	564	942
429	32	565	1326
430	32	567	2213
431	32	568	769
432	32	569	1326
433	32	570	818
434	32	571	2096
435	32	572	574
436	32	573	818
437	32	574	416
438	32	575	2090
439	32	576	1519
440	32	577	515
441	32	578	576
442	32	579	2090
443	32	579	2097
444	32	580	574
445	32	581	245
446	32	582	258
447	32	583	245
448	32	584	574
449	32	585	238
450	32	586	468
451	32	587	241
452	32	587	585
453	32	588	258
454	32	589	240
455	32	589	585
456	32	590	265
457	32	592	574
458	32	593	787
459	32	594	266
460	32	594	588
461	32	595	409
462	32	596	416
463	32	597	300
464	32	598	1323
465	32	599	1050
466	32	600	1323
467	32	601	1050
468	32	602	1050
469	32	603	1050
470	32	604	1050
471	32	605	1050
472	32	606	1051
473	32	607	675
474	32	608	676
475	32	609	677
476	32	610	675
477	32	611	676
478	32	612	677
479	32	613	468
480	32	614	142
481	32	615	142
482	32	618	1050
483	32	619	1050
484	32	620	1050
485	32	621	576
486	32	622	1050
487	32	623	596
488	32	624	1048
489	32	625	596
490	32	626	2090
491	32	627	596
492	32	628	676
493	32	629	675
494	32	630	576
495	32	631	677
496	32	632	1050
497	32	633	1050
498	32	634	1050
499	32	635	1050
500	32	636	1050
501	32	637	1050
502	32	638	1050
503	32	639	1050
504	32	640	596
505	32	641	1050
506	32	642	1050
507	32	643	1050
508	32	644	1050
509	32	645	1050
510	32	646	1050
511	32	647	675
512	32	648	596
513	32	649	596
514	32	650	676
515	32	651	677
516	32	652	1051
517	32	653	1050
518	32	654	1050
519	32	655	1050
520	32	656	1050
521	32	658	297
522	32	659	705
523	32	660	466
524	32	661	2097
525	32	662	1326
526	32	663	2097
527	32	664	2213
528	32	665	1780
529	32	666	254
530	32	667	813
531	32	669	418
532	32	670	606
533	32	671	418
534	32	672	596
535	32	673	596
536	32	674	596
537	32	675	1051
538	32	676	1051
539	32	677	416
540	32	678	1050
541	32	679	1050
542	32	680	1050
543	32	681	664
544	32	682	282
545	32	683	847
546	32	684	606
547	32	685	125
548	32	686	1048
549	32	687	125
550	32	688	1048
551	32	689	125
552	32	690	1048
553	32	691	742
554	32	692	125
555	32	693	945
556	32	694	347
557	32	695	1519
558	32	696	347
559	32	697	693
560	32	698	484
561	32	699	692
562	32	700	597
563	32	701	702
564	32	702	303
565	32	703	597
566	32	704	769
567	32	705	115
568	32	706	705
569	32	707	390
570	32	708	390
571	32	709	347
572	32	710	347
573	32	716	769
574	32	717	702
575	32	718	693
576	32	719	1519
577	32	720	693
578	32	721	693
579	32	722	692
580	32	723	1519
581	32	724	1519
582	32	725	953
583	32	726	953
584	32	727	866
585	32	727	1312
586	32	728	256
587	32	728	866
588	32	729	1063
589	32	730	947
590	32	731	286
591	32	732	286
592	32	733	1761
593	32	734	1761
594	32	735	286
595	32	736	1761
596	32	737	125
597	32	738	742
598	32	739	841
599	32	740	942
600	32	741	1166
601	32	742	942
602	32	743	948
603	32	744	949
604	32	745	193
605	32	745	300
606	32	746	300
607	32	746	779
608	32	747	349
609	32	747	779
610	32	748	193
611	32	748	349
612	32	749	300
613	32	750	947
614	32	751	270
615	32	751	918
616	32	752	950
617	32	753	752
618	32	754	752
619	32	755	404
620	32	756	125
621	32	757	118
622	32	758	769
623	32	759	300
624	32	760	769
625	32	761	597
626	32	762	761
627	32	763	769
628	32	764	367
629	32	765	367
630	32	766	765
631	32	767	765
632	32	768	204
633	32	769	348
634	32	770	125
635	32	771	1519
636	32	772	771
637	32	773	125
638	32	776	303
639	32	777	125
640	32	778	942
641	32	779	787
642	32	780	303
643	32	780	1148
644	32	781	1170
645	32	781	1519
646	32	782	217
647	32	783	413
648	32	784	783
649	32	785	783
650	32	786	783
651	32	787	943
652	32	790	279
653	32	791	278
654	32	792	279
655	32	793	278
656	32	794	433
657	32	795	787
658	32	797	459
659	32	798	174
660	32	799	437
661	32	800	2103
662	32	801	813
663	32	802	468
664	32	803	217
665	32	804	818
666	32	805	2056
667	32	806	804
668	32	807	1326
669	32	808	1590
670	32	809	1517
671	32	810	809
672	32	811	807
673	32	812	811
674	32	813	225
675	32	814	1518
676	32	815	527
677	32	816	527
678	32	817	814
679	32	818	1519
680	32	819	771
681	32	820	1528
682	32	821	1528
683	32	822	820
684	32	823	820
685	32	824	811
686	32	825	807
687	32	826	807
688	32	827	828
689	32	828	1784
690	32	829	828
691	32	830	194
692	32	830	748
693	32	831	1518
694	32	832	831
695	32	833	1976
696	32	834	216
697	32	835	806
698	32	836	806
699	32	837	413
700	32	838	411
701	32	839	1634
702	32	840	1519
703	32	841	1166
704	32	842	2056
705	32	843	124
706	32	844	258
707	32	845	1017
708	32	846	1017
709	32	847	514
710	32	848	349
711	32	849	514
712	32	850	849
713	32	851	850
714	32	852	850
715	32	853	850
716	32	854	850
717	32	855	1137
718	32	856	1344
719	32	857	854
720	32	858	854
721	32	859	854
722	32	860	854
723	32	861	854
724	32	862	854
725	32	863	849
726	32	864	411
727	32	865	849
728	32	866	1780
729	32	867	809
730	32	868	554
731	32	869	554
732	32	870	467
733	32	871	870
734	32	872	870
735	32	880	368
736	32	882	270
737	32	883	959
738	32	884	959
739	32	885	1519
740	32	886	1150
741	32	887	886
742	32	888	886
743	32	889	886
744	32	890	886
745	32	891	576
746	32	892	576
747	32	893	751
748	32	893	882
749	32	895	847
750	32	896	847
751	32	897	847
752	32	898	847
753	32	899	809
754	32	903	1017
755	32	904	1017
756	32	908	525
757	32	908	918
758	32	909	929
759	32	910	216
760	32	911	216
761	32	911	1149
762	32	912	216
763	32	912	918
764	32	913	834
765	32	913	912
766	32	913	919
767	32	914	1611
768	32	915	1611
769	32	916	1611
770	32	917	1611
771	32	918	1517
772	32	919	918
773	32	920	847
774	32	921	439
775	32	921	918
776	32	922	432
777	32	923	432
778	32	924	923
779	32	925	923
780	32	926	923
781	32	927	923
782	32	928	847
783	32	929	351
784	32	930	818
785	32	931	847
786	32	932	930
787	32	933	455
788	32	934	455
789	32	935	455
790	32	936	455
791	32	937	455
792	32	938	455
793	32	939	455
794	32	940	455
795	32	941	455
796	32	942	1519
797	32	943	1519
798	32	945	1519
799	32	946	945
800	32	947	945
801	32	948	946
802	32	949	948
803	32	950	947
804	32	951	1519
805	32	952	1520
806	32	953	947
807	32	954	1519
808	32	959	946
809	32	960	952
810	32	961	960
811	32	962	960
812	32	963	948
813	32	964	945
814	32	965	445
815	32	966	965
816	32	967	965
817	32	968	847
818	32	969	968
819	32	970	969
820	32	971	969
821	32	972	968
822	32	973	300
823	32	974	349
824	32	975	352
825	32	976	975
826	32	977	975
827	32	978	977
828	32	979	977
829	32	980	977
830	32	981	977
831	32	982	352
832	32	983	349
833	32	984	349
834	32	984	593
835	32	985	787
836	32	986	985
837	32	987	392
838	32	988	392
839	32	989	352
840	32	990	352
841	32	991	992
842	32	992	352
843	32	993	975
844	32	994	993
845	32	995	260
846	32	996	995
847	32	997	995
848	32	998	993
849	32	999	993
850	32	1000	1010
851	32	1001	1010
852	32	1002	818
853	32	1003	818
854	32	1004	818
855	32	1005	241
856	32	1006	1005
857	32	1007	1006
858	32	1008	818
859	32	1009	1010
860	32	1010	818
861	32	1010	1821
862	32	1014	818
863	32	1015	865
864	32	1016	248
865	32	1017	847
866	32	1018	1017
867	32	1019	846
868	32	1020	1019
869	32	1021	1019
870	32	1022	846
871	32	1023	846
872	32	1024	1237
873	32	1025	867
874	32	1026	867
875	32	1027	867
876	32	1027	918
877	32	1041	349
878	32	1041	985
879	32	1042	946
880	32	1043	1042
881	32	1044	235
882	32	1045	847
883	32	1046	1756
884	32	1047	431
885	32	1048	416
886	32	1050	416
887	32	1051	416
888	32	1052	847
889	32	1053	570
890	32	1054	1058
891	32	1055	1058
892	32	1056	1058
893	32	1057	1058
894	32	1058	457
895	32	1059	457
896	32	1060	457
897	32	1061	1059
898	32	1062	1058
899	32	1063	256
900	32	1064	411
901	32	1065	411
902	32	1066	455
903	32	1067	1066
904	32	1068	1066
905	32	1069	1067
906	32	1070	1067
907	32	1071	1068
908	32	1072	1068
909	32	1073	455
910	32	1074	1073
911	32	1075	1074
912	32	1076	1077
913	32	1077	1073
914	32	1078	1074
915	32	1079	1077
916	32	1085	323
917	32	1086	204
918	32	1087	847
919	32	1088	945
920	32	1089	1042
921	32	1090	125
922	32	1091	1344
923	32	1092	728
924	32	1093	728
925	32	1094	847
926	32	1095	1094
927	32	1096	1094
928	32	1097	557
929	32	1098	1097
930	32	1099	1097
931	32	1100	769
932	32	1101	769
933	32	1102	467
934	32	1103	1026
935	32	1104	1017
936	32	1105	1518
937	32	1106	349
938	32	1106	1105
939	32	1107	818
940	32	1108	954
941	32	1109	1527
942	32	1110	265
943	32	1111	764
944	32	1112	765
945	32	1113	765
946	32	1114	401
947	32	1115	1017
948	32	1116	1518
949	32	1117	228
950	32	1118	886
951	32	1119	428
952	32	1120	556
953	32	1121	257
954	32	1122	1355
955	32	1123	810
956	32	1124	2067
957	32	1125	947
958	32	1126	142
959	32	1127	1125
960	32	1128	1978
961	32	1129	523
962	32	1130	1170
963	32	1132	813
964	32	1133	1132
965	32	1134	1614
966	32	1135	1614
967	32	1136	1134
968	32	1137	1368
969	32	1138	1614
970	32	1139	1614
971	32	1140	847
972	32	1141	1140
973	32	1142	1140
974	32	1143	851
975	32	1144	859
976	32	1145	1125
977	32	1146	769
978	32	1147	368
979	32	1148	1519
980	32	1149	1148
981	32	1150	1148
982	32	1151	1150
983	32	1152	1149
984	32	1152	1344
985	32	1153	1152
986	32	1154	1058
987	32	1155	1861
988	32	1156	1150
989	32	1157	1159
990	32	1158	1159
991	32	1159	457
992	32	1160	886
993	32	1161	952
994	32	1165	952
995	32	1166	1780
996	32	1167	1780
997	32	1169	1166
998	32	1170	225
999	32	1172	2056
1000	32	1173	2056
1001	32	1174	951
1002	32	1175	533
1003	32	1176	951
1004	32	1177	2066
1005	32	1178	2066
1006	32	1179	951
1007	32	1180	1179
1008	32	1181	1179
1009	32	1182	1181
1010	32	1183	1181
1011	32	1184	1179
1012	32	1185	1184
1013	32	1186	1184
1014	32	1187	1179
1015	32	1188	1179
1016	32	1189	1188
1017	32	1190	1188
1018	32	1191	814
1019	32	1192	1191
1020	32	1193	1191
1021	32	1194	1191
1022	32	1195	1191
1023	32	1198	2046
1024	32	1201	1757
1025	32	1201	2047
1026	32	1202	524
1027	32	1202	2047
1028	32	1203	1201
1029	32	1204	1201
1030	32	1205	1201
1031	32	1206	1201
1032	32	1207	1201
1033	32	1208	1201
1034	32	1209	1201
1035	32	1210	1201
1036	32	1211	1201
1037	32	1212	1201
1038	32	1213	1346
1039	32	1214	1758
1040	32	1214	2047
1041	32	1215	1187
1042	32	1216	1187
1043	32	1217	1187
1044	32	1218	1217
1045	32	1219	1217
1046	32	1220	1187
1047	32	1221	1220
1048	32	1222	1220
1049	32	1223	1187
1050	32	1224	1223
1051	32	1225	1223
1052	32	1226	1225
1053	32	1227	1225
1054	32	1228	1225
1055	32	1229	1187
1056	32	1230	1229
1057	32	1231	1229
1058	32	1232	1187
1059	32	1233	1232
1060	32	1234	1232
1061	32	1235	1187
1062	32	1236	1187
1063	32	1237	1187
1064	32	1238	1024
1065	32	1239	1024
1066	32	1240	1024
1067	32	1241	1024
1068	32	1242	1237
1069	32	1243	1242
1070	32	1244	1242
1071	32	1245	1242
1072	32	1246	1242
1073	32	1247	1237
1074	32	1248	1247
1075	32	1249	1247
1076	32	1250	1237
1077	32	1251	1250
1078	32	1252	1250
1079	32	1253	1250
1080	32	1254	1250
1081	32	1255	951
1082	32	1256	1255
1083	32	1257	1255
1084	32	1258	1255
1085	32	1259	1242
1086	32	1260	1259
1087	32	1261	1260
1088	32	1262	1260
1089	32	1263	1259
1090	32	1264	1242
1091	32	1265	827
1092	32	1266	1760
1093	32	1267	827
1094	32	1268	1760
1095	32	1269	1760
1096	32	1270	1760
1097	32	1271	1761
1098	32	1272	827
1099	32	1273	1760
1100	32	1274	1760
1101	32	1275	827
1102	32	1276	1760
1103	32	1277	1760
1104	32	1278	1152
1105	32	1279	323
1106	32	1280	765
1107	32	1281	946
1108	32	1282	1281
1109	32	1283	1281
1110	32	1284	1281
1111	32	1285	1281
1112	32	1286	1281
1113	32	1287	325
1114	32	1288	707
1115	32	1289	949
1116	32	1290	949
1117	32	1291	949
1118	32	1292	463
1119	32	1293	463
1120	32	1294	847
1121	32	1295	1294
1122	32	1296	708
1123	32	1297	463
1124	32	1298	1355
1125	32	1299	463
1126	32	1300	1355
1127	32	1301	463
1128	32	1302	1355
1129	32	1303	1301
1130	32	1304	1302
1131	32	1305	1301
1132	32	1306	1302
1133	32	1307	1152
1134	32	1308	1152
1135	32	1309	1308
1136	32	1310	1308
1137	32	1311	1308
1138	32	1312	282
1139	32	1313	1312
1140	32	1314	1313
1141	32	1315	1313
1142	32	1316	1313
1143	32	1317	460
1144	32	1318	460
1145	32	1319	948
1146	32	1320	1319
1147	32	1321	1319
1148	32	1322	702
1149	32	1323	964
1150	32	1324	964
1151	32	1325	303
1152	32	1326	818
1153	32	1327	781
1154	32	1328	818
1155	32	1329	1005
1156	32	1330	1005
1157	32	1331	1330
1158	32	1332	1330
1159	32	1333	242
1160	32	1334	242
1161	32	1335	1334
1162	32	1336	1334
1163	32	1337	1385
1164	32	1338	1385
1165	32	1339	365
1166	32	1340	365
1167	32	1341	365
1168	32	1342	1382
1169	32	1343	847
1170	32	1344	1519
1171	32	1345	1519
1172	32	1346	1519
1173	32	1347	430
1174	32	1348	430
1175	32	1349	954
1176	32	1350	515
1177	32	1351	947
1178	32	1352	1351
1179	32	1353	1351
1180	32	1354	1351
1181	32	1355	810
1182	32	1356	1518
1183	32	1357	1356
1184	32	1358	1357
1185	32	1359	1357
1186	32	1360	1357
1187	32	1361	258
1188	32	1362	2212
1189	32	1363	1362
1190	32	1364	1362
1191	32	1365	174
1192	32	1366	827
1193	32	1367	455
1194	32	1369	817
1195	32	1370	1369
1196	32	1371	818
1197	32	1372	1371
1198	32	1373	1371
1199	32	1374	1371
1200	32	1375	1371
1201	32	1376	1371
1202	32	1377	1371
1203	32	1378	1371
1204	32	1379	1371
1205	32	1380	1371
1206	32	1381	365
1207	32	1382	1339
1208	32	1383	365
1209	32	1384	365
1210	32	1385	365
1211	32	1386	1382
1212	32	1387	1382
1213	32	1388	1382
1214	32	1389	1383
1215	32	1390	1383
1216	32	1391	1383
1217	32	1392	1383
1218	32	1393	1383
1219	32	1394	1383
1220	32	1395	1383
1221	32	1396	1383
1222	32	1397	1383
1223	32	1398	1383
1224	32	1399	1383
1225	32	1400	1383
1226	32	1401	1383
1227	32	1402	1383
1228	32	1403	1381
1229	32	1404	1381
1230	32	1405	1381
1231	32	1406	1381
1232	32	1407	1381
1233	32	1408	1381
1234	32	1409	1381
1235	32	1410	1381
1236	32	1411	1381
1237	32	1412	1381
1238	32	1413	1381
1239	32	1414	1381
1240	32	1415	1381
1241	32	1416	1381
1242	32	1417	1381
1243	32	1418	1381
1244	32	1419	1381
1245	32	1420	1381
1246	32	1421	1381
1247	32	1422	1381
1248	32	1423	1381
1249	32	1424	1384
1250	32	1425	1424
1251	32	1426	1424
1252	32	1427	1424
1253	32	1428	1424
1254	32	1429	1424
1255	32	1430	1424
1256	32	1431	1424
1257	32	1432	1384
1258	32	1433	1384
1259	32	1434	1384
1260	32	1435	1384
1261	32	1436	1384
1262	32	1437	1384
1263	32	1438	1384
1264	32	1439	1384
1265	32	1440	1384
1266	32	1441	1384
1267	32	1442	1384
1268	32	1443	1384
1269	32	1444	1384
1270	32	1445	1384
1271	32	1446	1384
1272	32	1447	1384
1273	32	1448	1384
1274	32	1449	1384
1275	32	1450	1384
1276	32	1451	1384
1277	32	1452	1385
1278	32	1453	1385
1279	32	1454	1385
1280	32	1455	1385
1281	32	1456	1385
1282	32	1457	1385
1283	32	1458	1385
1284	32	1459	1385
1285	32	1460	1385
1286	32	1461	1385
1287	32	1462	1385
1288	32	1463	1385
1289	32	1464	1385
1290	32	1465	1385
1291	32	1466	1385
1292	32	1467	1385
1293	32	1468	1385
1294	32	1469	1385
1295	32	1470	1385
1296	32	1471	1385
1297	32	1472	1385
1298	32	1473	1385
1299	32	1474	1385
1300	32	1475	1385
1301	32	1476	1385
1302	32	1477	1385
1303	32	1478	1385
1304	32	1479	1385
1305	32	1480	1385
1306	32	1481	1385
1307	32	1482	1385
1308	32	1483	1385
1309	32	1484	1385
1310	32	1485	1385
1311	32	1486	1385
1312	32	1487	1385
1313	32	1488	1385
1314	32	1489	1385
1315	32	1490	1385
1316	32	1491	1755
1317	32	1492	431
1318	32	1493	1346
1319	32	1494	1493
1320	32	1495	1493
1321	32	1496	1493
1322	32	1497	1493
1323	32	1498	1493
1324	32	1499	1493
1325	32	1500	1493
1326	32	1501	1493
1327	32	1502	1493
1328	32	1503	1493
1329	32	1504	1493
1330	32	1505	1493
1331	32	1506	1493
1332	32	1507	1493
1333	32	1508	1493
1334	32	1509	1493
1335	32	1510	1493
1336	32	1511	1493
1337	32	1512	1493
1338	32	1513	1493
1339	32	1514	1493
1340	32	1515	557
1341	32	1516	2056
1342	32	1517	114
1343	32	1518	114
1344	32	1519	114
1345	32	1520	114
1346	32	1521	1132
1347	32	1522	1132
1348	32	1523	1132
1349	32	1524	354
1350	32	1525	354
1351	32	1526	1518
1352	32	1527	277
1353	32	1528	277
1354	32	1529	813
1355	32	1530	2046
1356	32	1531	265
1357	32	1532	265
1358	32	1533	265
1359	32	1534	265
1360	32	1535	1780
1361	32	1536	468
1362	32	1537	1756
1363	32	1538	818
1364	32	1540	432
1365	32	1541	1861
1366	32	1542	1346
1367	32	1543	1346
1368	32	1544	1346
1369	32	1545	1346
1370	32	1546	1346
1371	32	1547	1346
1372	32	1548	1346
1373	32	1549	1346
1374	32	1550	1346
1375	32	1551	1346
1376	32	1552	1346
1377	32	1553	1346
1378	32	1554	1346
1379	32	1555	1346
1380	32	1556	1346
1381	32	1557	1346
1382	32	1558	1346
1383	32	1559	1346
1384	32	1560	1346
1385	32	1561	1346
1386	32	1562	1346
1387	32	1563	1346
1388	32	1564	1518
1389	32	1565	1564
1390	32	1566	429
1391	32	1567	1755
1392	32	1568	1755
1393	32	1569	1194
1394	32	1569	1368
1395	32	1570	1977
1396	32	1571	460
1397	32	1572	1571
1398	32	1573	1571
1399	32	1574	460
1400	32	1575	1574
1401	32	1576	1574
1402	32	1577	217
1403	32	1578	217
1404	32	1579	462
1405	32	1580	1351
1406	32	1581	813
1407	32	1582	947
1408	32	1583	270
1409	32	1583	1149
1410	32	1584	751
1411	32	1585	751
1412	32	1586	751
1413	32	1587	265
1414	32	1588	119
1415	32	1589	280
1416	32	1590	2067
1417	32	1591	771
1418	32	1592	771
1419	32	1593	1606
1420	32	1594	1606
1421	32	1595	1606
1422	32	1596	1606
1423	32	1597	1606
1424	32	1598	1606
1425	32	1599	1780
1426	32	1600	445
1427	32	1601	445
1428	32	1602	445
1429	32	1603	771
1430	32	1604	445
1431	32	1605	265
1432	32	1606	1017
1433	32	1607	1748
1434	32	1608	1368
1435	32	1609	1518
1436	32	1610	787
1437	32	1611	355
1438	32	1612	1137
1439	32	1613	1137
1440	32	1614	1368
1441	32	1615	847
1442	32	1616	1615
1443	32	1617	1616
1444	32	1618	1616
1445	32	1619	1615
1446	32	1620	1619
1447	32	1621	1619
1448	32	1622	1619
1449	32	1623	1630
1450	32	1624	1615
1451	32	1625	1624
1452	32	1626	1624
1453	32	1627	1615
1454	32	1628	1627
1455	32	1629	1627
1456	32	1630	1615
1457	32	1631	1613
1458	32	1632	527
1459	32	1633	527
1460	32	1634	951
1461	32	1635	1634
1462	32	1636	1634
1463	32	1637	1634
1464	32	1638	1634
1465	32	1639	414
1466	32	1640	277
1467	32	1641	1634
1468	32	1642	297
1469	32	1643	1171
1470	32	1644	1171
1471	32	1645	1643
1472	32	1646	1643
1473	32	1647	1645
1474	32	1648	1647
1475	32	1649	1647
1476	32	1650	1645
1477	32	1651	1650
1478	32	1652	1650
1479	32	1653	1645
1480	32	1654	1653
1481	32	1655	1653
1482	32	1656	1645
1483	32	1657	1656
1484	32	1658	1657
1485	32	1659	1657
1486	32	1660	1646
1487	32	1661	1646
1488	32	1662	1660
1489	32	1663	1660
1490	32	1664	1661
1491	32	1665	1661
1492	32	1666	1661
1493	32	1667	1666
1494	32	1668	1666
1495	32	1669	1661
1496	32	1670	1644
1497	32	1671	1978
1498	32	1672	1671
1499	32	1673	1978
1500	32	1674	1694
1501	32	1674	1919
1502	32	1675	1671
1503	32	1676	1675
1504	32	1677	1676
1505	32	1678	1676
1506	32	1679	1675
1507	32	1680	1675
1508	32	1681	1732
1509	32	1682	1732
1510	32	1683	1671
1511	32	1684	1683
1512	32	1685	1694
1513	32	1685	1753
1514	32	1685	2007
1515	32	1687	1891
1516	32	1688	1753
1517	32	1689	1753
1518	32	1690	1689
1519	32	1691	1689
1520	32	1692	1753
1521	32	1692	2006
1522	32	1693	1918
1523	32	1694	1687
1524	32	1695	1693
1525	32	1696	1693
1526	32	1697	1693
1527	32	1698	1693
1528	32	1699	1693
1529	32	1700	1683
1530	32	1701	1700
1531	32	1702	1671
1532	32	1703	1702
1533	32	1704	1703
1534	32	1705	1703
1535	32	1706	1702
1536	32	1707	1702
1537	32	1708	1707
1538	32	1709	1707
1539	32	1710	1707
1540	32	1711	1710
1541	32	1712	1710
1542	32	1713	1707
1543	32	1714	1713
1544	32	1715	1713
1545	32	1716	1714
1546	32	1717	1714
1547	32	1718	1715
1548	32	1719	1715
1549	32	1720	1707
1550	32	1721	1707
1551	32	1722	1667
1552	32	1723	1683
1553	32	1724	1723
1554	32	1725	1683
1555	32	1726	1683
1556	32	1727	1726
1557	32	1728	1726
1558	32	1729	1694
1559	32	1729	1753
1560	32	1730	1683
1561	32	1731	1978
1562	32	1732	1730
1563	32	1733	1675
1564	32	1734	1978
1565	32	1735	1978
1566	32	1736	1735
1567	32	1737	1736
1568	32	1738	1734
1569	32	1739	1738
1570	32	1740	1371
1571	32	1741	1371
1572	32	1742	1371
1573	32	1743	1371
1574	32	1744	1371
1575	32	1745	1518
1576	32	1746	1371
1577	32	1747	554
1578	32	1747	918
1579	32	1748	1519
1580	32	1749	1748
1581	32	1750	254
1582	32	1751	216
1583	32	1752	771
1584	32	1753	1918
1585	32	1754	827
1586	32	1755	524
1587	32	1756	523
1588	32	1757	523
1589	32	1758	523
1590	32	1759	1752
1591	32	1760	827
1592	32	1761	1760
1593	32	1762	289
1594	32	1763	289
1595	32	1764	1761
1596	32	1765	1761
1597	32	1766	827
1598	32	1767	827
1599	32	1768	827
1600	32	1769	1779
1601	32	1770	285
1602	32	1771	1779
1603	32	1772	727
1604	32	1773	727
1605	32	1774	827
1606	32	1775	827
1607	32	1776	733
1608	32	1777	733
1609	32	1778	1761
1610	32	1779	1760
1611	32	1780	2029
1612	32	1781	2029
1613	32	1782	2029
1614	32	1783	2029
1615	32	1784	1519
1616	32	1785	847
1617	32	1786	1785
1618	32	1787	1785
1619	32	1788	1519
1620	32	1789	813
1621	32	1790	1795
1622	32	1791	1795
1623	32	1792	1788
1624	32	1793	1788
1625	32	1794	1789
1626	32	1795	1789
1627	32	1796	1519
1628	32	1797	1518
1629	32	1798	1797
1630	32	1799	227
1631	32	1800	227
1632	32	1801	1198
1633	32	1801	1821
1634	32	1802	1801
1635	32	1803	1801
1636	32	1804	1803
1637	32	1805	1803
1638	32	1806	1835
1639	32	1807	1835
1640	32	1808	1837
1641	32	1809	1833
1642	32	1810	1833
1643	32	1811	1836
1644	32	1812	1836
1645	32	1813	1836
1646	32	1814	1802
1647	32	1815	1802
1648	32	1816	1166
1649	32	1817	1801
1650	32	1818	1817
1651	32	1819	1803
1652	32	1820	1803
1653	32	1821	1519
1654	32	1822	1803
1655	32	1823	1834
1656	32	1824	1834
1657	32	1825	1834
1658	32	1826	1835
1659	32	1827	1833
1660	32	1828	1837
1661	32	1829	1837
1662	32	1830	1803
1663	32	1831	1803
1664	32	1832	1803
1665	32	1833	1802
1666	32	1834	1802
1667	32	1835	1802
1668	32	1836	1802
1669	32	1837	1802
1670	32	1838	1801
1671	32	1839	1838
1672	32	1840	818
1673	32	1841	1840
1674	32	1842	2266
1675	32	1843	1130
1676	32	1844	1130
1677	32	1845	1170
1678	32	1846	1845
1679	32	1847	1845
1680	32	1848	1519
1681	32	1849	823
1682	32	1850	823
1683	32	1851	823
1684	32	1852	823
1685	32	1853	823
1686	32	1854	823
1687	32	1855	823
1688	32	1856	823
1689	32	1857	823
1690	32	1858	823
1691	32	1859	1861
1692	32	1860	1861
1693	32	1861	451
1694	32	1862	514
1695	32	1863	1862
1696	32	1864	1862
1697	32	1865	1864
1698	32	1866	1864
1699	32	1867	1864
1700	32	1868	1864
1701	32	1869	1864
1702	32	1870	1862
1703	32	1871	1870
1704	32	1872	1870
1705	32	1873	1870
1706	32	1874	1870
1707	32	1875	1870
1708	32	1876	1863
1709	32	1877	1863
1710	32	1878	1863
1711	32	1879	1863
1712	32	1880	1863
1713	32	1881	1863
1714	32	1882	1863
1715	32	1883	1673
1716	32	1884	1885
1717	32	1885	1170
1718	32	1886	1643
1719	32	1887	1732
1720	32	1888	445
1721	32	1889	2042
1722	32	1890	258
1723	32	1891	1683
1724	32	1892	1891
1725	32	1893	265
1726	32	1894	691
1727	32	1895	691
1728	32	1896	445
1729	32	1897	771
1730	32	1898	1897
1731	32	1899	1897
1732	32	1900	769
1733	32	1901	597
1734	32	1902	1652
1735	32	1903	1652
1736	32	1904	1202
1737	32	1905	2062
1738	32	1906	1634
1739	32	1907	2062
1740	32	1908	1634
1741	32	1909	532
1742	32	1910	1202
1743	32	1911	1198
1744	32	1912	1223
1745	32	1913	1634
1746	32	1914	1862
1747	32	1915	1914
1748	32	1916	1914
1749	32	1917	975
1750	32	1918	1687
1751	32	1919	1687
1752	32	1920	1753
1753	32	1921	1920
1754	32	1921	2008
1755	32	1922	1920
1756	32	1922	2006
1757	32	1923	1921
1758	32	1924	1921
1759	32	1925	1922
1760	32	1926	1922
1761	32	1927	265
1762	32	1928	265
1763	32	1929	264
1764	32	1930	119
1765	32	1931	464
1766	32	1932	951
1767	32	1933	1932
1768	32	1934	1932
1769	32	1935	416
1770	32	1936	416
1771	32	1937	781
1772	32	1938	781
1773	32	1939	1760
1774	32	1940	1761
1775	32	1941	451
1776	32	1942	1760
1777	32	1943	1760
1778	32	1944	1760
1779	32	1945	1760
1780	32	1946	1760
1781	32	1947	1760
1782	32	1948	1761
1783	32	1949	1760
1784	32	1950	1760
1785	32	1951	1940
1786	32	1952	1760
1787	32	1953	827
1788	32	1954	166
1789	32	1955	1760
1790	32	1956	1760
1791	32	1957	1760
1792	32	1958	1760
1793	32	1959	1760
1794	32	1960	827
1795	32	1961	1760
1796	32	1962	405
1797	32	1963	406
1798	32	1964	827
1799	32	1965	1760
1800	32	1966	264
1801	32	1967	818
1802	32	1968	1967
1803	32	1969	1967
1804	32	1970	769
1805	32	1971	1760
1806	32	1972	1519
1807	32	1972	1885
1808	32	1973	1972
1809	32	1974	1972
1810	32	1975	263
1811	32	1976	468
1812	32	1977	769
1813	32	1978	1644
1814	32	1979	1644
1815	32	1980	1644
1816	32	1981	1644
1817	32	1982	1644
1818	32	1983	1981
1819	32	1984	1981
1820	32	1985	1984
1821	32	1986	1982
1822	32	1987	1982
1823	32	1988	1987
1824	32	1989	1980
1825	32	1990	1982
1826	32	1991	1980
1827	32	1992	1991
1828	32	1993	1979
1829	32	1994	1979
1830	32	1995	1994
1831	32	1996	431
1832	32	1997	451
1833	32	1998	1897
1834	32	1999	1897
1835	32	2000	1760
1836	32	2001	1761
1837	32	2002	947
1838	32	2003	1977
1839	32	2004	1977
1840	32	2005	300
1841	32	2006	1978
1842	32	2007	1978
1843	32	2008	2007
1844	32	2009	1693
1845	32	2009	2008
1846	32	2010	1693
1847	32	2010	2006
1848	32	2011	1670
1849	32	2012	1670
1850	32	2013	727
1851	32	2014	827
1852	32	2015	1518
1853	32	2016	439
1854	32	2017	2015
1855	32	2018	229
1856	32	2019	229
1857	32	2020	276
1858	32	2021	264
1859	32	2022	263
1860	32	2023	2027
1861	32	2024	2027
1862	32	2025	2027
1863	32	2026	2027
1864	32	2027	769
1865	32	2028	2094
1866	32	2029	943
1867	32	2030	347
1868	32	2031	707
1869	32	2032	769
1870	32	2033	262
1871	32	2034	2035
1872	32	2035	196
1873	32	2036	196
1874	32	2037	1756
1875	32	2038	2042
1876	32	2039	2042
1877	32	2040	818
1878	32	2041	2042
1879	32	2042	1519
1880	32	2043	325
1881	32	2044	368
1882	32	2045	445
1883	32	2046	1177
1884	32	2047	2046
1885	32	2048	1179
1886	32	2049	1187
1887	32	2050	1187
1888	32	2051	1187
1889	32	2052	1187
1890	32	2053	1187
1891	32	2054	2056
1892	32	2055	817
1893	32	2056	951
1894	32	2057	1187
1895	32	2058	951
1896	32	2059	2056
1897	32	2060	2056
1898	32	2061	2056
1899	32	2062	1177
1900	32	2063	2046
1901	32	2064	2046
1902	32	2065	1537
1903	32	2065	2047
1904	32	2066	951
1905	32	2067	1170
1906	32	2067	1519
1907	32	2068	2067
1908	32	2069	1590
1909	32	2070	1590
1910	32	2071	2070
1911	32	2072	2071
1912	32	2073	2072
1913	32	2074	2071
1914	32	2075	2070
1915	32	2076	2075
1916	32	2077	2075
1917	32	2078	1590
1918	32	2079	2078
1919	32	2080	2079
1920	32	2081	2079
1921	32	2082	2079
1922	32	2083	2079
1923	32	2084	2078
1924	32	2085	2084
1925	32	2086	2084
1926	32	2087	2084
1927	32	2088	2084
1928	32	2089	2213
1929	32	2090	2089
1930	32	2091	2089
1931	32	2092	2213
1932	32	2093	1170
1933	32	2094	781
1934	32	2095	1170
1935	32	2095	1519
1936	32	2096	2213
1937	32	2097	2089
1938	32	2097	2096
1939	32	2098	2208
1940	32	2099	2208
1941	32	2100	567
1942	32	2100	2097
1943	32	2101	2213
1944	32	2102	2103
1945	32	2103	2092
1946	32	2104	2089
1947	32	2105	2091
1948	32	2106	2091
1949	32	2107	2103
1950	32	2181	2213
1951	32	2182	2101
1952	32	2183	2101
1953	32	2184	2089
1954	32	2185	2181
1955	32	2186	2181
1956	32	2187	2096
1957	32	2188	2104
1958	32	2188	2187
1959	32	2189	2213
1960	32	2190	2090
1961	32	2190	2103
1962	32	2191	2091
1963	32	2191	2103
1964	32	2192	2092
1965	32	2192	2097
1966	32	2193	2103
1967	32	2194	2091
1968	32	2195	2197
1969	32	2196	2197
1970	32	2197	2096
1971	32	2198	567
1972	32	2198	2092
1973	32	2199	2198
1974	32	2200	2198
1975	32	2201	2100
1976	32	2201	2191
1977	32	2202	2100
1978	32	2203	2197
1979	32	2204	2198
1980	32	2205	2100
1981	32	2206	2213
1982	32	2207	2090
1983	32	2207	2091
1984	32	2208	2094
1985	32	2209	2206
1986	32	2212	355
1987	32	2213	355
1988	32	2218	787
1989	32	2219	577
1990	32	2220	577
1991	32	2221	2226
1992	32	2222	2226
1993	32	2223	2220
1994	32	2224	2226
1995	32	2226	2220
1996	32	2227	768
1997	32	2227	1538
1998	32	2228	194
1999	32	2228	745
2000	32	2229	196
2001	32	2231	431
2002	32	2232	2235
2003	32	2233	2234
2004	32	2234	2235
2005	32	2235	431
2006	32	2237	2234
2007	32	2238	358
2008	32	2238	2246
2009	32	2239	349
2010	32	2240	999
2011	32	2241	999
2012	32	2242	2239
2013	32	2243	2239
2014	32	2246	948
2015	32	2247	794
2016	32	2249	1325
2017	32	2250	1325
2018	32	2251	794
2019	32	2252	2246
2020	32	2253	1519
2021	32	2254	2246
2022	32	2255	2254
2023	32	2256	2246
2024	32	2257	2254
2025	32	2258	2264
2026	32	2259	2264
2027	32	2260	2042
2028	32	2261	2264
2029	32	2262	2254
2030	32	2263	2254
2031	32	2264	2246
2032	32	2265	809
2033	32	2266	954
2034	95	121	264
2035	95	121	1890
2036	68	127	126
2037	95	128	1770
2038	95	129	1770
2039	95	131	1770
2040	95	132	282
2041	83	148	1292
2042	95	150	349
2043	95	154	458
2044	83	155	1102
2045	82	177	274
2046	83	193	992
2047	83	194	991
2048	81	202	852
2049	81	203	851
2050	81	204	855
2051	81	205	854
2052	81	206	857
2053	81	207	859
2054	81	208	858
2055	81	209	860
2056	81	210	861
2057	81	211	862
2058	81	212	853
2059	81	213	863
2060	81	214	865
2061	81	215	1015
2062	95	218	867
2063	68	219	431
2064	83	223	977
2065	95	226	216
2066	83	233	999
2067	83	236	1141
2068	83	242	1005
2069	83	243	1006
2070	83	244	1007
2071	83	247	1142
2072	83	253	1016
2073	95	254	319
2074	95	255	349
2075	95	256	787
2076	95	263	833
2077	95	264	263
2078	95	265	264
2079	83	281	392
2080	95	287	285
2081	95	288	285
2082	95	290	1772
2083	95	290	2013
2084	95	291	1772
2085	95	291	2013
2086	95	294	867
2087	95	311	315
2088	95	312	317
2089	68	348	300
2090	95	355	1631
2091	68	367	324
2092	68	368	325
2093	68	369	326
2094	68	371	328
2095	68	372	329
2096	68	373	330
2097	68	374	331
2098	68	375	332
2099	68	376	333
2100	68	377	334
2101	68	378	335
2102	68	379	336
2103	68	380	337
2104	68	381	338
2105	68	382	339
2106	68	383	340
2107	68	384	341
2108	68	385	342
2109	68	386	343
2110	68	387	344
2111	68	388	345
2112	68	389	346
2113	68	390	347
2114	68	391	761
2115	83	393	988
2116	83	394	987
2117	83	395	897
2118	83	396	897
2119	83	396	898
2120	83	397	978
2121	83	398	897
2122	83	398	898
2123	83	400	898
2124	95	401	301
2125	83	402	920
2126	83	403	897
2127	83	408	897
2128	83	408	898
2129	95	411	1344
2130	83	432	870
2131	83	436	980
2132	83	444	981
2133	95	448	348
2134	83	450	979
2135	91	451	818
2136	68	460	349
2137	83	477	473
2138	95	481	479
2139	83	486	1294
2140	83	487	2095
2141	83	488	1295
2142	83	494	1295
2143	68	517	2030
2144	83	525	928
2145	95	532	1173
2146	95	533	1174
2147	95	547	304
2148	68	548	216
2149	95	549	301
2150	95	554	266
2151	109	565	983
2152	83	569	977
2153	83	570	1052
2154	109	573	593
2155	91	578	262
2156	95	582	802
2157	95	588	586
2158	83	593	982
2159	95	595	323
2160	95	598	317
2161	82	599	584
2162	82	599	686
2163	95	600	315
2164	82	601	584
2165	82	601	592
2166	82	601	688
2167	82	602	584
2168	82	602	688
2169	82	603	592
2170	82	603	690
2171	82	604	584
2172	82	604	592
2173	82	604	690
2174	82	605	584
2175	82	605	690
2176	95	607	684
2177	95	608	684
2178	95	609	684
2179	95	610	670
2180	95	611	670
2181	95	612	670
2182	82	618	572
2183	82	618	592
2184	82	618	686
2185	82	619	572
2186	82	619	686
2187	82	620	572
2188	82	620	584
2189	82	620	592
2190	82	620	686
2191	91	621	262
2192	95	621	630
2193	82	622	572
2194	82	622	584
2195	82	622	686
2196	82	623	572
2197	82	623	584
2198	82	623	592
2199	82	625	584
2200	82	625	592
2201	82	627	584
2202	95	628	417
2203	95	629	417
2204	91	630	787
2205	95	630	451
2206	95	631	417
2207	82	632	580
2208	82	632	686
2209	82	633	580
2210	82	633	584
2211	82	633	686
2212	82	634	580
2213	82	634	592
2214	82	634	688
2215	82	635	580
2216	82	635	688
2217	82	636	580
2218	82	636	584
2219	82	636	688
2220	82	637	580
2221	82	637	592
2222	82	637	690
2223	82	638	580
2224	82	638	690
2225	82	639	580
2226	82	639	584
2227	82	639	690
2228	82	640	580
2229	82	641	572
2230	82	641	580
2231	82	641	592
2232	82	641	686
2233	82	642	572
2234	82	642	580
2235	82	642	686
2236	82	643	572
2237	82	643	580
2238	82	643	584
2239	82	643	592
2240	82	643	686
2241	82	644	572
2242	82	644	580
2243	82	644	584
2244	82	644	686
2245	82	645	572
2246	82	645	580
2247	82	645	584
2248	82	645	592
2249	82	646	572
2250	82	646	580
2251	82	646	584
2252	95	647	652
2253	82	648	580
2254	82	648	584
2255	82	649	580
2256	82	649	584
2257	82	649	592
2258	95	650	652
2259	95	651	652
2260	82	653	592
2261	82	653	686
2262	82	654	584
2263	82	654	592
2264	82	654	686
2265	82	655	592
2266	82	655	688
2267	82	656	580
2268	82	656	592
2269	82	656	686
2270	95	659	2246
2271	109	662	985
2272	95	667	320
2273	95	667	348
2274	82	672	592
2275	82	673	572
2276	82	674	572
2277	82	674	584
2278	82	678	580
2279	82	678	584
2280	82	678	592
2281	82	678	686
2282	82	679	580
2283	82	679	584
2284	82	679	592
2285	82	679	688
2286	82	680	580
2287	82	680	584
2288	82	680	592
2289	82	680	690
2290	83	702	1295
2291	68	704	703
2292	68	707	709
2293	68	708	710
2294	62	723	716
2295	62	724	349
2296	95	734	732
2297	95	736	731
2298	95	743	319
2299	95	744	318
2300	83	745	992
2301	83	746	990
2302	83	747	990
2303	83	748	992
2304	95	750	749
2305	83	751	897
2306	68	758	759
2307	68	764	370
2308	68	765	440
2309	95	768	856
2310	82	771	840
2311	83	779	990
2312	83	780	1343
2313	109	804	193
2314	109	806	194
2315	83	807	993
2316	82	811	995
2317	82	812	996
2318	90	818	2042
2319	82	824	997
2320	83	825	998
2321	83	826	999
2322	83	830	991
2323	83	834	898
2324	109	835	2228
2325	109	836	830
2326	82	841	350
2327	95	844	468
2328	83	848	976
2329	82	855	856
2330	82	855	1091
2331	90	866	2042
2332	95	867	266
2333	68	869	270
2334	68	880	1287
2335	83	893	897
2336	95	899	867
2337	83	908	897
2338	83	909	928
2339	68	910	266
2340	83	910	895
2341	83	911	896
2342	83	912	897
2343	83	913	897
2344	83	913	898
2345	83	918	897
2346	83	919	897
2347	83	919	898
2348	83	921	897
2349	83	922	903
2350	83	923	904
2351	83	924	476
2352	83	925	528
2353	83	926	529
2354	83	927	530
2355	83	930	928
2356	83	932	931
2357	81	933	851
2358	81	934	859
2359	81	935	858
2360	81	936	860
2361	81	937	861
2362	81	938	198
2363	81	939	199
2364	81	940	852
2365	81	941	853
2366	95	942	455
2367	90	943	818
2368	95	945	787
2369	95	947	300
2370	95	948	349
2371	95	950	324
2372	95	951	219
2373	95	953	776
2374	95	954	818
2375	95	959	698
2376	95	960	401
2377	95	961	540
2378	95	962	539
2379	95	963	431
2380	95	964	262
2381	83	965	969
2382	83	966	971
2383	83	967	970
2384	62	973	695
2385	83	973	261
2386	62	974	695
2387	83	974	261
2388	62	983	724
2389	83	983	361
2390	62	984	750
2391	83	984	982
2392	78	985	716
2393	82	985	1088
2394	83	985	231
2395	83	1000	250
2396	83	1001	251
2397	83	1002	245
2398	83	1003	587
2399	83	1004	589
2400	83	1008	246
2401	83	1009	252
2402	83	1010	248
2403	83	1014	895
2404	83	1025	870
2405	83	1026	1102
2406	83	1027	897
2407	83	1041	231
2408	95	1042	716
2409	83	1047	231
2410	95	1054	1153
2411	95	1062	479
2412	83	1066	467
2413	83	1067	1096
2414	83	1068	1095
2415	83	1069	1098
2416	83	1070	1099
2417	83	1071	1098
2418	83	1072	1099
2419	83	1073	471
2420	83	1074	1095
2421	83	1075	1098
2422	83	1076	1098
2423	83	1077	1096
2424	83	1078	1099
2425	83	1079	1099
2426	95	1086	1091
2427	68	1103	268
2428	83	1105	1104
2429	83	1106	1104
2430	83	1107	846
2431	83	1108	845
2432	95	1110	268
2433	83	1116	1115
2434	83	1122	1293
2435	83	1123	1294
2436	95	1125	303
2437	95	1127	701
2438	95	1132	455
2439	112	1134	818
2440	112	1135	470
2441	82	1137	1344
2442	112	1138	1137
2443	83	1143	467
2444	83	1144	467
2445	68	1147	327
2446	83	1148	1343
2447	68	1151	270
2448	95	1154	485
2449	95	1157	1060
2450	95	1158	1060
2451	95	1161	1752
2452	95	1165	1751
2453	95	1172	1173
2454	95	1181	1180
2455	95	1184	1180
2456	82	1190	1223
2457	82	1190	1237
2458	95	1213	2064
2459	95	1265	285
2460	95	1267	285
2461	95	1268	285
2462	95	1269	285
2463	95	1270	285
2464	95	1271	1770
2465	95	1272	285
2466	95	1273	285
2467	95	1274	285
2468	95	1275	285
2469	95	1276	285
2470	95	1277	285
2471	95	1281	368
2472	95	1283	1282
2473	95	1289	320
2474	95	1290	320
2475	95	1291	318
2476	83	1298	1297
2477	83	1300	1299
2478	83	1302	1301
2479	83	1304	1303
2480	83	1306	1305
2481	83	1326	124
2482	83	1327	895
2483	83	1328	683
2484	83	1333	1329
2485	83	1334	1330
2486	83	1335	1331
2487	83	1336	1332
2488	95	1346	219
2489	82	1349	430
2490	95	1352	761
2491	95	1353	1352
2492	95	1354	1352
2493	82	1358	526
2494	82	1359	446
2495	82	1360	446
2496	95	1366	285
2497	81	1367	857
2498	82	1370	460
2499	83	1372	1090
2500	83	1373	685
2501	83	1374	689
2502	83	1375	692
2503	83	1376	1371
2504	83	1377	756
2505	83	1378	770
2506	83	1379	773
2507	83	1380	777
2508	83	1492	845
2509	83	1538	1087
2510	82	1564	809
2511	95	1567	741
2512	95	1568	280
2513	82	1569	264
2514	83	1583	896
2515	95	1587	269
2516	95	1591	738
2517	95	1592	738
2518	95	1599	303
2519	95	1600	1894
2520	95	1601	1894
2521	95	1602	1894
2522	95	1603	738
2523	95	1604	738
2524	95	1605	267
2525	82	1608	219
2526	82	1614	1170
2527	82	1747	965
2528	83	1747	897
2529	95	1754	282
2530	93	1760	350
2531	95	1762	1770
2532	95	1763	286
2533	95	1764	1770
2534	95	1765	1770
2535	95	1766	1765
2536	95	1767	1765
2537	95	1768	1765
2538	95	1774	1773
2539	95	1775	1773
2540	95	1776	731
2541	95	1777	732
2542	95	1778	731
2543	95	1790	1793
2544	95	1791	1793
2545	95	1794	1792
2546	95	1796	1793
2547	67	1798	524
2548	83	1801	248
2549	83	1821	248
2550	67	1840	794
2551	95	1888	301
2552	95	1893	266
2553	95	1896	1895
2554	95	1898	1896
2555	95	1899	1895
2556	68	1900	1901
2557	95	1912	1186
2558	67	1937	1148
2559	81	1966	268
2560	95	1966	268
2561	108	1970	280
2562	95	1996	216
2563	95	1997	216
2564	95	1998	1899
2565	95	1999	1899
2566	95	2002	300
2567	68	2005	1899
2568	81	2021	851
2569	68	2031	694
2570	68	2032	696
2571	95	2037	301
2572	82	2041	2040
2573	68	2044	2043
2574	83	2045	972
2575	95	2056	1174
2576	95	2059	532
2577	95	2060	532
2578	95	2061	532
2579	83	2089	1617
2580	82	2090	274
2581	82	2091	2095
2582	83	2092	1618
2583	82	2097	2094
2584	82	2100	314
2585	82	2100	2094
2586	82	2103	314
2587	83	2104	1099
2588	83	2105	1625
2589	83	2106	1626
2590	83	2188	1623
2591	82	2190	274
2592	82	2190	314
2593	82	2191	314
2594	82	2191	2095
2595	82	2201	2095
2596	82	2202	1621
2597	82	2207	274
2598	82	2207	2095
2599	83	2218	989
2600	83	2227	1087
2601	83	2228	991
2602	83	2231	1018
2603	81	2232	1022
2604	83	2233	1020
2605	83	2234	1019
2606	83	2235	846
2607	83	2237	1021
2608	83	2239	993
2609	83	2242	998
2610	83	2243	994
2611	32	64	72
2612	32	80	82
2613	32	84	103
2614	32	86	95
2615	32	90	95
2616	32	91	84
2617	32	92	84
2618	32	94	84
2619	32	96	72
2620	32	2268	2267
2621	32	2269	2267
2622	32	2270	2267
2623	32	2271	2267
2624	32	2272	2267
2625	32	2273	2267
2626	32	2274	2267
2627	32	2275	2267
2628	32	2276	2267
2629	32	2277	2267
2630	32	2278	2267
2631	32	2279	2267
2632	32	2280	2267
2633	32	2281	2267
2634	32	2282	2267
2635	32	2283	2267
2636	32	2284	2267
2637	32	2285	2267
2638	32	2286	2267
2639	32	2287	2267
2640	32	2288	2267
2641	32	2289	2267
2642	32	2290	2267
2643	32	2291	2267
2644	32	2292	2267
2645	32	2293	2267
2646	32	2294	2267
2647	32	2295	2267
2648	32	2296	2267
2649	32	2297	2267
2650	32	2298	2267
2651	32	2299	2267
2652	32	2300	2267
2653	32	2301	2267
2654	32	2302	2267
2655	32	2303	2267
2656	32	2304	2267
2657	32	2305	2267
2658	32	2306	2267
2659	32	2307	2267
2660	32	2308	2267
2661	32	2309	2267
2662	32	2310	2267
2663	32	2311	2267
2664	32	2312	2267
2665	32	2313	2267
\.


--
-- Name: cvterm_relationship_cvterm_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cvterm_relationship_cvterm_relationship_id_seq', 2665, true);


--
-- Data for Name: cvtermpath; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cvtermpath (cvtermpath_id, type_id, subject_id, object_id, cv_id, pathdistance) FROM stdin;
\.


--
-- Name: cvtermpath_cvtermpath_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cvtermpath_cvtermpath_id_seq', 1, false);


--
-- Data for Name: cvtermprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cvtermprop (cvtermprop_id, cvterm_id, type_id, value, rank) FROM stdin;
1	32	33	1	0
2	32	34	1	0
3	32	35	1	0
4	37	33	1	0
5	37	34	1	0
6	37	35	1	0
7	38	33	1	0
8	38	34	1	0
9	38	35	1	0
10	39	33	1	0
11	39	34	1	0
12	39	35	1	0
13	40	33	1	0
14	40	34	1	0
15	40	35	1	0
16	41	35	1	0
17	42	35	1	0
18	43	35	1	0
19	43	33	1	0
20	44	35	1	0
21	44	33	1	0
22	48	35	1	0
23	50	35	1	0
24	51	35	1	0
25	52	35	1	0
26	53	35	1	0
27	59	33	1	0
28	59	35	1	0
29	60	33	1	0
30	60	35	1	0
31	64	35	1	0
32	66	35	1	0
33	67	35	1	0
34	68	35	1	0
35	72	35	1	0
36	84	85	1	0
37	90	35	1	0
38	92	85	1	0
39	94	85	1	0
40	95	35	1	0
41	103	85	1	0
42	119	30	This term is mapped to MGED. This term is now located in OBI, with the following ID OBI_0000406.	0
43	128	30	Binds TAF1, TAF2.	0
44	129	30	Binds TAF6, TAF9.	0
45	131	30	Binds TFIIB.	0
46	158	30	Please not the synonym R psi M uses the spelled out form of the greek letter.	0
47	168	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
48	175	30	FLAG - this term is should probably be a part of rather than an is_a.	0
49	176	30	A region of a molecule that binds to a restriction enzyme.	0
50	179	30	This classes of attributes was added by MA to allow the broad description of genes based on qualities of the transcript(s). A product of SO meeting 2004.	0
51	219	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology. The term 'protein' was merged with 'polypeptide'. Although 'protein' was a sequence_attribute and therefore meant to describe the quality rather than an actual feature, it was being used erroneously. It is replaced by 'peptidyl' as the polymer attribute.	0
52	235	30	May contain introns.	0
53	236	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
54	238	30	By:<protein_id>.	0
55	247	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
56	252	30	Examples are x-inactivation and immunoglobulin formation.	0
57	262	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
58	267	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
59	268	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
60	269	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology. Drosophila melanogaster PACs carry an average insert size of 80 kb. The library represents a 6-fold coverage of the genome.	0
61	270	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
62	271	30	Paper: vans GA et al. High efficiency vectors for cosmid microcloning and genomic analysis. Gene 1989; 79(1):9-20. This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
63	273	30	Birren BW et al. A human chromosome 22 fosmid resource: mapping and analysis of 96 clones. Genomics 1996.	0
64	277	30	With spliceosomal introns, the splice sites bind the spliceosomal machinery.	0
65	280	30	An enhancer may participate in an enhanceosome GO:0034206. A protein-DNA complex formed by the association of a distinct set of general and specific transcription factors with a region of enhancer DNA. The cooperative assembly of an enhanceosome confers specificity of transcriptional regulation. This comment is a place holder should we start to make cross products with GO.	0
66	282	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology. The region on a DNA molecule involved in RNA polymerase binding to initiate transcription.	0
67	289	30	Binds TBP.	0
68	293	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
69	299	30	May have either GT-AG or AT-AG 5' and 3' boundaries.	0
70	303	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
71	348	30	A processed transcript cannot contain introns.	0
72	349	30	An mRNA does not contain introns as it is a processed_transcript. The equivalent kind of primary_transcript is protein_coding_primary_transcript (SO:0000120) which may contain introns. This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
73	351	30	The definition was modified by Rama. ORF is defined by the sequence, whereas the CDS is defined according to whether a polypeptide is made. This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
74	368	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
75	389	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
76	392	30	Formerly called transcript_by_bound_factor.	0
77	393	30	Formerly called transcript_by_bound_nucleic_acid.	0
78	394	30	Formerly called transcript_by_bound_protein.	0
79	410	30	May have either GT-AC or AT-AC 5' and 3' boundaries.	0
80	420	30	Modified base:<modified_base>.	0
81	426	30	similar to:<sequence_id>	0
82	432	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
83	455	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
84	460	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
85	471	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
86	486	30	This was moved to be a child of transcript (SO:0000673) because some enzymatic RNA regions are part of primary transcripts and some are part of processed transcripts.	0
87	517	30	An evolutionarily conserved eukaryotic low molecular weight RNA capable of intermolecular hybridization with both homologous and heterologous 18S rRNA.	0
88	523	30	See GO:0005488 : binding.	0
89	524	30	See GO:0042277 : peptide binding.	0
90	531	30	Range. Old definition from before biosapiens: A region of a single polypeptide chain that folds into an independent unit and exhibits biological activity. A polypeptide chain may have multiple domains.	0
91	532	30	Old def before biosapiens:The sequence for an N-terminal domain of a secreted protein; this domain is involved in attaching nascent polypeptide to the membrane leader sequence.	0
92	533	30	This term mature peptide, merged with the biosapiens term mature protein region and took that to be the new name. Old def: The coding sequence for the mature or final peptide or protein product following post-translational modification.	0
93	554	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
94	555	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
95	556	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
96	574	30	I am using the term segment instead of gene here to avoid confusion with the region 'gene'.	0
97	616	30	This concept cam about as a direct result of the SO meeting August 2004.nThe exact nature of the relationship between transcribed_region and gene is still up for discussion. We are going with 'associated_with' for the time being.	0
98	621	30	This is the analog of the exon of a functional gene. The term was requested by Rama - SGD to allow the annotation of the parts of a pseudogene. Non-functional is defined as either its transcription or translation (or both) are prevented due to one or more mutations.	0
99	630	30	This is the analog of the transcript of a functional gene. The term was requested by Rama - SGD to allow the annotation of the parts of a pseudogene. Non-functional is defined as either its transcription or translation (or both) are prevented due to one or more mutations.	0
100	664	30	Examples are Nullo-4, Haplo-4 and triplo-4 in Drosophila.	0
101	666	30	Not found in Eukaryotic sequence.	0
102	683	30	GO:0003964 RNA-directed DNA polymerase activity.	0
103	701	30	GO:0000372.	0
104	717	30	GO:0000373.	0
105	719	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
106	733	30	Binds TFIIIC.	0
107	734	30	Binds TFIIIC.	0
108	769	30	A ncRNA is a processed_transcript, so it may not contain parts such as transcribed_spacer_regions that are removed in the act of processing. For the corresponding primary_transcripts, please see term SO:0000483 nc_primary_transcript.	0
109	776	30	GO:0000398.	0
110	809	30	Requested by Lynn Crosby, jan 2006.	0
111	813	30	A junction is a boundary between regions. A boundary has an extent of zero.	0
112	818	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology. A gene may be considered as a unit of inheritance.	0
113	820	30	This region contains a polypyridine tract and AG dinucleotide in some organisms and is UUUCAG in C. elegans.	0
114	821	30	SL RNA contains a donor site.	0
115	831	30	This term was added after a request by SGD. August 2004. Modified after SO meeting in Cambridge to not include start or stop.	0
116	832	30	Term requested by Rama from SGD.	0
117	834	30	requested by Michael on 19 Nov 2004.	0
118	835	30	Requested by Michael, 19 nov 2004.	0
119	836	30	Requested by MA nov 19 2004.	0
120	839	30	Added to bring SO inline with the embl ddbj genbank feature table. Old definition before biosapiens: The coding sequence for an N-terminal domain of a nuclear-encoded organellar protein. This domain is involved in post translational import of the protein into the organelle.	0
121	840	30	Added to comply with the feature table. A single repeat.	0
122	841	30	Requested by Stepen Grossmann Dec 2004.	0
123	842	30	Intein-mediated protein splicing occurs after mRNA has been translated into a protein.	0
124	845	30	Term added because of request by MO people.	0
125	848	30	Added for the MO people.	0
126	851	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
127	883	30	Added in response to comment from Kelly Williams from Indiana. Nov 2005.	0
128	884	30	Added in response to Kelly Williams from Indiana. Date: Nov 2005.	0
129	885	30	Added in respose to request by Simon Twigger November 14th 2005.	0
130	886	30	Genomic islands are transmissible elements characterized by large size (>10kb).	0
131	887	30	Nature Reviews Microbiology 2, 414-424 (2004); doi:10.1038 micro 884 GENOMIC ISLANDS IN PATHOGENIC AND ENVIRONMENTAL MICROORGANISMS Ulrich Dobrindt, Bianca Hochhut, Ute Hentschel & Jorg Hacker.	0
132	888	30	Genes for phenolic compound degradation in Pseudomonas putida are found on metabolic islands.	0
133	889	30	The iron-uptake ability of many pathogens are conveyed by adaptive islands. Nature Reviews Microbiology 2, 414-424 (2004); doi:10.1038 micro 884 GENOMIC ISLANDS IN PATHOGENIC AND ENVIRONMENTAL MICROORGANISMS Ulrich Dobrindt, Bianca Hochhut, Ute Hentschel & Jorg Hacker.	0
134	890	30	Nitrogen fixation in Rhizobiaceae species is encoded by symbiosis islands. Evolution of rhizobia by acquisition of a 500-kb symbiosis island that integrates into a phe-tRNA gene. John T. Sullivan and Clive W. Ronso PNAS 1998 Apr 28 95 (9) 5145-5149.	0
135	891	30	Added Jan 2006 to allow the annotation of the pseudogenic rRNA by flybase. Non-functional is defined as its transcription is prevented due to one or more mutatations.	0
136	892	30	Added Jan 2006 to allow the annotation of the pseudogenic tRNA by flybase. Non-functional is defined as its transcription is prevented due to one or more mutatations.	0
137	893	30	Requested by Lynn Crosby Jan 2006.	0
138	894	30	Added by KE Jan 2006 to capture the kinds of attributes of TEs	0
139	899	30	Added in response to Lynn Crosby. A clone insert may be composed of many cloned regions.	0
140	900	30	Added jan 2006 by KE.	0
141	910	30	Modified as requested by Lynn - FB. May 2007.	0
142	942	30	This is a manufactured term, that serves the purpose of allow the parts of a chromosome to have an is_a path to the root.	0
143	943	30	A manufactured term used to allow the parts of a gene to have an is_a path to the root.	0
144	944	30	This is a manufactured term to allow the parts of promoter to have an is_a path back to the root.	0
145	945	30	This term was added to provide a grouping term for the region parts of transcript, thus giving them an is_a path back to the root.	0
146	946	30	A manufactured term to collect together the parts of a mature transcript and give them an is_a path to the root.	0
147	947	30	This term was added to provide a grouping term for the region parts of primary_transcript, thus giving them an is_a path back to the root.	0
148	948	30	This term was added to provide a grouping term for the region parts of mRNA, thus giving them an is_a path back to the root.	0
149	949	30	A region of UTR. This term is a grouping term to allow the parts of UTR to have an is_a path to the root.	0
150	950	30	To allow transcribed_spacer_region to have a path to the root.	0
151	951	30	Added to allow the polypeptide regions to have is_a paths back to the root.	0
152	952	30	A manufactured to group the parts of repeats, to give them an is_a path back to the root.	0
153	953	30	A terms added to allow the parts of introns to have is_a paths to the root.	0
154	955	30	This is a manufactured term to allow the parts of bacterial_RNApol_promoter to have an is_a path back to the root.	0
155	956	30	This is a manufactured term to allow the parts of RNApol_II_promoter to have an is_a path back to the root.	0
156	957	30	This is a manufactured term to allow the parts of RNApol_III_promoter_type_1 to have an is_a path back to the root.	0
157	958	30	This is a manufactured term to allow the parts of RNApol_III_promoter_type_2 to have an is_a path back to the root.	0
158	959	30	This term was added to provide a grouping term for the region parts of tmRNA, thus giving them an is_a path back to the root.	0
159	966	30	A term to be used in conjunction with the paralogous_to relationship.	0
160	967	30	This term should be used in conjunction with the similarity relationships defined in SO.	0
161	1017	30	This term is the hypernym of attributes and should not be annotated to.	0
162	1029	30	The insertion and deletion of uridine (U) residues, usually within coding regions of mRNA transcripts of cryptogenes in the mitochondrial genome of kinetoplastid protozoa.	0
163	1030	30	The insertion and deletion of uridine (U) residues, usually within coding regions of mRNA transcripts of cryptogenes in the mitochondrial genome of kinetoplastid protozoa.	0
164	1036	30	The type of RNA editing found in the mitochondria of Myxomycota, characterized by the insertion of mono- and dinucleotides in RNAs relative to their mtDNA template and in addition, C to U base conversion. The most common mononucleotide insertion is cytidine, although a number of uridine mononucleotides are inserted at specific sites. Adenine and guanine have not been observed in mononucleotide insertions. Five different dinucleotide insertions have been observed, GC, GU, CU, AU and AA. Both mono- and dinucleotide insertions create open reading frames in mRNA and contribute to highly conserved structural features of rRNAs and tRNAs.	0
165	1037	30	The type of RNA editing found in the mitochondria of Myxomycota, characterized by the insertion of mono- and dinucleotides in RNAs relative to their mtDNA template and in addition, C to U base conversion. The most common mononucleotide insertion is cytidine, although a number of uridine mononucleotides are inserted at specific sites. Adenine and guanine have not been observed in mononucleotide insertions. Five different dinucleotide insertions have been observed, GC, GU, CU, AU and AA. Both mono- and dinucleotide insertions create open reading frames in mRNA and contribute to highly conserved structural features of rRNAs and tRNAs.	0
166	1038	30	The type of RNA editing found in the mitochondria of Myxomycota, characterized by the insertion of mono- and dinucleotides in RNAs relative to their mtDNA template and in addition, C to U base conversion. The most common mononucleotide insertion is cytidine, although a number of uridine mononucleotides are inserted at specific sites. Adenine and guanine have not been observed in mononucleotide insertions. Five different dinucleotide insertions have been observed, GC, GU, CU, AU and AA. Both mono- and dinucleotide insertions create open reading frames in mRNA and contribute to highly conserved structural features of rRNAs and tRNAs.	0
167	1039	30	The type of RNA editing found in the mitochondria of Myxomycota, characterized by the insertion of mono- and dinucleotides in RNAs relative to their mtDNA template and in addition, C to U base conversion. The most common mononucleotide insertion is cytidine, although a number of uridine mononucleotides are inserted at specific sites. Adenine and guanine have not been observed in mononucleotide insertions. Five different dinucleotide insertions have been observed, GC, GU, CU, AU and AA. Both mono- and dinucleotide insertions create open reading frames in mRNA and contribute to highly conserved structural features of rRNAs and tRNAs.	0
168	1040	30	The type of RNA editing found in the mitochondria of Myxomycota, characterized by the insertion of mono- and dinucleotides in RNAs relative to their mtDNA template and in addition, C to U base conversion. The most common mononucleotide insertion is cytidine, although a number of uridine mononucleotides are inserted at specific sites. Adenine and guanine have not been observed in mononucleotide insertions. Five different dinucleotide insertions have been observed, GC, GU, CU, AU and AA. Both mono- and dinucleotide insertions create open reading frames in mRNA and contribute to highly conserved structural features of rRNAs and tRNAs.	0
169	1060	30	A target region for site-specific inversion of a DNA region and which carries binding sites for a site-specific recombinase and accessory proteins as well as the site for specific cleavage by the recombinase.	0
170	1080	30	This has been obsoleted as it represents a process. replaced_by: GO:0034961.	0
171	1081	30	This has been obsoleted as it represents a process. replaced_by: GO:0070581.	0
172	1082	30	This has been obsoleted as it represents a process. replaced_by: GO:0070582	0
173	1083	30	This has been obsoleted as it represents a process. replaced_by: GO:0006260.	0
385	2021	30	Requested by Bayer Cropscience, October, 2012.	0
174	1084	30	This has been obsoleted as it represents a process. replaced_by: GO:0034961.	0
175	1088	30	Part of an edited transcript only.	0
176	1094	30	Attributes added to describe the different kinds of replicon. SO workshop, September 2006.	0
177	1095	30	Attributes added to describe the different kinds of replicon. SO workshop, September 2006.	0
178	1096	30	Attributes added to describe the different kinds of replicon. SO workshop, September 2006.	0
179	1097	30	Attributes added to describe the different kinds of replicon. SO workshop, September 2006.	0
180	1098	30	Attributes added to describe the different kinds of replicon. SO workshop, September 2006.	0
181	1099	30	Attributes added to describe the different kinds of replicon. SO workshop, September 2006.	0
182	1101	30	Requested by Karen Pilcher - Dictybase. song-Term Tracker-1574577.	0
183	1102	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
184	1103	30	Requested by Andy Schroder - Flybase Harvard, Nov 2006.	0
185	1104	30	Term added Dec 06 to comply with mapping to MGED terms. It should be used to generate consensus regions. The specific cross product terms they require are consensus_region and consensus_mRNA.	0
186	1105	30	DO not obsolete without considering MGED mapping.	0
187	1106	30	DO not obsolete without considering MGED mapping.	0
188	1107	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
189	1108	30	This term is mapped to MGED. Do not obsolete without consulting MGED ontology.	0
190	1110	30	Requested by Keith Boroevich December, 2006.	0
191	1114	30	Requested by Hadi Quesneville January 2007.	0
192	1118	30	This is not cryptic in the same sense as a cryptic gene or cryptic splice site.	0
193	1123	30	Added by request from Colin Batchelor.	0
194	1125	30	Requested by Colin Batchelor, Feb 2007.	0
195	1128	30	Added in March 2007 in after meeting with pharmgkb. Although this term is in common usage, it is better to annotate with the most specific term possible, such as synonymous codon, intron variant etc.	0
196	1129	30	Requested by Trish Whetzel.	0
197	1131	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
198	1143	30	This terms is used by MO.	0
199	1144	30	This term is used by MO.	0
200	1145	30	Ruby et al. Nature 448:83 describe a new class of miRNAs that are derived from de-branched introns.	0
201	1152	30	The definitions of the children of this term were revised Decemeber 2007 after discussion on song-devel. The resulting definitions are slightly unweildy but hopefully more logically correct.	0
202	1155	30	Definition change requested by Val, 3172757.	0
203	1159	30	A term created to allow the parts of an inversion site have an is_a path back to the root.	0
204	1161	30	Requested by Chris Smith, and others at Flybase to help annotate nested repeats.	0
205	1170	30	Merged with partially characterized change in nucleotide sequence.	0
206	1172	30	Discrete.	0
207	1173	30	Range.	0
208	1174	30	Range.	0
209	1175	30	Hormones, neuropeptides, antimicrobial peptides, are active peptides. They are typically short (<40 amino acids) in length.	0
210	1176	30	Range.	0
211	1177	30	Range.	0
212	1178	30	Range.	0
213	1179	30	Range.	0
214	1180	30	Range.	0
215	1181	30	Range.	0
216	1183	30	This could be inside an organelle within the cell.	0
217	1187	30	Biosapien term was secondary_structure.	0
218	1189	30	Range.	0
219	1191	30	Range.	0
220	1193	30	Discrete.	0
221	1194	30	Discrete.	0
222	1197	30	2 discreet & joined.	0
223	1198	30	Discrete.	0
224	1200	30	Discrete.	0
225	1201	30	Residue is part of a binding site for a metal ion.	0
226	1203	30	Residue involved in contact with calcium.	0
227	1213	30	Discrete.	0
228	1220	30	Range.	0
229	1221	30	Range.	0
230	1222	30	Range.	0
231	1223	30	Range.	0
232	1226	30	Range.	0
233	1227	30	Range.	0
234	1228	30	Range.	0
235	1237	30	Range.	0
236	1255	30	For example, was a substitution natural or mutated as part of an experiment? This term is added to merge the biosapiens term sequence_variations.	0
237	1256	30	Discrete.	0
238	1257	30	Discrete.	0
239	1258	30	Discrete.	0
240	1265	30	This consensus sequence was identified computationally using the MEME algorithm within core promoter sequences from -60 to +40, with an E value of 1.7e-183.  Tends to co-occur with Motif 7. Tends to not occur with DPE motif (SO:0000015) or motif 10.	0
241	1288	30	The definition is most of the old definition for snoRNA (SO:0000275).	0
242	1290	30	Not to be confused with BRE_motif (SO:0000016), which binds transcription factor II B.	0
243	1292	30	Do not use this for feature annotation. Use morpholino_oligo (SO:0000034) instead.	0
244	1293	30	Do not use this term for feature annotation. Use PNA_oligo (SO:0001011) instead.	0
245	1294	30	Do not use this for feature annotation. Use enzymatic_RNA (SO:0000372) instead.	0
246	1295	30	Do not use this for feature annotation. Use ribozyme (SO:0000374) instead.	0
247	1296	30	Has RNA pseudouridylation guide activity (GO:0030558).	0
248	1297	30	Do not use this term for feature annotation. Use LNA_oligo (SO:0001189) instead.	0
249	1299	30	Do not use this term for feature annotation. Use TNA_oligo (SO:0001191) instead.	0
250	1301	30	Do not use this term for feature annotation. Use GNA_oligo (SO:0001192) instead.	0
251	1303	30	Do not use this term for feature annotation. Use R_GNA_oligo (SO:0001195) instead.	0
252	1305	30	Do not use this term for feature annotation. Use S_GNA_oligo (SO:0001197) instead.	0
253	1322	30	GO:0000374.	0
254	1323	30	An exon either containing but not starting with a start codon or containing but not ending with a stop codon will be partially coding and partially non coding.	0
255	1324	30	An exon containing either a start or stop codon will be partially coding and partially non coding.	0
256	1329	30	RNA interference is GO:0016246.	0
257	1330	30	Histone modification is GO:0016570.	0
258	1331	30	Histone methylation is GO:0016571.	0
259	1332	30	Histone deacetylation is GO:0016573.	0
260	1338	30	The free molecule is CHEBI:17802.	0
261	1339	30	The free molecule is CHEBI:17596.	0
262	1340	30	The free molecule is CHEBI:2274.	0
263	1341	30	The free molecule is CHEBI:30832.	0
264	1346	30	Probably in the future this will cross reference to Chebi.	0
265	1366	30	Nature. 1986 Oct 16-22;323(6089):640-3.	0
266	1369	30	This feature was requested by Nicole, tracker id 1911479. It is required to gather evidence together for annotation. An example would be overlapping ESTs that support an mRNA.	0
267	1526	30	Term requested by the MODencode group.	0
268	1530	30	MM Young, K Kirshenbaum, KA Dill & S Highsmith. Predicting conformational switches in proteins. Protein Science, 1999, 8, 1752-64. K. Kirshenbaum, M.M. Young and S. Highsmith. Predicting Allosteric Switches in Myosins. Protein Science 8(9):1806-1815. 1999.	0
269	1532	30	An example is a read produced by Roche 454 technology.	0
270	1533	30	An example of this kind of read is one produced by ABI SOLiD.	0
271	1534	30	An example is a read produced by Illumina technology.	0
272	1536	30	From tracker [ 2372385 ] expressed_sequence_assembly.	0
273	1539	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
274	1541	30	Requested by the Trypanosome community.	0
275	1542	30	A place holder for a cross product with chebi.	0
276	1543	30	A place holder for a cross product with chebi.	0
277	1544	30	A place holder for a cross product with chebi.	0
278	1545	30	A place holder for a cross product with chebi.	0
279	1546	30	A place holder for a cross product with chebi.	0
280	1547	30	A place holder for a cross product with chebi.	0
281	1548	30	A place holder for a cross product with chebi.	0
282	1549	30	A place holder for a cross product with chebi.	0
283	1550	30	A place holder for a cross product with chebi.	0
284	1551	30	A place holder for a cross product with chebi.	0
285	1552	30	A place holder for a cross product with chebi.	0
286	1553	30	A place holder for a cross product with chebi.	0
287	1554	30	A place holder for a cross product with chebi.	0
288	1555	30	A place holder for a cross product with chebi.	0
289	1556	30	A place holder for a cross product with chebi.	0
290	1557	30	A place holder for a cross product with chebi.	0
291	1558	30	A place holder for a cross product with chebi.	0
292	1559	30	A place holder for a cross product with chebi.	0
293	1560	30	A place holder for a cross product with chebi.	0
294	1561	30	A place holder for a cross product with chebi.	0
295	1562	30	A place holder for a cross product with chebi.	0
296	1563	30	A place holder for a cross product with chebi.	0
297	1564	30	This term was requested by Jeff Bowes, using the tracker, ID = 2594157.	0
298	1565	30	This term was requested by Jeff Bowes, using the tracker, ID = 2594157.	0
299	1567	30	See tracker ID 2060908.	0
300	1569	30	See tracker ID: 2138359.	0
301	1591	30	X element combinatorial repeats contain Tbf1p binding sites,nand possible functions include a role in telomerase-independent telomerenmaintenance via recombination or as a barrier against transcriptionalnsilencing. These are usually present as a combination of one or more ofnseveral types of smaller elements (designated A, B, C, or D). This term was requested 2009-10-16 by Michel Dumontier, tracker id 2880747.	0
302	1592	30	This term was requested 2009-10-16 by Michel Dumontier, tracker id 2880747.	0
303	1600	30	This term was requested 2009-10-16 by Michel Dumontier, tracker id 2880699.	0
304	1601	30	This term was requested 2009-10-16 by Michel Dumontier, tracker id 2880699.	0
305	1602	30	This term was requested 2009-10-16 by Michel Dumontier, tracker id 2880699.	0
306	1603	30	The repeats are maintained by telomerase and there is generally 300 (+/-) 75 bp of TG(1-3) at a given end. Telomeric repeats function in completing chromosome replication and protecting the ends from degradation and end-to-end fusions. This term was requested 2009-10-16 by Michel Dumontier, tracker id 2880739.	0
307	1604	30	Possible functions include roles in chromosomal segregation,nmaintenance of chromosome stability, recombinational sequestering, or as anbarrier to transcriptional silencing. This term was requested 2009-10-16 by Michel Dumontier, tracker id 2880747.	0
308	1606	30	This terms and children were added to SO in response to tracker request by Patrick Chain. The paper Genome Project Standards in a New Era of Sequencing. Science October 9th 2009, addresses these terms.	0
309	1608	30	Term requested via tracker ID: 2910829.	0
310	1609	30	Requested by tracker ID: 2902685.	0
311	1610	30	Ensembl and Vega also use this term name. Requested by Howard Deen of MGI.	0
312	1673	30	EBI term: Regulatory region variations - In regulatory region annotated by Ensembl.	0
313	1684	30	EBI term: Complex InDel - Insertion or deletion that spans an exon/intron border or a coding sequence/UTR border.	0
314	1685	30	EBI term: Stop lost - In coding sequence, resulting in the loss of a stop codon.	0
315	1689	30	EBI term: Non-synonymous SNPs. SNPs that are located in the coding sequence and result in an amino acid change in the encoded peptide sequence. A change that causes a non_synonymous_codon can be more than 3 bases - for example 4 base substitution.	0
316	1692	30	EBI term: Stop gained - In coding sequence, resulting in the gain of a stop codon (i.e. leading to a shortened peptide sequence).	0
317	1693	30	EBI term:Frameshift variations - In coding sequence, resulting in a frameshift.	0
318	1694	30	The terminal codon may be the terminator, or in an incomplete transcript the last available codon.	0
319	1723	30	Within non-coding gene - Located within a gene that does not code for a protein.	0
320	1724	30	EBI term: Within mature miRNA - Located within a microRNA.	0
321	1727	30	EBI term: 5prime UTR variations - In 5prime UTR (untranslated region).	0
322	1728	30	EBI term 3prime UTR variations - In 3prime UTR.	0
323	1729	30	EBI term: Partial codon - Located within the final, incomplete codon of a transcript with a shortened coding sequence where the end is unknown.	0
324	1730	30	EBI term: Intronic variations - In intron.	0
325	1731	30	EBI term Intergenic variations - More than 5 kb either upstream or downstream of a transcript.	0
326	1732	30	EBI term - essential splice site - In the first 2 or the last 2 base pairs of an intron. The 5th base is on the donor (5') side of the intron. Updated to b in line with Cancer Genome Project at the Sanger.	0
327	1733	30	EBI term: splice site - 1-3 bps into an exon or 3-8 bps into an intron.	0
328	1734	30	Different groups annotate up and downstream to different lengths. The subtypes are specific and are backed up with cross references.	0
329	1735	30	Different groups annotate up and downstream to different lengths. The subtypes are specific and are backed up with cross references.	0
330	1736	30	EBI term Downstream variations - Within 5 kb downstream of the 3prime end of a transcript.	0
331	1738	30	EBI term Upstream variations - Within 5 kb upstream of the 5prime end of a transcript.	0
332	1745	30	Mathematically defined repeat regions are determined without regard to the biological origin of the repetitive region. The repeat units of a MDR are the overlapping oligomers of size k that were used to for the query. Tools that can annotate mathematically defined repeats include Tallymer (Kurtz et al 2008, BMC Genomics: 517) and RePS (Wang et al, Genome Res 12(5): 824-831.).	0
333	1756	30	See GO:0000166 : nucleotide binding.	0
334	1757	30	See GO:0046872 : metal ion binding.	0
335	1759	30	Tracker ID: 3052459.	0
336	1776	30	The A box can be found in the promoters of type 1 and type 2 (pol III) so sub-typing here allows the part of relationship of the subtypes to remain true.	0
337	1777	30	The A box can be found in the promoters of type 1 and type 2 (pol III) so sub-typing here allows the part of relationship of the subtypes to remain true.	0
338	1816	30	Term requested via tracker (2981725) by Alan Ruttenberg, April 2010. It has been described as both an enhancer and a promoter, so the parent is the more general term.	0
339	1840	30	Requested by flybase, Dec 2010.	0
340	1841	30	Requested by flybase, Dec 2010.	0
341	1848	30	Requested by John Calley 3125900.	0
342	1860	30	This is different from a non processed pseudogene because the gene was not duplicated. An example is the L-gulono-lactone oxidase pseudogene in primates.	0
343	1902	30	Term requested by M. Dumontier, June 1 2011.	0
344	1903	30	Term requested by M. Dumontier, June 1 2011.	0
345	1904	30	Note: PMID:18794354 describes the DDB box, and has lots of alignments, but doesn't actually come out with a consensus sequence.	0
346	1919	30	EBI term: Synonymous SNPs - In coding sequence, not resulting in an amino acid change (i.e. silent mutation).nThis term is sometimes used synonomously with the more general term 'silent mutation', although a silent mutation may occur in non coding sequence. The best practice is to annotate to the most specific term.	0
347	1927	30	Requested by Bayer Cropscience June, 2011.	0
348	1929	30	Requested by Bayer Cropscience June, 2011.	0
349	1930	30	Requested by Bayer Cropscience June, 2011.	0
350	1937	30	Requested by the ebi.	0
351	1938	30	Requested by the NCBI.	0
352	1941	30	This terms is used by ensembl and vega.	0
353	1951	30	The synonym IDP (GATA) is found in an annotation but un-traced as far as literature goes.	0
354	1952	30	Note that this should not be confused with the M-box that has consensus sequence CATGTG and is bound by bHLH transcription factors such as MITF.	0
355	1962	30	paper:PMID:16043634.	0
356	1966	30	Requested by Bayer Cropscience December, 2011.	0
357	1967	30	Requested by Bayer Cropscience December, 2011.	0
358	1968	30	Requested by Bayer Cropscience December, 2011.	0
359	1969	30	Requested by Bayer Cropscience December, 2011.	0
360	1972	30	NCBI definition: An orphan rearrangement between chromosomal location observed in isolation.	0
361	1975	30	comment: Requested by Bayer Cropscience January, 2012.	0
362	1976	30	comment: Requested by Bayer Cropscience January, 2012.	0
363	1978	30	Created in conjunction with the EBI.	0
364	1979	30	Created in conjunction with the EBI.	0
365	1980	30	Created in conjunction with the EBI.	0
366	1981	30	Created in conjunction with the EBI.	0
367	1982	30	Created in conjunction with the EBI.	0
368	1983	30	Created in conjunction with the EBI.	0
369	1984	30	Created in conjunction with the EBI.	0
370	1985	30	Created in conjunction with the EBI.	0
371	1986	30	Created in conjunction with the EBI.	0
372	1987	30	Created in conjunction with the EBI.	0
373	1988	30	Created in conjunction with the EBI.	0
374	1989	30	Created in conjunction with the EBI.	0
375	1990	30	Created in conjunction with the EBI.	0
376	1991	30	Created in conjunction with the EBI.	0
377	1992	30	Created in conjunction with the EBI.	0
378	1993	30	Created in conjunction with the EBI.	0
379	1994	30	Created in conjunction with the EBI.	0
380	1995	30	Created in conjunction with the EBI.	0
381	1998	30	For the S. pombe project - requested by Val Wood.	0
382	1999	30	For the S. pombe project - requested by Val Wood.	0
383	2013	30	Requested by Kevin Clancy - invitrogen -May 2012.	0
384	2014	30	Requested by Midori - June 2012.	0
386	2023	30	Telomeric transcription has been documented in mammals, birds,  fish, plants and  yeast. Requested by Antonia Lock, October 2012.	0
387	2024	30	Telomeric transcription has been documented in mammals, birds,  fish, plants and  yeast. Requested by Antonia Lock, October 2012.	0
388	2025	30	Telomeric transcription has been documented in mammals, birds,  fish, plants and  yeast. Requested by Antonia Lock, October 2012.	0
389	2026	30	Telomeric transcription has been documented in mammals, birds,  fish, plants and  yeast. Requested by Antonia Lock, October 2012.	0
390	2028	30	This term is used by Complete Genomics in the structural variant analysis files.	0
391	2031	30	Has RNA 2'-O-ribose methylation guide activity (GO:0030561).	0
392	2038	30	This would include, for example, a cluster of genes each encoding the major ribosomal RNAs and a cluster of histone gene subarrays.	0
393	2039	30	This would include, for example, a cluster of genes encoding different histones.	0
394	2040	30	This would include, for example, the mating type gene cassettes of S. cerevisiae. Gene cassettes usually exist as linear sequences as part of a larger DNA molecule, such as a chromosome or plasmid.	0
395	2041	30	This would include, for example, the arrays of non-functional VSG genes of Trypanosomes.	0
396	2046	30	Range.	0
397	2047	30	Range.	0
398	2056	30	Range.	0
399	2058	30	Range.	0
400	2093	30	Indels can have a different number of bases than the corresponding reference sequence.	0
401	2108	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
402	2109	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect. Also as there is not change, it is not a good ontological term.	0
403	2110	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
404	2111	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
405	2112	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
406	2113	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
407	2114	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
408	2115	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
409	2116	30	The exact rules need to be stated, a common set of rules can be derived from e.g. BLOSUM62 amino acid distance matrix.	0
410	2117	30	The exact rules need to be stated, a common set of rules can be derived from e.g. BLOSUM62 amino acid distance matrix.	0
411	2118	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
412	2119	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
413	2120	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
414	2122	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
415	2123	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
416	2124	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
417	2125	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
418	2126	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
419	2127	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
420	2128	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
421	2129	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
422	2130	30	A cryptic splice site is only used when the natural splice site has been disrupted by a sequence alteration.	0
423	2131	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
424	2132	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
425	2133	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
426	2134	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
427	2135	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
428	2136	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
429	2137	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
430	2138	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
431	2139	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
432	2140	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
433	2141	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
434	2142	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
435	2143	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
436	2144	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect. Also, as there is no change, this is not a good ontological term.	0
437	2145	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
438	2146	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
439	2147	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
440	2148	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
441	2149	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
442	2150	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
443	2151	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
444	2152	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
445	2153	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
446	2154	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
447	2155	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
448	2156	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
449	2157	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
450	2158	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
451	2159	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
452	2160	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
453	2162	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
454	2164	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
455	2165	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect. Also as there is no effect, it is not a good term.	0
456	2166	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
457	2167	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
458	2168	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
459	2169	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
460	2170	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
461	2171	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
462	2172	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
463	2173	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
464	2175	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
465	2176	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
466	2177	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
467	2178	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
468	2179	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.nUpdated after discussion with Peter Taschner - Feb 09.	0
469	2180	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
470	2203	30	Flag - unknown in the definition.	0
471	2204	30	FLAG - term describes an unknown.	0
472	2205	30	FLAG - definition describes an unknown.	0
473	2210	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
474	2211	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
475	2214	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
476	2215	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
477	2216	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
478	2217	30	OBSOLETE: This term was deleted as it conflated more than one term. The alteration is separate from the effect.	0
479	2249	30	Intron characteristic of tRNA genes; splices by an endonuclease-ligase mediated mechanism.	0
480	2250	30	Could be a cross product with Gene ontology, GO:0006388.	0
481	2264	30	This term does not include the stop codons that are redefined. An example would be a stop codon that partially overlapped a frame shifting site would be an example stimulatory signal.	0
482	2266	30	Requested by tracker 2021594, July 2008, by Alex.	0
\.


--
-- Name: cvtermprop_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cvtermprop_cvtermprop_id_seq', 482, true);


--
-- Data for Name: cvtermsynonym; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cvtermsynonym (cvtermsynonym_id, cvterm_id, synonym, type_id) FROM stdin;
1	32	is_subtype_of	36
2	50	derived_from	36
3	114	sequence	36
4	115	sequence secondary structure	36
5	116	G quartet	36
6	116	G tetrad	36
7	116	G-quadruplex	36
8	116	G-quartet	36
9	116	G-tetrad	36
10	116	G_quadruplex	36
11	116	guanine tetrad	36
12	117	interior coding exon	36
13	118	satellite DNA	36
14	119	amplicon	120
15	119	PCR product	36
16	121	mate pair	36
17	121	read-pair	36
18	124	protein-coding	36
19	125	non protein-coding	36
20	126	scRNA primary transcript	36
21	126	scRNA transcript	36
22	126	small cytoplasmic RNA	120
23	126	small cytoplasmic RNA transcript	36
24	126	small_cytoplasmic_RNA	120
25	127	small cytoplasmic RNA	36
26	128	DMp2	120
27	128	initiator	36
28	128	initiator motif	36
29	128	INR motif	36
30	129	CRWMGCGWKCGCTTS	130
31	129	downstream core promoter element	36
32	129	DPE motif	36
33	131	B-recognition element	36
34	131	BRE motif	36
35	131	BREu	120
36	131	BREu motif	36
37	131	TFIIB recognition element	120
38	131	transcription factor B-recognition element	36
39	132	proximal sequence element	36
40	132	PSE motif	36
41	133	linkage group	36
42	134	RNA internal loop	36
43	135	asymmetric RNA internal loop	36
44	136	A minor RNA motif	36
45	137	K turn RNA motif	36
46	137	K-turn	36
47	137	kink turn	36
48	137	kink-turn motif	36
49	138	sarcin like RNA motif	36
50	138	sarcin/ricin domain	36
51	138	sarcin/ricin loop	36
52	138	sarcin/ricin RNA domain	36
53	139	A-minor RNA motif	36
54	140	RNA junction loop	36
55	141	hook turn	120
56	141	hook-turn motif	36
57	141	RNA hook turn	36
58	142	base pair	36
59	143	canonical base pair	36
60	143	Watson Crick base pair	36
61	143	Watson-Crick base pair	120
62	143	Watson-Crick pair	36
63	143	WC base pair	36
64	144	sugar edge base pair	36
65	146	DNA aptamer	36
66	147	RNA aptamer	36
67	148	morphant	149
68	148	morpholino	36
69	148	morpholino oligo	36
70	150	riboswitch RNA	36
71	151	MAR	36
72	151	matrix association region	36
73	151	matrix attachment region	36
74	151	matrix attachment site	36
75	151	nuclear matrix association region	36
76	151	nuclear matrix attachment site	36
77	151	S/MAR	36
78	151	S/MAR element	120
79	151	scaffold attachment site	36
80	151	scaffold matrix attachment region	36
81	151	SMAR	36
82	152	LCR	36
83	152	locus control element	120
84	152	locus control region	36
85	154	match part	36
86	155	genomic clone	36
87	156	sequence operation	36
88	157	pseudogene attribute	36
89	158	processed pseudogene	36
90	158	pseudogene by reverse transcription	120
91	158	R psi G	120
92	158	retropseudogene	36
93	159	pseudogene by unequal crossing over	36
94	167	assortment-derived_deficiency	120
95	168	mutation affecting regulatory region	120
96	168	sequence variant affecting regulatory region	36
97	172	operator segment	36
98	173	assortment-derived_aneuploid	120
99	174	nuclease binding site	36
100	175	compound chromosome arm	36
101	176	restriction endonuclease binding site	36
102	176	restriction enzyme binding site	36
103	177	deficient intrachromosomal transposition	36
104	178	deficient interchromosomal transposition	36
105	180	free chromosome arm	36
106	182	gene to gene feature	36
107	184	inside intron	36
108	185	inside intron antiparallel	36
109	186	inside intron parallel	36
110	188	five prime-three prime overlap	36
111	189	five prime-five prime overlap	36
112	190	three prime-three prime overlap	36
113	191	5' 3' overlap	36
114	191	three prime five prime overlap	36
115	193	polycistronic transcript	36
116	194	dicistronic transcript	36
117	195	operon member	36
118	196	gene array member	36
119	198	macronuclear sequence	36
120	199	micronuclear sequence	36
121	202	nuclear gene	36
122	203	mitochondrial gene	36
123	203	mt gene	36
124	204	kinetoplast gene	36
125	205	plastid gene	36
126	206	apicoplast gene	36
127	207	chloroplast gene	36
128	207	ct gene	36
129	208	chromoplast gene	36
130	209	cyanelle gene	36
131	210	leucoplast gene	36
132	211	proplastid gene	36
133	212	nucleomorph gene	36
134	213	plasmid gene	36
135	214	proviral gene	36
136	215	endogenous retroviral gene	36
137	216	transposable element	36
138	216	transposon	36
139	217	expressed sequence match	36
140	218	clone insert end	36
141	219	protein	36
142	220	chromosome arm	36
143	222	sequencing primer	36
144	223	frameshifted mRNA	36
145	223	mRNA with frameshift	36
146	224	mutation	120
147	225	located sequence feature	120
148	225	located_sequence_feature	36
149	225	sequence feature	36
150	226	transposable element gene	36
151	227	DNA primer	36
152	227	primer oligonucleotide	36
153	227	primer polynucleotide	36
154	227	primer sequence	36
155	228	proviral region	36
156	228	proviral sequence	120
157	229	methylated C	36
158	229	methylated cytosine	36
159	229	methylated cytosine base	36
160	229	methylated cytosine residue	36
161	229	methylated_C	36
162	233	transcript with translational frameshift	36
163	235	pre mRNA	120
164	235	protein coding primary transcript	36
165	236	DNA forward primer	36
166	236	forward DNA primer	36
167	236	forward primer	36
168	236	forward primer oligo	36
169	236	forward primer oligonucleotide	36
170	236	forward primer polynucleotide	36
171	236	forward primer sequence	36
172	237	RNA sequence secondary structure	36
173	238	transcriptionally regulated	36
174	239	transcriptionally constitutive	36
175	240	transcriptionally induced	36
176	241	transcriptionally repressed	36
177	242	silenced gene	36
178	243	gene silenced by DNA modification	36
179	244	gene silenced by DNA methylation	36
180	244	methylation-silenced gene	36
181	245	post translationally regulated	36
182	245	post-translationally regulated	36
183	246	translationally regulated	36
184	247	DNA reverse primer	36
185	247	reverse DNA primer	36
186	247	reverse primer	36
187	247	reverse primer oligo	36
188	247	reverse primer oligonucleotide	36
189	247	reverse primer sequence	36
190	248	epigenetically modified	36
191	249	genomically imprinted	36
192	249	imprinted	149
193	250	maternally imprinted	36
194	251	paternally imprinted	36
195	252	allelically excluded	36
196	253	gene rearranged at DNA level	36
197	254	ribosome entry site	36
198	255	attenuator sequence	36
199	256	terminator sequence	36
200	257	DNA sequence secondary structure	36
201	258	assembly component	36
202	260	recoded codon	36
203	263	scaffold	120
204	267	yeast artificial chromosome	36
205	268	bacterial artificial chromosome	36
206	269	P1	36
207	269	P1 artificial chromosome	36
208	270	plasmid sequence	36
209	271	cosmid vector	36
210	272	phagemid vector	120
211	273	fosmid vector	120
212	274	deleted_sequence	36
213	274	nucleotide deletion	36
214	274	nucleotide_deletion	36
215	276	methylated A	36
216	276	methylated adenine	36
217	276	methylated adenine base	36
218	276	methylated adenine residue	36
219	276	methylated_A	36
220	277	splice site	36
221	278	5' splice site	36
222	278	donor	120
223	278	donor splice site	36
224	278	five prime splice site	36
225	278	splice donor site	36
226	279	3' splice site	120
227	279	acceptor	120
228	279	acceptor splice site	36
229	279	splice acceptor site	36
230	279	three prime splice site	36
231	281	enhancer bound by factor	36
232	282	promoter sequence	36
233	284	pol I promoter	36
234	284	polymerase I promoter	36
235	284	RNA polymerase A promoter	36
236	284	RNApol I promoter	36
237	285	pol II promoter	120
238	285	polymerase II promoter	36
239	285	RNA polymerase B promoter	36
240	285	RNApol II promoter	36
241	286	pol III promoter	36
242	286	polymerase III promoter	36
243	286	RNA polymerase C promoter	36
244	286	RNApol III promoter	36
245	287	CAAT box	36
246	287	CAAT signal	36
247	287	CAAT-box	36
248	288	GC rich promoter region	36
249	288	GC-rich region	36
250	289	Goldstein-Hogness box	36
251	289	TATA box	36
252	290	-10 signal	36
253	290	minus 10 signal	36
254	290	Pribnow box	36
255	290	Pribnow Schaller box	36
256	290	Pribnow-Schaller box	36
257	291	-35 signal	36
258	291	minus 35 signal	36
259	292	cross genome match	36
260	294	clone insert start	36
261	295	class I	120
262	295	class I transposon	36
263	295	retrotransposon element	36
264	296	translated nucleotide match	36
265	297	class II	120
266	297	class II transposon	36
267	297	DNA transposon	36
268	298	non transcribed region	36
269	298	non-transcribed sequence	36
270	298	nontranscribed region	36
271	298	nontranscribed sequence	36
272	299	U2 intron	36
273	300	precursor RNA	36
274	300	primary transcript	36
275	301	long terminal repeat retrotransposon	36
276	301	LTR retrotransposon	36
277	304	non LTR retrotransposon	36
278	305	5' intron	36
279	305	5' intron sequence	36
280	305	five prime intron	36
281	306	interior intron	36
282	307	3' intron	36
283	307	3' intron sequence	120
284	307	three prime intron	36
285	308	restriction fragment length polymorphism	36
286	308	RFLP	36
287	308	RFLP fragment	36
288	309	LINE	36
289	309	LINE element	36
290	309	Long interspersed element	36
291	309	Long interspersed nuclear element	36
292	310	coding exon	36
293	311	five prime exon coding region	36
294	312	three prime exon coding region	36
295	313	noncoding exon	36
296	314	transchr	120
297	314	translocated sequence	36
298	315	5' coding exon	36
299	315	five prime coding exon	36
300	316	interior exon	36
301	317	3' coding exon	120
302	317	three prime coding exon	36
303	318	untranslated region	36
304	319	5' UTR	36
305	319	five prime UTR	36
306	319	five_prime_untranslated_region	36
307	320	three prime untranslated region	36
308	320	three prime UTR	36
309	321	Short interspersed element	36
310	321	Short interspersed nuclear element	36
311	321	SINE element	36
312	322	simple sequence length polymorphism	120
313	322	simple sequence length variation	36
314	322	SSLP	120
315	323	terminal inverted repeat element	36
316	323	TIR element	36
317	324	ribosomal RNA primary transcript	36
318	324	rRNA primary transcript	36
319	325	tRNA primary transcript	36
320	326	alanine tRNA primary transcript	36
321	327	arginine tRNA primary transcript	36
322	328	asparagine tRNA primary transcript	36
323	329	aspartic acid tRNA primary transcript	36
324	330	cysteine tRNA primary transcript	36
325	331	glutamic acid tRNA primary transcript	36
326	332	glutamine tRNA primary transcript	36
327	333	glycine tRNA primary transcript	36
328	334	histidine tRNA primary transcript	36
329	335	isoleucine tRNA primary transcript	36
330	336	leucine tRNA primary transcript	36
331	337	lysine tRNA primary transcript	36
332	338	methionine tRNA primary transcript	36
333	339	phenylalanine tRNA primary transcript	36
334	340	proline tRNA primary transcript	36
335	341	serine tRNA primary transcript	36
336	342	threonine tRNA primary transcript	36
337	343	tryptophan tRNA primary transcript	36
338	344	tyrosine tRNA primary transcript	36
339	345	valine tRNA primary transcript	36
340	346	snRNA primary transcript	36
341	347	snoRNA primary transcript	36
342	348	mature transcript	36
343	349	messenger RNA	36
344	350	TF binding site	36
345	350	transcription factor binding site	36
346	351	open reading frame	36
347	352	transcript attribute	36
348	353	foldback element	36
349	353	long inverted repeat element	120
350	353	LVR element	120
351	354	flanking region	36
352	355	chromosome variation	36
353	356	internal UTR	36
354	357	untranslated region polycistronic mRNA	36
355	358	internal ribosomal entry sequence	36
356	358	internal ribosomal entry site	36
357	358	internal ribosome entry sequence	120
358	358	internal ribosome entry site	36
359	358	IRES	36
360	359	4-cutter_restriction_site	120
361	359	four-cutter_restriction_sit	120
362	363	sequence length variation	36
363	364	6-cutter_restriction_site	120
364	364	six-cutter_restriction_site	120
365	365	modified RNA base feature	36
366	366	8-cutter_restriction_site	120
367	366	eight-cutter_restriction_site	120
368	367	ribosomal ribonucleic acid	36
369	367	ribosomal RNA	36
370	368	transfer ribonucleic acid	120
371	368	transfer RNA	120
372	369	alanyl tRNA	36
373	369	alanyl-transfer ribonucleic acid	36
374	369	alanyl-transfer RNA	36
375	370	rRNA small subunit primary transcript	36
376	371	asparaginyl tRNA	36
377	371	asparaginyl-transfer ribonucleic acid	36
378	371	asparaginyl-transfer RNA	36
379	372	aspartyl tRNA	36
380	372	aspartyl-transfer ribonucleic acid	36
381	372	aspartyl-transfer RNA	36
382	373	cysteinyl tRNA	36
383	373	cysteinyl-transfer ribonucleic acid	36
384	373	cysteinyl-transfer RNA	36
385	374	glutaminyl tRNA	36
386	374	glutaminyl-transfer ribonucleic acid	36
387	374	glutaminyl-transfer RNA	36
388	375	glutamyl tRNA	36
389	375	glutamyl-transfer ribonucleic acid	36
390	375	glutamyl-transfer RNA	120
391	376	glycyl tRNA	36
392	376	glycyl-transfer ribonucleic acid	120
393	376	glycyl-transfer RNA	120
394	377	histidyl tRNA	36
395	377	histidyl-transfer ribonucleic acid	36
396	377	histidyl-transfer RNA	36
397	378	isoleucyl tRNA	36
398	378	isoleucyl-transfer ribonucleic acid	36
399	378	isoleucyl-transfer RNA	36
400	379	leucyl tRNA	36
401	379	leucyl-transfer ribonucleic acid	36
402	379	leucyl-transfer RNA	36
403	380	lysyl tRNA	36
404	380	lysyl-transfer ribonucleic acid	36
405	380	lysyl-transfer RNA	36
406	381	methionyl tRNA	36
407	381	methionyl-transfer ribonucleic acid	36
408	381	methionyl-transfer RNA	36
409	382	phenylalanyl tRNA	36
410	382	phenylalanyl-transfer ribonucleic acid	36
411	382	phenylalanyl-transfer RNA	36
412	383	prolyl tRNA	36
413	383	prolyl-transfer ribonucleic acid	36
414	383	prolyl-transfer RNA	36
415	384	seryl tRNA	36
416	384	seryl-transfer ribonucleic acid	120
417	384	seryl-transfer RNA	36
418	385	threonyl tRNA	36
419	385	threonyl-transfer ribonucleic acid	36
420	385	threonyl-transfer RNA	120
421	386	tryptophanyl tRNA	36
422	386	tryptophanyl-transfer ribonucleic acid	36
423	386	tryptophanyl-transfer RNA	36
424	387	tyrosyl tRNA	36
425	387	tyrosyl-transfer ribonucleic acid	36
426	387	tyrosyl-transfer RNA	120
427	388	valyl tRNA	36
428	388	valyl-transfer ribonucleic acid	36
429	388	valyl-transfer RNA	120
430	389	small nuclear RNA	36
431	390	small nucleolar RNA	36
432	391	micro RNA	36
433	391	microRNA	36
434	392	bound by factor	36
435	393	transcript bound by nucleic acid	36
436	394	transcript bound by protein	36
437	395	engineered gene	36
438	396	engineered foreign gene	36
439	397	mRNA with minus 1 frameshift	36
440	398	engineered foreign transposable element gene	36
441	400	foreign gene	36
442	401	direct terminal repeat	120
443	401	long terminal repeat	36
444	401	LTR	36
445	402	fusion gene	36
446	403	engineered fusion gene	36
447	404	microsatellite locus	36
448	404	microsatellite marker	36
449	404	VNTR	36
450	405	dinucleotide repeat microsatellite	36
451	405	dinucleotide repeat microsatellite feature	36
452	405	dinucleotide repeat microsatellite locus	36
453	405	dinucleotide repeat microsatellite marker	36
454	406	dinucleotide repeat microsatellite marker	120
455	406	rinucleotide repeat microsatellite	36
456	406	trinucleotide repeat microsatellite feature	36
457	406	trinucleotide repeat microsatellite locus	36
458	408	engineered foreign repetitive element	36
459	409	inverted repeat	36
460	409	inverted repeat sequence	36
461	410	U12 intron	36
462	410	U12-dependent intron	36
463	411	ori	36
464	411	origin of replication	36
465	412	D-loop	36
466	412	displacement loop	120
467	413	recombination feature	36
468	414	specific recombination site	36
469	415	recombination feature of rearranged gene	36
470	416	vertebrate immune system gene recombination feature	36
471	417	J gene recombination feature	36
472	417	J-RS	36
473	420	modified base site	36
474	421	methylated base feature	36
475	422	CG island	36
476	422	CpG island	36
477	427	experimentally determined	36
478	428	RNA_hairpin_loop	36
479	428	stem loop	36
480	428	stem-loop	36
481	429	direct repeat	36
482	430	transcription start site	36
483	431	coding sequence	36
484	432	cDNA clone	36
485	433	initiation codon	36
486	433	start codon	36
487	434	stop codon	36
488	435	intronic splice enhancer	36
489	436	mRNA with plus 1 frameshift	36
490	437	nuclease hypersensitive site	36
491	438	coding start	36
492	438	translation initiation site	36
493	438	translation start	120
494	440	35S rRNA primary transcript	36
495	440	rRNA large subunit primary transcript	36
496	441	SAGE tag	36
497	442	coding end	36
498	442	translation termination site	36
499	442	translation_end	36
500	443	microarray oligo	36
501	443	microarray oligonucleotide	36
502	444	mRNA with plus 2 frameshift	36
503	445	conserved region	36
504	446	sequence tag site	36
505	447	coding conserved region	36
506	448	exon junction	36
507	449	nc conserved region	36
508	449	noncoding conserved region	36
509	450	mRNA with minus 2 frameshift	36
510	452	RNAi reagent	36
511	453	miniature inverted repeat transposable element	36
512	454	recombination hotspot	36
513	456	chromosome band	36
514	456	cytoband	36
515	456	cytological band	36
516	457	site specific recombination target region	36
517	459	splice enhancer	36
518	460	expressed sequence tag	36
519	461	Cre-recombination target region	120
520	461	loxP site	36
521	462	nucleotide match	36
522	463	nucleic acid	36
523	464	protein match	36
524	465	FLP recombination target region	36
525	465	FRT site	36
526	466	synthetic sequence	36
527	468	sequence assembly	36
528	469	group 1 intron homing endonuclease target region	36
529	470	haplotype block	36
530	475	FRT flanked	36
531	476	invalidated by chimeric cDNA	36
532	477	floxed gene	36
533	478	transposable element flanking region	36
534	480	insertion site	36
535	481	attI site	36
536	482	transposable element insertion site	36
537	484	small regulatory ncRNA	36
538	485	conjugative transposon	36
539	486	enzymatic RNA	36
540	487	recombinationally inverted gene	36
541	489	5.8S LSU rRNA	36
542	489	5.8S ribosomal RNA	36
543	489	5.8S rRNA	36
544	489	rRNA 5 8S	36
545	490	6S RNA	36
546	490	RNA 6S	36
547	491	CsrB RsmB RNA	36
548	491	CsrB-RsmB RNA	36
549	492	DsrA RNA	36
550	493	GcvB RNA	36
551	494	hammerhead ribozyme	36
552	495	group IIA intron	36
553	496	group IIB intron	36
554	497	MicF RNA	36
555	498	OxyS RNA	36
556	499	RNase MRP RNA	36
557	500	RNase P RNA	36
558	501	RprA RNA	36
559	502	RRE RNA	36
560	503	spot-42 RNA	36
561	504	telomerase RNA	36
562	505	small nuclear RNA U1	36
563	505	snRNA U1	36
564	505	U1 small nuclear RNA	36
565	505	U1 snRNA	36
566	506	small nuclear RNA U2	36
567	506	snRNA U2	36
568	506	U2 small nuclear RNA	36
569	506	U2 snRNA	36
570	507	small nuclear RNA U4	36
571	507	snRNA U4	36
572	507	U4 small nuclear RNA	36
573	507	U4 snRNA	36
574	508	small nuclear RNA U4atac	36
575	508	snRNA U4atac	36
576	508	U4atac small nuclear RNA	36
577	508	U4atac snRNA	36
578	509	small nuclear RNA U5	36
579	509	snRNA U5	36
580	509	U5 small nuclear RNA	36
581	509	U5 snRNA	36
582	510	small nuclear RNA U6	36
583	510	snRNA U6	36
584	510	U6 small nuclear RNA	36
585	510	U6 snRNA	36
586	511	snRNA U6atac	36
587	511	U6atac small nuclear RNA	36
588	511	U6atac snRNA	36
589	512	small nuclear RNA U11	36
590	512	snRNA U11	36
591	512	U11 small nuclear RNA	36
592	512	U11 snRNA	36
593	513	small nuclear RNA U12	36
594	513	snRNA U12	36
595	513	U12 small nuclear RNA	36
596	513	U12 snRNA	36
597	514	sequence attribute	36
598	515	gene attribute	36
599	517	small nucleolar RNA U14	36
600	517	snoRNA U14	36
601	517	U14 small nucleolar RNA	36
602	517	U14 snoRNA	36
603	518	vault RNA	36
604	519	Y RNA	36
605	521	18S ribosomal RNA	36
606	521	18S rRNA	36
607	521	rRNA 18S	36
608	523	binding_or_interaction_site	36
609	523	site	120
610	524	protein binding site	36
611	525	rescue fragment	36
612	525	rescue region	36
613	525	rescue segment	120
614	526	restriction fragment	36
615	527	sequence difference	36
616	528	invalidated by genomic contamination	36
617	529	invalidated by genomic polyA primed cDNA	36
618	530	invalidated by partial processing	36
619	531	ca_bind	120
620	531	DNA_bind	120
621	531	domain	149
622	531	np_bind	120
623	531	polypeptide domain	36
624	531	polypeptide_structural_domain	36
625	531	structural domain	149
626	531	zn_fing	120
627	532	signal	120
628	532	signal peptide	36
629	532	signal peptide coding sequence	36
630	533	chain	120
631	533	mature peptide	120
632	533	mature protein region	36
633	534	5' TIR	36
634	534	five prime terminal inverted repeat	36
635	535	3' TIR	36
636	535	three prime terminal inverted repeat	36
637	536	U5 long terminal repeat region	36
638	536	U5 LTR region	36
639	537	R long terminal repeat region	36
640	537	R LTR region	36
641	538	U3 long terminal repeat region	36
642	538	U3 LTR region	36
643	539	5' long terminal repeat	36
644	539	5' LTR	36
645	539	five prime LTR	36
646	540	3' long terminal repeat	36
647	540	3' LTR	36
648	540	three prime LTR	36
649	541	R 5' long term repeat region	36
650	541	R five prime LTR region	36
651	542	U5 5' long terminal repeat region	36
652	542	U5 five prime LTR region	36
653	543	U3 5' long term repeat region	36
654	543	U3 five prime LTR region	36
655	544	R 3' long terminal repeat region	36
656	544	R three prime LTR region	36
657	545	U3 3' long terminal repeat region	36
658	545	U3 three prime LTR region	36
659	546	U5 3' long terminal repeat region	36
660	546	U5 three prime LTR region	36
661	547	non LTR retrotransposon polymeric tract	36
662	548	target site duplication	36
663	549	LTR retrotransposon poly purine tract	120
664	549	RR tract	36
665	550	autonomously replicating sequence	36
666	553	inverted ring chromosome	36
667	554	vector	36
668	554	vector replicon	36
669	555	single strand oligo	36
670	555	single strand oligonucleotide	36
671	555	single stranded oligonucleotide	36
672	555	ss oligo	36
673	555	ss oligonucleotide	36
674	556	double stranded oligonucleotide	36
675	556	ds oligo	36
676	556	ds-oligonucleotide	36
677	557	polymer attribute	36
678	558	three prime noncoding exon	36
679	559	5' nc exon	36
680	559	5' non coding exon	36
681	559	five prime noncoding exon	36
682	560	UTR intron	36
683	561	five prime UTR intron	36
684	562	three prime UTR intron	36
685	563	random sequence	36
686	564	chromosome interband	120
687	565	gene with polyadenylated mRNA	36
688	567	chromosomal transposition	36
689	567	transposition	130
690	568	repeat associated small interfering RNA	36
691	569	gene with mRNA with frameshift	36
692	570	recombinationally rearranged gene	36
693	571	interchromosomal duplication	36
694	572	D gene	36
695	572	D-GENE	36
696	573	gene with trans spliced transcript	36
697	574	vertebrate immunoglobulin T cell receptor segment	36
698	574	vertebrate_immunoglobulin/T-cell receptor gene	36
699	575	inversion derived bipartite deficiency	36
700	576	pseudogenic region	36
701	577	encodes alternately spliced transcripts	36
702	578	decayed exon	36
703	579	inversion derived deficiency plus duplication	36
704	580	V gene	36
705	580	V-GENE	36
706	580	variable_gene	36
707	581	post translationally regulated by protein stability	36
708	581	post-translationally regulated by protein stability	36
709	582	golden path fragment	36
710	583	post translationally regulated by protein modification	36
711	583	post-translationally regulated by protein modification	36
712	584	J gene	36
713	584	J-GENE	36
714	586	tiling path	36
715	587	negatively autoregulated	36
716	588	tiling path fragment	36
717	589	positively autoregulated	36
718	590	contig read	36
719	592	C gene	36
720	592	C_GENE	36
721	592	constant gene	36
722	593	trans spliced transcript	36
723	593	trans-spliced transcript	36
724	594	tiling path clone	36
725	595	terminal inverted repeat	36
726	595	TIR	36
727	596	vertebrate immunoglobulin T cell receptor gene cluster	36
728	596	vertebrate_immunoglobulin/T-cell receptor gene cluster	36
729	597	nc primary transcript	36
730	597	noncoding primary transcript	36
731	598	three prime coding exon noncoding region	36
732	598	three_prime_exon_noncoding_region	36
733	599	(DJ)-J-CLUSTER	36
734	599	DJ J cluster	36
735	600	five prime coding exon noncoding region	36
736	600	five_prime_exon_noncoding_region	36
737	601	(VDJ)-J-C-CLUSTER	36
738	601	VDJ J C cluster	36
739	602	(VDJ)-J-CLUSTER	36
740	602	VDJ J cluster	36
741	603	(VJ)-C-CLUSTER	120
742	603	VJ C cluster	36
743	604	(VJ)-J-C-CLUSTER	36
744	604	VJ J C cluster	36
745	605	(VJ)-J-CLUSTER	36
746	605	VJ J cluster	36
747	606	D gene recombination feature	36
748	607	3'D-HEPTAMER	36
749	607	three prime D heptamer	36
750	608	3'D-NOMAMER	36
751	608	three prime D nonamer	36
752	609	3'D-SPACER	36
753	609	three prime D spacer	36
754	610	5'D-HEPTAMER	36
755	610	five prime D heptamer	36
756	611	5'D-NONAMER	36
757	611	five prime D nonamer	36
758	612	5'-SPACER	36
759	612	five prime D spacer	36
760	612	five prime D-spacer	36
761	613	virtual sequence	36
762	614	Hoogsteen base pair	36
763	615	reverse Hoogsteen base pair	36
764	618	D DJ C cluster	36
765	618	D-(DJ)-C-CLUSTER	36
766	619	D DJ cluster	36
767	619	D-(DJ)-CLUSTER	36
768	620	D DJ J C cluster	36
769	620	D-(DJ)-J-C-CLUSTER	36
770	621	pseudogenic exon	36
771	622	D DJ J cluster	36
772	622	D-(DJ)-J-CLUSTER	36
773	623	D J C cluster	36
774	623	D-J-C-CLUSTER	36
775	624	V_D_GENE	36
776	624	VD gene	36
777	625	J C cluster	36
778	625	J-C-CLUSTER	36
779	626	inversion derived deficiency plus aneuploid	36
780	627	J cluster	36
781	627	J-CLUSTER	36
782	628	J nonamer	36
783	628	J-NONAMER	36
784	629	J heptamer	36
785	629	J-HEPTAMER	36
786	630	pseudogenic transcript	36
787	631	J spacer	36
788	631	J-SPACER	36
789	632	V DJ cluster	36
790	632	V-(DJ)-CLUSTER	36
791	633	V DJ J cluster	36
792	633	V-(DJ)-J-CLUSTER	120
793	634	V VDJ C cluster	36
794	634	V-(VDJ)-C-CLUSTER	36
795	635	V VDJ cluster	36
796	635	V-(VDJ)-CLUSTER	36
797	636	V VDJ J cluster	36
798	636	V-(VDJ)-J-CLUSTER	120
799	637	V VJ C cluster	36
800	637	V-(VJ)-C-CLUSTER	36
801	638	V VJ cluster	36
802	638	V-(VJ)-CLUSTER	36
803	639	V VJ J cluster	36
804	639	V-(VJ)-J-CLUSTER	36
805	640	V cluster	36
806	640	V-CLUSTER	36
807	641	V D DJ C cluster	36
808	641	V-D-(DJ)-C-CLUSTER	36
809	642	V D DJ cluster	36
810	642	V-D-(DJ)-CLUSTER	36
811	643	V D DJ J C cluster	36
812	643	V-D-(DJ)-J-C-CLUSTER	36
813	644	V D DJ J cluster	36
814	644	V-D-(DJ)-J-CLUSTER	36
815	645	V D J C cluster	36
816	645	V-D-J-C-CLUSTER	36
817	646	V D J cluster	36
818	646	V-D-J-CLUSTER	36
819	647	V heptamer	36
820	647	V-HEPTAMER	36
821	648	V J cluster	36
822	648	V-J-CLUSTER	36
823	649	V J C cluster	36
824	649	V-J-C-CLUSTER	36
825	650	V nonamer	36
826	650	V-NONAMER	36
827	651	V spacer	36
828	651	V-SPACER	36
829	652	V gene recombination feature	36
830	652	V-RS	36
831	653	(DJ)-C-CLUSTER	36
832	653	DJ C cluster	36
833	654	(DJ)-J-C-CLUSTER	36
834	654	DJ J C cluster	36
835	655	(VDJ)-C-CLUSTER	36
836	655	VDJ C cluster	36
837	656	V DJ C cluster	36
838	656	V-(DJ)-C-CLUSTER	36
839	658	ISCR	120
840	659	recoding pseudoknot	36
841	660	designed sequence	36
842	661	inversion derived bipartite duplication	36
843	662	gene with edited transcript	36
844	663	inversion derived duplication plus aneuploid	36
845	664	aneuploid chromosome	36
846	665	poly(A) signal	36
847	665	polyA signal sequence	36
848	665	polyadenylation termination signal	36
849	666	five prime ribosome binding site	36
850	666	RBS	120
851	666	Shine Dalgarno sequence	36
852	666	Shine-Dalgarno sequence	36
853	667	polyA cleavage site	36
854	667	polyA junction	36
855	667	polyA site	36
856	667	polyA_junction	36
857	667	polyadenylation site	120
858	669	5' clip	120
859	669	five prime clip	36
860	670	5'RS	36
861	670	five prime D recombination signal sequence	36
862	670	five prime D-recombination signal sequence	36
863	671	3'-clip	36
864	671	three prime clip	36
865	672	C cluster	36
866	672	C-CLUSTER	36
867	673	D cluster	36
868	673	D-CLUSTER	36
869	674	D J cluster	36
870	674	D-J-CLUSTER	36
871	675	HEPTAMER	120
872	675	heptamer of recombination feature of vertebrate immune system gene	36
873	676	nonamer of recombination feature of vertebrate immune system gene	36
874	677	vertebrate immune system gene recombination spacer	36
875	678	V DJ J C cluster	36
876	678	V-(DJ)-J-C-CLUSTER	36
877	679	V VDJ J C cluster	36
878	679	V-(VDJ)-J-C-CLUSTER	36
879	680	V VJ J C cluster	36
880	680	V-(VJ)-J-C-CLUSTER	36
881	681	inversion derived aneuploid chromosome	36
882	682	bidirectional promoter	36
883	684	3'D-RS	36
884	684	three prime D recombination signal sequence	36
885	684	three_prime_D-recombination_signal_sequence	36
886	685	miRNA encoding	36
887	686	D-J-GENE	36
888	686	DJ gene	36
889	687	rRNA encoding	36
890	688	V-D-J-GENE	36
891	688	VDJ gene	36
892	689	scRNA encoding	36
893	690	V-J-GENE	36
894	690	VJ gene	36
895	692	snoRNA encoding	36
896	693	edited transcript feature	36
897	694	methylation guide snoRNA primary transcript	36
898	696	rRNA cleavage snoRNA primary transcript	36
899	697	pre edited region	36
900	697	pre-edited region	36
901	698	10Sa RNA	120
902	698	ssrA	120
903	699	C/D box snoRNA encoding	36
904	700	10Sa RNA primary transcript	120
905	700	ssrA RNA primary transcript	120
906	700	tmRNA primary transcript	36
907	701	group I intron	36
908	702	autocatalytically spliced intron	36
909	703	SRP RNA primary transcript	36
910	704	7S RNA	120
911	704	signal recognition particle RNA	120
912	704	SRP RNA	36
913	706	classical pseudoknot	36
914	706	H pseudoknot	36
915	706	H-pseudoknot	36
916	706	H-type pseudoknot	36
917	706	hairpin-type pseudoknot	36
918	707	box C/D snoRNA	36
919	707	C D box snoRNA	36
920	707	C/D box snoRNA	36
921	708	box H/ACA snoRNA	36
922	708	H ACA box snoRNA	36
923	708	H/ACA box snoRNA	36
924	709	C/D box snoRNA primary transcript	36
925	710	H ACA box snoRNA primary transcript	36
926	712	transcript_edited_by_C-insertion_and_dinucleotide_insertion	120
927	716	gRNA	36
928	716	guide RNA	36
929	717	group II intron	36
930	718	editing block	36
931	719	intergenic region	36
932	720	editing domain	36
933	721	unedited region	36
934	722	H ACA box snoRNA encoding	36
935	723	oligo U tail	36
936	724	polyA sequence	36
937	725	branch point	36
938	725	branch site	36
939	725	branch_point	36
940	726	polypyrimidine tract	36
941	727	bacterial RNApol promoter	36
942	728	bacterial terminator	36
943	729	terminator of type 2 RNApol III promoter	36
944	730	transcription end site	36
945	731	RNApol III promoter type 1	36
946	732	RNApol III promoter type 2	36
947	732	tRNA promoter	120
948	733	A-box	36
949	734	B-box	36
950	735	RNApol III promoter type 3	36
951	736	C-box	36
952	737	snRNA encoding	36
953	738	telomeric DNA	36
954	738	telomeric sequence	36
955	740	chromosomal regulatory element	36
956	741	insulator element	36
957	742	chromosomal structural element	36
958	743	five prime open reading frame	36
959	744	upstream AUG codon	36
960	745	polycistronic primary transcript	36
961	746	monocistronic primary transcript	36
962	747	monocistronic mRNA	36
963	747	monocistronic processed transcript	36
964	748	polycistronic mRNA	36
965	748	polycistronic processed transcript	120
966	749	mini exon donor RNA	36
967	749	mini-exon donor RNA	36
968	750	mini-exon	120
969	750	spliced leader RNA	36
970	751	engineered plasmid	36
971	751	engineered plasmid gene	120
972	752	transcribed spacer region	36
973	753	internal transcribed spacer region	36
974	754	external transcribed spacer region	36
975	755	tetranucleotide repeat microsatellite feature	36
976	756	SRP RNA encoding	36
977	758	antisense RNA	36
978	759	antisense primary transcript	36
979	760	small interfering RNA	36
980	761	micro RNA primary transcript	36
981	761	miRNA primary transcript	36
982	762	small temporal RNA primary transcript	36
983	762	stRNA primary transcript	36
984	763	small temporal RNA	36
985	764	small subunit rRNA	36
986	764	SSU RNA	36
987	764	SSU rRNA	36
988	765	large subunit rRNA	36
989	765	LSU RNA	36
990	765	LSU rRNA	36
991	766	5S LSU rRNA	36
992	766	5S ribosomal RNA	36
993	766	5S rRNA	36
994	766	rRNA 5S	36
995	767	28S LSU rRNA	36
996	767	28S ribosomal RNA	36
997	767	28S rRNA	36
998	767	rRNA 28S	36
999	768	maxi-circle gene	36
1000	768	maxicircle gene	36
1001	769	noncoding RNA	36
1002	770	stRNA encoding	36
1003	771	repeat region	36
1004	772	dispersed repeat	36
1005	772	interspersed repeat	36
1006	773	tmRNA encoding	36
1007	776	spliceosomal intron	36
1008	777	tRNA encoding	36
1009	778	introgressed chromosome region	36
1010	779	monocistronic transcript	36
1011	780	mobile intron	36
1012	781	insertion	36
1013	781	nucleotide insertion	36
1014	781	nucleotide_insertion	36
1015	782	EST match	36
1016	783	sequence rearrangement feature	36
1017	784	chromosome breakage sequence	36
1018	785	internal eliminated sequence	36
1019	786	macronucleus destined segment	36
1020	788	non canonical splice site	36
1021	788	non-canonical splice site	36
1022	789	canonical splice site	36
1023	790	canonical 3' splice site	36
1024	790	canonical three prime splice site	36
1025	791	canonical 5' splice site	36
1026	791	canonical five prime splice site	36
1027	792	non canonical 3' splice site	120
1028	792	non canonical three prime splice site	36
1029	792	non-canonical three prime splice site	36
1030	793	non canonical 5' splice site	36
1031	793	non canonical five prime splice site	36
1032	793	non-canonical five prime splice site	36
1033	794	non ATG start codon	36
1034	794	non canonical start codon	36
1035	794	non-canonical start codon	36
1036	795	aberrant processed transcript	36
1037	797	exonic splice enhancer	36
1038	798	nuclease sensitive site	36
1039	799	DHS	36
1040	799	DNAseI hypersensitive site	36
1041	800	translocation element	36
1042	801	deletion junction	36
1043	802	golden path	36
1044	803	cDNA match	36
1045	804	gene with polycistronic transcript	36
1046	805	cleaved initiator methionine	36
1047	805	init_met	120
1048	805	initiator methionine	120
1049	806	gene with dicistronic transcript	36
1050	807	gene with recoded mRNA	36
1051	808	single nucleotide polymorphism	36
1052	810	oligonucleotide	36
1053	811	gene with stop codon read through	36
1054	812	gene with stop codon redefined as pyrrolysine	36
1055	813	boundary	36
1056	813	breakpoint	36
1057	815	possible base call error	36
1058	816	possible assembly error	36
1059	817	experimental result region	36
1060	819	tandem repeat	36
1061	820	3' trans splice site	120
1062	820	trans splice acceptor site	36
1063	821	5 prime trans splice site	120
1064	821	trans splice donor site	36
1065	821	trans-splice donor site	36
1066	822	SL1 acceptor site	36
1067	823	SL2 acceptor site	36
1068	824	gene with stop codon redefined as selenocysteine	36
1069	825	gene with mRNA recoded by translational bypass	36
1070	826	gene with transcript with translational frameshift	36
1071	827	DNA motif	36
1072	828	nucleotide motif	36
1073	829	RNA motif	36
1074	830	dicistronic mRNA	36
1075	830	dicistronic processed transcript	120
1076	831	reading frame	36
1077	832	blocked reading frame	36
1078	833	superscaffold	120
1079	834	foreign transposable element	36
1080	835	gene with dicistronic primary transcript	36
1081	836	gene with dicistronic mRNA	36
1082	836	gene with dicistronic processed transcript	36
1083	837	intervening DNA	36
1084	838	origin of transfer	36
1085	839	signal	120
1086	839	transit	120
1087	839	transit peptide	36
1088	840	repeat unit	36
1089	841	cis regulatory module	36
1090	841	TF module	36
1091	842	protein intron	120
1092	843	intein containing	36
1093	845	fragment	36
1094	847	feature attribute	36
1095	848	exemplar mRNA	36
1096	849	sequence location	36
1097	850	organelle sequence	36
1098	851	mitochondrial sequence	36
1099	852	nuclear sequence	36
1100	853	nucleomorphic sequence	36
1101	854	plastid sequence	36
1102	855	kinetoplast_chromosome	36
1103	856	maxicircle_chromosome	36
1104	857	apicoplast sequence	36
1105	858	chromoplast sequence	36
1106	859	chloroplast sequence	36
1107	860	cyanelle sequence	36
1108	861	leucoplast sequence	36
1109	862	proplastid sequence	36
1110	863	plasmid location	36
1111	864	amplification origin	36
1112	865	proviral location	36
1113	866	gene group regulatory region	36
1114	867	clone insert	36
1115	868	lambda vector	36
1116	869	plasmid vector	36
1117	870	complementary DNA	36
1118	871	single strand cDNA	36
1119	871	single stranded cDNA	36
1120	871	single-strand cDNA	120
1121	872	double strand cDNA	120
1122	872	double stranded cDNA	36
1123	872	double-strand cDNA	120
1124	876	P1_clone	120
1125	880	pyrrolysyl tRNA	36
1126	880	pyrrolysyl-transfer ribonucleic acid	36
1127	880	pyrrolysyl-transfer RNA	36
1128	883	tmRNA coding piece	36
1129	884	tmRNA acceptor piece	36
1130	885	quantitative trait locus	36
1131	886	genomic island	36
1132	887	pathogenic island	36
1133	888	metabolic island	36
1134	889	adaptive island	36
1135	890	symbiosis island	36
1136	891	pseudogenic rRNA	36
1137	892	pseudogenic tRNA	36
1138	893	engineered episome	36
1139	899	cloned region	36
1140	899	cloned segment	36
1141	900	reagent attribute	36
1142	908	engineered rescue fragment	36
1143	908	engineered rescue region	36
1144	908	engineered rescue segment	36
1145	909	rescue mini gene	36
1146	909	rescue mini-gene	36
1147	910	transgenic transposable element	36
1148	911	natural transposable element	36
1149	912	engineered transposable element	36
1150	913	engineered foreign transposable element	36
1151	914	assortment derived duplication	36
1152	915	assortment derived deficiency plus duplication	36
1153	916	assortment-derived deficiency	36
1154	917	assortment derived aneuploid	36
1155	918	construct	36
1156	918	engineered region	36
1157	918	engineered sequence	36
1158	919	engineered foreign region	36
1159	921	engineered tag	36
1160	922	validated cDNA clone	36
1161	923	invalidated cDNA clone	36
1162	924	chimeric cDNA clone	36
1163	925	genomically contaminated cDNA clone	36
1164	926	polyA primed cDNA clone	36
1165	927	partially processed cDNA clone	36
1166	929	mini gene	36
1167	930	rescue gene	36
1168	931	wild type	36
1169	932	wild type rescue gene	36
1170	933	mitochondrial chromosome	36
1171	934	chloroplast chromosome	36
1172	935	chromoplast chromosome	36
1173	936	cyanelle chromosome	36
1174	937	leucoplast chromosome	36
1175	938	macronuclear chromosome	36
1176	939	micronuclear chromosome	36
1177	940	nuclear chromosome	36
1178	941	nucleomorphic chromosome	36
1179	942	chromosome part	36
1180	943	gene member region	36
1181	945	transcript region	36
1182	946	mature transcript region	36
1183	947	primary transcript region	36
1184	948	mRNA region	36
1185	949	UTR region	36
1186	950	rRNA primary transcript region	36
1187	951	positional	120
1188	951	positional polypeptide feature	120
1189	951	region	130
1190	951	region or site annotation	120
1191	951	site	130
1192	952	repeat component	36
1193	953	spliceosomal intron region	36
1194	954	gene component region	36
1195	959	tmRNA region	36
1196	960	long term repeat component	36
1197	960	LTR component	36
1198	961	3' long terminal repeat component	36
1199	961	three prime LTR component	36
1200	962	5' long term repeat component	36
1201	962	five prime LTR component	36
1202	963	CDS region	36
1203	964	exon region	36
1204	965	homolog	36
1205	965	homologous region	36
1206	965	homologue	36
1207	966	paralog	36
1208	966	paralogous region	36
1209	966	paralogue	36
1210	967	ortholog	36
1211	967	orthologous region	36
1212	967	orthologue	36
1213	973	capped primary transcript	36
1214	974	capped mRNA	36
1215	975	mRNA attribute	36
1216	978	minus 1 frameshift	36
1217	979	minus 2 frameshift	36
1218	980	plus 1 frameshift	36
1219	981	plus 2 framshift	36
1220	982	trans-spliced	36
1221	983	polyadenylated mRNA	36
1222	984	trans-spliced mRNA	36
1223	985	edited transcript	36
1224	986	edited transcript by A to I substitution	36
1225	987	bound by protein	36
1226	988	bound by nucleic acid	36
1227	989	alternatively spliced	36
1228	994	codon redefined	36
1229	995	stop codon read through	36
1230	995	stop codon readthrough	120
1231	996	stop codon redefined as pyrrolysine	36
1232	997	stop codon redefined as selenocysteine	36
1233	998	recoded by translational bypass	36
1234	999	translationally frameshifted	36
1235	1000	maternally imprinted gene	36
1236	1001	paternally imprinted gene	36
1237	1002	post translationally regulated gene	36
1238	1003	negatively autoregulated gene	36
1239	1004	positively autoregulated gene	36
1240	1006	silenced by DNA modification	36
1241	1007	silenced by DNA methylation	36
1242	1008	translationally regulated gene	36
1243	1009	allelically excluded gene	36
1244	1010	epigenetically modified gene	36
1245	1011	nuclear mitochondrial	36
1246	1013	unequally crossed over	36
1247	1015	endogenous retroviral sequence	36
1248	1016	rearranged at DNA level	36
1249	1018	independently known	36
1250	1019	supported by sequence similarity	36
1251	1020	supported by domain match	36
1252	1021	supported by EST or cDNA	36
1253	1023	predicted by ab initio computation	36
1254	1024	asx turn	36
1255	1025	cloned cDNA insert	36
1256	1026	cloned genomic insert	36
1257	1027	engineered insert	36
1258	1028	edit operation	36
1259	1029	insert U	36
1260	1030	delete U	36
1261	1031	substitute A to I	36
1262	1032	insert C	36
1263	1033	insert dinucleotide	36
1264	1034	substitute C to U	36
1265	1035	insert G	36
1266	1036	insert GC	36
1267	1037	insert GU	36
1268	1038	insert CU	36
1269	1039	insert AU	36
1270	1040	insert AA	36
1271	1041	edited mRNA	36
1272	1042	guide RNA region	36
1273	1043	anchor region	36
1274	1044	pre-edited mRNA	36
1275	1046	miRNA target site	36
1276	1047	edited CDS	36
1277	1048	vertebrate immunoglobulin T cell receptor rearranged segment	36
1278	1050	vertebrate immunoglobulin T cell receptor rearranged gene cluster	36
1279	1051	vertebrate immune system gene recombination signal feature	36
1280	1052	recombinationally rearranged	36
1281	1053	recombinationally rearranged vertebrate immune system gene	36
1282	1054	attP site	36
1283	1055	attB site	36
1284	1056	attBP'	120
1285	1056	attL site	120
1286	1057	attPB'	120
1287	1057	attR site	36
1288	1058	attachment site	120
1289	1058	integration excision site	36
1290	1059	res site	36
1291	1059	resolution site	36
1292	1060	inversion site	36
1293	1061	dif site	36
1294	1062	attC site	36
1295	1063	eukaryotic terminator	36
1296	1064	origin of vegetative replication	36
1297	1065	origin of bacterial chromosome replication	36
1298	1066	DNA chromosome	36
1299	1067	double stranded DNA chromosome	36
1300	1068	single stranded DNA chromosome	36
1301	1069	linear double stranded DNA chromosome	36
1302	1070	circular double stranded DNA chromosome	36
1303	1071	linear single stranded DNA chromosome	36
1304	1072	circular single stranded DNA chromosome	36
1305	1073	RNA chromosome	36
1306	1074	single stranded RNA chromosome	36
1307	1075	linear single stranded RNA chromosome	36
1308	1076	linear double stranded RNA chromosome	36
1309	1077	double stranded RNA chromosome	36
1310	1078	circular single stranded RNA chromosome	36
1311	1079	circular double stranded RNA chromosome	36
1312	1080	sequence replication mode	36
1313	1081	rolling circle	36
1314	1082	theta replication	36
1315	1083	DNA replication mode	36
1316	1084	RNA replication mode	36
1317	1085	insertion sequence	36
1318	1085	IS	120
1319	1086	minicircle gene	36
1320	1088	anchor binding site	36
1321	1089	information region	36
1322	1089	template region	36
1323	1090	gRNA encoding	36
1324	1091	minicircle_chromosome	36
1325	1092	rho dependent bacterial terminator	36
1326	1093	rho independent bacterial terminator	36
1327	1094	strand attribute	36
1328	1097	topology attribute	36
1329	1098	two-ended	120
1330	1099	zero-ended	120
1331	1100	class II RNA	36
1332	1101	class I RNA	36
1333	1102	genomic DNA	36
1334	1103	BAC cloned genomic insert	36
1335	1105	consensus region	36
1336	1106	consensus mRNA	36
1337	1107	predicted gene	36
1338	1108	gene fragment	36
1339	1109	recursive splice site	36
1340	1110	BAC end	36
1341	1110	BAC end sequence	36
1342	1110	BES	36
1343	1111	16S ribosomal RNA	36
1344	1111	16S rRNA	120
1345	1111	16S SSU RNA	36
1346	1111	rRNA 16S	36
1347	1112	23S LSU rRNA	36
1348	1112	23S ribosomal RNA	120
1349	1112	23S rRNA	36
1350	1112	rRNA 23S	36
1351	1113	25S LSU rRNA	36
1352	1113	25S ribosomal RNA	36
1353	1113	25S rRNA	36
1354	1113	rRNA 25S	36
1355	1114	solo LTR	36
1356	1115	low complexity	36
1357	1116	low complexity region	36
1358	1118	cryptic prophage	36
1359	1120	DNA constraint	36
1360	1120	DNA constraint sequence	36
1361	1121	i motif	36
1362	1121	short intercalated motif	36
1363	1122	peptide nucleic acid	36
1364	1122	PNA oligo	36
1365	1123	catalytic DNA	36
1366	1123	deoxyribozyme	120
1367	1123	DNA enzyme	36
1368	1124	multiple nucleotide polymorphism	120
1369	1125	intron domain	36
1370	1126	wobble base pair	36
1371	1126	wobble pair	36
1372	1127	IGS	36
1373	1127	internal guide sequence	36
1374	1128	silent mutation	36
1375	1130	CNP	36
1376	1130	CNV	36
1377	1130	copy number polymorphism	36
1378	1130	copy number variation	36
1379	1131	mutation affecting copy number	36
1380	1131	sequence variant affecting copy number	36
1381	1132	aberration breakpoint	36
1382	1132	aberration_junction	36
1383	1132	chromosome breakpoint	36
1384	1133	inversion breakpoint	36
1385	1134	allelomorph	36
1386	1136	polymorphic sequence variant	36
1387	1140	direction attribute	36
1388	1143	mitochondrial DNA	36
1389	1143	mtDNA	36
1390	1144	chloroplast DNA	36
1391	1146	piwi-associated RNA	36
1392	1147	arginyl tRNA	36
1393	1148	MGE	36
1394	1148	mobile genetic element	36
1395	1149	extrachromosomal mobile genetic element	36
1396	1150	integrated mobile genetic element	36
1397	1151	integrated plasmid	36
1398	1152	viral sequence	36
1399	1152	virus sequence	36
1400	1153	bacteriophage	36
1401	1153	phage	36
1402	1153	phage sequence	36
1403	1154	attCtn site	36
1404	1155	nuclear mitochondrial pseudogene	36
1405	1155	nuclear mt pseudogene	36
1406	1155	NUMT	36
1407	1156	cointegrated plasmid	36
1408	1156	cointegrated replicon	36
1409	1157	IRLinv site	36
1410	1158	IRRinv site	36
1411	1159	inversion site part	36
1412	1160	defective conjugative transposon	36
1413	1161	repeat fragment	36
1414	1165	transposon fragment	36
1415	1166	transcriptional cis regulatory region	36
1416	1167	splicing regulatory region	36
1417	1169	promoter targeting sequence	36
1418	1170	partially characterised change in DNA sequence	130
1419	1170	partially_characterised_change_in_DNA_sequence	130
1420	1170	sequence alteration	36
1421	1170	uncharacterised_change_in_nucleotide_sequence	130
1422	1171	sequence variant	36
1423	1172	propeptide cleavage site	36
1424	1173	propep	120
1425	1174	immature peptide region	36
1426	1175	active peptide	36
1427	1175	peptide	149
1428	1176	compbias	120
1429	1176	compositional bias	120
1430	1176	compositionally biased	120
1431	1176	compositionally biased region of peptide	120
1432	1176	compositionally_biased_region	36
1433	1177	motif	149
1434	1177	polypeptide motif	36
1435	1178	polypeptide repeat	36
1436	1178	repeat	120
1437	1179	polypeptide structural region	36
1438	1179	structural_region	120
1439	1180	membrane structure	36
1440	1181	extramembrane	120
1441	1181	extramembrane polypeptide region	36
1442	1181	extramembrane_region	120
1443	1181	topo_dom	120
1444	1182	cytoplasm_location	36
1445	1182	cytoplasmic polypeptide region	36
1446	1182	inside	120
1447	1183	non cytoplasmic polypeptide region	36
1448	1183	non_cytoplasm_location	36
1449	1183	outside	120
1450	1184	intramembrane	120
1451	1184	intramembrane polypeptide region	36
1452	1185	membrane peptide loop	36
1453	1185	membrane_loop	120
1454	1186	transmem	120
1455	1186	transmembrane	120
1456	1186	transmembrane polypeptide region	36
1457	1187	2nary structure	120
1458	1187	polypeptide secondary structure	36
1459	1187	secondary structure	120
1460	1187	secondary structure region	120
1461	1187	secondary_structure	120
1462	1188	polypeptide structural motif	120
1463	1188	structural_motif	120
1464	1189	coiled	120
1465	1189	coiled coil	36
1466	1190	helix turn helix	36
1467	1190	helix-turn-helix	36
1468	1190	HTH	120
1469	1191	sequencing_information	36
1470	1192	non consecutive	36
1471	1192	non_cons	36
1472	1193	non terminal	36
1473	1193	non_ter	36
1474	1194	conflict	36
1475	1195	unsure	36
1476	1196	cross link	36
1477	1196	crosslink	120
1478	1197	disulfid	120
1479	1197	disulfide	120
1480	1197	disulfide bond	120
1481	1197	disulphide	36
1482	1197	disulphide bond	120
1483	1198	mod_res	36
1484	1198	modified residue	36
1485	1198	post_translational_modification	36
1486	1199	covalent binding site	36
1487	1200	binding	120
1488	1200	binding site	120
1489	1200	non covalent binding site	36
1490	1201	metal_binding	120
1491	1202	protein protein contact	36
1492	1202	protein protein contact site	36
1493	1202	protein_protein_interaction	120
1494	1203	ca bind	120
1495	1203	Ca_contact_site	36
1496	1203	polypeptide calcium ion contact site	36
1497	1204	Co_contact_site	36
1498	1204	polypeptide cobalt ion contact site	36
1499	1205	Cu_contact_site	36
1500	1205	polypeptide copper ion contact site	36
1501	1206	Fe_contact_site	36
1502	1206	polypeptide iron ion contact site	36
1503	1207	Mg_contact_site	36
1504	1207	polypeptide magnesium ion contact site	36
1505	1208	Mn_contact_site	36
1506	1208	polypeptide manganese ion contact site	36
1507	1209	Mo_contact_site	36
1508	1209	polypeptide molybdenum ion contact site	36
1509	1210	Ni_contact_site	36
1510	1210	polypeptide nickel ion contact site	36
1511	1211	polypeptide tungsten ion contact site	36
1512	1211	W_contact_site	36
1513	1212	polypeptide zinc ion contact site	36
1514	1212	Zn_contact_site	36
1515	1213	act_site	120
1516	1213	active site residue	36
1517	1213	catalytic residue	36
1518	1214	polypeptide ligand contact	36
1519	1214	protein-ligand interaction	120
1520	1215	asx motif	36
1521	1216	beta bulge	36
1522	1217	beta bulge loop	36
1523	1218	beta bulge loop five	36
1524	1219	beta bulge loop six	36
1525	1220	strand	120
1526	1221	antiparallel beta strand	36
1527	1222	parallel beta strand	36
1528	1223	helix	120
1529	1224	helix-l	120
1530	1224	left handed helix	36
1531	1225	helix	120
1532	1225	right handed helix	36
1533	1226	a-helix	120
1534	1226	helix	120
1535	1227	pi helix	36
1536	1228	3(10) helix	36
1537	1228	3-10 helix	36
1538	1228	310 helix	36
1539	1228	three ten helix	36
1540	1229	nest	120
1541	1229	nest_motif	36
1542	1229	polypeptide nest motif	120
1543	1230	nest_left_right	36
1544	1230	nest_lr	36
1545	1230	polypeptide nest left right motif	36
1546	1231	nest_right_left	36
1547	1231	nest_rl	36
1548	1231	polypeptide nest right left motif	36
1549	1232	paperclip	120
1550	1232	paperclip loop	120
1551	1232	schellmann loop	36
1552	1233	schellmann loop seven	36
1553	1233	seven-residue schellmann loop	36
1554	1234	schellmann loop six	36
1555	1234	six-residue schellmann loop	36
1556	1235	serine/threonine motif	36
1557	1235	st motif	36
1558	1235	st_motif	36
1559	1236	serine threonine staple motif	36
1560	1236	st_staple	36
1561	1237	turn	120
1562	1238	asx turn left handed type one	36
1563	1238	asx_turn_il	120
1564	1239	asx turn left handed type two	36
1565	1239	asx_turn_iil	36
1566	1240	asx turn right handed type two	36
1567	1240	asx_turn_iir	36
1568	1241	asx turn type right handed type one	36
1569	1241	asx_turn_ir	36
1570	1242	beta turn	36
1571	1243	beta turn left handed type one	36
1572	1243	beta_turn_il	36
1573	1243	type I' beta turn	36
1574	1243	type I' turn	36
1575	1244	beta turn left handed type two	36
1576	1244	beta_turn_iil	36
1577	1244	type II' beta turn	36
1578	1244	type II' turn	36
1579	1245	beta turn right handed type one	36
1580	1245	beta_turn_ir	36
1581	1245	type I beta turn	36
1582	1245	type I turn	36
1583	1246	beta turn right handed type two	36
1584	1246	beta_turn_iir	36
1585	1246	type II beta turn	36
1586	1246	type II turn	36
1587	1247	gamma turn	36
1588	1248	classic gamma turn	36
1589	1248	gamma turn classic	36
1590	1249	gamma turn inverse	36
1591	1250	serine/threonine turn	36
1592	1250	st_turn	36
1593	1251	st turn left handed type one	36
1594	1251	st_turn_il	36
1595	1252	st turn left handed type two	36
1596	1252	st_turn_iil	36
1597	1253	st turn right handed type one	36
1598	1253	st_turn_ir	36
1599	1254	st turn right handed type two	36
1600	1254	st_turn_iir	36
1601	1255	sequence_variations	36
1602	1256	natural_variant	149
1603	1256	sequence variation	149
1604	1256	variant	149
1605	1257	mutagen	36
1606	1257	mutagenesis	36
1607	1257	mutated_site	36
1608	1258	alternative_sequence	36
1609	1258	isoform	130
1610	1258	sequence variation	130
1611	1258	var_seq	36
1612	1258	varsplic	130
1613	1259	beta turn type six	36
1614	1259	cis-proline loop	36
1615	1259	type VI beta turn	36
1616	1259	type VI turn	36
1617	1260	beta turn type six a	36
1618	1260	type VIa beta turn	36
1619	1260	type VIa turn	36
1620	1261	beta turn type six a one	36
1621	1261	type VIa1 beta turn	36
1622	1261	type VIa1 turn	36
1623	1262	beta turn type six a two	36
1624	1262	type VIa2 beta turn	36
1625	1262	type VIa2 turn	36
1626	1263	beta turn type six b	36
1627	1263	type VIb beta turn	36
1628	1263	type VIb turn	36
1629	1264	beta turn type eight	36
1630	1264	type VIII beta turn	36
1631	1264	type VIII turn	36
1632	1265	DRE motif	36
1633	1265	NDM4	36
1634	1265	WATCGATW_motif	36
1635	1266	directional motif v4	36
1636	1266	DMv4	36
1637	1266	DMv4 motif	36
1638	1266	motif 1 element	36
1639	1266	promoter motif 1	36
1640	1266	YGGTCACATR	130
1641	1267	AWCAGCTGWT	130
1642	1267	E box motif	36
1643	1267	generic E box motif	36
1644	1267	NDM5	120
1645	1268	directional motif v5	36
1646	1268	DMv5	36
1647	1268	DMv5 motif	36
1648	1268	KTYRGTATWTTT	130
1649	1268	promoter motif 6	120
1650	1269	directional motif v3	36
1651	1269	DMv3	36
1652	1269	DMv3 motif	36
1653	1269	KNNCAKCNCTRNY	130
1654	1269	promoter motif 7	36
1655	1270	directional motif v2	36
1656	1270	DMv2	36
1657	1270	DMv2 motif	36
1658	1270	MKSYGGCARCGSYSS	130
1659	1270	promoter motif 8	36
1660	1271	CSARCSSAACGS	130
1661	1271	motif ten element	36
1662	1271	motif_ten_element	36
1663	1272	directional motif p3	36
1664	1272	directional promoter motif 3	36
1665	1272	DMp3	36
1666	1272	INR1 motif	36
1667	1273	directional motif 5	36
1668	1273	directional promoter motif 5	120
1669	1273	DMp5	36
1670	1273	DPE1 motif	36
1671	1274	directional promoter motif v1	120
1672	1274	DMv1	120
1673	1274	DMv1 motif	36
1674	1275	GAGA	36
1675	1275	GAGA motif	36
1676	1275	NDM1	36
1677	1276	NDM2	36
1678	1276	NDM2 motif	36
1679	1276	non directional promoter motif 2	36
1680	1277	NDM3	36
1681	1277	NDM3 motif	36
1682	1277	non directional motif 3	36
1683	1278	double stranded RNA virus sequence	36
1684	1278	ds RNA viral sequence	36
1685	1279	maverick element	120
1686	1280	21S LSU rRNA	36
1687	1280	21S ribosomal RNA	36
1688	1280	21S rRNA	36
1689	1280	rRNA 21S	36
1690	1281	tRNA region	36
1691	1282	anti-codon loop	36
1692	1282	anticodon loop	36
1693	1283	anti-codon	36
1694	1284	CCA sequence	36
1695	1284	CCA tail	36
1696	1285	D loop	120
1697	1285	DHU loop	36
1698	1286	T loop	36
1699	1286	TpsiC loop	36
1700	1287	pyrrolysine tRNA primary transcript	36
1701	1288	small nucleolar RNA U3	36
1702	1288	snoRNA U3	36
1703	1288	U3 small nucleolar RNA	36
1704	1288	U3 snoRNA	36
1705	1289	ARE	120
1706	1289	AU rich element	36
1707	1289	AU-rich element	36
1708	1290	BRE	120
1709	1290	Bruno response element	36
1710	1291	IRE	36
1711	1291	iron responsive element	36
1712	1292	morpholino backbone	36
1713	1293	peptide nucleic acid	120
1714	1296	pseudouridylation guide snoRNA	36
1715	1298	LNA oligo	36
1716	1298	locked nucleic acid	36
1717	1300	threose nucleic acid	36
1718	1300	TNA oligo	36
1719	1302	glycerol nucleic acid	36
1720	1302	glycol nucleic acid	36
1721	1302	GNA oligo	36
1722	1303	R GNA	36
1723	1304	(R)-glycerol nucleic acid	36
1724	1304	(R)-glycol nucleic acid	36
1725	1304	R GNA oligo	36
1726	1305	S GNA	36
1727	1306	(S)-glycerol nucleic acid	36
1728	1306	(S)-glycol nucleic acid	36
1729	1306	S GNA oligo	36
1730	1307	double stranded DNA virus	36
1731	1307	ds DNA viral sequence	36
1732	1308	single strand RNA virus	36
1733	1308	ss RNA viral sequence	36
1734	1309	negative sense single stranded RNA virus	120
1735	1309	negative sense ssRNA viral sequence	36
1736	1310	positive sense single stranded RNA virus	120
1737	1310	positive sense ssRNA viral sequence	36
1738	1311	ambisense single stranded RNA virus	36
1739	1311	ambisense ssRNA viral sequence	36
1740	1312	RNA polymerase promoter	36
1741	1313	Phage RNA Polymerase Promoter	36
1742	1314	SP6 RNA Polymerase Promoter	36
1743	1315	T3 RNA Polymerase Promoter	36
1744	1316	T7 RNA Polymerase Promoter	36
1745	1317	5' EST	36
1746	1317	five prime EST	36
1747	1318	3' EST	36
1748	1318	three prime EST	36
1749	1319	ribosomal frameshift	36
1750	1319	translational frameshift	36
1751	1320	plus 1 ribosomal frameshift	36
1752	1320	plus 1 translational frameshift	36
1753	1321	plus 2 ribosomal frameshift	36
1754	1321	plus 2 translational frameshift	36
1755	1322	group III intron	36
1756	1323	noncoding region of exon	36
1757	1324	coding region of exon	36
1758	1325	endonuclease spliced intron	36
1759	1326	protein coding gene	36
1760	1327	transgenic insertion	36
1761	1329	silenced by RNA interference	36
1762	1330	silenced by histone modification	36
1763	1331	silenced by histone methylation	36
1764	1332	silenced by histone deacetylation	36
1765	1333	gene silenced by RNA interference	36
1766	1333	RNA interference silenced gene	36
1767	1333	RNAi silenced gene	36
1768	1334	gene silenced by histone modification	36
1769	1335	gene silenced by histone methylation	36
1770	1336	gene silenced by histone deacetylation	36
1771	1337	D	36
1772	1338	Y	36
1773	1339	I	120
1774	1339	RNAMOD:017	120
1775	1340	7-methylguanine	36
1776	1340	seven methylguanine	36
1777	1346	amino acid	36
1778	1347	major transcription start site	36
1779	1347	major TSS	36
1780	1348	minor TSS	36
1781	1349	TSS region	36
1782	1350	encodes alternate transcription start sites	36
1783	1351	miRNA primary transcript region	36
1784	1352	pre-miRNA	36
1785	1353	miRNA stem	36
1786	1354	miRNA loop	36
1787	1355	synthetic oligo	36
1788	1357	fragment assembly	36
1789	1357	physical map	36
1790	1358	BACmap	36
1791	1358	fingerprint map	36
1792	1358	FPC	36
1793	1358	FPCmap	36
1794	1358	restriction map	36
1795	1359	STS map	36
1796	1360	radiation hybrid map	36
1797	1360	RH map	36
1798	1361	sonicate fragment	36
1799	1365	homing endonuclease binding site	36
1800	1366	octamer motif	36
1801	1367	apicoplast chromosome	36
1802	1368	sequence collection	36
1803	1369	overlapping feature set	36
1804	1370	overlapping EST set	36
1805	1371	ncRNA gen	36
1806	1371	ncRNA gene	36
1807	1371	non-coding RNA gene	120
1808	1372	gRNA gene	36
1809	1373	miRNA gene	36
1810	1374	scRNA gene	36
1811	1375	snoRNA gene	36
1812	1376	snRNA gene	36
1813	1377	SRP RNA gene	36
1814	1378	stRNA gene	36
1815	1379	tmRNA gene	36
1816	1380	tRNA gene	36
1817	1381	modified adenosine	36
1818	1382	modified inosine	36
1819	1383	modified cytidine	36
1820	1384	modified guanosine	36
1821	1385	modified uridine	36
1822	1386	1-methylinosine	36
1823	1386	m1I	36
1824	1386	one methylinosine	36
1825	1387	1,2'-O-dimethylinosine	36
1826	1387	m'Im	36
1827	1387	one two prime O dimethylinosine	36
1828	1388	2'-O-methylinosine	36
1829	1388	Im	36
1830	1388	two prime O methylinosine	36
1831	1389	3-methylcytidine	36
1832	1389	m3C	36
1833	1389	three methylcytidine	36
1834	1390	5-methylcytidine	36
1835	1390	five methylcytidine	36
1836	1390	m5C	36
1837	1391	2'-O-methylcytidine	36
1838	1391	Cm	36
1839	1391	two prime O methylcytidine	36
1840	1392	2-thiocytidine	36
1841	1392	s2C	36
1842	1392	two thiocytidine	36
1843	1393	ac4C	36
1844	1393	N4 acetylcytidine	36
1845	1393	N4-acetylcytidine	36
1846	1394	5-formylcytidine	36
1847	1394	f5C	36
1848	1394	five formylcytidine	36
1849	1395	5,2'-O-dimethylcytidine	36
1850	1395	five two prime O dimethylcytidine	36
1851	1395	m5Cm	36
1852	1396	ac4Cm	36
1853	1396	N4 acetyl 2 prime O methylcytidine	36
1854	1396	N4-acetyl-2'-O-methylcytidine	36
1855	1397	k2C	36
1856	1398	m4C	36
1857	1398	N4 methylcytidine	36
1858	1398	N4-methylcytidine	36
1859	1399	m4Cm	36
1860	1399	N4 2 prime O dimethylcytidine	36
1861	1399	N4,2'-O-dimethylcytidine	36
1862	1400	5-hydroxymethylcytidine	36
1863	1400	five hydroxymethylcytidine	36
1864	1400	hm5C	36
1865	1401	5-formyl-2'-O-methylcytidine	36
1866	1401	f5Cm	36
1867	1401	five formyl two prime O methylcytidine	36
1868	1402	m42Cm	36
1869	1402	N4,N4,2'-O-trimethylcytidine	36
1870	1403	1-methyladenosine	36
1871	1403	m1A	36
1872	1403	one methyladenosine	36
1873	1404	2-methyladenosine	36
1874	1404	m2A	36
1875	1404	two methyladenosine	36
1876	1405	m6A	36
1877	1405	N6 methyladenosine	36
1878	1405	N6-methyladenosine	36
1879	1406	2'-O-methyladenosine	36
1880	1406	Am	36
1881	1406	two prime O methyladenosine	36
1882	1407	2-methylthio-N6-methyladenosine	36
1883	1407	ms2m6A	36
1884	1407	two methylthio N6 methyladenosine	36
1885	1408	i6A	36
1886	1408	N6 isopentenyladenosine	36
1887	1408	N6-isopentenyladenosine	36
1888	1409	2-methylthio-N6-isopentenyladenosine	36
1889	1409	ms2i6A	36
1890	1409	two methylthio N6 isopentenyladenosine	36
1891	1410	io6A	36
1892	1410	N6 cis hydroxyisopentenyl adenosine	36
1893	1410	N6-(cis-hydroxyisopentenyl)adenosine	36
1894	1411	2-methylthio-N6-(cis-hydroxyisopentenyl) adenosine	36
1895	1411	ms2io6A	36
1896	1411	two methylthio N6 cis hydroxyisopentenyl adenosine	36
1897	1412	g6A	36
1898	1412	N6 glycinylcarbamoyladenosine	36
1899	1412	N6-glycinylcarbamoyladenosine	36
1900	1413	N6 threonylcarbamoyladenosine	36
1901	1413	N6-threonylcarbamoyladenosine	36
1902	1413	t6A	36
1903	1414	2-methylthio-N6-threonyl carbamoyladenosine	36
1904	1414	ms2t6A	36
1905	1414	two methylthio N6 threonyl carbamoyladenosine	36
1906	1415	m6t6A	36
1907	1415	N6 methyl N6 threonylcarbamoyladenosine	36
1908	1415	N6-methyl-N6-threonylcarbamoyladenosine	36
1909	1416	hn6A	36
1910	1416	N6 hydroxynorvalylcarbamoyladenosine	36
1911	1416	N6-hydroxynorvalylcarbamoyladenosine	36
1912	1417	2-methylthio-N6-hydroxynorvalyl carbamoyladenosine	36
1913	1417	ms2hn6A	36
1914	1417	two methylthio N6 hydroxynorvalyl carbamoyladenosine	36
1915	1418	2'-O-ribosyladenosine (phosphate)	36
1916	1418	Ar(p)	36
1917	1418	two prime O ribosyladenosine phosphate	36
1918	1419	m62A	36
1919	1419	N6,N6-dimethyladenosine	36
1920	1420	m6Am	36
1921	1420	N6 2 prime O dimethyladenosine	36
1922	1420	N6,2'-O-dimethyladenosine	36
1923	1421	m62Am	36
1924	1421	N6,N6,2'-O-trimethyladenosine	36
1925	1422	1,2'-O-dimethyladenosine	36
1926	1422	m1Am	36
1927	1422	one two prime O dimethyladenosine	36
1928	1423	ac6A	36
1929	1423	N6 acetyladenosine	36
1930	1423	N6-acetyladenosine	36
1931	1424	7-deazaguanosine	120
1932	1424	seven deazaguanosine	36
1933	1425	Q	36
1934	1426	eQ	36
1935	1427	galactosyl queuosine	36
1936	1427	galactosyl-queuosine	36
1937	1427	galQ	36
1938	1428	mannosyl queuosine	36
1939	1428	mannosyl-queuosine	36
1940	1428	manQ	36
1941	1429	7-cyano-7-deazaguanosine	36
1942	1429	preQ0	36
1943	1429	seven cyano seven deazaguanosine	36
1944	1430	7-aminomethyl-7-deazaguanosine	36
1945	1430	preQ1	36
1946	1430	seven aminomethyl seven deazaguanosine	36
1947	1431	G+	36
1948	1432	1-methylguanosine	36
1949	1432	m1G	36
1950	1432	one methylguanosine	36
1951	1433	m2G	36
1952	1433	N2 methylguanosine	36
1953	1433	N2-methylguanosine	36
1954	1434	7-methylguanosine	36
1955	1434	m7G	36
1956	1434	seven methylguanosine	36
1957	1435	2'-O-methylguanosine	36
1958	1435	Gm	36
1959	1435	two prime O methylguanosine	36
1960	1436	m22G	36
1961	1436	N2,N2-dimethylguanosine	36
1962	1437	m2Gm	36
1963	1437	N2 2 prime O dimethylguanosine	36
1964	1437	N2,2'-O-dimethylguanosine	36
1965	1438	m22Gmv	36
1966	1438	N2,N2,2'-O-trimethylguanosine	36
1967	1439	2'-O-ribosylguanosine (phosphate)	36
1968	1439	Gr(p)	36
1969	1439	two prime O ribosylguanosine phosphate	36
1970	1440	yW	36
1971	1441	o2yW	36
1972	1442	OHyW	36
1973	1443	OHyW*	36
1974	1443	undermodified hydroxywybutosine	36
1975	1444	IMG	36
1976	1445	mimG	36
1977	1446	m2,7G	36
1978	1446	N2 7 dimethylguanosine	36
1979	1446	N2,7-dimethylguanosine	36
1980	1447	m2,2,7G	36
1981	1447	N2,N2,7-trimethylguanosine	36
1982	1448	1,2'-O-dimethylguanosine	36
1983	1448	m1Gm	36
1984	1448	one two prime O dimethylguanosine	36
1985	1449	4-demethylwyosine	36
1986	1449	four demethylwyosine	36
1987	1449	imG-14	36
1988	1450	imG2	36
1989	1451	m2,7Gm	36
1990	1451	N2 7 2prirme O trimethylguanosine	36
1991	1451	N2,7,2'-O-trimethylguanosine	36
1992	1452	5-methyluridine	36
1993	1452	five methyluridine	36
1994	1452	m5U	36
1995	1453	2'-O-methyluridine	36
1996	1453	two prime O methyluridine	36
1997	1453	Um	36
1998	1454	5,2'-O-dimethyluridine	36
1999	1454	five two prime O dimethyluridine	36
2000	1454	m5Um	36
2001	1455	1-methylpseudouridine	36
2002	1455	m1Y	36
2003	1455	one methylpseudouridine	36
2004	1456	2'-O-methylpseudouridine	36
2005	1456	two prime O methylpseudouridine	36
2006	1456	Ym	36
2007	1457	2-thiouridine	36
2008	1457	s2U	36
2009	1457	two thiouridine	36
2010	1458	4-thiouridine	36
2011	1458	four thiouridine	36
2012	1458	s4U	36
2013	1459	5-methyl-2-thiouridine	36
2014	1459	five methyl 2 thiouridine	36
2015	1459	m5s2U	36
2016	1460	2-thio-2'-O-methyluridine	36
2017	1460	s2Um	36
2018	1460	two thio two prime O methyluridine	36
2019	1461	3-(3-amino-3-carboxypropyl)uridine	36
2020	1461	acp3U	36
2021	1462	5-hydroxyuridine	36
2022	1462	five hydroxyuridine	36
2023	1462	ho5U	36
2024	1463	5-methoxyuridine	36
2025	1463	five methoxyuridine	36
2026	1463	mo5U	36
2027	1464	cmo5U	36
2028	1464	uridine 5-oxyacetic acid	36
2029	1464	uridine five oxyacetic acid	36
2030	1465	mcmo5U	36
2031	1465	uridine 5-oxyacetic acid methyl ester	36
2032	1465	uridine five oxyacetic acid methyl ester	36
2033	1466	5-(carboxyhydroxymethyl)uridine	36
2034	1466	chm5U	36
2035	1466	five carboxyhydroxymethyl uridine	36
2036	1467	5-(carboxyhydroxymethyl)uridine methyl ester	36
2037	1467	five carboxyhydroxymethyl uridine methyl ester	36
2038	1467	mchm5U	36
2039	1468	5-methoxycarbonylmethyluridine	36
2040	1468	five methoxycarbonylmethyluridine	36
2041	1468	mcm5U	36
2042	1469	5-methoxycarbonylmethyl-2'-O-methyluridine	36
2043	1469	five methoxycarbonylmethyl two prime O methyluridine	36
2044	1469	mcm5Um	36
2045	1470	5-methoxycarbonylmethyl-2-thiouridine	36
2046	1470	five methoxycarbonylmethyl two thiouridine	36
2047	1470	mcm5s2U	36
2048	1471	5-aminomethyl-2-thiouridine	36
2049	1471	five aminomethyl two thiouridine	36
2050	1471	nm5s2U	36
2051	1472	5-methylaminomethyluridine	36
2052	1472	five methylaminomethyluridine	36
2053	1472	mnm5U	36
2054	1473	5-methylaminomethyl-2-thiouridine	36
2055	1473	five methylaminomethyl two thiouridine	36
2056	1473	mnm5s2U	36
2057	1474	5-methylaminomethyl-2-selenouridine	36
2058	1474	five methylaminomethyl two selenouridine	36
2059	1474	mnm5se2U	36
2060	1475	5-carbamoylmethyluridine	36
2061	1475	five carbamoylmethyluridine	36
2062	1475	ncm5U	36
2063	1476	5-carbamoylmethyl-2'-O-methyluridine	36
2064	1476	five carbamoylmethyl two prime O methyluridine	36
2065	1476	ncm5Um	36
2066	1477	5-carboxymethylaminomethyluridine	36
2067	1477	cmnm5U	36
2068	1477	five carboxymethylaminomethyluridine	36
2069	1478	5-carboxymethylaminomethyl- 2'-O-methyluridine	36
2070	1478	cmnm5Um	36
2071	1478	five carboxymethylaminomethyl two prime O methyluridine	36
2072	1479	5-carboxymethylaminomethyl-2-thiouridine	36
2073	1479	cmnm5s2U	36
2074	1479	five carboxymethylaminomethyl two thiouridine	36
2075	1480	3-methyluridine	36
2076	1480	m3U	36
2077	1480	three methyluridine	36
2078	1481	1-methyl-3-(3-amino-3-carboxypropyl) pseudouridine	36
2079	1481	m1acp3Y	36
2080	1482	5-carboxymethyluridine	36
2081	1482	cm5U	36
2082	1482	five carboxymethyluridine	36
2083	1483	3,2'-O-dimethyluridine	36
2084	1483	m3Um	36
2085	1483	three two prime O dimethyluridine	36
2086	1484	5-methyldihydrouridine	36
2087	1484	five methyldihydrouridine	36
2088	1484	m5D	36
2089	1485	3-methylpseudouridine	36
2090	1485	m3Y	36
2091	1485	three methylpseudouridine	36
2092	1486	5-taurinomethyluridine	36
2093	1486	five taurinomethyluridine	36
2094	1486	tm5U	36
2095	1487	5-taurinomethyl-2-thiouridine	36
2096	1487	five taurinomethyl two thiouridine	36
2097	1487	tm5s2U	36
2098	1488	5-(isopentenylaminomethyl)uridine	36
2099	1488	five isopentenylaminomethyl uridine	36
2100	1488	inm5U	36
2101	1489	5-(isopentenylaminomethyl)- 2-thiouridine	36
2102	1489	five isopentenylaminomethyl two thiouridine	36
2103	1489	inm5s2U	36
2104	1490	5-(isopentenylaminomethyl)- 2'-O-methyluridine	36
2105	1490	five isopentenylaminomethyl two prime O methyluridine	36
2106	1490	inm5Um	36
2107	1491	histone binding site	36
2108	1492	CDS fragment	36
2109	1492	incomplete CDS	36
2110	1493	modified amino acid feature	36
2111	1494	ModGly	36
2112	1494	modified glycine	36
2113	1495	ModAla	36
2114	1495	modified L alanine	36
2115	1495	modified L-alanine	36
2116	1496	ModAsn	36
2117	1496	modified L asparagine	36
2118	1496	modified L-asparagine	36
2119	1497	ModAsp	36
2120	1497	modified L aspartic acid	36
2121	1497	modified L-aspartic acid	36
2122	1498	ModCys	36
2123	1498	modified L cysteine	36
2124	1498	modified L-cysteine	36
2125	1499	ModGlu	36
2126	1499	modified L glutamic acid	36
2127	1499	modified L-glutamic acid	36
2128	1500	modified L threonine	36
2129	1500	modified L-threonine	36
2130	1500	ModThr	36
2131	1501	modified L tryptophan	36
2132	1501	modified L-tryptophan	36
2133	1501	ModTrp	36
2134	1502	ModGln	36
2135	1502	modified L glutamine	36
2136	1502	modified L-glutamine	36
2137	1503	modified L methionine	36
2138	1503	modified L-methionine	36
2139	1503	ModMet	36
2140	1504	modified L isoleucine	36
2141	1504	modified L-isoleucine	36
2142	1504	ModIle	36
2143	1505	modified L phenylalanine	36
2144	1505	modified L-phenylalanine	36
2145	1505	ModPhe	36
2146	1506	ModHis	36
2147	1506	modified L histidine	36
2148	1506	modified L-histidine	36
2149	1507	modified L serine	36
2150	1507	modified L-serine	36
2151	1507	MosSer	36
2152	1508	modified L lysine	36
2153	1508	modified L-lysine	36
2154	1508	ModLys	36
2155	1509	modified L leucine	36
2156	1509	modified L-leucine	36
2157	1509	ModLeu	36
2158	1510	modified L selenocysteine	36
2159	1510	modified L-selenocysteine	36
2160	1511	modified L valine	36
2161	1511	modified L-valine	36
2162	1511	ModVal	36
2163	1512	modified L proline	36
2164	1512	modified L-proline	36
2165	1512	ModPro	36
2166	1513	modified L tyrosine	36
2167	1513	modified L-tyrosine	36
2168	1513	ModTry	36
2169	1514	ModArg	36
2170	1514	modified L arginine	36
2171	1514	modified L-arginine	36
2172	1516	cleaved for gpi anchor region	36
2173	1517	biomaterial region	36
2174	1518	analysis feature	120
2175	1518	experimental output artefact	36
2176	1518	experimental_output_artefact	36
2177	1519	biological region	36
2178	1520	topologically defined region	36
2179	1521	translocation breakpoint	36
2180	1522	insertion breakpoint	36
2181	1523	deletion breakpoint	36
2182	1524	5' flanking region	120
2183	1524	five prime flanking region	36
2184	1525	3' flanking region	120
2185	1525	three prime flanking region	36
2186	1526	transcribed fragment	36
2187	1526	transfrag	120
2188	1527	cis splice site	36
2189	1528	trans splice site	36
2190	1529	splice boundary	36
2191	1529	splice junction	36
2192	1530	polypeptide conformational switch	36
2193	1531	dye terminator read	120
2194	1532	pyorsequenced read	120
2195	1533	ligation based read	120
2196	1534	polymerase synthesis read	120
2197	1535	cis regulatory frameshift element	36
2198	1536	expressed sequence assembly	36
2199	1537	DNA binding site	36
2200	1538	cryptic gene	36
2201	1539	mutation affecting polyadenylation	120
2202	1539	sequence variant affecting polyadenylation	36
2203	1540	3' RACE clone	120
2204	1541	cassette pseudogene	36
2205	1541	cassette type psedogene	120
2206	1542	A	36
2207	1542	Ala	36
2208	1543	V	36
2209	1543	Val	36
2210	1544	L	36
2211	1544	Leu	36
2212	1545	I	36
2213	1545	Ile	36
2214	1546	P	36
2215	1546	Pro	36
2216	1547	Trp	36
2217	1547	W	36
2218	1548	F	36
2219	1548	Phe	36
2220	1549	M	36
2221	1549	Met	36
2222	1550	G	36
2223	1550	Gly	36
2224	1551	S	36
2225	1551	Ser	36
2226	1552	T	36
2227	1552	Thr	36
2228	1553	Tyr	36
2229	1553	Y	36
2230	1554	C	36
2231	1554	Cys	36
2232	1555	Gln	36
2233	1555	Q	36
2234	1556	Asn	36
2235	1556	N	36
2236	1557	K	36
2237	1557	Lys	36
2238	1558	Arg	36
2239	1558	R	36
2240	1559	H	36
2241	1559	His	36
2242	1560	Asp	36
2243	1560	aspartic acid	36
2244	1560	D	36
2245	1561	E	36
2246	1561	Glu	36
2247	1561	glutamic acid	36
2248	1562	Sec	36
2249	1562	U	36
2250	1563	O	36
2251	1563	Pyl	36
2252	1564	transcribed cluster	36
2253	1564	unigene cluster	120
2254	1565	unigene cluster	120
2255	1566	Clustered_Regularly_Interspaced_Short_Palindromic_Repeat	36
2256	1566	CRISPR element	36
2257	1567	insulator binding site	120
2258	1568	enhancer binding site	120
2259	1569	contig collection	36
2260	1570	large intervening non-coding RNA	36
2261	1570	long intergenic non-coding RNA	36
2262	1571	UTR sequence tag	36
2263	1572	3' UST	120
2264	1573	5' UST	120
2265	1574	RACE sequence tag	36
2266	1575	3' RST	36
2267	1576	5' RST	120
2268	1577	UST match	36
2269	1578	RST match	36
2270	1579	primer match	36
2271	1580	miRNA antiguide	36
2272	1580	miRNA passenger strand	36
2273	1580	miRNA star	36
2274	1581	trans-splice junction	36
2275	1583	natural plasmid	36
2276	1584	gene trap construct	36
2277	1585	promoter trap construct	36
2278	1586	enhancer trap construct	36
2279	1587	PAC end	36
2280	1588	Random Amplification Polymorphic DNA	36
2281	1589	shadow enhancer	36
2282	1590	single nucleotide variant	36
2283	1591	X element combinatorial repeat	36
2284	1592	Y' element	36
2285	1593	standard draft	36
2286	1594	high quality draft	36
2287	1595	improved high quality draft	36
2288	1596	annotation directed improvement	36
2289	1597	non contiguous finished	36
2290	1598	finished	36
2291	1598	finished genome	36
2292	1599	intronic regulatory region	36
2293	1600	CDEI	36
2294	1600	Centromere DNA Element I	36
2295	1601	CDEII	36
2296	1601	centromere DNA Element II	36
2297	1602	CDEIII	36
2298	1602	centromere DNA Element III	36
2299	1603	telomeric repeat	36
2300	1604	X element	120
2301	1605	YAC end	36
2302	1606	whole genome sequence status	36
2303	1607	heritable phenotypic marker	36
2304	1607	phenotypic marker	36
2305	1608	peptide collection	36
2306	1608	peptide set	36
2307	1609	high identity region	36
2308	1610	processed transcript	36
2309	1611	assortment derived variation	120
2310	1612	reference genome	120
2311	1613	variant genome	120
2312	1614	variant collection	120
2313	1615	alteration attribute	36
2314	1616	chromosomal variation attribute	36
2315	1619	insertion attribute	36
2316	1624	inversion attribute	36
2317	1627	translocation attribute	36
2318	1630	duplication attribute	120
2319	1631	chromosomally aberrant genome	120
2320	1632	assembly error correction	120
2321	1633	base call error correction	120
2322	1634	localization signal	120
2323	1634	peptide localization signal	36
2324	1635	NLS	36
2325	1636	endosomal localization signal	36
2326	1637	lysosomal localization signal	36
2327	1638	NES	36
2328	1638	nuclear export signal	36
2329	1639	recombination signal sequence	120
2330	1640	cryptic splice signal	120
2331	1640	cryptic splice site	36
2332	1641	nuclear rim localization signal	120
2333	1642	P element	120
2334	1643	functional variant	36
2335	1644	structural variant	120
2336	1645	transcript function variant	36
2337	1646	translational product variant	36
2338	1647	level of transcript variant	36
2339	1648	decreased transcript level	36
2340	1649	increased transcript level variant	36
2341	1650	transcript processing variant	36
2342	1651	editing variant	36
2343	1652	polyadenylation variant	36
2344	1653	transcript stability variant	36
2345	1654	decrease transcript stability variant	36
2346	1655	increased transcript stability variant	36
2347	1656	transcription variant	36
2348	1657	rate of transcription variant	36
2349	1658	increased transcription rate variant	36
2350	1659	decreased transcription rate variant	36
2351	1660	translational product level variant	36
2352	1661	polypeptide function variant	36
2353	1662	decrease translational product level	36
2354	1663	increase translational product level	36
2355	1664	polypeptide gain of function variant	36
2356	1665	polypeptide localization variant	36
2357	1666	polypeptide loss of function variant	36
2358	1667	inactive ligand binding site	36
2359	1668	polypeptide partial loss of function	36
2360	1669	polypeptide post translational processing variant	36
2361	1670	copy number change	36
2362	1671	gene structure variant	36
2363	1672	gene fusion	36
2364	1673	regulatory region variant	36
2365	1673	regulatory_region_	36
2366	1674	stop retained variant	36
2367	1675	splicing variant	36
2368	1676	cryptic splice site activation	36
2369	1677	cryptic splice acceptor	36
2370	1678	cryptic splice donor	36
2371	1679	exon loss	36
2372	1680	intron gain	36
2373	1681	splice acceptor variant	36
2374	1682	splice donor variant	36
2375	1683	transcript variant	36
2376	1684	complex transcript variant	36
2377	1684	complex_indel	36
2378	1684	complext change in transcript	36
2379	1685	stop codon lost	36
2380	1685	stop lost	36
2381	1686	transcript sequence variant	36
2382	1687	coding sequence variant	36
2383	1687	coding variant	36
2384	1687	codon variant	36
2385	1687	codon_variant	36
2386	1688	initiatior codon variant	36
2387	1688	initiator codon change	36
2388	1689	missense	36
2389	1689	missense codon	36
2390	1689	non synonymous codon	36
2391	1689	non synonymous variant	36
2392	1689	non_synonymous_coding	36
2393	1690	conservative missense codon	36
2394	1690	conservative missense variant	36
2395	1690	neutral missense codon	120
2396	1690	quiet missense codon	120
2397	1691	non conservative missense codon	36
2398	1691	non conservative missense variant	36
2399	1692	nonsense	36
2400	1692	nonsense codon	36
2401	1692	stop codon gained	120
2402	1692	stop gained	36
2403	1693	frameshift variant	36
2404	1693	frameshift_	36
2405	1693	frameshift_coding	36
2406	1694	terminal codon variant	36
2407	1694	terminal_codon_variant	36
2408	1694	terminator codon variant	36
2409	1695	frame restoring variant	36
2410	1696	-1 frameshift variant	36
2411	1696	minus 1 frameshift variant	36
2412	1697	-2 frameshift variant	36
2413	1697	minus 2 frameshift variant	36
2414	1698	+1 frameshift variant	36
2415	1698	plus 1 frameshift variant	36
2416	1699	+2 frameshift variant	36
2417	1699	plus 2 frameshift variant	36
2418	1700	transcript secondary structure variant	36
2419	1701	compensatory transcript secondary structure variant	36
2420	1702	translational product structure variant	36
2421	1703	3D polypeptide structure variant	36
2422	1704	complex 3D structural variant	36
2423	1705	conformational change variant	36
2424	1706	complex change of translational product variant	36
2425	1707	polypeptide sequence variant	36
2426	1708	amino acid deletion	36
2427	1709	amino acid insertion	36
2428	1710	amino acid substitution	36
2429	1711	conservative amino acid substitution	36
2430	1712	non conservative amino acid substitution	36
2431	1713	elongated polypeptide	36
2432	1714	elongated polypeptide C terminal	36
2433	1715	elongated polypeptide N terminal	36
2434	1716	elongated in frame polypeptide C terminal	36
2435	1717	elongated polypeptide out of frame C terminal	36
2436	1718	elongated in frame polypeptide N terminal	36
2437	1719	elongated out of frame N terminal	36
2438	1720	polypeptide fusion	36
2439	1721	polypeptide truncation	36
2440	1722	inactive catalytic site	36
2441	1723	nc transcript variant	36
2442	1723	non coding transcript variant	36
2443	1723	within_non_coding_gene	36
2444	1724	mature miRNA variant	36
2445	1724	within_mature_miRNA	36
2446	1725	NMD transcript variant	36
2447	1725	NMD_transcript	36
2448	1726	UTR variant	36
2449	1726	UTR_	36
2450	1727	5'UTR variant	36
2451	1727	5PRIME_UTR	36
2452	1727	five prime UTR variant	36
2453	1727	untranslated-5	36
2454	1728	3'UTR variant	36
2455	1728	3PRIME_UTR	36
2456	1728	three prime UTR variant	36
2457	1728	untranslated-3	36
2458	1729	incomplete terminal codon variant	36
2459	1729	partial_codon	36
2460	1730	intron variant	36
2461	1730	intron_	36
2462	1730	intronic	36
2463	1731	intergenic	36
2464	1731	intergenic variant	36
2465	1732	essential_splice_site	36
2466	1732	splice site variant	36
2467	1733	splice region variant	36
2468	1733	splice_region_variant	36
2469	1734	upstream gene variant	36
2470	1735	downstream gene variant	36
2471	1736	5KB downstream variant	36
2472	1736	downstream	36
2473	1736	within 5KB downstream	120
2474	1737	500B downstream variant	36
2475	1737	near-gene-3	36
2476	1738	5kb upstream variant	36
2477	1738	upstream	36
2478	1739	2KB upstream variant	36
2479	1739	near-gene-5	36
2480	1740	rRNA gene	36
2481	1741	piRNA gene	36
2482	1742	RNase P RNA gene	36
2483	1743	RNase MRP RNA gene	120
2484	1744	lincRNA gene	36
2485	1745	mathematically defined repeat	36
2486	1746	Telomerase RNA component	36
2487	1746	telomerase RNA gene	36
2488	1746	TERC	36
2489	1747	targeting vector	120
2490	1748	genetic marker	120
2491	1749	DArT marker	36
2492	1750	kozak consensus	36
2493	1750	kozak consensus sequence	36
2494	1750	kozak sequence	36
2495	1751	nested transposon	36
2496	1752	nested repeat	120
2497	1753	cds-indel	36
2498	1753	inframe variant	36
2499	1754	RARE	36
2500	1754	retinoic acid responsive element	36
2501	1755	nucleotide to protein binding site	120
2502	1756	nucleotide binding site	36
2503	1757	metal binding site	120
2504	1758	ligand binding site	36
2505	1759	nested tandem repeat	36
2506	1759	NTR	36
2507	1760	promoter element	36
2508	1761	core promoter element	36
2509	1761	general transcription factor binding site	120
2510	1762	RNA polymerase II TATA box	36
2511	1763	RNA polymerase III TATA box	36
2512	1764	BREd	36
2513	1764	BREd motif	120
2514	1765	downstream core element	120
2515	1766	DCE SI	120
2516	1767	DCE SII	36
2517	1768	DCE SIII	36
2518	1769	proximal promoter element	120
2519	1769	specific transcription factor binding site	120
2520	1770	RNApol II core promoter	36
2521	1771	distal promoter element	120
2522	1772	bacterial RNA polymerase promoter sigma 70	36
2523	1773	bacterial RNA polymerase promoter sigma54	36
2524	1774	minus 12 signal	36
2525	1775	minus 24 signal	120
2526	1776	A box type 1	120
2527	1777	A box type 2	120
2528	1778	IE	36
2529	1778	intermediate element	120
2530	1779	regulatory promoter element	120
2531	1780	transcription regulatory region	36
2532	1781	translation regulatory region	36
2533	1782	recombination regulatory region	36
2534	1783	replication regulatory region	120
2535	1784	sequence motif	120
2536	1785	experimental feature attribute	120
2537	1787	quality value	120
2538	1788	restriction endonuclease recognition site	36
2539	1788	restriction enzyme recognition site	36
2540	1789	restriction enzyme cleavage junction	36
2541	1790	5' restriction enzyme junction	36
2542	1791	3' restriction enzyme junction	36
2543	1792	blunt end restriction enzyme cleavage site	36
2544	1793	sticky end restriction enzyme cleavage site	120
2545	1794	blunt end restriction enzyme cleavage site	120
2546	1795	single strand restriction enzyme cleavage site	120
2547	1796	single strand overhang	36
2548	1796	sticky end	120
2549	1797	experimentally defined binding region	120
2550	1798	ChIP seq region	120
2551	1799	allele specific primer extension primer	36
2552	1799	ASPE primer	36
2553	1800	dCAPS primer	36
2554	1800	derived cleaved amplified polymorphic primer	36
2555	1801	histone modification	36
2556	1801	histone modification site	120
2557	1802	histone methylation	36
2558	1802	histone methylation site	36
2559	1803	histone acetylation	36
2560	1803	histone acetylatoin site	36
2561	1804	H3K9 acetylation site	36
2562	1804	H3K9Ac	120
2563	1805	H3K14 acetylation site	36
2564	1805	H3K14Ac	120
2565	1806	H3K4 mono-methylation site	36
2566	1806	H3K4me1	120
2567	1807	H3K4 tri-methylation	36
2568	1807	H3K4me3	120
2569	1808	H3K9 tri-methylation site	36
2570	1808	H3K9Me3	120
2571	1809	H2K27 mono-methylation site	36
2572	1809	H2K27Me1	120
2573	1810	H3K27 tri-methylation site	36
2574	1810	H3K27Me3	120
2575	1811	H3K79 mono-methylation site	36
2576	1811	H3K79me1	120
2577	1812	H3K79 di-methylation site	36
2578	1812	H3K79Me2	120
2579	1813	H3K79 tri-methylation site	36
2580	1813	H3K79Me3	120
2581	1814	H4K20 mono-methylation site	36
2582	1814	H4K20Me1	120
2583	1815	H2BK5 mono-methylation site	36
2584	1816	interferon stimulated response element	36
2585	1817	histone ubiquitination site	120
2586	1818	H2BUbiq	120
2587	1819	H3K18 acetylation site	36
2588	1819	H3K18Ac	120
2589	1820	H3K23 acylation site	120
2590	1820	H3K23Ac	120
2591	1821	epigenetically modified region	120
2592	1822	H3K27 acylation site	36
2593	1822	H3K27Ac	120
2594	1823	H3K36 mono-methylation site	36
2595	1823	H3K36<Me1	120
2596	1824	H3K36 di-methylation site	36
2597	1824	H3K36Me2	120
2598	1825	H3K36 tri-methylation site	36
2599	1825	H3K36Me3	120
2600	1826	H3K4 di-methylation site	36
2601	1826	H3K4Me2	120
2602	1827	H3K27 di-methylation site	36
2603	1827	H3K27Me2	120
2604	1828	H3K9 mono-methylation site	36
2605	1828	H3K9Me1	120
2606	1829	H3K9 di-methylation site	36
2607	1829	H3K9Me2	120
2608	1830	H4K16 acylation_site	120
2609	1830	H4K16Ac	120
2610	1831	H4K5 acylation site	120
2611	1831	H4K5Ac	120
2612	1832	H4K8 acylation site	120
2613	1832	H4K8Ac	120
2614	1833	H3K27 methylation site	36
2615	1834	H3K36 methylation site	36
2616	1835	H3K4 methylation site	36
2617	1836	H3K79 methylation site	36
2618	1837	H3K9 methylation site	36
2619	1838	histone acylation region	120
2620	1839	H4K acylation region	36
2621	1839	H4KAc	120
2622	1840	gene with non canonical start codon	36
2623	1841	gene with start codon CUG	36
2624	1842	pseudogenic gene segment	36
2625	1843	copy number gain	36
2626	1843	gain	120
2627	1844	copy number loss	36
2628	1844	loss	120
2629	1845	uniparental disomy	36
2630	1845	UPD	36
2631	1846	maternal uniparental disomy	36
2632	1847	paternal uniparental disomy	36
2633	1848	open chromatin region	36
2634	1849	SL3 acceptor site	36
2635	1850	SL4 acceptor site	36
2636	1851	SL5 acceptor site	36
2637	1852	SL6 acceptor site	36
2638	1853	SL37 acceptor site	36
2639	1854	SL8 acceptor site	36
2640	1855	SL9 acceptor site	36
2641	1856	SL10 acceptor site	36
2642	1857	SL11 acceptor site	36
2643	1858	SL12 acceptor site	36
2644	1859	duplicated pseudogene	120
2645	1860	disabled gene	120
2646	1860	unitary pseudogene	120
2647	1861	non processed pseudogene	120
2648	1862	variant quality	36
2649	1863	variant origin	36
2650	1864	variant frequency	36
2651	1865	unique variant	36
2652	1866	rare variant	36
2653	1867	polymorphic variant	36
2654	1868	common variant	36
2655	1869	fixed variant	36
2656	1870	variant phenotype	36
2657	1871	benign variant	36
2658	1872	disease associated variant	36
2659	1873	disease causing variant	36
2660	1874	lethal variant	36
2661	1875	quantitative variant	36
2662	1876	maternal variant	36
2663	1877	paternal variant	36
2664	1878	somatic variant	36
2665	1879	germline variant	36
2666	1880	pedigree specific variant	36
2667	1881	population specific variant	36
2668	1882	de novo variant	36
2669	1883	TF binding site variant	36
2670	1884	complex	120
2671	1885	structural alteration	36
2672	1886	LOH	36
2673	1886	loss of heterozygosity	36
2674	1887	splice donor 5th base variant	36
2675	1888	U-box	36
2676	1889	mating type region	36
2677	1890	paired end fragment	36
2678	1891	exon variant	36
2679	1893	clone end	36
2680	1894	point centromere	36
2681	1895	regional centromere	36
2682	1896	regional centromere central core	36
2683	1897	centromeric repeat	36
2684	1898	lmr repeat	36
2685	1898	lmr1L	36
2686	1898	lmr1R	36
2687	1898	regional centromere inner repeat region	36
2688	1899	regional centromere outer repeat region	36
2689	1900	trans acting small interfering RNA	120
2690	1901	tasiRNA primary transcript	36
2691	1902	increased polyadenylation variant	36
2692	1903	decreased polyadenylation variant	36
2693	1904	DDB box	36
2694	1904	DDB-box	36
2695	1905	D-box	36
2696	1905	destruction box	36
2697	1906	endoplasmic reticulum retention signal	36
2698	1906	ER retention signal	36
2699	1907	KEN box	36
2700	1908	mitochondrial signal sequence	36
2701	1908	mitochondrial targeting signal	36
2702	1908	MTS	36
2703	1909	signal anchor	36
2704	1909	uncleaved signal peptide	36
2705	1910	PIP box	36
2706	1911	phosphorylation site	36
2707	1912	transmembrane helix	36
2708	1913	vacuolar sorting signal	36
2709	1914	coding variant quality	36
2710	1916	non synonymous	120
2711	1918	protein altering variant	36
2712	1919	coding-synon	36
2713	1919	silent mutation	120
2714	1919	silent substitution	120
2715	1919	silent_mutation	120
2716	1919	synonymous codon	36
2717	1919	synonymous_coding	36
2718	1919	synonymous_codon	36
2719	1920	inframe change in CDS length	36
2720	1920	inframe indel	36
2721	1921	inframe codon gain	120
2722	1921	inframe increase in CDS length	36
2723	1921	inframe insertion	36
2724	1921	inframe_codon_gain	36
2725	1922	inframe codon loss	120
2726	1922	inframe decrease in CDS length	36
2727	1922	inframe deletion	120
2728	1922	inframe_codon_loss	36
2729	1923	conservative increase in CDS length	36
2730	1923	conservative inframe insertion	36
2731	1924	disruptive increase in CDS length	36
2732	1924	disruptive inframe insertion	36
2733	1925	conservative decrease in CDS length	120
2734	1925	conservative inframe deletion	36
2735	1926	disruptive decrease in CDS length	36
2736	1926	disruptive inframe deletion	36
2737	1927	mRNA read	36
2738	1928	genomic DNA read	36
2739	1929	mRNA contig	120
2740	1930	AFLP	36
2741	1930	AFLP fragment	36
2742	1930	AFLP-PCR	36
2743	1930	amplified fragment length polymorphism	36
2744	1930	amplified fragment length polymorphism PCR	36
2745	1931	protein hmm match	36
2746	1932	immunoglobulin region	36
2747	1933	V region	36
2748	1934	C region	36
2749	1935	N-region	36
2750	1936	S region	36
2751	1937	mobile element insertion	36
2752	1938	novel sequence insertion	36
2753	1939	CSL response element	36
2754	1940	GATA box	36
2755	1940	GATA element	120
2756	1941	polymorphic psuedogene	36
2757	1942	AP-1 binding site	36
2758	1943	ATF/CRE site	36
2759	1943	cyclic AMP response element	36
2760	1944	copper-response element	36
2761	1945	DNA damage response element	36
2762	1946	FLEX element	120
2763	1947	forkhead motif	36
2764	1948	homol D box	36
2765	1949	homol E box	36
2766	1950	heat shock element	36
2767	1951	IDP (GATA)	36
2768	1951	iron repressed GATA element	36
2769	1952	mating type M-box	36
2770	1953	androgen response element	36
2771	1953	ARE	36
2772	1954	single molecule fish probe	36
2773	1954	smFISH probe	120
2774	1955	MluI cell cycle box	36
2775	1956	CCAAT motif	36
2776	1957	Ace2 upstream activating sequence	36
2777	1958	TR box	36
2778	1959	STREP motif	120
2779	1959	stress-starvation response element of Schizosaccharomyces pombe	36
2780	1960	rDIS	36
2781	1961	SRE	149
2782	1962	d(GT)n	36
2783	1963	d(GTT)	36
2784	1964	Sap1 recognitions site	36
2785	1965	calcineurin-dependent response element	36
2786	1965	CDRE motif	36
2787	1966	BAC read contig	36
2788	1967	candidate gene	36
2789	1967	target gene	36
2790	1968	positional candidate gene	36
2791	1968	positional target gene	120
2792	1969	functional candidate gene	36
2793	1969	functional target gene	36
2794	1970	eRNA	36
2795	1972	rearrangement breakpoint	36
2796	1973	interchromosomal breakpoint	36
2797	1974	intrachromosomal breakpoint	36
2798	1975	unassigned scaffold	120
2799	1975	unassigned supercontig	36
2800	1976	partial genomic sequence assembly	36
2801	1976	pseudomolecule	149
2802	1976	sequence assembly with N-gaps	36
2803	1977	long non-coding RNA	36
2804	1978	feature alteration	36
2805	1979	feature ablation	36
2806	1980	feature amplification	36
2807	1981	feature translocation	36
2808	1982	feature fusion	36
2809	1983	transcript translocation	36
2810	1984	regulatory region translocation	36
2811	1985	TFBS binding site translocation	36
2812	1985	transcription factor binding site translocation	36
2813	1986	transcript fusion	36
2814	1987	regulatory region fusion	36
2815	1988	TFBS fusion	36
2816	1988	transcription factor binding site fusion	36
2817	1989	transcript amplification	36
2818	1990	transcript regulatory region fusion	36
2819	1991	regulatory region amplification	36
2820	1992	TFBS amplification	36
2821	1992	transcription factor binding site amplification	36
2822	1993	transcript ablation	36
2823	1994	regulatory region ablation	36
2824	1995	TFBS ablation	36
2825	1995	transcription factor binding site ablation	36
2826	1996	transposable element CDS	36
2827	1997	transposable element pseudogene	36
2828	1998	dg repeat	36
2829	1999	dh repeat	36
2830	2000	m26 site	36
2831	2001	AACCCT box	36
2832	2002	splice region	120
2833	2003	intronic lncRNA	36
2834	2004	antisense lncRNA	120
2835	2004	natural antisense transcript	36
2836	2005	centromere outer repeat transcript	36
2837	2005	regional centromere outer repeat region transcript	36
2838	2005	regional_centromere_outer_repeat_region_transcript	36
2839	2006	feature truncation	36
2840	2007	feature elongation	36
2841	2008	internal feature elongation	36
2842	2009	frameshift elongation	36
2843	2010	frameshft truncation	36
2844	2011	copy number increase	36
2845	2013	bacterial RNApol promoter sigma ecf	36
2846	2014	DNA spacer replication fork barrier	36
2847	2014	rDNA replication fork barrier	36
2848	2014	RFB	36
2849	2014	RTS1 barrier	36
2850	2014	RTS1 element	36
2851	2015	transcriptional initiation cluster	36
2852	2015	transcriptional start site cluster	36
2853	2015	TSC	36
2854	2015	TSS cluster	36
2855	2016	CAGE tag	36
2856	2017	CAGE cluster	36
2857	2017	CAGE peak	36
2858	2017	CAGE_peak	36
2859	2018	5 methylcytosine	36
2860	2018	5mC	36
2861	2018	m5C	36
2862	2018	m5c	36
2863	2019	4mC	36
2864	2019	m4C	36
2865	2019	m4c	36
2866	2019	N4 methylcytosine	36
2867	2019	N4-methylcytosine	36
2868	2020	6mA	36
2869	2020	m6A	36
2870	2020	m6a	36
2871	2020	N6-methyladenine	36
2872	2021	mitochondrial contig	36
2873	2022	mitochondrial scaffold	36
2874	2022	mitochondrial supercontig	36
2875	2022	mitochondrial_scaffold	36
2876	2023	telomeric repeat containing RNA	120
2877	2026	anti-ARRET	36
2878	2027	telomeric transcript	36
2879	2028	distal duplication	36
2880	2029	regulatory region	36
2881	2030	4.5S snRNA primary transcript	36
2882	2030	U14 snoRNA primary transcript	36
2883	2031	methylation guide snoRNA	36
2884	2032	rRNA cleavage RNA	36
2885	2033	exon of single exon gene	36
2886	2033	single_exon	120
2887	2033	singleton exon	36
2888	2034	cassette array member	36
2889	2035	gene cassette member	36
2890	2036	gene subarray member	36
2891	2037	primer binding site	36
2892	2038	gene array	36
2893	2039	gene subarray	36
2894	2040	gene cassette	36
2895	2041	gene cassette array	36
2896	2042	gene group	36
2897	2043	selenocysteine tRNA primary transcript	36
2898	2044	selenocysteinyl tRNA	36
2899	2044	selenocysteinyl-transfer ribonucleic acid	36
2900	2044	selenocysteinyl-transfer RNA	36
2901	2045	syntenic region	36
2902	2046	biochemical motif	36
2903	2046	biochemical region of peptide	36
2904	2046	biochemical_region	120
2905	2047	molecular contact region	120
2906	2048	disordered region	120
2907	2048	intrinsically unstructured polypeptide region	36
2908	2049	catmat-3l	36
2909	2050	catmat-4l	36
2910	2051	catmat-3r	36
2911	2052	catmat-4r	36
2912	2053	alpha beta motif	36
2913	2054	lipoprotein signal peptide	36
2914	2054	prokaryotic membrane lipoprotein lipid attachment site	36
2915	2055	no output	36
2916	2056	cleaved peptide region	36
2917	2057	coil	120
2918	2057	peptide coil	36
2919	2057	random coil	120
2920	2058	hydropathic	120
2921	2058	hydrophobic region of peptide	120
2922	2058	hydrophobic_region	36
2923	2058	hydrophobicity	120
2924	2059	N-region	120
2925	2060	C-region	120
2926	2061	central hydrophobic region of signal peptide	36
2927	2061	central_hydrophobic_region	120
2928	2061	H-region	120
2929	2062	motif	120
2930	2063	binding	120
2931	2063	polypeptide binding motif	36
2932	2064	catalytic_motif	120
2933	2064	polypeptide catalytic motif	36
2934	2065	polypeptide DNA contact	36
2935	2066	polypeptide conserved region	36
2936	2068	complex substitution	36
2937	2069	point mutation	36
2938	2071	pyrimidine transition	36
2939	2072	C to T transition	36
2940	2073	C to T transition at pCpG site	36
2941	2074	T to C transition	36
2942	2075	purine transition	36
2943	2076	A to G transition	36
2944	2077	G to A transition	36
2945	2079	pyrimidine to purine transversion	36
2946	2080	C to A transversion	36
2947	2081	C to G transversion	36
2948	2082	T to A transversion	36
2949	2083	T to G transversion	36
2950	2084	purine to pyrimidine transversion	36
2951	2085	A to C transversion	36
2952	2086	A to T transversion	36
2953	2087	G to C transversion	36
2954	2088	G to T transversion	36
2955	2089	intrachromosomal mutation	36
2956	2090	(bacteria)&ampDgr;	120
2957	2090	(Drosophila)Df	120
2958	2090	(fungi)D	120
2959	2090	chromosomal deletion	36
2960	2090	deficiency	36
2961	2091	(bacteria)IN	120
2962	2091	(Drosophila)In	120
2963	2091	(fungi)In	120
2964	2091	chromosomal inversion	36
2965	2092	interchromosomal mutation	36
2966	2094	nucleotide duplication	36
2967	2094	nucleotide_duplication	120
2968	2095	inversion	36
2969	2096	(Drosophila)Dp	120
2970	2096	(fungi)Dp	120
2971	2096	chromosomal duplication	36
2972	2097	intrachromosomal duplication	36
2973	2098	direct tandem duplication	36
2974	2099	inverted tandem duplication	36
2975	2099	mirror duplication	120
2976	2100	(Drosophila)Tp	120
2977	2100	intrachromosomal transposition	36
2978	2101	compound chromosome	36
2979	2102	centric-fusion translocations	36
2980	2102	Robertsonian fusion	36
2981	2102	whole-arm translocations	36
2982	2103	(Drosophila)T	120
2983	2103	(fungi)T	120
2984	2103	chromosomal translocation	36
2985	2104	(Drosophila)R	120
2986	2104	(fungi)C	120
2987	2104	ring chromosome	36
2988	2105	pericentric inversion	36
2989	2106	paracentric inversion	36
2990	2107	reciprocal chromosomal translocation	36
2991	2108	mutation affecting transcript	36
2992	2108	mutation causing partially characterised change in transcript	120
2993	2108	mutation causing uncharacterised change in transcript	120
2994	2108	sequence variant causing partially characterised change in transcript	36
2995	2108	sequence variant causing uncharacterised change in transcript	36
2996	2108	sequence variation affecting transcript	36
2997	2108	sequence_variant_causing_partially_characterised_change_in_transcript	36
2998	2108	sequence_variant_causing_uncharacterised_change_in_transcript	36
2999	2109	mutation causing no change in transcript	120
3000	2109	sequence variant causing no change in transcript	36
3001	2110	mutation affecting coding sequence	36
3002	2110	sequence variation affecting coding sequence	120
3003	2111	mutation causing initiator codon change in transcript	120
3004	2111	sequence variant causing initiator codon change in transcript	36
3005	2112	mutaton causing amino acid coding codon change in transcript	120
3006	2112	sequence variant causing amino acid coding codon change in transcript	36
3007	2113	mutation causing synonymous codon change in transcript	120
3008	2113	sequence variant causing synonymous codon change in transcript	36
3009	2114	mutation causing non synonymous codon change in transcript	120
3010	2114	non-synonymous codon change in transcript	36
3011	2114	sequence variant causing non synonymous codon change in transcript	36
3012	2115	mutation causing missense codon change in transcript	120
3013	2115	sequence variant causing missense codon change in transcript	36
3014	2116	mutation causing conservative missense codon change in transcript	120
3015	2116	sequence variant causing conservative missense codon change in transcript	36
3016	2117	mutation causing nonconservative missense codon change in transcript	120
3017	2117	sequence variant causing nonconservative missense codon change in transcript	36
3018	2118	mutation causing nonsense codon change in transcript	120
3019	2118	sequence variant causing nonsense codon change in transcript	36
3020	2119	mutation causing terminator codon change in transcript	120
3021	2119	sequence variant causing terminator codon change in transcript	36
3022	2120	mutation affecting reading frame	36
3023	2120	sequence variation affecting reading frame	120
3024	2121	frameshift mutation	36
3025	2121	frameshift sequence variation	120
3026	2121	out of frame mutation	120
3027	2122	plus 1 frameshift mutation	36
3028	2122	sequence variant causing plus 1 frameshift mutation	36
3029	2123	minus 1 frameshift mutation	36
3030	2123	sequence variant causing minus 1 frameshift	36
3031	2124	plus 2 frameshift mutation	36
3032	2124	sequence variant causing plus 2 frameshift	36
3033	2125	minus 2 frameshift mutation	36
3034	2125	sequence variant causing minus 2 frameshift	36
3035	2126	mutation affecting transcript processing	120
3036	2126	sequence variant affecting transcript processing	36
3037	2127	mutation affecting splicing	120
3038	2127	sequence variant affecting splicing	36
3039	2128	mutation affecting splice donor	120
3040	2128	sequence variant affecting splice donor	120
3041	2128	splice donor mutation	36
3042	2129	mutation affecting splicing	120
3043	2129	sequence variant affecting splice acceptor	120
3044	2129	splice acceptor mutation	36
3045	2130	cryptic splice activator sequence variant	36
3046	2130	mutation causing cryptic splice activator	120
3047	2130	sequence variant causing cryptic splice activator	36
3048	2131	mutation affecting editing	120
3049	2131	sequence variant affecting editing	36
3050	2132	mutation affecting transcription	120
3051	2132	sequence variant affecting transcription	36
3052	2133	mutation decreasing rate of transcription	120
3053	2133	sequence variation decreasing rate of transcription	36
3054	2134	mutation affecting transcript sequence	36
3055	2134	sequence variation affecting transcript sequence	36
3056	2135	mutation increasing rate of transcription	120
3057	2135	sequence variation increasing rate of transcription	36
3058	2136	mutation affecting rate of transcription	120
3059	2136	sequence variant affecting rate of transcription	36
3060	2137	mutation affecting transcript stability	120
3061	2137	sequence variant affecting transcript stability	36
3062	2138	mutation increasing transcript stability	120
3063	2138	sequence variant increasing transcript stability	36
3064	2139	mutation decreasing transcript stability	120
3065	2139	sequence variant decreasing transcript stability	36
3066	2140	mutation affecting level of transcript	120
3067	2140	sequence variation affecting level of transcript	36
3068	2141	mutation decreasing level of transcript	36
3069	2141	sequence variation decreasing level of transcript	120
3070	2142	mutation increasing level of transcript	36
3071	2142	sequence variation increasing level of transcript	36
3072	2143	mutation affecting translational product	120
3073	2143	mutation causing partially characterised change of translational product	120
3074	2143	mutation causing uncharacterised change of translational product	120
3075	2143	sequence variant affecting translational product	36
3076	2143	sequence variant causing partially characterised change of translational product	36
3077	2143	sequence variant causing uncharacterised change of translational product	36
3078	2143	sequence_variant_causing_partially_characterised_change_of_translational_product	36
3079	2143	sequence_variant_causing_uncharacterised_change_of_translational_product	36
3080	2144	mutation causing no change of translational product	120
3081	2144	sequence variant causing no change of translational product	36
3082	2145	mutation causing complex change of translational product	120
3083	2145	sequence variant causing complex change of translational product	36
3084	2146	mutation causing amino acid substitution	120
3085	2146	sequence variant causing amino acid substitution	36
3086	2147	mutation causing conservative amino acid substitution	120
3087	2147	sequence variant causing conservative amino acid substitution	36
3088	2148	mutation causing nonconservative amino acid substitution	120
3089	2148	sequence variant causing nonconservative amino acid substitution	36
3090	2149	mutation causing amino acid insertion	120
3091	2149	sequence variant causing amino acid insertion	36
3092	2150	mutation causing amino acid deletion	120
3093	2150	sequence variant causing amino acid deletion	36
3094	2151	mutation causing polypeptide truncation	120
3095	2151	sequence variant causing polypeptide truncation	36
3096	2152	mutation causing polypeptide elongation	120
3097	2152	sequence variant causing polypeptide elongation	36
3098	2153	mutation causing polypeptide N terminal elongation	36
3099	2153	polypeptide N-terminal elongation	36
3100	2154	mutation causing polypeptide C terminal elongation	36
3101	2154	polypeptide C-terminal elongation	36
3102	2155	mutation affecting level of translational product	120
3103	2155	sequence variant affecting level of translational product	36
3104	2156	mutationdecreasing level of translation product	120
3105	2156	sequence variant decreasing level of translation product	36
3106	2157	mutationt increasing level of translation product	120
3107	2157	sequence variant increasing level of translation product	36
3108	2158	mutation affecting polypeptide amino acid sequence	120
3109	2158	sequence variant affecting polypeptide amino acid sequence	36
3110	2159	inframe polypeptide N-terminal elongation	36
3111	2159	mutation causing inframe polypeptide N terminal elongation	36
3112	2160	mutation causing out of frame polypeptide N terminal elongation	36
3113	2160	out of frame polypeptide N-terminal elongation	36
3114	2161	inframe_polypeptide C-terminal elongation	36
3115	2161	mutaton causing inframe polypeptide C terminal elongation	36
3116	2162	mutation causing out of frame polypeptide C terminal elongation	36
3117	2162	out of frame polypeptide C-terminal elongation	36
3118	2163	frame restoring mutation	36
3119	2163	frame restoring sequence variant	36
3120	2164	mutation affecting 3D structure of polypeptide	120
3121	2164	mutation causing partially characterised 3D structural change	120
3122	2164	mutation causing uncharacterised 3D structural change	120
3123	2164	sequence variant affecting 3D structure of polypeptide	36
3124	2164	sequence variant affecting 3D-structure of polypeptide	36
3125	2164	sequence variant causing partially characterised 3D structural change	36
3126	2164	sequence variant causing uncharacterised 3D structural change	36
3127	2164	sequence_variant_causing_partially_characterised_3D_structural_change	36
3128	2164	sequence_variant_causing_uncharacterised_3D_structural_change	36
3129	2165	mutation causing no 3D structural change	120
3130	2165	sequence variant causing no 3D structural change	36
3131	2166	mutation causing complex 3D structural change	120
3132	2166	sequence variant causing complex 3D structural change	36
3133	2167	mutation causing conformational change	120
3134	2167	sequence variant causing conformational change	36
3135	2168	mutation affecting polypeptide function	120
3136	2168	sequence variant affecting polypeptide function	36
3137	2169	loss of function of polypeptide	120
3138	2169	mutation causing loss of function of polypeptide	120
3139	2169	sequence variant causing loss of function of polypeptide	36
3140	2170	mutation causing inactive ligand binding site	120
3141	2170	sequence variant causing inactive ligand binding site	36
3142	2171	mutation causing inactive catalytic site	120
3143	2171	sequence variant causing inactive catalytic site	36
3144	2172	mutation causing polypeptide localization change	120
3145	2172	sequence variant causing polypeptide localization change	36
3146	2173	mutation causing polypeptide post translational processing change	120
3147	2173	polypeptide post-translational processing affected	36
3148	2173	sequence variant causing polypeptide post translational processing change	36
3149	2174	polypeptide_post-translational_processing_affected	120
3150	2175	mutation causing partial loss of function of polypeptide	120
3151	2175	partial loss of function of polypeptide	36
3152	2175	sequence variant causing partial loss of function of polypeptide	36
3153	2176	gain of function of polypeptide	36
3154	2176	mutation causing gain of function of polypeptide	120
3155	2176	sequence variant causing gain of function of polypeptide	36
3156	2177	mutation affecting transcript secondary structure	120
3157	2177	sequence variant affecting transcript secondary structure	36
3158	2178	mutation causing compensatory transcript secondary structure mutation	120
3159	2178	sequence variant causing compensatory transcript secondary structure mutation	36
3160	2179	sequence variant effect	120
3161	2180	mutation causing polypeptide fusion	120
3162	2180	sequence variant causing polypeptide fusion	36
3163	2181	(Drosophila)A	120
3164	2181	autosynaptic chromosome	36
3165	2182	homo compound chromosome	36
3166	2182	homo-compound chromosome	36
3167	2183	hetero compound chromosome	36
3168	2183	hetero-compound chromosome	36
3169	2184	chromosome fission	36
3170	2185	dexstrosynaptic chromosome	36
3171	2186	laevosynaptic chromosome	36
3172	2187	free duplication	36
3173	2188	(Drosophila)R	120
3174	2188	free ring duplication	36
3175	2189	complex chromosomal mutation	36
3176	2190	(Drosophila)Df	120
3177	2190	(Drosophila)DfT	120
3178	2190	deficient translocation	36
3179	2191	(Drosophila)InT	120
3180	2191	(Drosophila)T	120
3181	2191	inversion cum translocation	36
3182	2192	(Drosophila)bDp	120
3183	2192	bipartite duplication	36
3184	2193	cyclic translocation	36
3185	2194	(Drosophila)bIn	120
3186	2194	bipartite inversion	36
3187	2195	(Drosophila)eDp	120
3188	2195	uninverted insertional duplication	36
3189	2196	(Drosophila)iDp	120
3190	2196	inverted insertional duplication	36
3191	2197	(Drosophila)Dpp	120
3192	2197	insertional duplication	36
3193	2198	(Drosophila)Tp	120
3194	2198	interchromosomal transposition	36
3195	2199	(Drosophila)iTp	120
3196	2199	inverted interchromosomal transposition	36
3197	2200	(Drosophila)eTp	120
3198	2200	uninverted interchromosomal transposition	36
3199	2201	(Drosophila)iTp	120
3200	2201	inverted intrachromosomal transposition	36
3201	2202	(Drosophila)eTp	120
3202	2202	uninverted intrachromosomal transposition	36
3203	2203	(Drosophila)uDp	120
3204	2203	unoriented insertional duplication	36
3205	2204	(Drosophila)uTp	120
3206	2204	unorientated interchromosomal transposition	36
3207	2205	(Drosophila)uTp	120
3208	2205	unorientated intrachromosomal transposition	36
3209	2206	uncharacterised chromosomal mutation	36
3210	2207	(Drosophila)Df	120
3211	2207	(Drosophila)DfIn	120
3212	2207	deficient inversion	36
3213	2208	erverted	120
3214	2208	tandem duplication	36
3215	2209	partially characterised chromosomal mutation	36
3216	2210	mutation affecting gene structure	120
3217	2210	sequence variant affecting gene structure	36
3218	2211	mutation causing gene fusion	120
3219	2211	sequence variant causing gene fusion	36
3220	2212	chromosome number variation	36
3221	2213	chromosome structure variation	36
3222	2214	mutation causes exon loss	120
3223	2214	sequence variant causes exon loss	36
3224	2215	mutation causes intron gain	120
3225	2215	sequence variant causes intron gain	36
3226	2216	sequence variant causing cryptic splice donor activation	36
3227	2217	sequence variant causing cryptic splice acceptor activation	36
3228	2218	alternatively spliced transcript	36
3229	2219	encodes 1 polypeptide	36
3230	2220	encodes greater than 1 polypeptide	36
3231	2221	encodes different polypeptides different stop	36
3232	2222	encodes overlapping peptides different start	36
3233	2223	encodes disjoint polypeptides	36
3234	2224	encodes overlapping polypeptides different start and stop	36
3235	2226	encodes overlapping peptides	36
3236	2228	dicistronic primary transcript	36
3237	2229	member of regulon	36
3238	2230	alternatively_spliced_transcript_encoding_greater_than_1_polypeptide_different_start_codon_different_stop_codon_coding_regions_non-overlapping	120
3239	2231	CDS independently known	36
3240	2232	orphan CDS	36
3241	2233	CDS supported by domain match data	36
3242	2234	CDS supported by sequence similarity data	36
3243	2235	CDS predicted	36
3244	2237	CDS supported by EST or cDNA data	36
3245	2238	internal Shine Dalgarno sequence	36
3246	2238	internal Shine-Dalgarno sequence	36
3247	2239	recoded mRNA	36
3248	2240	minus 1 translationally frameshifted	36
3249	2241	plus 1 translationally frameshifted	36
3250	2242	mRNA recoded by translational bypass	36
3251	2243	mRNA recoded by codon redefinition	36
3252	2246	recoding stimulatory region	36
3253	2246	recoding stimulatory signal	36
3254	2247	4bp start codon	36
3255	2247	four bp start codon	36
3256	2249	archaeal intron	36
3257	2250	pre-tRNA intron	36
3258	2250	tRNA intron	36
3259	2251	CTG start codon	36
3260	2252	SECIS element	36
3261	2254	three prime recoding site	36
3262	2255	three prime stem loop structure	36
3263	2256	five prime recoding site	36
3264	2257	flanking three prime quadruplet recoding signal	36
3265	2258	UAG stop codon signal	36
3266	2259	UAA stop codon signal	36
3267	2261	UGA stop codon signal	36
3268	2262	three prime repeat recoding signal	36
3269	2263	distant three prime recoding signal	36
3270	2264	stop codon signal	36
3271	2265	accession	120
3272	2265	databank entry	36
3273	2266	gene segment	36
3274	2295	Alias	36
\.


--
-- Name: cvtermsynonym_cvtermsynonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cvtermsynonym_cvtermsynonym_id_seq', 3274, true);


--
-- Data for Name: db; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY db (db_id, name, description, urlprefix, url) FROM stdin;
1	null	a fake database for local items	\N	\N
2	GFF_source	A collection of sources (ie, column 2) from GFF files	\N	\N
3	ATCC	\N	\N	\N
4	refseq	\N	\N	\N
5	genbank	\N	\N	\N
6	EMBL	\N	\N	\N
7	TIGR	\N	\N	\N
8	ucsc	\N	\N	\N
9	ucla	\N	\N	\N
10	SGD	\N	\N	\N
11	PFAM	\N	\N	\N
12	SUPERFAMILY	\N	\N	\N
13	PROFILE	\N	\N	\N
14	PRODOM	\N	\N	\N
15	PRINTS	\N	\N	\N
16	SMART	\N	\N	\N
17	TIGRFAMs	\N	\N	\N
18	PIR	\N	\N	\N
19	Affymetrix_U133	\N	\N	\N
20	Affymetrix_U133PLUS	\N	\N	\N
21	Affymetrix_U95	\N	\N	\N
22	LocusLink	\N	\N	\N
23	RefSeq_protein	\N	\N	\N
24	GenBank_protein	\N	\N	\N
25	OMIM	\N	\N	\N
26	Swiss	\N	\N	\N
27	RefSNP	\N	\N	\N
28	TSC	\N	\N	\N
29	GR	Gramene	\N	\N
30	uniprot	UniProt/TrEMBL	http://us.expasy.org/cgi-bin/niceprot.pl?	\N
31	refseq:mrna	RefSeq mRNA	http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=search&db=nucleotide&dopt=GenBank&term=	\N
32	refseq:protein	RefSeq Protein	http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=search&db=protein&dopt=GenBank&term=	\N
33	unigene	Unigene	http://www.ncbi.nih.gov/entrez/query.fcgi?db=unigene&cmd=search&term=	\N
34	omim	OMIM	http://www.ncbi.nlm.nih.gov/entrez/dispomim.cgi?id=	\N
35	locuslink	LocusLink	http://www.ncbi.nlm.nih.gov/LocusLink/LocRpt.cgi?l=	\N
36	genbank:mrna	GenBank mRNA	http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=search&db=nucleotide&dopt=GenBank&term=	\N
37	genbank:protein	GenBank Protein	http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=search&db=protein&dopt=GenBank&term=	\N
38	swissprot:display	SwissProt	http://us.expasy.org/cgi-bin/niceprot.pl?	\N
39	pfam	Pfam	http://www.sanger.ac.uk/cgi-bin/Pfam/dql.pl?query=	\N
40	OBO_REL	\N	\N	\N
41	_global	\N	\N	\N
42	internal	\N	\N	\N
43	owl	\N	\N	\N
44	SO	\N	\N	\N
45	URL	\N	\N	\N
46	PMID	\N	\N	\N
47	ISBN	\N	\N	\N
48	http	\N	\N	\N
49	FB	\N	\N	\N
50	loinc	\N	\N	\N
51	GOC	\N	\N	\N
52	WB	\N	\N	\N
53	CHEBI	\N	\N	\N
54	RSC	\N	\N	\N
55	EBIBS	\N	\N	\N
56	BS	\N	\N	\N
57	doi	\N	\N	\N
58	Indiana	\N	\N	\N
59	issn	\N	\N	\N
60	Phigo	\N	\N	\N
61	phigo	\N	\N	\N
62	UniProt	\N	\N	\N
63	Http	\N	\N	\N
64	xenbase	\N	\N	\N
65	RNAMOD	\N	\N	\N
66	BBOP	\N	\N	\N
67	MOD	\N	\N	\N
68	EBI	\N	\N	\N
69	RFAM	\N	\N	\N
70	modENCODE	\N	\N	\N
71	ZFIN	\N	\N	\N
72	DOI	\N	\N	\N
73	JAX	\N	\N	\N
74	MGI	\N	\N	\N
75	MGD	\N	\N	\N
76	NCBI	\N	\N	\N
77	PomBase	\N	\N	\N
78	GMOD	\N	\N	\N
79	GO	\N	\N	\N
80	HGNC	\N	\N	\N
81	Invitrogen	\N	\N	\N
82	SOFP	\N	\N	\N
\.


--
-- Name: db_db_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('db_db_id_seq', 82, true);


--
-- Data for Name: dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY dbxref (dbxref_id, db_id, accession, version, description) FROM stdin;
1	1	local:null		\N
2	1	local:computer file		\N
3	1	local:glass		\N
4	1	local:photochemical_oligo		\N
5	1	developmental stages:fetus		\N
6	1	developmental stages:neonate		\N
7	1	developmental stages:child		\N
8	1	developmental stages:adult_young		\N
9	1	developmental stages:adult		\N
10	1	developmental stages:adult_old		\N
11	1	local:survival_time		\N
12	1	Statistical Terms:n		\N
13	1	Statistical Terms:minimum		\N
14	1	Statistical Terms:maximum		\N
15	1	Statistical Terms:modality		\N
16	1	Statistical Terms:modality p		\N
17	1	Statistical Terms:mean		\N
18	1	Statistical Terms:median		\N
19	1	Statistical Terms:mode		\N
20	1	Statistical Terms:quartile 1		\N
21	1	Statistical Terms:quartile 3		\N
22	1	Statistical Terms:skewness		\N
23	1	Statistical Terms:kurtosis		\N
24	1	Statistical Terms:chi square p		\N
25	1	Statistical Terms:standard deviation		\N
26	1	Statistical Terms:expectation maximization gaussian mean		\N
27	1	Statistical Terms:expectation maximization p		\N
28	1	Statistical Terms:histogram		\N
29	1	chado_properties:version		\N
30	42	comment		\N
31	42	is_anonymous		\N
32	40	is_a		\N
33	42	is_reflexive		\N
34	42	is_anti_symmetric		\N
35	42	is_transitive		\N
36	42	exact		\N
37	40	0000001		\N
38	43	subClassOf		\N
39	40	part_of		\N
40	40	0000002		\N
41	40	has_part		\N
42	40	0000003		\N
43	40	integral_part_of		\N
44	40	0000004		\N
45	40	has_integral_part		\N
46	40	0000005		\N
47	40	proper_part_of		\N
48	40	0000006		\N
49	40	has_proper_part		\N
50	40	0000007		\N
51	40	located_in		\N
52	40	0000008		\N
53	40	location_of		\N
54	40	0000009		\N
55	40	contained_in		\N
56	40	0000010		\N
57	40	contains		\N
58	40	0000011		\N
59	40	adjacent_to		\N
60	40	0000012		\N
61	40	transformation_of		\N
62	40	0000013		\N
63	40	transformed_into		\N
64	40	0000014		\N
65	40	derives_from		\N
66	40	0000015		\N
67	40	derived_into		\N
68	40	0000016		\N
69	40	preceded_by		\N
70	40	0000017		\N
71	40	precedes		\N
72	40	0000018		\N
73	40	has_participant		\N
74	40	0000019		\N
75	40	participates_in		\N
76	40	0000020		\N
77	40	has_agent		\N
78	40	0000021		\N
79	40	agent_in		\N
80	40	0000022		\N
81	40	instance_of		\N
82	40	0000023		\N
83	40	has_improper_part		\N
84	40	0000024		\N
85	40	improper_part_of		\N
86	40	0000025		\N
87	40	relationship		\N
88	41	adjacent_to		\N
89	41	associated_with		\N
90	41	complete_evidence_for_feature		\N
91	41	connects_on		\N
92	41	contained_by		\N
93	41	contains		\N
94	41	derives_from		\N
95	41	disconnected_from		\N
96	41	edited_from		\N
97	41	edited_to		\N
98	41	evidence_for_feature		\N
99	41	exemplar_of		\N
100	41	finished_by		\N
101	41	finishes		\N
102	41	gained		\N
103	41	genome_of		\N
104	41	guided_by		\N
105	41	guides		\N
106	41	has_integral_part		\N
107	41	has_origin		\N
108	41	has_part		\N
109	41	has_quality		\N
110	41	homologous_to		\N
111	42	is_symmetric		\N
112	41	integral_part_of		\N
113	41	is_consecutive_sequence_of		\N
114	41	lost		\N
115	41	maximally_overlaps		\N
116	41	member_of		\N
117	41	non_functional_homolog_of		\N
118	41	orthologous_to		\N
119	41	overlaps		\N
120	41	paralogous_to		\N
121	41	part_of		\N
122	41	partial_evidence_for_feature		\N
123	41	position_of		\N
124	41	processed_from		\N
125	41	processed_into		\N
126	41	recombined_from		\N
127	41	recombined_to		\N
128	41	sequence_of		\N
129	41	similar_to		\N
130	41	started_by		\N
131	41	starts		\N
132	41	trans_spliced_from		\N
133	41	trans_spliced_to		\N
134	41	transcribed_from		\N
135	41	transcribed_to		\N
136	41	translates_to		\N
137	41	translation_of		\N
138	41	variant_of		\N
139	44	0000000		\N
140	44	0000001		\N
141	44	ke		\N
142	44	0000002		\N
143	44	0000003		\N
144	45	http://www.ncbi.nlm.nih.gov/pubmed/7919797?dopt=Abstract		\N
145	45	http://en.wikipedia.org/wiki/G-quadruplex		\N
146	44	0000004		\N
147	44	0000005		\N
148	45	http://www.ebi.ac.uk/embl/Documentation/FT_definitions/feature_table.html		\N
149	45	http://en.wikipedia.org/wiki/Satellite_DNA		\N
150	44	0000006		\N
151	42	related		\N
152	45	http://en.wikipedia.org/wiki/RAPD		\N
153	44	0000007		\N
154	44	ls		\N
155	44	0000008		\N
156	44	0000009		\N
157	44	0000010		\N
158	44	0000011		\N
159	44	0000012		\N
160	45	http://www.ebi.ac.uk/embl/WebFeat/align/scRNA_s.html		\N
161	44	0000013		\N
162	44	0000014		\N
163	46	12651739		\N
164	46	16858867		\N
165	44	0000015		\N
166	46	12651739:12537576		\N
167	42	narrow		\N
168	44	0000016		\N
169	44	0000017		\N
170	44	0000018		\N
171	47	038752046		\N
172	45	http://en.wikipedia.org/wiki/Linkage_group		\N
173	44	0000020		\N
174	44	0000021		\N
175	44	0000022		\N
176	44	0000023		\N
177	45	http://en.wikipedia.org/wiki/K-turn		\N
178	44	0000024		\N
179	45	http://www.ncbi.nlm.nih.gov/pubmed/7897662		\N
180	44	0000025		\N
181	44	0000026		\N
182	44	0000027		\N
183	44	0000028		\N
184	45	http://en.wikipedia.org/wiki/Base_pair		\N
185	44	0000029		\N
186	46	12177293		\N
187	44	0000030		\N
188	44	0000031		\N
189	45	http://aptamer.icmb.utexas.edu		\N
190	45	http://en.wikipedia.org/wiki/Aptamer		\N
191	44	0000032		\N
192	48	aptamer.icmb.utexas.edu		\N
193	44	0000033		\N
194	44	0000034		\N
195	45	http://www.gene-tools.com/		\N
196	42	broad		\N
197	44	0000035		\N
198	46	2820954		\N
199	45	http://en.wikipedia.org/wiki/Riboswitch		\N
200	44	0000036		\N
201	44	ma		\N
202	45	http://en.wikipedia.org/wiki/Matrix_attachment_site		\N
203	44	0000037		\N
204	45	http://en.wikipedia.org/wiki/Locus_control_region		\N
205	44	0000038		\N
206	44	0000039		\N
207	44	0000040		\N
208	44	0000041		\N
209	44	0000042		\N
210	44	0000043		\N
211	44	xp		\N
212	44	0000044		\N
213	44	0000045		\N
214	44	0000046		\N
215	44	0000047		\N
216	44	0000048		\N
217	44	0000049		\N
218	44	0000050		\N
219	44	0000051		\N
220	45	http://en.wikipedia.org/wiki/Hybridization_probe		\N
221	44	0000052		\N
222	44	0000053		\N
223	44	0000054		\N
224	45	http://en.wikipedia.org/wiki/Aneuploid		\N
225	44	0000055		\N
226	45	http://en.wikipedia.org/wiki/Hyperploid		\N
227	44	0000056		\N
228	45	http://en.wikipedia.org/wiki/Hypoploid		\N
229	44	0000057		\N
230	45	http://en.wikipedia.org/wiki/Operator_(biology)#Operator		\N
231	44	0000058		\N
232	44	0000059		\N
233	44	cb		\N
234	44	0000060		\N
235	44	0000061		\N
236	44	0000062		\N
237	49	reference_manual		\N
238	44	0000063		\N
239	44	0000064		\N
240	44	0000065		\N
241	44	0000066		\N
242	44	0000067		\N
243	44	0000068		\N
244	44	0000069		\N
245	44	0000070		\N
246	44	0000071		\N
247	44	0000072		\N
248	44	0000073		\N
249	44	0000074		\N
250	44	0000075		\N
251	44	0000076		\N
252	44	0000077		\N
253	45	http://en.wikipedia.org/wiki/Antisense		\N
254	44	0000078		\N
255	44	0000079		\N
256	44	0000080		\N
257	44	0000081		\N
258	44	0000082		\N
259	44	0000083		\N
260	44	0000084		\N
261	44	0000085		\N
262	44	0000086		\N
263	44	0000087		\N
264	45	http://en.wikipedia.org/wiki/Nuclear_gene		\N
265	44	0000088		\N
266	45	http://en.wikipedia.org/wiki/Mitochondrial_gene		\N
267	44	0000089		\N
268	44	0000090		\N
269	44	0000091		\N
270	44	0000092		\N
271	44	0000093		\N
272	44	0000094		\N
273	44	0000095		\N
274	44	0000096		\N
275	44	0000097		\N
276	44	0000098		\N
277	44	0000099		\N
278	44	0000100		\N
279	44	0000101		\N
280	45	http://www.sci.sdsu.edu/~smaloy/Glossary/T.html		\N
281	45	http://en.wikipedia.org/wiki/Transposable_element		\N
282	44	0000102		\N
283	44	0000103		\N
284	44	0000104		\N
285	44	0000358		\N
286	45	http://en.wikipedia.org/wiki/Polypeptide		\N
287	44	0000105		\N
288	45	http://www.medterms.com/script/main/art.asp?articlekey=5152		\N
289	44	0000106		\N
290	44	0000107		\N
291	44	0000108		\N
292	44	0000109		\N
293	44	0000110		\N
294	44	0000111		\N
295	44	0000112		\N
296	45	http://en.wikipedia.org/wiki/Primer_(molecular_biology)		\N
297	44	0000113		\N
298	44	0000114		\N
299	44	0000115		\N
300	44	0000116		\N
301	44	0000117		\N
302	44	0000118		\N
303	44	0000119		\N
304	44	0000120		\N
305	44	0000121		\N
306	45	http://mged.sourceforge.net/ontologies/MGEDontology.php		\N
307	44	0000122		\N
308	44	0000123		\N
309	44	0000124		\N
310	44	0000125		\N
311	44	0000126		\N
312	44	0000127		\N
313	44	0000128		\N
314	44	0000129		\N
315	44	0000130		\N
316	44	0000131		\N
317	44	0000132		\N
318	44	0000133		\N
319	44	0000134		\N
320	48	http://en.wikipedia.org/wiki/Genomic_imprinting		\N
321	44	0000135		\N
322	44	0000136		\N
323	44	0000137		\N
324	44	0000138		\N
325	44	0000139		\N
326	44	0000140		\N
327	44	as		\N
328	45	http://en.wikipedia.org/wiki/Attenuator		\N
329	44	0000141		\N
330	45	http://en.wikipedia.org/wiki/Terminator_(genetics)		\N
331	44	0000142		\N
332	44	0000143		\N
333	44	0000144		\N
334	44	0000145		\N
335	44	0000146		\N
336	44	0000147		\N
337	45	http://en.wikipedia.org/wiki/Exon		\N
338	44	0000148		\N
339	44	0000149		\N
340	45	http://en.wikipedia.org/wiki/Contig		\N
341	44	0000150		\N
342	44	rd		\N
343	44	0000151		\N
344	48	http://en.wikipedia.org/wiki/Clone_(genetics)		\N
345	44	0000152		\N
346	44	0000153		\N
347	44	0000154		\N
348	45	http://en.wikipedia.org/wiki/P1-derived_artificial_chromosome		\N
349	44	0000155		\N
350	44	0000156		\N
351	45	http://en.wikipedia.org/wiki/Cosmid		\N
352	44	0000157		\N
353	45	http://en.wikipedia.org/wiki/Phagemid		\N
354	44	0000158		\N
355	45	http://en.wikipedia.org/wiki/Fosmid		\N
356	44	0000159		\N
357	44	1000033		\N
358	45	http://en.wikipedia.org/wiki/Nucleotide_deletion		\N
359	50	LA6692-3		\N
360	44	0000160		\N
361	47	0-1767-2380-8		\N
362	44	0000161		\N
363	44	0000162		\N
364	44	cjm		\N
365	45	http://en.wikipedia.org/wiki/Splice_site		\N
366	44	0000163		\N
367	45	http://www.ucl.ac.uk/~ucbhjow/b241/glossary.html		\N
368	44	0000164		\N
369	44	0000165		\N
370	45	http://en.wikipedia.org/wiki/Enhancer_(genetics)		\N
371	44	0000166		\N
372	44	0000167		\N
373	44	regcreative		\N
374	45	http://en.wikipedia.org/wiki/Promoter		\N
375	44	0000168		\N
376	44	0000169		\N
377	44	0000170		\N
378	44	0000171		\N
379	44	0000172		\N
380	45	http://en.wikipedia.org/wiki/CAAT_box		\N
381	44	0000173		\N
382	44	0000174		\N
383	45	http://en.wikipedia.org/wiki/TATA_box		\N
384	44	0000175		\N
385	45	http://en.wikipedia.org/wiki/Pribnow_box		\N
386	44	0000176		\N
387	44	0000177		\N
388	44	0000178		\N
389	45	http://en.wikipedia.org/wiki/Operon		\N
390	44	0000179		\N
391	44	0000180		\N
392	45	http://www.dddmag.com/Glossary.aspx#r		\N
393	45	http://en.wikipedia.org/wiki/Retrotransposon		\N
394	44	0000181		\N
395	44	0000182		\N
396	44	0000183		\N
397	44	0000184		\N
398	46	9428511		\N
399	44	0000185		\N
400	45	http://en.wikipedia.org/wiki/Primary_transcript		\N
401	44	0000186		\N
402	44	0000187		\N
403	44	0000188		\N
404	45	http://en.wikipedia.org/wiki/Intron		\N
405	44	0000189		\N
406	44	0000190		\N
407	44	0000191		\N
408	44	0000192		\N
409	44	0000193		\N
410	51	pj		\N
411	45	http://en.wikipedia.org/wiki/Restriction_fragment_length_polymorphism		\N
412	44	0000194		\N
413	44	0000195		\N
414	44	0000196		\N
415	44	0000197		\N
416	44	0000198		\N
417	44	0000199		\N
418	44	0000200		\N
419	44	0000201		\N
420	46	10373547		\N
421	44	0000202		\N
422	44	0000203		\N
423	44	0000204		\N
424	45	http://en.wikipedia.org/wiki/5'_UTR		\N
425	44	0000205		\N
426	45	http://en.wikipedia.org/wiki/Three_prime_untranslated_region		\N
427	44	0000206		\N
428	45	http://en.wikipedia.org/wiki/Short_interspersed_nuclear_element		\N
429	44	0000207		\N
430	44	0000208		\N
431	45	http://www.genetics.org/cgi/reprint/156/4/1983.pdf		\N
432	44	0000209		\N
433	44	0000210		\N
434	44	0000211		\N
435	44	0000212		\N
436	44	0000213		\N
437	44	0000214		\N
438	44	0000215		\N
439	44	0000216		\N
440	44	0000217		\N
441	44	0000218		\N
442	44	0000219		\N
443	44	0000220		\N
444	44	0000221		\N
445	44	0000222		\N
446	44	0000223		\N
447	44	0000224		\N
448	44	0000225		\N
449	44	0000226		\N
450	44	0000227		\N
451	44	0000228		\N
452	44	0000229		\N
453	44	0000230		\N
454	44	0000231		\N
455	44	0000232		\N
456	44	0000233		\N
457	45	http://en.wikipedia.org/wiki/Mature_transcript		\N
458	44	0000234		\N
459	45	http://en.wikipedia.org/wiki/MRNA		\N
460	44	0000235		\N
461	44	0000236		\N
462	10	rb		\N
463	44	0000237		\N
464	44	0000238		\N
465	44	0000239		\N
466	44	0000240		\N
467	44	0000241		\N
468	44	0000242		\N
469	44	0000243		\N
470	45	http://en.wikipedia.org/wiki/Internal_ribosome_entry_site		\N
471	44	0000244		\N
472	44	0000245		\N
473	44	0000246		\N
474	44	0000247		\N
475	44	0000248		\N
476	44	0000249		\N
477	44	0000250		\N
478	44	0000251		\N
479	44	0000252		\N
480	47	0198506732		\N
481	45	http://en.wikipedia.org/wiki/RRNA		\N
482	44	0000253		\N
483	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00005		\N
484	45	http://en.wikipedia.org/wiki/TRNA		\N
485	44	0000254		\N
486	44	0000255		\N
487	44	0000256		\N
488	44	0000257		\N
489	44	0000258		\N
490	44	0000259		\N
491	44	0000260		\N
492	44	0000261		\N
493	44	0000262		\N
494	44	0000263		\N
495	44	0000264		\N
496	44	0000265		\N
497	44	0000266		\N
498	44	0000267		\N
499	44	0000268		\N
500	44	0000269		\N
501	44	0000270		\N
502	44	0000271		\N
503	44	0000272		\N
504	44	0000273		\N
505	44	0000274		\N
506	46	11733745		\N
507	52	ems		\N
508	45	http://en.wikipedia.org/wiki/SnRNA		\N
509	44	0000275		\N
510	51	kgc		\N
511	45	http://en.wikipedia.org/wiki/SnoRNA		\N
512	44	0000276		\N
513	46	12592000		\N
514	45	http://en.wikipedia.org/wiki/MiRNA		\N
515	44	0000277		\N
516	44	0000278		\N
517	44	0000279		\N
518	44	0000280		\N
519	44	0000281		\N
520	44	0000282		\N
521	44	0000283		\N
522	44	0000284		\N
523	45	http://www.promega.com		\N
524	44	0000285		\N
525	44	0000286		\N
526	45	http://en.wikipedia.org/wiki/Long_terminal_repeat		\N
527	44	0000287		\N
528	45	http://en.wikipedia.org/wiki/Fusion_gene		\N
529	44	0000288		\N
530	44	0000289		\N
531	45	http://www.informatics.jax.org/silver/glossary.shtml		\N
532	45	http://en.wikipedia.org/wiki/Microsatellite		\N
533	44	0000290		\N
534	44	0000291		\N
535	44	0000292		\N
536	44	0000293		\N
537	44	0000294		\N
538	45	http://en.wikipedia.org/wiki/Inverted_repeat		\N
539	44	0000295		\N
540	44	0000296		\N
541	45	http://en.wikipedia.org/wiki/Origin_of_replication		\N
542	44	0000297		\N
543	45	http://en.wikipedia.org/wiki/D_loop		\N
544	44	0000298		\N
545	44	0000299		\N
546	44	0000300		\N
547	44	0000301		\N
548	44	0000302		\N
549	45	http://www.imgt.org/cgi-bin/IMGTlect.jv?query=7#		\N
550	44	0000303		\N
551	44	0000304		\N
552	44	0000305		\N
553	44	0000306		\N
554	44	0000307		\N
555	45	http://en.wikipedia.org/wiki/CpG_island		\N
556	44	0000308		\N
557	44	0000309		\N
558	44	0000310		\N
559	44	0000311		\N
560	44	0000312		\N
561	44	0000313		\N
562	44	0000019		\N
563	45	http://en.wikipedia.org/wiki/Stem_loop		\N
564	44	0000314		\N
565	45	http://en.wikipedia.org/wiki/Direct_repeat		\N
566	44	0000315		\N
567	44	0000316		\N
568	44	0000317		\N
569	45	http://seqcore.brcf.med.umich.edu/doc/educ/dnapr/mbglossary/mbgloss.html		\N
570	44	0000318		\N
571	45	http://en.wikipedia.org/wiki/Start_codon		\N
572	44	0000319		\N
573	45	http://en.wikipedia.org/wiki/Stop_codon		\N
574	44	0000320		\N
575	44	0000321		\N
576	44	0000322		\N
577	44	0000323		\N
578	44	0000324		\N
579	44	0000325		\N
580	44	0000326		\N
581	45	http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&amp;db=PubMed&amp;list_uids=7570003&amp;dopt=Abstract		\N
582	44	0000327		\N
583	44	0000328		\N
584	44	0000329		\N
585	44	0000330		\N
586	45	http://en.wikipedia.org/wiki/Conserved_region		\N
587	44	0000331		\N
588	45	http://www.biospace.com		\N
589	44	0000332		\N
590	44	0000333		\N
591	44	0000334		\N
592	44	0000335		\N
593	44	0000336		\N
594	45	http://en.wikipedia.org/wiki/Pseudogene		\N
595	44	0000337		\N
596	44	0000338		\N
597	45	http://www.pnas.org/cgi/content/full/97/18/10083		\N
598	44	0000339		\N
599	45	http://en.wikipedia.org/wiki/Recombination_hotspot		\N
600	44	0000340		\N
601	45	http://en.wikipedia.org/wiki/Chromosome		\N
602	44	0000341		\N
603	45	http://en.wikipedia.org/wiki/Cytological_band		\N
604	44	0000342		\N
605	44	0000343		\N
606	44	0000344		\N
607	44	0000345		\N
608	44	0000346		\N
609	44	0000347		\N
610	44	0000348		\N
611	53	33696		\N
612	54	cb		\N
613	45	http://en.wikipedia.org/wiki/Nucleic_acid		\N
614	44	0000349		\N
615	44	0000350		\N
616	44	0000351		\N
617	44	0000352		\N
618	44	0000353		\N
619	45	http://en.wikipedia.org/wiki/Sequence_assembly		\N
620	44	0000354		\N
621	44	0000355		\N
622	44	0000356		\N
623	44	0000357		\N
624	44	0000359		\N
625	45	http://en.wikipedia.org/wiki/Floxed		\N
626	44	0000360		\N
627	45	http://www.everythingbio.com/glos/definition.php?word=codon		\N
628	45	http://en.wikipedia.org/wiki/Codon		\N
629	44	0000361		\N
630	44	0000362		\N
631	44	0000363		\N
632	44	0000364		\N
633	44	0000365		\N
634	45	http://en.wikipedia.org/wiki/Integron		\N
635	44	0000366		\N
636	44	0000367		\N
637	44	0000368		\N
638	44	0000369		\N
639	44	0000370		\N
640	44	0000371		\N
641	45	http://www.sci.sdsu.edu/~smaloy/Glossary/C.html		\N
642	44	0000372		\N
643	44	0000373		\N
644	44	0000374		\N
645	45	http://en.wikipedia.org/wiki/Ribozyme		\N
646	44	0000375		\N
647	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00002		\N
648	45	http://en.wikipedia.org/wiki/5.8S_ribosomal_RNA		\N
649	44	0000376		\N
650	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00013		\N
651	45	http://en.wikipedia.org/wiki/6S_RNA		\N
652	44	0000377		\N
653	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00018		\N
654	44	0000378		\N
655	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00014		\N
656	45	http://en.wikipedia.org/wiki/DsrA_RNA		\N
657	44	0000379		\N
658	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00022		\N
659	45	http://en.wikipedia.org/wiki/GcvB_RNA		\N
660	44	0000380		\N
661	46	2436805		\N
662	45	http://en.wikipedia.org/wiki/Hammerhead_ribozyme		\N
663	44	0000381		\N
664	44	0000382		\N
665	44	0000383		\N
666	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00033		\N
667	45	http://en.wikipedia.org/wiki/MicF_RNA		\N
668	44	0000384		\N
669	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00035		\N
670	45	http://en.wikipedia.org/wiki/OxyS_RNA		\N
671	44	0000385		\N
672	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00030		\N
673	44	0000386		\N
674	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00010		\N
675	44	0000387		\N
676	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00034		\N
677	45	http://en.wikipedia.org/wiki/RprA_RNA		\N
678	44	0000388		\N
679	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00036		\N
680	44	0000389		\N
681	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00021		\N
682	45	http://en.wikipedia.org/wiki/Spot_42_RNA		\N
683	44	0000390		\N
684	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00025		\N
685	45	http://en.wikipedia.org/wiki/Telomerase_RNA		\N
686	44	0000391		\N
687	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00003		\N
688	45	http://en.wikipedia.org/wiki/U1_snRNA		\N
689	44	0000392		\N
690	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00004		\N
691	45	http://en.wikipedia.org/wiki/U2_snRNA		\N
692	44	0000393		\N
693	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00015		\N
694	45	http://en.wikipedia.org/wiki/U4_snRNA		\N
695	44	0000394		\N
696	46	=12409455		\N
697	44	0000395		\N
698	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00020		\N
699	45	http://en.wikipedia.org/wiki/U5_snRNA		\N
700	44	0000396		\N
701	45	http://en.wikipedia.org/wiki/U6_snRNA		\N
702	44	0000397		\N
703	45	http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=retrieve&amp;db=pubmed&amp;list_uids=12409455&amp;dopt=Abstract		\N
704	44	0000398		\N
705	46	9622129		\N
706	45	http://en.wikipedia.org/wiki/U11_snRNA		\N
707	44	0000399		\N
708	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00007		\N
709	45	http://en.wikipedia.org/wiki/U12_snRNA		\N
710	44	0000400		\N
711	44	0000401		\N
712	44	0000402		\N
713	44	0000403		\N
714	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00016		\N
715	46	2551119		\N
716	44	0005839		\N
717	44	0000404		\N
718	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00006		\N
719	45	http://en.wikipedia.org/wiki/Vault_RNA		\N
720	44	0000405		\N
721	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00019		\N
722	45	http://en.wikipedia.org/wiki/Y_RNA		\N
723	44	0000406		\N
724	46	1899376		\N
725	46	7823908		\N
726	45	http://en.wikipedia.org/wiki/Twintron		\N
727	44	0000407		\N
728	45	http://en.wikipedia.org/wiki/18S_ribosomal_RNA		\N
729	44	0000408		\N
730	44	0000409		\N
731	55	GAR		\N
732	56	00033		\N
733	45	http://en.wikipedia.org/wiki/Binding_site		\N
734	44	0000410		\N
735	44	0000411		\N
736	44	0000412		\N
737	45	http://en.wikipedia.org/wiki/Restriction_fragment		\N
738	44	0000413		\N
739	44	0000414		\N
740	44	0000415		\N
741	44	0000416		\N
742	44	0000417		\N
743	56	00012		\N
744	56	00134		\N
745	44	0001069		\N
746	44	0000418		\N
747	56	00159		\N
748	45	http://en.wikipedia.org/wiki/Signal_peptide		\N
749	44	0000419		\N
750	56	00149		\N
751	44	0000420		\N
752	44	0000421		\N
753	44	0000422		\N
754	44	0000423		\N
755	44	0000424		\N
756	44	0000425		\N
757	44	0000426		\N
758	44	0000427		\N
759	44	0000428		\N
760	44	0000429		\N
761	44	0000430		\N
762	44	0000431		\N
763	44	0000432		\N
764	44	0000433		\N
765	44	0000434		\N
766	45	http://www.koko.gov.my/CocoaBioTech/Glossaryt.html		\N
767	44	0000435		\N
768	44	0000436		\N
769	44	0000437		\N
770	44	0000438		\N
771	44	0000439		\N
772	44	0000440		\N
773	45	http://en.wikipedia.org/wiki/Vector_(molecular_biology)		\N
774	44	0000441		\N
775	44	0000442		\N
776	44	0000443		\N
777	44	0000444		\N
778	44	0000445		\N
779	44	0000446		\N
780	44	0000447		\N
781	44	0000448		\N
782	44	0000449		\N
783	44	0000450		\N
784	44	0000451		\N
785	44	0000452		\N
786	44	0000453		\N
787	44	0000454		\N
788	45	http://www.developmentalcell.com/content/article/abstract?uid=PIIS1534580703002284		\N
789	45	http://en.wikipedia.org/wiki/RasiRNA		\N
790	44	0000455		\N
791	44	0000456		\N
792	44	0000457		\N
793	44	0000458		\N
794	44	0000459		\N
795	44	0000460		\N
796	44	0000461		\N
797	49	km		\N
798	44	0000462		\N
799	44	0000463		\N
800	44	0000464		\N
801	44	0000465		\N
802	44	0000466		\N
803	44	0000467		\N
804	44	0000468		\N
805	44	0000469		\N
806	44	0000470		\N
807	44	0000471		\N
808	44	0000472		\N
809	44	0000473		\N
810	44	0000474		\N
811	44	0000475		\N
812	44	0000476		\N
813	44	0000477		\N
814	44	0000478		\N
815	44	0000479		\N
816	44	0000480		\N
817	44	0000481		\N
818	44	0000482		\N
819	44	0000483		\N
820	44	0000484		\N
821	44	0000485		\N
822	44	0000486		\N
823	44	0000487		\N
824	44	0000488		\N
825	44	0000489		\N
826	44	0000490		\N
827	44	0000491		\N
828	44	0000492		\N
829	44	0000493		\N
830	44	0000494		\N
831	44	0000495		\N
832	44	0000496		\N
833	44	0000497		\N
834	44	0000498		\N
835	44	0000499		\N
836	44	0000500		\N
837	45	http://en.wikipedia.org/wiki/Hoogsteen_base_pair		\N
838	44	0000501		\N
839	44	0000502		\N
840	44	0000503		\N
841	44	0000504		\N
842	44	0000505		\N
843	44	0000506		\N
844	44	0000507		\N
845	44	0000508		\N
846	44	0000509		\N
847	44	0000510		\N
848	44	0000511		\N
849	44	0000512		\N
850	44	0000513		\N
851	44	0000514		\N
852	44	0000515		\N
853	44	0000516		\N
854	44	0000517		\N
855	44	0000518		\N
856	44	0000519		\N
857	44	0000520		\N
858	44	0000521		\N
859	44	0000522		\N
860	44	0000523		\N
861	44	0000524		\N
862	44	0000525		\N
863	44	0000526		\N
864	44	0000527		\N
865	44	0000528		\N
866	44	0000529		\N
867	44	0000530		\N
868	44	0000531		\N
869	44	0000532		\N
870	44	0000533		\N
871	44	0000534		\N
872	44	0000535		\N
873	44	0000536		\N
874	44	0000537		\N
875	44	0000538		\N
876	44	0000539		\N
877	44	0000540		\N
878	44	0000541		\N
879	44	0000542		\N
880	44	0000543		\N
881	44	0000544		\N
882	45	http://www.pnas.org/cgi/content/full/100/11/6569		\N
883	45	http://en.wikipedia.org/wiki/Helitron		\N
884	44	0000545		\N
885	45	http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=33937		\N
886	44	0000546		\N
887	44	0000547		\N
888	44	0000548		\N
889	44	0000549		\N
890	44	0000550		\N
891	44	0000551		\N
892	44	0000552		\N
893	44	jh		\N
894	45	http://en.wikipedia.org/wiki/Shine-Dalgarno_sequence		\N
895	44	0000553		\N
896	44	0001430		\N
897	44	0000554		\N
898	44	0000555		\N
899	44	0000556		\N
900	44	0000557		\N
901	44	0000558		\N
902	44	0000559		\N
903	44	0000560		\N
904	44	0000561		\N
905	44	0000562		\N
906	44	0000563		\N
907	44	0000564		\N
908	44	0000565		\N
909	44	0000566		\N
910	44	0000567		\N
911	44	0000568		\N
912	44	0000569		\N
913	44	0100042		\N
914	45	http://en.wikipedia.org/wiki/Retrotransposed		\N
915	44	0000570		\N
916	44	0000571		\N
917	44	0000572		\N
918	44	0000573		\N
919	44	0000574		\N
920	44	0000575		\N
921	44	0000576		\N
922	44	0000577		\N
923	45	http://en.wikipedia.org/wiki/Centromere		\N
924	44	0000578		\N
925	44	0000579		\N
926	44	0000580		\N
927	44	0000581		\N
928	45	http://en.wikipedia.org/wiki/5%27_cap		\N
929	44	0000582		\N
930	44	0000583		\N
931	45	http://dna.kdna.ucla.edu/rna/index.aspx		\N
932	44	0000584		\N
933	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00023		\N
934	45	http://en.wikipedia.org/wiki/TmRNA		\N
935	44	0000585		\N
936	44	0000586		\N
937	44	0000587		\N
938	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00028		\N
939	45	http://en.wikipedia.org/wiki/Group_I_intron		\N
940	44	0000588		\N
941	44	0000589		\N
942	44	0000590		\N
943	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00017		\N
944	44	0000591		\N
945	45	http://en.wikipedia.org/wiki/Pseudoknot		\N
946	44	0000592		\N
947	45	http://www.ncbi.nlm.nih.gov:80/entrez/query.fcgi?cmd=Retrieve&amp;db=PubMed&amp;list_uids=10334330&amp;dopt=Abstract		\N
948	44	0000593		\N
949	45	http://www.bio.umass.edu/biochem/rna-sequence/Yeast_snoRNA_Database/snoRNA_DataBase.html		\N
950	44	0000594		\N
951	44	0000595		\N
952	44	0000596		\N
953	44	0000597		\N
954	45	http://www.rna.ucla.edu/index.html		\N
955	44	0000598		\N
956	44	0000599		\N
957	44	0000600		\N
958	44	0000601		\N
959	44	0000602		\N
960	45	http://en.wikipedia.org/wiki/Guide_RNA		\N
961	44	0000603		\N
962	45	http://www.sanger.ac.uk/Software/Rfam/browse/index.shtml		\N
963	45	http://en.wikipedia.org/wiki/Group_II_intron		\N
964	44	0000604		\N
965	44	0000605		\N
966	45	http://en.wikipedia.org/wiki/Intergenic_region		\N
967	44	0000606		\N
968	44	0000607		\N
969	44	0000608		\N
970	44	0000609		\N
971	45	http://www.rna.ucla.edu/		\N
972	44	0000610		\N
973	44	0000611		\N
974	44	0000612		\N
975	45	http://nar.oupjournals.org/cgi/content/full/25/4/888		\N
976	45	http://en.wikipedia.org/wiki/Polypyrimidine_tract		\N
977	44	0000613		\N
978	44	0000614		\N
979	44	0000615		\N
980	44	0000616		\N
981	44	0000617		\N
982	44	0000618		\N
983	44	0000619		\N
984	45	http://en.wikipedia.org/wiki/A-box		\N
985	44	0000620		\N
986	44	0000621		\N
987	44	0000622		\N
988	44	0000623		\N
989	44	0000624		\N
990	45	http://en.wikipedia.org/wiki/Telomere		\N
991	44	0000625		\N
992	45	http://en.wikipedia.org/wiki/Silencer_(DNA)		\N
993	44	0000626		\N
994	44	0000627		\N
995	45	http://en.wikipedia.org/wiki/Insulator_(genetics)		\N
996	44	0000628		\N
997	44	0000629		\N
998	44	0000630		\N
999	44	0000631		\N
1000	44	0000632		\N
1001	44	0000633		\N
1002	45	http://en.wikipedia.org/wiki/Monocistronic_mRNA		\N
1003	44	0000634		\N
1004	45	http://en.wikipedia.org/wiki/Polycistronic_mRNA		\N
1005	44	0000635		\N
1006	44	0000636		\N
1007	44	0000637		\N
1008	44	0000638		\N
1009	45	http://oregonstate.edu/instruction/bb492/general/glossary.html		\N
1010	44	0000639		\N
1011	44	0000640		\N
1012	44	0000641		\N
1013	44	0000642		\N
1014	44	0000643		\N
1015	45	http://en.wikipedia.org/wiki/Minisatellite		\N
1016	44	0000644		\N
1017	45	http://en.wikipedia.org/wiki/Antisense_RNA		\N
1018	44	0000645		\N
1019	44	0000646		\N
1020	45	http://en.wikipedia.org/wiki/SiRNA		\N
1021	44	0000647		\N
1022	44	0000648		\N
1023	44	0000649		\N
1024	46	11081512		\N
1025	45	http://en.wikipedia.org/wiki/StRNA		\N
1026	44	0000650		\N
1027	44	0000651		\N
1028	44	0000652		\N
1029	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00001		\N
1030	45	http://en.wikipedia.org/wiki/5S_ribosomal_RNA		\N
1031	44	0000653		\N
1032	45	http://en.wikipedia.org/wiki/28S_ribosomal_RNA		\N
1033	44	0000654		\N
1034	44	0000655		\N
1035	45	http://en.wikipedia.org/wiki/NcRNA		\N
1036	44	0000656		\N
1037	44	0000657		\N
1038	44	0000658		\N
1039	45	http://en.wikipedia.org/wiki/Interspersed_repeat		\N
1040	44	0000659		\N
1041	44	0000660		\N
1042	44	0000661		\N
1043	44	0000662		\N
1044	44	0000663		\N
1045	44	0000664		\N
1046	44	0000665		\N
1047	44	0000666		\N
1048	44	0000667		\N
1049	44	1000034		\N
1050	50	LA6687-3		\N
1051	44	0000668		\N
1052	44	0000669		\N
1053	44	0000670		\N
1054	44	0000671		\N
1055	44	0000672		\N
1056	44	0000673		\N
1057	45	http://en.wikipedia.org/wiki/RNA		\N
1058	44	0000674		\N
1059	44	0000675		\N
1060	44	0000676		\N
1061	44	0000677		\N
1062	44	0000678		\N
1063	44	0000679		\N
1064	44	0000680		\N
1065	44	0000681		\N
1066	44	0000682		\N
1067	44	0000683		\N
1068	45	http://www.ncbi.nlm.nih.gov:80/entrez/query.fcgi?cmd=Retrieve&amp;db=PubMed&amp;list_uids=12403462&amp;dopt=Abstract		\N
1069	44	0000684		\N
1070	44	0000685		\N
1071	44	0000686		\N
1072	44	0000687		\N
1073	44	0000688		\N
1074	44	0000689		\N
1075	44	0000690		\N
1076	44	0000691		\N
1077	56	00067		\N
1078	44	0000692		\N
1079	44	0000693		\N
1080	44	0000694		\N
1081	44	0000695		\N
1082	44	0000696		\N
1083	45	http://en.wikipedia.org/wiki/Oligonucleotide		\N
1084	44	0000697		\N
1085	44	0000698		\N
1086	44	0000699		\N
1087	44	0000700		\N
1088	44	0000701		\N
1089	44	0000702		\N
1090	44	0000703		\N
1091	44	0000704		\N
1092	44	immuno_workshop		\N
1093	45	http://en.wikipedia.org/wiki/Gene		\N
1094	44	0000705		\N
1095	45	http://en.wikipedia.org/wiki/Tandem_repeat		\N
1096	44	0000706		\N
1097	44	0000707		\N
1098	44	0000708		\N
1099	44	nlw		\N
1100	44	0000709		\N
1101	44	0000710		\N
1102	44	0000711		\N
1103	44	0000712		\N
1104	44	0000713		\N
1105	45	http://en.wikipedia.org/wiki/DNA_motif		\N
1106	44	0000714		\N
1107	44	0000715		\N
1108	44	0000716		\N
1109	44	0000717		\N
1110	45	http://en.wikipedia.org/wiki/Reading_frame		\N
1111	44	0000718		\N
1112	44	0000719		\N
1113	49	WG		\N
1114	44	0000720		\N
1115	44	0000721		\N
1116	44	0000722		\N
1117	44	0000723		\N
1118	45	http://en.wikipedia.org/wiki/IDNA		\N
1119	44	0000724		\N
1120	45	http://en.wikipedia.org/wiki/Origin_of_transfer		\N
1121	44	0000725		\N
1122	56	00055		\N
1123	44	0000726		\N
1124	44	0000727		\N
1125	44	SG		\N
1126	44	0000728		\N
1127	45	http://en.wikipedia.org/wiki/Intein		\N
1128	44	0000729		\N
1129	44	0000730		\N
1130	44	0000731		\N
1131	44	0000732		\N
1132	45	http://en.wikipedia.org/wiki/Predicted		\N
1133	44	0000733		\N
1134	44	0000734		\N
1135	44	0000735		\N
1136	44	0000736		\N
1137	44	0000737		\N
1138	44	0000738		\N
1139	44	0000739		\N
1140	44	0000740		\N
1141	44	0000741		\N
1142	46	8395055		\N
1143	44	0000826		\N
1144	45	http://en.wikipedia.org/wiki/Kinetoplast		\N
1145	44	0000742		\N
1146	44	0000827		\N
1147	44	0000743		\N
1148	44	0000744		\N
1149	44	0000745		\N
1150	44	0000746		\N
1151	44	0000747		\N
1152	44	0000748		\N
1153	44	0000749		\N
1154	44	0000750		\N
1155	44	0000751		\N
1156	44	0000752		\N
1157	44	0000753		\N
1158	44	0000754		\N
1159	44	0000755		\N
1160	45	http://en.wikipedia.org/wiki/Plasmid_vector#Vectors		\N
1161	44	0000756		\N
1162	45	http://en.wikipedia.org/wiki/CDNA		\N
1163	44	0000757		\N
1164	44	0000758		\N
1165	44	0000759		\N
1166	44	0000760		\N
1167	44	0000761		\N
1168	44	0000762		\N
1169	44	0000763		\N
1170	44	0000764		\N
1171	44	0000765		\N
1172	44	0000766		\N
1173	44	0000767		\N
1174	44	0000768		\N
1175	44	0000769		\N
1176	57	10.1093/nar/gkh795		\N
1177	58	kw		\N
1178	59	1362-4962		\N
1179	44	0000770		\N
1180	44	0000771		\N
1181	45	http://rgd.mcw.edu/tu/qtls/		\N
1182	44	0000772		\N
1183	60	at		\N
1184	45	http://en.wikipedia.org/wiki/Genomic_island		\N
1185	44	0000773		\N
1186	44	0000774		\N
1187	44	0000775		\N
1188	44	0000776		\N
1189	44	0000777		\N
1190	44	0000778		\N
1191	44	0000779		\N
1192	44	0000780		\N
1193	44	0000781		\N
1194	44	0000782		\N
1195	44	0000783		\N
1196	44	0000784		\N
1197	44	0000785		\N
1198	44	0000786		\N
1199	44	0000787		\N
1200	44	0000788		\N
1201	44	0000789		\N
1202	44	0000790		\N
1203	44	0000791		\N
1204	44	0000792		\N
1205	44	0000793		\N
1206	44	0000794		\N
1207	44	0000795		\N
1208	44	0000796		\N
1209	49	mc		\N
1210	44	0000797		\N
1211	44	0000798		\N
1212	44	0000799		\N
1213	44	0000800		\N
1214	49	gm		\N
1215	44	0000801		\N
1216	44	0000802		\N
1217	44	0000803		\N
1218	44	0000804		\N
1219	44	0000805		\N
1220	44	0000806		\N
1221	44	0000807		\N
1222	44	0000808		\N
1223	44	0000809		\N
1224	44	0000810		\N
1225	44	0000811		\N
1226	44	0000812		\N
1227	44	0000813		\N
1228	44	0000814		\N
1229	44	0000815		\N
1230	46	15992143		\N
1231	44	0000816		\N
1232	44	0000817		\N
1233	45	http://en.wikipedia.org/wiki/Wild_type		\N
1234	50	LA9658-1		\N
1235	44	0000818		\N
1236	44	0000819		\N
1237	44	0000820		\N
1238	44	0000821		\N
1239	44	0000822		\N
1240	44	0000823		\N
1241	44	0000824		\N
1242	44	0000825		\N
1243	44	0000828		\N
1244	44	0000829		\N
1245	44	0000830		\N
1246	44	0000831		\N
1247	44	0000832		\N
1248	44	0000833		\N
1249	44	0000834		\N
1250	44	0000835		\N
1251	44	0000836		\N
1252	44	0000837		\N
1253	44	0000838		\N
1254	44	0000839		\N
1255	44	GAR		\N
1256	56	00124		\N
1257	56	00331		\N
1258	44	0000840		\N
1259	44	0000841		\N
1260	44	0000842		\N
1261	44	0000843		\N
1262	44	0000844		\N
1263	44	0000845		\N
1264	44	0000846		\N
1265	44	0000847		\N
1266	44	0000848		\N
1267	44	0000849		\N
1268	44	0000850		\N
1269	44	0000851		\N
1270	44	0000852		\N
1271	44	0000853		\N
1272	45	http://en.wikipedia.org/wiki/Homology_(biology)		\N
1273	44	0000854		\N
1274	45	http://en.wikipedia.org/wiki/Paralog#Paralogy		\N
1275	44	0000855		\N
1276	45	http://en.wikipedia.org/wiki/Ortholog#Orthology		\N
1277	44	0000856		\N
1278	44	0000857		\N
1279	44	0000858		\N
1280	44	0000859		\N
1281	44	0000860		\N
1282	45	http://en.wikipedia.org/wiki/Syntenic		\N
1283	44	0000861		\N
1284	44	0000862		\N
1285	44	0000863		\N
1286	44	0000864		\N
1287	44	0000865		\N
1288	45	http://en.wikipedia.org/wiki/Frameshift		\N
1289	44	0000866		\N
1290	44	0000867		\N
1291	44	0000868		\N
1292	44	0000869		\N
1293	44	0000870		\N
1294	44	0000871		\N
1295	44	0000872		\N
1296	44	0000873		\N
1297	44	0000874		\N
1298	44	0000875		\N
1299	44	0000876		\N
1300	44	0000877		\N
1301	44	0000878		\N
1302	44	0000879		\N
1303	44	0000880		\N
1304	44	0000881		\N
1305	44	0000882		\N
1306	44	0000883		\N
1307	44	0000884		\N
1308	44	0000885		\N
1309	44	0000886		\N
1310	44	0000887		\N
1311	44	0000888		\N
1312	44	0000889		\N
1313	44	0000890		\N
1314	44	0000891		\N
1315	44	0000892		\N
1316	44	0000893		\N
1317	45	http://en.wikipedia.org/wiki/Silenced		\N
1318	44	0000894		\N
1319	44	0000895		\N
1320	44	0000896		\N
1321	44	0000897		\N
1322	44	0000898		\N
1323	44	0000899		\N
1324	44	0000900		\N
1325	44	0000901		\N
1326	44	0000902		\N
1327	45	http://en.wikipedia.org/wiki/Transgene		\N
1328	44	0000903		\N
1329	44	0000904		\N
1330	44	0000905		\N
1331	44	0000906		\N
1332	44	0000907		\N
1333	44	0000908		\N
1334	44	0000909		\N
1335	44	0000910		\N
1336	44	0000911		\N
1337	44	0000912		\N
1338	45	http://www.ebi.ac.uk/msd-srv/msdmotif/		\N
1339	56	00203		\N
1340	44	0000913		\N
1341	44	0000914		\N
1342	44	0000915		\N
1343	44	0000916		\N
1344	44	0000917		\N
1345	44	0000918		\N
1346	44	0000919		\N
1347	44	0000920		\N
1348	44	0000921		\N
1349	44	0000922		\N
1350	44	0000923		\N
1351	44	0000924		\N
1352	44	0000925		\N
1353	44	0000926		\N
1354	44	0000927		\N
1355	44	0000928		\N
1356	44	0000929		\N
1357	44	0000930		\N
1358	44	0000931		\N
1359	44	jk		\N
1360	44	0000932		\N
1361	44	0000933		\N
1362	44	0000934		\N
1363	49	cds		\N
1364	44	0000935		\N
1365	44	0000936		\N
1366	44	0000937		\N
1367	44	0000938		\N
1368	44	0000939		\N
1369	44	0000940		\N
1370	44	0000941		\N
1371	44	0000942		\N
1372	44	0000943		\N
1373	44	0000944		\N
1374	44	0000945		\N
1375	44	0000946		\N
1376	44	0000947		\N
1377	44	0000948		\N
1378	44	0000949		\N
1379	44	0000950		\N
1380	44	0000951		\N
1381	44	0000952		\N
1382	44	0000953		\N
1383	44	0000954		\N
1384	44	0000955		\N
1385	44	0000956		\N
1386	44	0000957		\N
1387	44	0000958		\N
1388	44	0000959		\N
1389	44	0000960		\N
1390	44	0000961		\N
1391	44	0000962		\N
1392	44	0000963		\N
1393	44	0000964		\N
1394	44	0000965		\N
1395	44	0000966		\N
1396	44	0000967		\N
1397	44	0000968		\N
1398	44	0000969		\N
1399	45	http://en.wikipedia.org/wiki/Rolling_circle		\N
1400	44	0000970		\N
1401	44	0000971		\N
1402	44	0000972		\N
1403	44	0000973		\N
1404	45	http://en.wikipedia.org/wiki/Insertion_sequence		\N
1405	44	0000975		\N
1406	44	0000976		\N
1407	44	0000977		\N
1408	44	0000978		\N
1409	44	0000979		\N
1410	44	0000980		\N
1411	44	0000974		\N
1412	45	http://en.wikipedia.org/wiki/Minicircle		\N
1413	44	0000981		\N
1414	44	0000982		\N
1415	44	0000983		\N
1416	44	0000984		\N
1417	44	0000985		\N
1418	44	0000986		\N
1419	44	0000987		\N
1420	44	0000988		\N
1421	44	0000989		\N
1422	46	15333696		\N
1423	44	0000990		\N
1424	44	0000991		\N
1425	44	0000992		\N
1426	44	0000993		\N
1427	44	0000994		\N
1428	44	0000995		\N
1429	44	0000996		\N
1430	44	0000997		\N
1431	44	0000998		\N
1432	45	http://www.genetics.org/cgi/content/full/170/2/661		\N
1433	44	0000999		\N
1434	44	0001000		\N
1435	45	http://en.wikipedia.org/wiki/16S_ribosomal_RNA		\N
1436	44	0001001		\N
1437	44	0001002		\N
1438	44	0001003		\N
1439	44	0001004		\N
1440	44	0001005		\N
1441	44	0001006		\N
1442	51	jl		\N
1443	45	http://en.wikipedia.org/wiki/Prophage		\N
1444	44	0001007		\N
1445	45	http://ecoliwiki.net/colipedia/index.php/Category:Cryptic_Prophage.w		\N
1446	44	0001008		\N
1447	45	http://en.wikipedia.org/wiki/Tetraloop		\N
1448	44	0001009		\N
1449	44	0001010		\N
1450	46	9753739		\N
1451	44	0001011		\N
1452	45	http://en.wikipedia.org/wiki/Peptide_nucleic_acid		\N
1453	44	0001012		\N
1454	44	0001013		\N
1455	45	http://www.ncbi.nlm.nih.gov/SNP/snp_ref.cgi?rs=rs2067431		\N
1456	44	0001014		\N
1457	44	0001015		\N
1458	46	11256617		\N
1459	45	http://en.wikipedia.org/wiki/Wobble_base_pair		\N
1460	44	0001016		\N
1461	44	0001017		\N
1462	45	http://en.wikipedia.org/wiki/Silent_mutation		\N
1463	50	LA6700-4		\N
1464	44	0001018		\N
1465	45	http://en.wikipedia.org/wiki/Epitope		\N
1466	44	0001019		\N
1467	45	http://en.wikipedia.org/wiki/Copy_number_variation		\N
1468	44	0001020		\N
1469	44	0001021		\N
1470	44	0001242		\N
1471	44	0001022		\N
1472	44	0001023		\N
1473	45	http://en.wikipedia.org/wiki/Allele		\N
1474	44	0001024		\N
1475	45	http://en.wikipedia.org/wiki/Haplotype		\N
1476	44	0001025		\N
1477	44	0001026		\N
1478	45	http://en.wikipedia.org/wiki/Genome		\N
1479	44	0001027		\N
1480	45	http://en.wikipedia.org/wiki/Genotype		\N
1481	44	0001028		\N
1482	44	0001029		\N
1483	44	0001030		\N
1484	44	0001031		\N
1485	44	0001032		\N
1486	45	http://en.wikipedia.org/wiki/Mitochondrial_DNA		\N
1487	44	0001033		\N
1488	44	0001034		\N
1489	46	17589500		\N
1490	44	0001035		\N
1491	45	http://en.wikipedia.org/wiki/PiRNA		\N
1492	44	0001036		\N
1493	44	0001037		\N
1494	46	14681355		\N
1495	45	http://en.wikipedia.org/wiki/Mobile_genetic_element		\N
1496	44	0001038		\N
1497	44	0001039		\N
1498	44	0001040		\N
1499	44	0001041		\N
1500	44	0001042		\N
1501	45	http://en.wikipedia.org/wiki/Bacteriophage		\N
1502	44	0001043		\N
1503	44	0001044		\N
1504	45	http://en.wikipedia.org/wiki/Numt		\N
1505	44	0001045		\N
1506	61	at		\N
1507	44	0001046		\N
1508	44	0001047		\N
1509	44	0001048		\N
1510	44	0001049		\N
1511	60	ariane		\N
1512	44	0001050		\N
1513	44	0001051		\N
1514	44	0001052		\N
1515	44	0001053		\N
1516	44	0001054		\N
1517	44	0001055		\N
1518	44	0001056		\N
1519	44	0001057		\N
1520	44	0001058		\N
1521	44	0001059		\N
1522	44	1000004		\N
1523	44	1000007		\N
1524	44	0001060		\N
1525	44	0001061		\N
1526	56	00063		\N
1527	44	0001062		\N
1528	56	00077		\N
1529	45	http://en.wikipedia.org/wiki/Propeptide		\N
1530	44	0001063		\N
1531	56	00129		\N
1532	44	0001064		\N
1533	62	curation_manual		\N
1534	56	00076		\N
1535	45	http://en.wikipedia.org/wiki/Peptide		\N
1536	44	0001066		\N
1537	56	00068		\N
1538	44	0001067		\N
1539	56	00032		\N
1540	44	0001068		\N
1541	56	00070		\N
1542	44	0001070		\N
1543	56	00337		\N
1544	44	0001071		\N
1545	56	00128		\N
1546	44	0001072		\N
1547	56	00154		\N
1548	44	0001073		\N
1549	56	00145		\N
1550	44	0001074		\N
1551	56	00144		\N
1552	44	0001075		\N
1553	56	00156		\N
1554	44	0001076		\N
1555	56	00155		\N
1556	44	0001077		\N
1557	62	curator_manual		\N
1558	56	00158		\N
1559	44	0001078		\N
1560	56	00003		\N
1721	44	0001153		\N
1561	45	http://en.wikipedia.org/wiki/Secondary_structure		\N
1562	44	0001079		\N
1563	56	0000338		\N
1564	45	http://en.wikipedia.org/wiki/Structural_motif		\N
1565	44	0001080		\N
1566	56	00041		\N
1567	45	http://en.wikipedia.org/wiki/Coiled_coil		\N
1568	44	0001081		\N
1569	56	00147		\N
1570	44	0001082		\N
1571	56	00125		\N
1572	44	0001083		\N
1573	56	00182		\N
1574	44	0001084		\N
1575	56	00072		\N
1576	44	0001085		\N
1577	56	00069		\N
1578	44	0001086		\N
1579	56	00181		\N
1580	44	0001087		\N
1581	56	00178		\N
1582	44	0001088		\N
1583	56	00028		\N
1584	44	0001089		\N
1585	56	00052		\N
1586	45	http://en.wikipedia.org/wiki/Post_translational_modification		\N
1587	44	0001090		\N
1588	56	00246		\N
1589	44	0001091		\N
1590	56	00029		\N
1591	44	0001092		\N
1592	56	00027		\N
1593	44	0001093		\N
1594	62	Curation_manual		\N
1595	56	00131		\N
1596	45	http://en.wikipedia.org/wiki/Protein_protein_interaction		\N
1597	44	0001094		\N
1598	56	00186		\N
1599	44	0001095		\N
1600	56	00136		\N
1601	44	0001096		\N
1602	56	00146		\N
1603	44	0001097		\N
1604	56	00137		\N
1605	44	0001098		\N
1606	56	00187		\N
1607	44	0001099		\N
1608	56	00140		\N
1609	44	0001100		\N
1610	56	00141		\N
1611	44	0001101		\N
1612	56	00142		\N
1613	44	0001102		\N
1614	56	00143		\N
1615	44	0001103		\N
1616	56	00185		\N
1617	44	0001104		\N
1618	56	00026		\N
1619	44	0001105		\N
1620	56	00157		\N
1621	44	0001106		\N
1622	56	00202		\N
1623	44	0001107		\N
1624	56	00208		\N
1625	45	http://en.wikipedia.org/wiki/Beta_bulge		\N
1626	44	0001108		\N
1627	63	//www.ebi.ac.uk/msd-srv/msdmotif/		\N
1628	56	00209		\N
1629	44	0001109		\N
1630	56	00210		\N
1631	44	0001110		\N
1632	56	00211		\N
1633	44	0001111		\N
1634	56	00042		\N
1635	45	http://en.wikipedia.org/wiki/Beta_sheet		\N
1636	44	0001112		\N
1637	56	0000341		\N
1638	44	0001113		\N
1639	56	00151		\N
1640	44	0001114		\N
1641	56	00152		\N
1642	44	0001115		\N
1643	56	00222		\N
1644	44	0001116		\N
1645	56	0000339		\N
1646	44	0001117		\N
1647	56	00040		\N
1648	45	http://en.wikipedia.org/wiki/Alpha_helix		\N
1649	44	0001118		\N
1650	56	00153		\N
1651	45	http://en.wikipedia.org/wiki/Pi_helix		\N
1652	44	0001119		\N
1653	56	0000340		\N
1654	45	http://en.wikipedia.org/wiki/310_helix		\N
1655	44	0001120		\N
1656	56	00223		\N
1657	44	0001121		\N
1658	56	00224		\N
1659	44	0001122		\N
1660	56	00225		\N
1661	44	0001123		\N
1662	56	00226		\N
1663	44	0001124		\N
1664	56	00228		\N
1665	44	0001125		\N
1666	56	00227		\N
1667	44	0001126		\N
1668	56	00229		\N
1669	44	0001127		\N
1670	56	00230		\N
1671	44	0001128		\N
1672	30	feature_type		\N
1673	56	00148		\N
1674	44	0001129		\N
1675	56	00206		\N
1676	44	0001130		\N
1677	56	00204		\N
1678	44	0001131		\N
1679	56	00205		\N
1680	44	0001132		\N
1681	56	00207		\N
1682	44	0001133		\N
1683	56	00212		\N
1684	44	0001134		\N
1685	56	00215		\N
1686	44	0001135		\N
1687	56	00213		\N
1688	44	0001136		\N
1689	56	00216		\N
1690	44	0001137		\N
1691	56	00214		\N
1692	44	0001138		\N
1693	56	00219		\N
1694	44	0001139		\N
1695	56	00220		\N
1696	44	0001140		\N
1697	56	00221		\N
1698	44	0001141		\N
1699	56	00231		\N
1700	44	0001142		\N
1701	56	00234		\N
1702	44	0001143		\N
1703	56	00232		\N
1704	44	0001144		\N
1705	56	00235		\N
1706	44	0001145		\N
1707	56	00233		\N
1708	44	0001146		\N
1709	56	00336		\N
1710	44	0001147		\N
1711	56	00071		\N
1712	44	0001148		\N
1713	56	00036		\N
1714	44	0001149		\N
1715	56	00073		\N
1716	44	0001065		\N
1717	44	0001150		\N
1718	44	0001151		\N
1719	46	2371257		\N
1720	44	0001152		\N
1722	44	0001154		\N
1723	44	0001155		\N
1724	44	0001156		\N
1725	46	12537576		\N
1726	44	0001157		\N
1727	46	16827941:12537576		\N
1728	44	0001158		\N
1729	46	12537576:16827941		\N
1730	44	0001159		\N
1731	44	0001160		\N
1732	44	0001161		\N
1733	44	0001162		\N
1734	46	12537576:15231738		\N
1735	44	0001163		\N
1736	46	16827941		\N
1737	44	0001164		\N
1738	44	0001165		\N
1739	44	0001166		\N
1740	44	0001167		\N
1741	44	0001168		\N
1742	44	0001169		\N
1743	44	0001170		\N
1744	46	16537396		\N
1745	44	0001171		\N
1746	44	0001172		\N
1747	44	0001173		\N
1748	47	0716719207		\N
1749	44	0001174		\N
1750	45	http://en.wikipedia.org/wiki/Anticodon		\N
1751	44	0001175		\N
1752	44	0001176		\N
1753	47	071671920		\N
1754	44	0001177		\N
1755	44	0001178		\N
1756	44	0001179		\N
1757	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00012		\N
1758	45	http://en.wikipedia.org/wiki/Small_nucleolar_RNA_U3		\N
1759	44	0001180		\N
1760	46	7892223		\N
1761	45	http://en.wikipedia.org/wiki/AU-rich_element		\N
1762	44	0001181		\N
1763	46	10893231		\N
1764	44	0001182		\N
1765	46	3198610		\N
1766	46	8710843		\N
1767	45	http://en.wikipedia.org/wiki/Iron_responsive_element		\N
1768	44	0001183		\N
1769	45	http://en.wikipedia.org/wiki/Morpholino		\N
1770	44	0001184		\N
1771	44	0001185		\N
1772	44	0001186		\N
1773	44	0001187		\N
1774	51	mah		\N
1775	46	12457565		\N
1776	44	0001188		\N
1777	53	48010		\N
1778	44	0001189		\N
1779	45	http://en.wikipedia.org/wiki/Locked_nucleic_acid		\N
1780	44	0001190		\N
1781	53	48019		\N
1782	44	0001191		\N
1783	45	http://en.wikipedia.org/wiki/Threose_nucleic_acid		\N
1784	44	0001192		\N
1785	53	48015		\N
1786	44	0001193		\N
1787	45	http://en.wikipedia.org/wiki/Glycerol_nucleic_acid		\N
1788	44	0001194		\N
1789	53	48016		\N
1790	44	0001195		\N
1791	44	0001196		\N
1792	53	48017		\N
1793	44	0001197		\N
1794	44	0001198		\N
1795	44	0001199		\N
1796	44	0001200		\N
1797	44	0001201		\N
1798	44	0001202		\N
1799	44	0001203		\N
1800	64	jb		\N
1801	44	0001204		\N
1802	44	0001205		\N
1803	44	0001206		\N
1804	44	0001207		\N
1805	44	0001208		\N
1806	45	http://www.ncbi.nlm.nih.gov/About/primer/est.html		\N
1807	44	0001209		\N
1808	44	0001210		\N
1809	45	http://en.wikipedia.org/wiki/Translational_frameshift		\N
1810	44	0001211		\N
1811	44	0001212		\N
1812	44	0001213		\N
1813	46	11377794		\N
1814	45	http://en.wikipedia.org/wiki/Group_III_intron		\N
1815	44	0001214		\N
1816	44	0001215		\N
1817	44	0001216		\N
1818	44	0001217		\N
1819	44	0001218		\N
1820	44	bm		\N
1821	44	0001219		\N
1822	44	0001220		\N
1823	44	0001221		\N
1824	44	0001222		\N
1825	44	0001223		\N
1826	44	0001224		\N
1827	44	0001225		\N
1828	44	0001226		\N
1829	44	0001227		\N
1830	44	0001228		\N
1831	45	http://en.wikipedia.org/wiki/Dihydrouridine		\N
1832	65	051		\N
1833	44	0001229		\N
1834	45	http://en.wikipedia.org/wiki/Pseudouridine		\N
1835	65	050		\N
1836	44	0001230		\N
1837	45	http://library.med.utah.edu/RNAmods/		\N
1838	45	http://en.wikipedia.org/wiki/Inosine		\N
1839	44	0001231		\N
1840	44	0001232		\N
1841	44	0001233		\N
1842	44	0001234		\N
1843	45	http://en.wikipedia.org/wiki/Mobile		\N
1844	44	0001235		\N
1845	45	http://en.wikipedia.org/wiki/Replicon_(genetics)		\N
1846	44	0001236		\N
1847	45	http://en.wikipedia.org/wiki/Nucleobase		\N
1848	44	0001237		\N
1849	45	http://en.wikipedia.org/wiki/Amino_acid		\N
1850	44	0001238		\N
1851	44	0001239		\N
1852	44	0001240		\N
1853	66	nw		\N
1854	44	0001241		\N
1855	44	0001243		\N
1856	44	0001244		\N
1857	44	0001245		\N
1858	44	0001246		\N
1859	44	0001247		\N
1860	44	0001248		\N
1861	45	http://en.wikipedia.org/wiki/Genome_assembly#Genome_assembly		\N
1862	44	0001249		\N
1863	44	0001250		\N
1864	44	0001251		\N
1865	44	0001252		\N
1866	44	0001253		\N
1867	44	0001254		\N
1868	45	http://en.wikipedia.org/wiki/Polyploid		\N
1869	44	0001255		\N
1870	45	http://en.wikipedia.org/wiki/Autopolyploid		\N
1871	44	0001256		\N
1872	45	http://en.wikipedia.org/wiki/Allopolyploid		\N
1873	44	0001257		\N
1874	44	0001258		\N
1875	51	dh		\N
1876	46	3095662		\N
1877	44	0001259		\N
1878	44	0001260		\N
1879	44	0001261		\N
1880	44	0001262		\N
1881	44	0001263		\N
1882	44	0001264		\N
1883	44	0001265		\N
1884	44	0001266		\N
1885	44	0001267		\N
1886	44	0001268		\N
1887	44	0001269		\N
1888	44	0001270		\N
1889	44	0001271		\N
1890	44	0001272		\N
1891	44	0001273		\N
1892	44	0001274		\N
1893	44	0001275		\N
1894	44	0001276		\N
1895	44	0001277		\N
1896	44	0001278		\N
1897	65	018		\N
1898	44	0001279		\N
1899	65	019		\N
1900	44	0001280		\N
1901	65	081		\N
1902	44	0001281		\N
1903	65	020		\N
1904	44	0001282		\N
1905	65	021		\N
1906	44	0001283		\N
1907	65	022		\N
1908	44	0001284		\N
1909	65	023		\N
1910	44	0001285		\N
1911	65	024		\N
1912	44	0001286		\N
1913	65	025		\N
1914	44	0001287		\N
1915	65	026		\N
1916	44	0001288		\N
1917	65	027		\N
1918	44	0001289		\N
1919	45	http://en.wikipedia.org/wiki/Lysidine		\N
1920	65	028		\N
1921	44	0001290		\N
1922	65	082		\N
1923	44	0001291		\N
1924	65	083		\N
1925	44	0001292		\N
1926	65	084		\N
1927	44	0001293		\N
1928	65	095		\N
1929	44	0001294		\N
1930	65	107		\N
1931	44	0001295		\N
1932	65	001		\N
1933	44	0001296		\N
1934	65	002		\N
1935	44	0001297		\N
1936	65	003		\N
1937	44	0001298		\N
1938	65	004		\N
1939	44	0001299		\N
1940	65	005		\N
1941	44	0001300		\N
1942	65	006		\N
1943	44	0001301		\N
1944	65	007		\N
1945	44	0001302		\N
1946	65	008		\N
1947	44	0001303		\N
1948	65	009		\N
1949	44	0001304		\N
1950	65	010		\N
1951	44	0001305		\N
1952	65	011		\N
1953	44	0001306		\N
1954	65	012		\N
1955	44	0001307		\N
1956	65	013		\N
1957	44	0001308		\N
1958	65	014		\N
1959	44	0001309		\N
1960	65	015		\N
1961	44	0001310		\N
1962	65	016		\N
1963	44	0001311		\N
1964	65	080		\N
1965	44	0001312		\N
1966	65	088		\N
1967	44	0001313		\N
1968	65	089		\N
1969	44	0001314		\N
1970	65	097		\N
1971	44	0001315		\N
1972	65	102		\N
1973	44	0001316		\N
1974	44	0001317		\N
1975	45	http://en.wikipedia.org/wiki/Queuosine		\N
1976	65	043		\N
1977	44	0001318		\N
1978	65	044		\N
1979	44	0001319		\N
1980	65	045		\N
1981	44	0001320		\N
1982	65	046		\N
1983	44	0001321		\N
1984	65	047		\N
1985	44	0001322		\N
1986	65	048		\N
1987	44	0001323		\N
1988	65	049		\N
1989	44	0001324		\N
1990	65	029		\N
1991	44	0001325		\N
1992	65	030		\N
1993	44	0001326		\N
1994	65	031		\N
1995	44	0001327		\N
1996	65	032		\N
1997	44	0001328		\N
1998	65	033		\N
1999	44	0001329		\N
2000	65	034		\N
2001	44	0001330		\N
2002	65	035		\N
2003	44	0001331		\N
2004	65	036		\N
2005	44	0001332		\N
2006	65	037		\N
2007	44	0001333		\N
2008	65	038		\N
2009	44	0001334		\N
2010	65	039		\N
2011	44	0001335		\N
2012	65	040		\N
2013	44	0001336		\N
2014	65	041		\N
2015	44	0001337		\N
2016	65	042		\N
2017	44	0001338		\N
2018	65	090		\N
2019	44	0001339		\N
2020	65	091		\N
2021	44	0001340		\N
2022	65	096		\N
2023	44	0001341		\N
2024	65	100		\N
2025	44	0001342		\N
2026	65	101		\N
2027	44	0001343		\N
2028	65	106		\N
2029	44	0001344		\N
2030	45	http://en.wikipedia.org/wiki/5-methyluridine		\N
2031	65	052		\N
2032	44	0001345		\N
2033	65	053		\N
2034	44	0001346		\N
2035	65	054		\N
2036	44	0001347		\N
2037	65	055		\N
2038	44	0001348		\N
2039	65	056		\N
2040	44	0001349		\N
2041	65	057		\N
2042	44	0001350		\N
2043	65	058		\N
2044	44	0001351		\N
2045	65	059		\N
2046	44	0001352		\N
2047	65	060		\N
2048	44	0001353		\N
2049	65	061		\N
2050	44	0001354		\N
2051	44	0001355		\N
2052	65	063		\N
2053	44	0001356		\N
2054	65	064		\N
2055	44	0001357		\N
2056	65	065		\N
2057	44	0001358		\N
2058	65	066		\N
2059	44	0001359		\N
2060	65	067		\N
2061	44	0001360		\N
2062	65	068		\N
2063	44	0001361		\N
2064	65	069		\N
2065	44	0001362		\N
2066	65	070		\N
2067	44	0001363		\N
2068	65	071		\N
2069	44	0001364		\N
2070	65	072		\N
2071	44	0001365		\N
2072	65	073		\N
2073	44	0001366		\N
2074	65	074		\N
2075	44	0001367		\N
2076	65	075		\N
2077	44	0001368		\N
2078	65	076		\N
2079	44	0001369		\N
2080	65	077		\N
2081	44	0001370		\N
2082	65	078		\N
2083	44	0001371		\N
2084	65	079		\N
2085	44	0001372		\N
2086	65	085		\N
2087	44	0001373		\N
2088	65	086		\N
2089	44	0001374		\N
2090	65	087		\N
2091	44	0001375		\N
2092	65	092		\N
2093	44	0001376		\N
2094	65	093		\N
2095	44	0001377		\N
2096	65	094		\N
2097	44	0001378		\N
2098	65	098		\N
2099	44	0001379		\N
2100	65	099		\N
2101	44	0001380		\N
2102	65	103		\N
2103	44	0001381		\N
2104	65	104		\N
2105	44	0001382		\N
2106	65	105		\N
2107	44	0001383		\N
2108	44	0001384		\N
2109	44	0001385		\N
2110	44	0001386		\N
2111	67	00908		\N
2112	44	0001387		\N
2113	67	00901		\N
2114	44	0001388		\N
2115	67	00903		\N
2116	44	0001389		\N
2117	67	00904		\N
2118	44	0001390		\N
2119	67	00905		\N
2120	44	0001391		\N
2121	67	00906		\N
2122	44	0001392		\N
2123	67	00917		\N
2124	44	0001393		\N
2125	67	00918		\N
2126	44	0001394		\N
2127	67	00907		\N
2128	44	0001395		\N
2129	67	00913		\N
2130	44	0001396		\N
2131	67	00910		\N
2132	44	0001397		\N
2133	67	00914		\N
2134	44	0001398		\N
2135	67	00909		\N
2136	44	0001399		\N
2137	67	00916		\N
2138	44	0001400		\N
2139	67	00912		\N
2140	44	0001401		\N
2141	67	00911		\N
2142	44	0001402		\N
2143	67	01158		\N
2144	44	0001403		\N
2145	67	00920		\N
2146	44	0001404		\N
2147	67	00915		\N
2148	44	0001405		\N
2149	67	00919		\N
2150	44	0001406		\N
2151	67	00902		\N
2152	44	0001407		\N
2153	44	0001408		\N
2154	68	rh		\N
2155	44	0001409		\N
2156	44	0001410		\N
2157	44	0001411		\N
2158	44	0001412		\N
2159	44	0001413		\N
2160	44	0001414		\N
2161	44	0001415		\N
2162	44	0001416		\N
2163	44	chado		\N
2164	44	0001417		\N
2165	44	0001418		\N
2166	44	0001419		\N
2167	44	0001420		\N
2168	44	0001421		\N
2169	44	0001422		\N
2170	44	0001423		\N
2171	44	0001424		\N
2172	44	0001425		\N
2173	44	0001426		\N
2174	44	0001427		\N
2175	69	jd		\N
2176	44	0001428		\N
2177	44	0001429		\N
2178	44	0001431		\N
2179	44	0001432		\N
2180	44	0001433		\N
2181	70	nlw		\N
2182	44	0001434		\N
2183	44	0001435		\N
2184	44	0001436		\N
2185	44	0001437		\N
2186	44	0001438		\N
2187	44	0001439		\N
2188	44	0001440		\N
2189	44	0001441		\N
2190	44	0001442		\N
2191	44	0001443		\N
2192	44	0001444		\N
2193	44	0001445		\N
2194	44	0001446		\N
2195	44	0001447		\N
2196	44	0001448		\N
2197	44	0001449		\N
2198	44	0001450		\N
2199	44	0001451		\N
2200	44	0001452		\N
2201	44	0001453		\N
2202	44	0001454		\N
2203	44	0001455		\N
2204	44	0001456		\N
2205	44	0001457		\N
2206	44	0001458		\N
2207	44	0001459		\N
2208	48	en.wikipedia.org/wiki/CRISPR		\N
2209	44	0001460		\N
2210	44	0001461		\N
2211	44	0001462		\N
2212	44	0001463		\N
2213	46	19182780		\N
2214	44	0001464		\N
2215	44	0001465		\N
2216	44	0001466		\N
2217	44	0001467		\N
2218	44	0001468		\N
2219	44	0001469		\N
2220	44	0001470		\N
2221	44	0001471		\N
2222	44	0001472		\N
2223	44	0001473		\N
2224	44	0001474		\N
2225	44	0001475		\N
2226	46	16401417		\N
2227	44	0001476		\N
2228	44	0001477		\N
2229	71	dh		\N
2230	44	0001478		\N
2231	44	0001479		\N
2232	44	0001480		\N
2233	71	mh		\N
2234	44	0001481		\N
2235	44	0001482		\N
2236	44	0001483		\N
2237	44	0001484		\N
2238	45	http://www.yeastgenome.org/help/glossary.html		\N
2239	44	0001485		\N
2240	48	http://www.yeastgenome.org/help/glossary.html		\N
2241	44	0001486		\N
2242	72	10.1126		\N
2243	44	0001487		\N
2244	44	0001488		\N
2245	44	0001489		\N
2246	44	0001490		\N
2247	44	0001491		\N
2248	44	0001492		\N
2249	44	0001493		\N
2250	46	11222754		\N
2251	44	0001494		\N
2252	44	0001495		\N
2253	44	0001496		\N
2254	46	8720065		\N
2255	44	0001497		\N
2256	45	http://www.yeastgenome.org/help/glossary.html#xelemcoresequence		\N
2257	44	0001498		\N
2258	44	0001499		\N
2259	44	0001500		\N
2260	73	hdene		\N
2261	44	0001501		\N
2262	66	nlw		\N
2263	44	0001502		\N
2264	44	0001503		\N
2265	74	hdeen		\N
2266	44	0001504		\N
2267	44	0001505		\N
2268	44	0001506		\N
2269	44	0001507		\N
2270	44	0001508		\N
2271	44	0001509		\N
2272	44	0001510		\N
2273	44	0001511		\N
2274	44	0001512		\N
2275	44	0001513		\N
2276	44	0001514		\N
2277	44	0001515		\N
2278	44	0001516		\N
2279	44	0001517		\N
2280	44	0001518		\N
2281	44	0001519		\N
2282	44	0001520		\N
2283	44	0001521		\N
2284	44	0001522		\N
2285	44	0001523		\N
2286	44	0001524		\N
2287	44	0001525		\N
2288	44	0001526		\N
2289	44	0001527		\N
2290	44	0001528		\N
2291	45	http://en.wikipedia.org/wiki/Nuclear_localization_signal		\N
2292	44	0001529		\N
2293	44	0001530		\N
2294	44	0001531		\N
2295	45	http://en.wikipedia.org/wiki/Nuclear_export_signal		\N
2296	44	0001532		\N
2297	45	http://en.wikipedia.org/wiki/Recombination_Signal_Sequences		\N
2298	44	0001533		\N
2299	44	0001534		\N
2300	46	16027110		\N
2301	44	0001535		\N
2302	44	0001536		\N
2303	44	0001537		\N
2304	44	0001538		\N
2305	44	0001539		\N
2306	44	0001540		\N
2307	44	0001541		\N
2308	44	0001542		\N
2309	44	0001543		\N
2310	44	0001544		\N
2311	44	0001545		\N
2312	44	0001546		\N
2313	44	0001547		\N
2314	44	0001548		\N
2315	44	0001549		\N
2316	44	0001550		\N
2317	44	0001551		\N
2318	44	0001552		\N
2319	44	0001553		\N
2320	44	0001554		\N
2321	44	0001555		\N
2322	44	0001556		\N
2323	44	0001557		\N
2324	44	0001558		\N
2325	44	0001559		\N
2326	44	0001560		\N
2327	44	0001561		\N
2328	44	0001562		\N
2329	44	0001563		\N
2330	44	0001564		\N
2331	44	0001565		\N
2332	44	0001566		\N
2333	44	0001567		\N
2334	44	0001568		\N
2335	68	www.ebi.ac.uk/mutations/recommendations/mutevent.html		\N
2336	44	0001569		\N
2337	44	0001570		\N
2338	44	0001571		\N
2339	44	0001572		\N
2340	44	0001573		\N
2341	44	0001574		\N
2342	44	0001575		\N
2343	44	0001576		\N
2344	44	0001577		\N
2345	45	http://ensembl.org/info/docs/variation/index.html		\N
2346	44	0001578		\N
2347	44	0001579		\N
2348	44	0001580		\N
2349	44	0001581		\N
2350	44	0001582		\N
2351	50	LA6695-6		\N
2352	44	0001583		\N
2353	68	fc		\N
2354	68	gr		\N
2355	44	0001584		\N
2356	44	0001783		\N
2357	45	http://en.wikipedia.org/wiki/Missense_mutation		\N
2358	50	LA6698-0		\N
2359	44	0001585		\N
2360	44	0001586		\N
2361	44	0001587		\N
2362	50	LA6699-8		\N
2363	44	0001589		\N
2364	50	LA6694-9		\N
2365	44	0001590		\N
2366	44	0001625		\N
2367	50	LA6700-2		\N
2368	44	0001591		\N
2369	44	0001592		\N
2370	45	http://arjournals.annualreviews.org/doi/pdf/10.1146/annurev.ge.08.120174.001535		\N
2371	44	0001593		\N
2372	44	0001594		\N
2373	44	0001595		\N
2374	44	0001596		\N
2375	44	0001597		\N
2376	44	0001598		\N
2377	44	0001599		\N
2378	44	0001600		\N
2379	44	0001601		\N
2380	44	0001602		\N
2381	44	0001603		\N
2382	44	0001604		\N
2383	44	0001605		\N
2384	44	0001606		\N
2385	44	0001607		\N
2386	44	0001608		\N
2387	44	0001609		\N
2388	44	0001610		\N
2389	44	0001611		\N
2390	44	0001612		\N
2391	44	0001613		\N
2392	44	0001614		\N
2393	44	0001615		\N
2394	44	0001616		\N
2395	44	0001617		\N
2396	44	0001618		\N
2397	44	0001619		\N
2398	44	0001620		\N
2399	44	0001621		\N
2400	44	0001622		\N
2401	44	0001623		\N
2402	44	0001624		\N
2403	44	0001626		\N
2404	44	0001627		\N
2405	44	0001628		\N
2406	44	0001629		\N
2407	44	0001630		\N
2408	44	0001631		\N
2409	44	0001632		\N
2410	44	0001633		\N
2411	44	0001634		\N
2412	44	0001635		\N
2413	44	0001636		\N
2414	44	0001637		\N
2415	44	0001638		\N
2416	44	0001639		\N
2417	44	0001640		\N
2418	44	0001641		\N
2419	44	0001642		\N
2420	44	jestill		\N
2421	44	0001643		\N
2422	48	http://en.wikipedia.org/wiki/Telomerase_RNA_component		\N
2423	44	0001644		\N
2424	75	tm		\N
2425	46	10354467		\N
2426	44	0001645		\N
2427	44	db		\N
2428	44	0001646		\N
2429	44	0001647		\N
2430	45	http://en.wikipedia.org/wiki/Kozak_consensus_sequence		\N
2431	44	0001648		\N
2432	44	0001649		\N
2433	44	0001650		\N
2434	44	0001653		\N
2435	46	11327309		\N
2436	46	19917671		\N
2437	44	0001654		\N
2438	44	0001655		\N
2439	44	0001656		\N
2440	44	0001657		\N
2441	44	0001658		\N
2442	44	AF		\N
2443	44	0001659		\N
2444	44	0001660		\N
2445	44	0001661		\N
2446	44	0001662		\N
2447	44	0001663		\N
2448	44	0001664		\N
2449	44	0001665		\N
2450	44	0001666		\N
2451	44	0001667		\N
2452	44	0001668		\N
2453	44	0001669		\N
2454	44	0001670		\N
2455	44	0001671		\N
2456	44	0001672		\N
2457	44	0001673		\N
2458	46	18331472		\N
2459	44	0001674		\N
2460	44	0001675		\N
2461	44	0001676		\N
2462	44	0001677		\N
2463	46	12381659		\N
2464	44	0001678		\N
2465	44	0001679		\N
2466	44	0001680		\N
2467	44	0001681		\N
2468	44	0001682		\N
2469	44	0001683		\N
2470	45	http://en.wikipedia.org/wiki/Sequence_motif		\N
2471	44	0001684		\N
2472	44	0001685		\N
2473	44	0001686		\N
2474	44	0001687		\N
2475	44	0001688		\N
2476	44	0001689		\N
2477	44	0001690		\N
2478	44	0001691		\N
2479	44	0001692		\N
2480	44	0001693		\N
2481	44	0001694		\N
2482	44	0001695		\N
2483	44	0001696		\N
2484	44	0001697		\N
2485	44	0001698		\N
2486	45	http://www.ncbi.nlm.nih.gov/pubmed/11252801		\N
2487	44	0001699		\N
2488	45	http://www.ncbi.nlm.nih.gov/pubmed/9628033		\N
2489	44	0001700		\N
2490	48	en.wikipedia.org/wiki/Histone		\N
2491	44	0001701		\N
2492	44	0001702		\N
2493	44	0001703		\N
2494	45	http://en.wikipedia.org/wiki/Histone		\N
2495	44	0001704		\N
2496	44	0001705		\N
2497	44	0001706		\N
2498	44	0001707		\N
2499	44	0001708		\N
2500	44	0001709		\N
2501	44	0001710		\N
2502	44	0001711		\N
2503	44	0001712		\N
2504	44	0001713		\N
2505	44	0001714		\N
2506	44	0001715		\N
2507	45	http://genesdev.cshlp.org/content/2/4/383.abstrac		\N
2508	44	0001716		\N
2509	44	0001717		\N
2510	44	0001718		\N
2511	44	0001719		\N
2512	44	0001720		\N
2513	45	http://en.wikipedia.org/wiki/Epigenetics		\N
2514	44	0001721		\N
2515	44	0001722		\N
2516	44	0001723		\N
2517	44	0001724		\N
2518	44	0001725		\N
2519	44	0001726		\N
2520	44	0001727		\N
2521	44	0001728		\N
2522	44	0001729		\N
2523	44	0001730		\N
2524	44	0001731		\N
2525	44	KE		\N
2526	44	0001732		\N
2527	44	0001733		\N
2528	44	0001734		\N
2529	44	0001735		\N
2530	44	0001736		\N
2531	44	0001737		\N
2532	44	0001738		\N
2533	44	0001739		\N
2534	44	0001740		\N
2535	44	mc		\N
2536	44	0001741		\N
2537	44	hd		\N
2538	44	0001742		\N
2539	44	0001743		\N
2540	44	0001744		\N
2541	44	BM		\N
2542	48	http://en.wikipedia.org/wiki/Uniparental_disomy		\N
2543	44	0001745		\N
2544	44	0001746		\N
2545	44	0001747		\N
2546	44	0001748		\N
2547	44	0001749		\N
2548	44	0001750		\N
2549	44	0001751		\N
2550	44	0001752		\N
2551	44	0001753		\N
2552	44	0001754		\N
2553	44	0001755		\N
2554	44	0001756		\N
2555	44	0001757		\N
2556	44	0001758		\N
2557	44	0001759		\N
2558	44	0001760		\N
2559	44	0001761		\N
2560	46	17597783		\N
2561	44	0001762		\N
2562	44	0001763		\N
2563	44	0001764		\N
2564	44	0001765		\N
2565	44	0001766		\N
2566	44	0001767		\N
2567	44	0001768		\N
2568	44	0001769		\N
2569	44	0001770		\N
2570	44	0001771		\N
2571	44	0001772		\N
2572	44	0001773		\N
2573	44	0001774		\N
2574	44	0001775		\N
2575	44	0001776		\N
2576	44	0001777		\N
2577	44	0001778		\N
2578	44	0001779		\N
2579	44	0001780		\N
2580	44	0001781		\N
2581	44	0001782		\N
2582	44	0001784		\N
2583	76	th		\N
2584	44	0001785		\N
2585	44	0001786		\N
2586	44	0001787		\N
2587	44	0001788		\N
2588	46	10556309		\N
2589	46	11577982		\N
2590	46	9649446		\N
2591	44	0001789		\N
2592	45	http://en.wikipedia.org/wiki/Mating-type_region		\N
2593	44	0001790		\N
2594	44	0001791		\N
2595	44	0001792		\N
2596	44	0001793		\N
2597	44	0001794		\N
2598	46	7502067		\N
2599	44	vw		\N
2600	44	0001795		\N
2601	44	0001796		\N
2602	44	0001797		\N
2603	44	0001798		\N
2604	44	0001799		\N
2605	44	0001800		\N
2606	46	16145017		\N
2607	44	0001801		\N
2608	44	0001802		\N
2609	44	0001803		\N
2610	44	0001804		\N
2611	46	18794354		\N
2612	46	19818632		\N
2613	44	0001805		\N
2614	46	12208841		\N
2615	46	1842691		\N
2616	44	0001806		\N
2617	57	10.1093/jxb/50.331.157		\N
2618	46	2077689		\N
2619	44	0001807		\N
2620	46	10733526		\N
2621	46	1220884		\N
2622	46	18426916		\N
2623	44	0001808		\N
2624	77	mah		\N
2625	44	0001809		\N
2626	45	http://www.cbs.dtu.dk/services/SignalP/background/biobackground.php		\N
2627	44	0001810		\N
2628	46	9631646		\N
2629	44	0001811		\N
2630	44	0001812		\N
2631	44	0001813		\N
2632	44	0001814		\N
2633	44	0001815		\N
2634	44	0001816		\N
2635	44	0001817		\N
2636	44	0001818		\N
2637	44	0001819		\N
2638	44	0001588		\N
2639	45	http://en.wikipedia.org/wiki/Synonymous_mutation		\N
2640	44	0001820		\N
2641	44	0001821		\N
2642	44	0001651		\N
2643	44	0001822		\N
2644	44	0001652		\N
2645	44	0001823		\N
2646	44	0001824		\N
2647	44	0001825		\N
2648	44	0001826		\N
2649	44	0001827		\N
2650	44	0001828		\N
2651	44	0001829		\N
2652	44	0001830		\N
2653	78	ea		\N
2654	45	http://en.wikipedia.org/wiki/Amplified_fragment_length_polymorphism		\N
2655	44	0001831		\N
2656	44	0001832		\N
2657	44	0001833		\N
2658	44	0001834		\N
2659	44	0001835		\N
2660	44	0001836		\N
2661	44	0001837		\N
2662	68	dvga		\N
2663	44	0001838		\N
2664	44	0001839		\N
2665	46	19101542		\N
2666	44	0001840		\N
2667	46	8321208		\N
2668	44	0001841		\N
2669	73	hd		\N
2670	44	0001842		\N
2671	46	1899230		\N
2672	46	3034432		\N
2673	46	3125983		\N
2674	44	0001843		\N
2675	46	11483355		\N
2676	46	11483993		\N
2677	44	0001844		\N
2678	46	10593913		\N
2679	46	9188496		\N
2680	46	9211922		\N
2681	44	0001845		\N
2682	46	11073995		\N
2683	46	8668127		\N
2684	44	0001846		\N
2685	46	10747048		\N
2686	46	14871934		\N
2687	44	0001847		\N
2688	46	15195092		\N
2689	44	0001848		\N
2690	46	7501449		\N
2691	46	8458332		\N
2692	44	0001849		\N
2693	44	0001850		\N
2694	46	17347150		\N
2695	46	8689565		\N
2696	44	0001851		\N
2697	46	11956219		\N
2698	46	17211681		\N
2699	44	0001852		\N
2700	46	9233811		\N
2701	44	0001853		\N
2702	46	21796522		\N
2703	44	0001854		\N
2704	46	18806792		\N
2705	44	0001855		\N
2706	46	16285853		\N
2707	44	0001856		\N
2708	46	16963626		\N
2709	44	0001857		\N
2710	46	16678171		\N
2711	44	0001858		\N
2712	46	1657709		\N
2713	44	0001859		\N
2714	46	11739717		\N
2715	44	0001860		\N
2716	46	9016645		\N
2717	44	0001861		\N
2718	79	mah		\N
2719	46	11111080		\N
2720	46	16537923		\N
2721	44	0001862		\N
2722	44	0001863		\N
2723	44	0001864		\N
2724	46	16166653		\N
2725	46	7651412		\N
2726	44	0001865		\N
2727	46	16928959		\N
2728	44	0001866		\N
2729	44	0001867		\N
2730	44	0001868		\N
2731	44	0001869		\N
2732	44	0001870		\N
2733	57	10.1038/465173a		\N
2734	44	0001871		\N
2735	46	12411492		\N
2736	44	0001872		\N
2737	46	18564416		\N
2738	44	0001873		\N
2739	44	0001874		\N
2740	44	0001875		\N
2741	44	0001876		\N
2742	44	0001877		\N
2743	80	mw		\N
2744	44	0001878		\N
2745	44	0001879		\N
2746	44	0001880		\N
2747	44	0001881		\N
2748	44	0001882		\N
2749	44	0001883		\N
2750	44	0001884		\N
2751	44	0001885		\N
2752	44	0001886		\N
2753	44	0001887		\N
2754	44	0001888		\N
2755	44	0001889		\N
2756	44	0001890		\N
2757	44	0001891		\N
2758	44	0001892		\N
2759	44	0001893		\N
2760	44	0001894		\N
2761	44	0001895		\N
2762	44	0001896		\N
2763	44	0001897		\N
2764	44	0001898		\N
2765	46	16407326		\N
2766	44	0001899		\N
2767	44	0001900		\N
2768	46	15448137		\N
2769	44	0001901		\N
2770	46	17452352		\N
2771	46	4092687		\N
2772	44	0001902		\N
2773	44	0001903		\N
2774	46	19071207		\N
2775	44	0001904		\N
2776	46	19638999		\N
2777	44	0001905		\N
2778	44	0001906		\N
2779	44	0001907		\N
2780	44	0001908		\N
2781	44	0001909		\N
2782	44	0001910		\N
2783	44	0001911		\N
2784	44	0001912		\N
2785	44	0001913		\N
2786	81	kc		\N
2787	44	0001914		\N
2788	46	14645529		\N
2789	44	0001915		\N
2790	46	19624849		\N
2791	46	21372179		\N
2792	44	andrewgibson		\N
2793	44	0001916		\N
2794	44	0001917		\N
2795	46	16645617		\N
2796	44	0001918		\N
2797	44	rtapella		\N
2798	45	http://www.ebi.ac.uk/embl/Documentation/FT_definitions/feature_table.html#7.4.2		\N
2799	44	0001919		\N
2800	44	0001920		\N
2801	44	0001921		\N
2802	44	0001922		\N
2803	44	0001923		\N
2804	46	22139915		\N
2805	44	0001924		\N
2806	46	2139915		\N
2807	44	0001925		\N
2808	44	0001926		\N
2809	44	0001927		\N
2810	44	0001928		\N
2811	44	0005836		\N
2812	45	http://en.wikipedia.org/wiki/Regulatory_region		\N
2813	44	0005837		\N
2814	46	2251119		\N
2815	44	0005841		\N
2816	44	0005843		\N
2817	44	0005845		\N
2818	44	0005847		\N
2819	44	0005848		\N
2820	44	0005849		\N
2821	44	0005850		\N
2822	45	http://en.wikipedia.org/wiki/Primer_binding_site		\N
2823	44	0005851		\N
2824	44	0005852		\N
2825	44	0005853		\N
2826	10	se		\N
2827	45	http://en.wikipedia.org/wiki/Gene_cassette		\N
2828	44	0005854		\N
2829	44	0005855		\N
2830	44	0005856		\N
2831	44	0005857		\N
2832	44	0005858		\N
2833	45	http://www.informatics.jax.org/silverbook/glossary.shtml		\N
2834	44	0100001		\N
2835	44	0100002		\N
2836	44	0100003		\N
2837	44	0100004		\N
2838	44	0100005		\N
2839	44	0100006		\N
2840	44	0100007		\N
2841	44	0100008		\N
2842	44	0100009		\N
2843	44	0100010		\N
2844	44	0100011		\N
2845	44	0100012		\N
2846	44	0100013		\N
2847	44	0100014		\N
2848	44	0100015		\N
2849	44	0100016		\N
2850	44	0100017		\N
2851	44	0100018		\N
2852	44	0100019		\N
2853	44	0100020		\N
2854	44	0100021		\N
2855	44	1000002		\N
2856	50	LA6690-7		\N
2857	44	1000005		\N
2858	44	1000008		\N
2859	45	http://en.wikipedia.org/wiki/Point_mutation		\N
2860	44	1000009		\N
2861	44	1000010		\N
2862	44	1000011		\N
2863	44	1000012		\N
2864	44	1000013		\N
2865	44	1000014		\N
2866	44	1000015		\N
2867	44	1000016		\N
2868	44	1000017		\N
2869	45	http://en.wikipedia.org/wiki/Transversion		\N
2870	44	1000018		\N
2871	44	1000019		\N
2872	44	1000020		\N
2873	44	1000021		\N
2874	44	1000022		\N
2875	44	1000023		\N
2876	44	1000024		\N
2877	44	1000025		\N
2878	44	1000026		\N
2879	44	1000027		\N
2880	44	1000028		\N
2881	44	1000029		\N
2882	45	http://en.wikipedia.org/wiki/Chromosomal_deletion		\N
2883	44	1000030		\N
2884	45	http://en.wikipedia.org/wiki/Chromosomal_inversion		\N
2885	44	1000031		\N
2886	44	1000032		\N
2887	48	http://www.hgvs.org/mutnomen/recs-DNA.html#indel		\N
2888	45	http://en.wikipedia.org/wiki/Indel		\N
2889	50	LA9659-9		\N
2890	44	1000035		\N
2891	50	LA6686-5		\N
2892	44	1000036		\N
2893	50	LA6689-9		\N
2894	44	1000037		\N
2895	45	http://en.wikipedia.org/wiki/Chromosomal_duplication		\N
2896	44	1000038		\N
2897	44	1000039		\N
2898	44	1000040		\N
2899	44	1000041		\N
2900	44	1000042		\N
2901	44	1000043		\N
2902	45	http://en.wikipedia.org/wiki/Robertsonian_translocation		\N
2903	45	http://en.wikipedia.org/wiki/Robertsonian_fusion		\N
2904	44	1000044		\N
2905	45	http://en.wikipedia.org/wiki/Chromosomal_translocation		\N
2906	44	1000045		\N
2907	45	http://en.wikipedia.org/wiki/Ring_chromosome		\N
2908	44	1000046		\N
2909	44	1000047		\N
2910	44	1000048		\N
2911	44	1000049		\N
2912	44	1000177		\N
2913	44	1000179		\N
2914	44	1000050		\N
2915	44	1000054		\N
2916	44	1000055		\N
2917	44	1000056		\N
2918	44	1000057		\N
2919	44	1000058		\N
2920	44	1000059		\N
2921	44	1000060		\N
2922	44	1000061		\N
2923	44	1000062		\N
2924	44	1000063		\N
2925	44	1000064		\N
2926	44	1000065		\N
2927	45	http://en.wikipedia.org/wiki/Frameshift_mutation		\N
2928	44	1000066		\N
2929	44	1000067		\N
2930	44	1000068		\N
2931	44	1000069		\N
2932	44	1000070		\N
2933	44	1000071		\N
2934	44	1000072		\N
2935	44	1000073		\N
2936	44	1000074		\N
2937	44	1000075		\N
2938	44	1000076		\N
2939	44	1000078		\N
2940	44	1000079		\N
2941	44	1000080		\N
2942	44	1000081		\N
2943	44	1000082		\N
2944	44	1000083		\N
2945	44	1000084		\N
2946	44	1000085		\N
2947	44	1000086		\N
2948	44	1000087		\N
2949	44	1000088		\N
2950	44	1000090		\N
2951	44	1000091		\N
2952	44	1000089		\N
2953	44	1000092		\N
2954	44	1000093		\N
2955	44	1000094		\N
2956	44	1000095		\N
2957	44	1000096		\N
2958	44	1000097		\N
2959	44	1000098		\N
2960	44	1000099		\N
2961	44	1000100		\N
2962	44	1000101		\N
2963	44	1000102		\N
2964	44	1000103		\N
2965	44	1000104		\N
2966	44	1000105		\N
2967	44	1000106		\N
2968	44	1000107		\N
2969	44	1000108		\N
2970	44	1000109		\N
2971	44	1000110		\N
2972	44	1000111		\N
2973	44	1000113		\N
2974	44	1000114		\N
2975	44	1000112		\N
2976	44	1000115		\N
2977	44	1000116		\N
2978	44	1000117		\N
2979	44	1000118		\N
2980	44	1000119		\N
2981	44	1000120		\N
2982	44	1000121		\N
2983	44	1000122		\N
2984	44	1000123		\N
2985	44	1000124		\N
2986	44	1000125		\N
2987	44	1000126		\N
2988	44	1000127		\N
2989	44	1000132		\N
2990	44	1000134		\N
2991	44	1000136		\N
2992	46	6804304		\N
2993	44	1000138		\N
2994	44	1000140		\N
2995	44	1000141		\N
2996	44	1000142		\N
2997	49	manual		\N
2998	44	1000143		\N
2999	44	1000144		\N
3000	44	1000145		\N
3001	44	1000146		\N
3002	44	1000147		\N
3003	44	1000148		\N
3004	44	1000149		\N
3005	44	1000150		\N
3006	44	1000151		\N
3007	44	1000152		\N
3008	44	1000153		\N
3009	44	1000154		\N
3010	44	1000155		\N
3011	44	1000156		\N
3012	44	1000157		\N
3013	44	1000158		\N
3014	44	1000159		\N
3015	44	1000160		\N
3016	44	1000161		\N
3017	44	1000162		\N
3018	44	1000170		\N
3019	44	1000171		\N
3020	44	1000173		\N
3021	44	1000175		\N
3022	44	1000180		\N
3023	44	1000181		\N
3024	44	1000182		\N
3025	44	1000183		\N
3026	44	1000184		\N
3027	44	1000185		\N
3028	44	1000186		\N
3029	44	1001186		\N
3030	44	1001187		\N
3031	44	1001188		\N
3032	44	1001189		\N
3033	44	1001190		\N
3034	44	1001191		\N
3035	44	1001192		\N
3036	44	1001193		\N
3037	44	1001194		\N
3038	44	1001195		\N
3039	44	1001196		\N
3040	44	1001197		\N
3041	44	1001217		\N
3042	44	1001244		\N
3043	44	1001246		\N
3044	44	1001247		\N
3045	44	1001249		\N
3046	44	1001251		\N
3047	44	1001254		\N
3048	44	1001255		\N
3049	44	1001259		\N
3050	44	1001260		\N
3051	46	12519954		\N
3052	44	1001261		\N
3053	45	http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&amp;db=PubMed&amp;list_uids=8811194&amp;dopt=Abstract		\N
3054	44	1001262		\N
3055	44	1001263		\N
3056	44	1001264		\N
3057	44	1001265		\N
3058	44	1001266		\N
3059	44	1001267		\N
3060	44	1001268		\N
3061	45	http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&amp;db=PubMed&amp;list_uids=12519954&amp;dopt=Abstract		\N
3062	44	1001269		\N
3063	44	1001270		\N
3064	44	1001271		\N
3065	46	9301331		\N
3066	44	1001272		\N
3067	44	1001273		\N
3068	44	1001274		\N
3069	45	http://www.sanger.ac.uk/cgi-bin/Rfam/getacc?RF00031		\N
3070	45	http://en.wikipedia.org/wiki/SECIS_element		\N
3071	44	1001275		\N
3072	44	1001277		\N
3073	44	1001279		\N
3074	44	1001280		\N
3075	44	1001281		\N
3076	44	1001282		\N
3077	44	1001283		\N
3078	44	1001284		\N
3079	45	http://en.wikipedia.org/wiki/Regulon		\N
3080	44	1001285		\N
3081	44	1001286		\N
3082	44	1001287		\N
3083	45	http://www.ncbi.nlm.nih.gov:80/entrez/query.fcgi?cmd=Retrieve&amp;db=PubMed&amp;list_uids=8709208&amp;dopt=Abstract		\N
3084	44	1001288		\N
3085	44	2000061		\N
3086	44	3000000		\N
3087	51	add		\N
3088	82	feature_property		\N
3089	82	aminoacid		\N
3090	82	anticodon		\N
3091	82	citation		\N
3092	82	comment		\N
3093	82	cyto_range		\N
3094	82	description		\N
3095	82	dicistronic		\N
3096	82	element		\N
3097	82	encoded_symbol		\N
3098	82	evidenceGB		\N
3099	82	linked_to		\N
3100	82	missing_start_codon		\N
3101	82	missing_stop_codon		\N
3102	82	na_change		\N
3103	82	non_canonical_start_codon		\N
3104	82	owner		\N
3105	82	pr_change		\N
3106	82	problem		\N
3107	82	readthrough_stop_codon		\N
3108	82	reported_na_change		\N
3109	82	reported_pr_change		\N
3110	82	sp_comment		\N
3111	82	sp_status		\N
3112	82	status		\N
3113	82	source		\N
3114	82	symbol		\N
3115	82	validation_flag		\N
3116	82	synonym		\N
3117	82	date		\N
3118	82	internal_synonym		\N
3119	82	qseq_type		\N
3120	82	unixdate		\N
3121	82	gbunit		\N
3122	82	keywords		\N
3123	82	orf_classification		\N
3124	82	ontology_term		\N
3125	82	protein_id		\N
3126	82	organism		\N
3127	82	mol_type		\N
3128	82	dev_stage		\N
3129	82	chromosome		\N
3130	82	map		\N
3131	82	finished		\N
3132	82	Note		\N
3133	82	Gap		\N
3134	82	score		\N
\.


--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('dbxref_dbxref_id_seq', 3134, true);


--
-- Data for Name: dbxrefprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY dbxrefprop (dbxrefprop_id, dbxref_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: dbxrefprop_dbxrefprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('dbxrefprop_dbxrefprop_id_seq', 1, false);


--
-- Data for Name: eimage; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY eimage (eimage_id, eimage_data, eimage_type, image_uri) FROM stdin;
\.


--
-- Name: eimage_eimage_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('eimage_eimage_id_seq', 1, false);


--
-- Data for Name: element; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY element (element_id, feature_id, arraydesign_id, type_id, dbxref_id) FROM stdin;
\.


--
-- Name: element_element_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('element_element_id_seq', 1, false);


--
-- Data for Name: element_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY element_relationship (element_relationship_id, subject_id, type_id, object_id, value, rank) FROM stdin;
\.


--
-- Name: element_relationship_element_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('element_relationship_element_relationship_id_seq', 1, false);


--
-- Data for Name: elementresult; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elementresult (elementresult_id, element_id, quantification_id, signal) FROM stdin;
\.


--
-- Name: elementresult_elementresult_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('elementresult_elementresult_id_seq', 1, false);


--
-- Data for Name: elementresult_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elementresult_relationship (elementresult_relationship_id, subject_id, type_id, object_id, value, rank) FROM stdin;
\.


--
-- Name: elementresult_relationship_elementresult_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('elementresult_relationship_elementresult_relationship_id_seq', 1, false);


--
-- Data for Name: environment; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY environment (environment_id, uniquename, description) FROM stdin;
\.


--
-- Data for Name: environment_cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY environment_cvterm (environment_cvterm_id, environment_id, cvterm_id) FROM stdin;
\.


--
-- Name: environment_cvterm_environment_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('environment_cvterm_environment_cvterm_id_seq', 1, false);


--
-- Name: environment_environment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('environment_environment_id_seq', 1, false);


--
-- Data for Name: expression; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY expression (expression_id, uniquename, md5checksum, description) FROM stdin;
\.


--
-- Data for Name: expression_cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY expression_cvterm (expression_cvterm_id, expression_id, cvterm_id, rank, cvterm_type_id) FROM stdin;
\.


--
-- Name: expression_cvterm_expression_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('expression_cvterm_expression_cvterm_id_seq', 1, false);


--
-- Data for Name: expression_cvtermprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY expression_cvtermprop (expression_cvtermprop_id, expression_cvterm_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: expression_cvtermprop_expression_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('expression_cvtermprop_expression_cvtermprop_id_seq', 1, false);


--
-- Name: expression_expression_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('expression_expression_id_seq', 1, false);


--
-- Data for Name: expression_image; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY expression_image (expression_image_id, expression_id, eimage_id) FROM stdin;
\.


--
-- Name: expression_image_expression_image_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('expression_image_expression_image_id_seq', 1, false);


--
-- Data for Name: expression_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY expression_pub (expression_pub_id, expression_id, pub_id) FROM stdin;
\.


--
-- Name: expression_pub_expression_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('expression_pub_expression_pub_id_seq', 1, false);


--
-- Data for Name: expressionprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY expressionprop (expressionprop_id, expression_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: expressionprop_expressionprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('expressionprop_expressionprop_id_seq', 1, false);


--
-- Data for Name: feature; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature (feature_id, dbxref_id, organism_id, name, uniquename, residues, seqlen, md5checksum, type_id, is_analysis, is_obsolete, timeaccessioned, timelastmodified) FROM stdin;
\.


--
-- Data for Name: feature_cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_cvterm (feature_cvterm_id, feature_id, cvterm_id, pub_id, is_not, rank) FROM stdin;
\.


--
-- Data for Name: feature_cvterm_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_cvterm_dbxref (feature_cvterm_dbxref_id, feature_cvterm_id, dbxref_id) FROM stdin;
\.


--
-- Name: feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq', 1, false);


--
-- Name: feature_cvterm_feature_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_cvterm_feature_cvterm_id_seq', 1, false);


--
-- Data for Name: feature_cvterm_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_cvterm_pub (feature_cvterm_pub_id, feature_cvterm_id, pub_id) FROM stdin;
\.


--
-- Name: feature_cvterm_pub_feature_cvterm_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_cvterm_pub_feature_cvterm_pub_id_seq', 1, false);


--
-- Data for Name: feature_cvtermprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_cvtermprop (feature_cvtermprop_id, feature_cvterm_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: feature_cvtermprop_feature_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_cvtermprop_feature_cvtermprop_id_seq', 1, false);


--
-- Data for Name: feature_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_dbxref (feature_dbxref_id, feature_id, dbxref_id, is_current) FROM stdin;
\.


--
-- Name: feature_dbxref_feature_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_dbxref_feature_dbxref_id_seq', 1, false);


--
-- Data for Name: feature_expression; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_expression (feature_expression_id, expression_id, feature_id, pub_id) FROM stdin;
\.


--
-- Name: feature_expression_feature_expression_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_expression_feature_expression_id_seq', 1, false);


--
-- Data for Name: feature_expressionprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_expressionprop (feature_expressionprop_id, feature_expression_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: feature_expressionprop_feature_expressionprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_expressionprop_feature_expressionprop_id_seq', 1, false);


--
-- Name: feature_feature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_feature_id_seq', 1, false);


--
-- Data for Name: feature_genotype; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_genotype (feature_genotype_id, feature_id, genotype_id, chromosome_id, rank, cgroup, cvterm_id) FROM stdin;
\.


--
-- Name: feature_genotype_feature_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_genotype_feature_genotype_id_seq', 1, false);


--
-- Data for Name: feature_phenotype; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_phenotype (feature_phenotype_id, feature_id, phenotype_id) FROM stdin;
\.


--
-- Name: feature_phenotype_feature_phenotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_phenotype_feature_phenotype_id_seq', 1, false);


--
-- Data for Name: feature_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_pub (feature_pub_id, feature_id, pub_id) FROM stdin;
\.


--
-- Name: feature_pub_feature_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_pub_feature_pub_id_seq', 1, false);


--
-- Data for Name: feature_pubprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_pubprop (feature_pubprop_id, feature_pub_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: feature_pubprop_feature_pubprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_pubprop_feature_pubprop_id_seq', 1, false);


--
-- Data for Name: feature_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_relationship (feature_relationship_id, subject_id, object_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: feature_relationship_feature_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_relationship_feature_relationship_id_seq', 1, false);


--
-- Data for Name: feature_relationship_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_relationship_pub (feature_relationship_pub_id, feature_relationship_id, pub_id) FROM stdin;
\.


--
-- Name: feature_relationship_pub_feature_relationship_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_relationship_pub_feature_relationship_pub_id_seq', 1, false);


--
-- Data for Name: feature_relationshipprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_relationshipprop (feature_relationshipprop_id, feature_relationship_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: feature_relationshipprop_feature_relationshipprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_relationshipprop_feature_relationshipprop_id_seq', 1, false);


--
-- Data for Name: feature_relationshipprop_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_relationshipprop_pub (feature_relationshipprop_pub_id, feature_relationshipprop_id, pub_id) FROM stdin;
\.


--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq', 1, false);


--
-- Data for Name: feature_synonym; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_synonym (feature_synonym_id, synonym_id, feature_id, pub_id, is_current, is_internal) FROM stdin;
\.


--
-- Name: feature_synonym_feature_synonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_synonym_feature_synonym_id_seq', 1, false);


--
-- Name: feature_uniquename_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_uniquename_seq', 1, false);


--
-- Data for Name: featureloc; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY featureloc (featureloc_id, feature_id, srcfeature_id, fmin, is_fmin_partial, fmax, is_fmax_partial, strand, phase, residue_info, locgroup, rank) FROM stdin;
\.


--
-- Name: featureloc_featureloc_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('featureloc_featureloc_id_seq', 1, false);


--
-- Data for Name: featureloc_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY featureloc_pub (featureloc_pub_id, featureloc_id, pub_id) FROM stdin;
\.


--
-- Name: featureloc_pub_featureloc_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('featureloc_pub_featureloc_pub_id_seq', 1, false);


--
-- Data for Name: featuremap; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY featuremap (featuremap_id, name, description, unittype_id) FROM stdin;
\.


--
-- Name: featuremap_featuremap_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('featuremap_featuremap_id_seq', 1, false);


--
-- Data for Name: featuremap_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY featuremap_pub (featuremap_pub_id, featuremap_id, pub_id) FROM stdin;
\.


--
-- Name: featuremap_pub_featuremap_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('featuremap_pub_featuremap_pub_id_seq', 1, false);


--
-- Data for Name: featurepos; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY featurepos (featurepos_id, featuremap_id, feature_id, map_feature_id, mappos) FROM stdin;
\.


--
-- Name: featurepos_featuremap_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('featurepos_featuremap_id_seq', 1, false);


--
-- Name: featurepos_featurepos_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('featurepos_featurepos_id_seq', 1, false);


--
-- Data for Name: featureprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY featureprop (featureprop_id, feature_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: featureprop_featureprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('featureprop_featureprop_id_seq', 1, false);


--
-- Data for Name: featureprop_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY featureprop_pub (featureprop_pub_id, featureprop_id, pub_id) FROM stdin;
\.


--
-- Name: featureprop_pub_featureprop_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('featureprop_pub_featureprop_pub_id_seq', 1, false);


--
-- Data for Name: featurerange; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY featurerange (featurerange_id, featuremap_id, feature_id, leftstartf_id, leftendf_id, rightstartf_id, rightendf_id, rangestr) FROM stdin;
\.


--
-- Name: featurerange_featurerange_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('featurerange_featurerange_id_seq', 1, false);


--
-- Data for Name: genotype; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY genotype (genotype_id, name, uniquename, description, type_id) FROM stdin;
\.


--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('genotype_genotype_id_seq', 1, false);


--
-- Data for Name: genotypeprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY genotypeprop (genotypeprop_id, genotype_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: genotypeprop_genotypeprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('genotypeprop_genotypeprop_id_seq', 1, false);


--
-- Data for Name: library; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY library (library_id, organism_id, name, uniquename, type_id, is_obsolete, timeaccessioned, timelastmodified) FROM stdin;
\.


--
-- Data for Name: library_cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY library_cvterm (library_cvterm_id, library_id, cvterm_id, pub_id) FROM stdin;
\.


--
-- Name: library_cvterm_library_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('library_cvterm_library_cvterm_id_seq', 1, false);


--
-- Data for Name: library_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY library_dbxref (library_dbxref_id, library_id, dbxref_id, is_current) FROM stdin;
\.


--
-- Name: library_dbxref_library_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('library_dbxref_library_dbxref_id_seq', 1, false);


--
-- Data for Name: library_feature; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY library_feature (library_feature_id, library_id, feature_id) FROM stdin;
\.


--
-- Name: library_feature_library_feature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('library_feature_library_feature_id_seq', 1, false);


--
-- Name: library_library_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('library_library_id_seq', 1, false);


--
-- Data for Name: library_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY library_pub (library_pub_id, library_id, pub_id) FROM stdin;
\.


--
-- Name: library_pub_library_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('library_pub_library_pub_id_seq', 1, false);


--
-- Data for Name: library_synonym; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY library_synonym (library_synonym_id, synonym_id, library_id, pub_id, is_current, is_internal) FROM stdin;
\.


--
-- Name: library_synonym_library_synonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('library_synonym_library_synonym_id_seq', 1, false);


--
-- Data for Name: libraryprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY libraryprop (libraryprop_id, library_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: libraryprop_libraryprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('libraryprop_libraryprop_id_seq', 1, false);


--
-- Data for Name: libraryprop_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY libraryprop_pub (libraryprop_pub_id, libraryprop_id, pub_id) FROM stdin;
\.


--
-- Name: libraryprop_pub_libraryprop_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('libraryprop_pub_libraryprop_pub_id_seq', 1, false);


--
-- Data for Name: magedocumentation; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY magedocumentation (magedocumentation_id, mageml_id, tableinfo_id, row_id, mageidentifier) FROM stdin;
\.


--
-- Name: magedocumentation_magedocumentation_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('magedocumentation_magedocumentation_id_seq', 1, false);


--
-- Data for Name: mageml; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY mageml (mageml_id, mage_package, mage_ml) FROM stdin;
\.


--
-- Name: mageml_mageml_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('mageml_mageml_id_seq', 1, false);


--
-- Data for Name: materialized_view; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY materialized_view (materialized_view_id, last_update, refresh_time, name, mv_schema, mv_table, mv_specs, indexed, query, special_index) FROM stdin;
\.


--
-- Name: materialized_view_materialized_view_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('materialized_view_materialized_view_id_seq', 1, false);


--
-- Data for Name: nd_experiment; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment (nd_experiment_id, nd_geolocation_id, type_id) FROM stdin;
\.


--
-- Data for Name: nd_experiment_contact; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_contact (nd_experiment_contact_id, nd_experiment_id, contact_id) FROM stdin;
\.


--
-- Name: nd_experiment_contact_nd_experiment_contact_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_contact_nd_experiment_contact_id_seq', 1, false);


--
-- Data for Name: nd_experiment_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_dbxref (nd_experiment_dbxref_id, nd_experiment_id, dbxref_id) FROM stdin;
\.


--
-- Name: nd_experiment_dbxref_nd_experiment_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_dbxref_nd_experiment_dbxref_id_seq', 1, false);


--
-- Data for Name: nd_experiment_genotype; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_genotype (nd_experiment_genotype_id, nd_experiment_id, genotype_id) FROM stdin;
\.


--
-- Name: nd_experiment_genotype_nd_experiment_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_genotype_nd_experiment_genotype_id_seq', 1, false);


--
-- Name: nd_experiment_nd_experiment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_nd_experiment_id_seq', 1, false);


--
-- Data for Name: nd_experiment_phenotype; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_phenotype (nd_experiment_phenotype_id, nd_experiment_id, phenotype_id) FROM stdin;
\.


--
-- Name: nd_experiment_phenotype_nd_experiment_phenotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_phenotype_nd_experiment_phenotype_id_seq', 1, false);


--
-- Data for Name: nd_experiment_project; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_project (nd_experiment_project_id, project_id, nd_experiment_id) FROM stdin;
\.


--
-- Name: nd_experiment_project_nd_experiment_project_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_project_nd_experiment_project_id_seq', 1, false);


--
-- Data for Name: nd_experiment_protocol; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_protocol (nd_experiment_protocol_id, nd_experiment_id, nd_protocol_id) FROM stdin;
\.


--
-- Name: nd_experiment_protocol_nd_experiment_protocol_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_protocol_nd_experiment_protocol_id_seq', 1, false);


--
-- Data for Name: nd_experiment_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_pub (nd_experiment_pub_id, nd_experiment_id, pub_id) FROM stdin;
\.


--
-- Name: nd_experiment_pub_nd_experiment_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_pub_nd_experiment_pub_id_seq', 1, false);


--
-- Data for Name: nd_experiment_stock; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_stock (nd_experiment_stock_id, nd_experiment_id, stock_id, type_id) FROM stdin;
\.


--
-- Data for Name: nd_experiment_stock_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_stock_dbxref (nd_experiment_stock_dbxref_id, nd_experiment_stock_id, dbxref_id) FROM stdin;
\.


--
-- Name: nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq', 1, false);


--
-- Name: nd_experiment_stock_nd_experiment_stock_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_stock_nd_experiment_stock_id_seq', 1, false);


--
-- Data for Name: nd_experiment_stockprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_stockprop (nd_experiment_stockprop_id, nd_experiment_stock_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: nd_experiment_stockprop_nd_experiment_stockprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_stockprop_nd_experiment_stockprop_id_seq', 1, false);


--
-- Data for Name: nd_experimentprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experimentprop (nd_experimentprop_id, nd_experiment_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: nd_experimentprop_nd_experimentprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experimentprop_nd_experimentprop_id_seq', 1, false);


--
-- Data for Name: nd_geolocation; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_geolocation (nd_geolocation_id, description, latitude, longitude, geodetic_datum, altitude) FROM stdin;
\.


--
-- Name: nd_geolocation_nd_geolocation_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_geolocation_nd_geolocation_id_seq', 1, false);


--
-- Data for Name: nd_geolocationprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_geolocationprop (nd_geolocationprop_id, nd_geolocation_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: nd_geolocationprop_nd_geolocationprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_geolocationprop_nd_geolocationprop_id_seq', 1, false);


--
-- Data for Name: nd_protocol; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_protocol (nd_protocol_id, name, type_id) FROM stdin;
\.


--
-- Name: nd_protocol_nd_protocol_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_protocol_nd_protocol_id_seq', 1, false);


--
-- Data for Name: nd_protocol_reagent; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_protocol_reagent (nd_protocol_reagent_id, nd_protocol_id, reagent_id, type_id) FROM stdin;
\.


--
-- Name: nd_protocol_reagent_nd_protocol_reagent_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_protocol_reagent_nd_protocol_reagent_id_seq', 1, false);


--
-- Data for Name: nd_protocolprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_protocolprop (nd_protocolprop_id, nd_protocol_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: nd_protocolprop_nd_protocolprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_protocolprop_nd_protocolprop_id_seq', 1, false);


--
-- Data for Name: nd_reagent; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_reagent (nd_reagent_id, name, type_id, feature_id) FROM stdin;
\.


--
-- Name: nd_reagent_nd_reagent_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_reagent_nd_reagent_id_seq', 1, false);


--
-- Data for Name: nd_reagent_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_reagent_relationship (nd_reagent_relationship_id, subject_reagent_id, object_reagent_id, type_id) FROM stdin;
\.


--
-- Name: nd_reagent_relationship_nd_reagent_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_reagent_relationship_nd_reagent_relationship_id_seq', 1, false);


--
-- Data for Name: nd_reagentprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_reagentprop (nd_reagentprop_id, nd_reagent_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: nd_reagentprop_nd_reagentprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_reagentprop_nd_reagentprop_id_seq', 1, false);


--
-- Data for Name: organism; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY organism (organism_id, abbreviation, genus, species, common_name, comment) FROM stdin;
1	H.sapiens	Homo	sapiens	human	\N
2	D.melanogaster	Drosophila	melanogaster	fruitfly	\N
3	M.musculus	Mus	musculus	mouse	\N
4	A.gambiae	Anopheles	gambiae	mosquito	\N
5	R.norvegicus	Rattus	norvegicus	rat	\N
6	A.thaliana	Arabidopsis	thaliana	mouse-ear cress	\N
7	C.elegans	Caenorhabditis	elegans	worm	\N
8	D.rerio	Danio	rerio	zebrafish	\N
9	O.sativa	Oryza	sativa	rice	\N
10	S.cerevisiae	Saccharomyces	cerevisiae	yeast	\N
11	X.laevis	Xenopus	laevis	frog	\N
12	D.discoideum	Dictyostelium	discoideum	dicty	\N
13	E.coli	Escherichia	coli	Escherichia coli	
\.


--
-- Data for Name: organism_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY organism_dbxref (organism_dbxref_id, organism_id, dbxref_id) FROM stdin;
\.


--
-- Name: organism_dbxref_organism_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('organism_dbxref_organism_dbxref_id_seq', 1, false);


--
-- Name: organism_organism_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('organism_organism_id_seq', 13, true);


--
-- Data for Name: organismprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY organismprop (organismprop_id, organism_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: organismprop_organismprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('organismprop_organismprop_id_seq', 1, false);


--
-- Data for Name: phendesc; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phendesc (phendesc_id, genotype_id, environment_id, description, type_id, pub_id) FROM stdin;
\.


--
-- Name: phendesc_phendesc_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phendesc_phendesc_id_seq', 1, false);


--
-- Data for Name: phenotype; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phenotype (phenotype_id, uniquename, name, observable_id, attr_id, value, cvalue_id, assay_id) FROM stdin;
\.


--
-- Data for Name: phenotype_comparison; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phenotype_comparison (phenotype_comparison_id, genotype1_id, environment1_id, genotype2_id, environment2_id, phenotype1_id, phenotype2_id, pub_id, organism_id) FROM stdin;
\.


--
-- Data for Name: phenotype_comparison_cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phenotype_comparison_cvterm (phenotype_comparison_cvterm_id, phenotype_comparison_id, cvterm_id, pub_id, rank) FROM stdin;
\.


--
-- Name: phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq', 1, false);


--
-- Name: phenotype_comparison_phenotype_comparison_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phenotype_comparison_phenotype_comparison_id_seq', 1, false);


--
-- Data for Name: phenotype_cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phenotype_cvterm (phenotype_cvterm_id, phenotype_id, cvterm_id, rank) FROM stdin;
\.


--
-- Name: phenotype_cvterm_phenotype_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phenotype_cvterm_phenotype_cvterm_id_seq', 1, false);


--
-- Name: phenotype_phenotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phenotype_phenotype_id_seq', 1, false);


--
-- Data for Name: phenstatement; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phenstatement (phenstatement_id, genotype_id, environment_id, phenotype_id, type_id, pub_id) FROM stdin;
\.


--
-- Name: phenstatement_phenstatement_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phenstatement_phenstatement_id_seq', 1, false);


--
-- Data for Name: phylonode; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylonode (phylonode_id, phylotree_id, parent_phylonode_id, left_idx, right_idx, type_id, feature_id, label, distance) FROM stdin;
\.


--
-- Data for Name: phylonode_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylonode_dbxref (phylonode_dbxref_id, phylonode_id, dbxref_id) FROM stdin;
\.


--
-- Name: phylonode_dbxref_phylonode_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylonode_dbxref_phylonode_dbxref_id_seq', 1, false);


--
-- Data for Name: phylonode_organism; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylonode_organism (phylonode_organism_id, phylonode_id, organism_id) FROM stdin;
\.


--
-- Name: phylonode_organism_phylonode_organism_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylonode_organism_phylonode_organism_id_seq', 1, false);


--
-- Name: phylonode_phylonode_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylonode_phylonode_id_seq', 1, false);


--
-- Data for Name: phylonode_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylonode_pub (phylonode_pub_id, phylonode_id, pub_id) FROM stdin;
\.


--
-- Name: phylonode_pub_phylonode_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylonode_pub_phylonode_pub_id_seq', 1, false);


--
-- Data for Name: phylonode_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylonode_relationship (phylonode_relationship_id, subject_id, object_id, type_id, rank, phylotree_id) FROM stdin;
\.


--
-- Name: phylonode_relationship_phylonode_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylonode_relationship_phylonode_relationship_id_seq', 1, false);


--
-- Data for Name: phylonodeprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylonodeprop (phylonodeprop_id, phylonode_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: phylonodeprop_phylonodeprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylonodeprop_phylonodeprop_id_seq', 1, false);


--
-- Data for Name: phylotree; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylotree (phylotree_id, dbxref_id, name, type_id, analysis_id, comment) FROM stdin;
\.


--
-- Name: phylotree_phylotree_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylotree_phylotree_id_seq', 1, false);


--
-- Data for Name: phylotree_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylotree_pub (phylotree_pub_id, phylotree_id, pub_id) FROM stdin;
\.


--
-- Name: phylotree_pub_phylotree_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylotree_pub_phylotree_pub_id_seq', 1, false);


--
-- Data for Name: project; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY project (project_id, name, description) FROM stdin;
\.


--
-- Data for Name: project_contact; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY project_contact (project_contact_id, project_id, contact_id) FROM stdin;
\.


--
-- Name: project_contact_project_contact_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('project_contact_project_contact_id_seq', 1, false);


--
-- Name: project_project_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('project_project_id_seq', 1, false);


--
-- Data for Name: project_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY project_pub (project_pub_id, project_id, pub_id) FROM stdin;
\.


--
-- Name: project_pub_project_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('project_pub_project_pub_id_seq', 1, false);


--
-- Data for Name: project_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY project_relationship (project_relationship_id, subject_project_id, object_project_id, type_id) FROM stdin;
\.


--
-- Name: project_relationship_project_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('project_relationship_project_relationship_id_seq', 1, false);


--
-- Data for Name: projectprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY projectprop (projectprop_id, project_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: projectprop_projectprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('projectprop_projectprop_id_seq', 1, false);


--
-- Data for Name: protocol; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY protocol (protocol_id, type_id, pub_id, dbxref_id, name, uri, protocoldescription, hardwaredescription, softwaredescription) FROM stdin;
\.


--
-- Name: protocol_protocol_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('protocol_protocol_id_seq', 1, false);


--
-- Data for Name: protocolparam; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY protocolparam (protocolparam_id, protocol_id, name, datatype_id, unittype_id, value, rank) FROM stdin;
\.


--
-- Name: protocolparam_protocolparam_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('protocolparam_protocolparam_id_seq', 1, false);


--
-- Data for Name: pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pub (pub_id, title, volumetitle, volume, series_name, issue, pyear, pages, miniref, uniquename, type_id, is_obsolete, publisher, pubplace) FROM stdin;
1	\N	\N	\N	\N	\N	\N	\N	null	null	1	f	\N	\N
\.


--
-- Data for Name: pub_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pub_dbxref (pub_dbxref_id, pub_id, dbxref_id, is_current) FROM stdin;
\.


--
-- Name: pub_dbxref_pub_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('pub_dbxref_pub_dbxref_id_seq', 1, false);


--
-- Name: pub_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('pub_pub_id_seq', 1, true);


--
-- Data for Name: pub_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pub_relationship (pub_relationship_id, subject_id, object_id, type_id) FROM stdin;
\.


--
-- Name: pub_relationship_pub_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('pub_relationship_pub_relationship_id_seq', 1, false);


--
-- Data for Name: pubauthor; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pubauthor (pubauthor_id, pub_id, rank, editor, surname, givennames, suffix) FROM stdin;
\.


--
-- Name: pubauthor_pubauthor_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('pubauthor_pubauthor_id_seq', 1, false);


--
-- Data for Name: pubprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pubprop (pubprop_id, pub_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: pubprop_pubprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('pubprop_pubprop_id_seq', 1, false);


--
-- Data for Name: quantification; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY quantification (quantification_id, acquisition_id, operator_id, protocol_id, analysis_id, quantificationdate, name, uri) FROM stdin;
\.


--
-- Name: quantification_quantification_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('quantification_quantification_id_seq', 1, false);


--
-- Data for Name: quantification_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY quantification_relationship (quantification_relationship_id, subject_id, type_id, object_id) FROM stdin;
\.


--
-- Name: quantification_relationship_quantification_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('quantification_relationship_quantification_relationship_id_seq', 1, false);


--
-- Data for Name: quantificationprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY quantificationprop (quantificationprop_id, quantification_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: quantificationprop_quantificationprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('quantificationprop_quantificationprop_id_seq', 1, false);


--
-- Data for Name: stock; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock (stock_id, dbxref_id, organism_id, name, uniquename, description, type_id, is_obsolete) FROM stdin;
\.


--
-- Data for Name: stock_cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_cvterm (stock_cvterm_id, stock_id, cvterm_id, pub_id, is_not, rank) FROM stdin;
\.


--
-- Name: stock_cvterm_stock_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_cvterm_stock_cvterm_id_seq', 1, false);


--
-- Data for Name: stock_cvtermprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_cvtermprop (stock_cvtermprop_id, stock_cvterm_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: stock_cvtermprop_stock_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_cvtermprop_stock_cvtermprop_id_seq', 1, false);


--
-- Data for Name: stock_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_dbxref (stock_dbxref_id, stock_id, dbxref_id, is_current) FROM stdin;
\.


--
-- Name: stock_dbxref_stock_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_dbxref_stock_dbxref_id_seq', 1, false);


--
-- Data for Name: stock_dbxrefprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_dbxrefprop (stock_dbxrefprop_id, stock_dbxref_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: stock_dbxrefprop_stock_dbxrefprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_dbxrefprop_stock_dbxrefprop_id_seq', 1, false);


--
-- Data for Name: stock_genotype; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_genotype (stock_genotype_id, stock_id, genotype_id) FROM stdin;
\.


--
-- Name: stock_genotype_stock_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_genotype_stock_genotype_id_seq', 1, false);


--
-- Data for Name: stock_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_pub (stock_pub_id, stock_id, pub_id) FROM stdin;
\.


--
-- Name: stock_pub_stock_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_pub_stock_pub_id_seq', 1, false);


--
-- Data for Name: stock_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_relationship (stock_relationship_id, subject_id, object_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: stock_relationship_cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_relationship_cvterm (stock_relationship_cvterm_id, stock_relationship_id, cvterm_id, pub_id) FROM stdin;
\.


--
-- Name: stock_relationship_cvterm_stock_relationship_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_relationship_cvterm_stock_relationship_cvterm_id_seq', 1, false);


--
-- Data for Name: stock_relationship_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_relationship_pub (stock_relationship_pub_id, stock_relationship_id, pub_id) FROM stdin;
\.


--
-- Name: stock_relationship_pub_stock_relationship_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_relationship_pub_stock_relationship_pub_id_seq', 1, false);


--
-- Name: stock_relationship_stock_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_relationship_stock_relationship_id_seq', 1, false);


--
-- Name: stock_stock_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_stock_id_seq', 1, false);


--
-- Data for Name: stockcollection; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stockcollection (stockcollection_id, type_id, contact_id, name, uniquename) FROM stdin;
\.


--
-- Data for Name: stockcollection_stock; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stockcollection_stock (stockcollection_stock_id, stockcollection_id, stock_id) FROM stdin;
\.


--
-- Name: stockcollection_stock_stockcollection_stock_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stockcollection_stock_stockcollection_stock_id_seq', 1, false);


--
-- Name: stockcollection_stockcollection_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stockcollection_stockcollection_id_seq', 1, false);


--
-- Data for Name: stockcollectionprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stockcollectionprop (stockcollectionprop_id, stockcollection_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: stockcollectionprop_stockcollectionprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stockcollectionprop_stockcollectionprop_id_seq', 1, false);


--
-- Data for Name: stockprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stockprop (stockprop_id, stock_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: stockprop_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stockprop_pub (stockprop_pub_id, stockprop_id, pub_id) FROM stdin;
\.


--
-- Name: stockprop_pub_stockprop_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stockprop_pub_stockprop_pub_id_seq', 1, false);


--
-- Name: stockprop_stockprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stockprop_stockprop_id_seq', 1, false);


--
-- Data for Name: study; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY study (study_id, contact_id, pub_id, dbxref_id, name, description) FROM stdin;
\.


--
-- Data for Name: study_assay; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY study_assay (study_assay_id, study_id, assay_id) FROM stdin;
\.


--
-- Name: study_assay_study_assay_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('study_assay_study_assay_id_seq', 1, false);


--
-- Name: study_study_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('study_study_id_seq', 1, false);


--
-- Data for Name: studydesign; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY studydesign (studydesign_id, study_id, description) FROM stdin;
\.


--
-- Name: studydesign_studydesign_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('studydesign_studydesign_id_seq', 1, false);


--
-- Data for Name: studydesignprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY studydesignprop (studydesignprop_id, studydesign_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: studydesignprop_studydesignprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('studydesignprop_studydesignprop_id_seq', 1, false);


--
-- Data for Name: studyfactor; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY studyfactor (studyfactor_id, studydesign_id, type_id, name, description) FROM stdin;
\.


--
-- Name: studyfactor_studyfactor_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('studyfactor_studyfactor_id_seq', 1, false);


--
-- Data for Name: studyfactorvalue; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY studyfactorvalue (studyfactorvalue_id, studyfactor_id, assay_id, factorvalue, name, rank) FROM stdin;
\.


--
-- Name: studyfactorvalue_studyfactorvalue_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('studyfactorvalue_studyfactorvalue_id_seq', 1, false);


--
-- Data for Name: studyprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY studyprop (studyprop_id, study_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: studyprop_feature; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY studyprop_feature (studyprop_feature_id, studyprop_id, feature_id, type_id) FROM stdin;
\.


--
-- Name: studyprop_feature_studyprop_feature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('studyprop_feature_studyprop_feature_id_seq', 1, false);


--
-- Name: studyprop_studyprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('studyprop_studyprop_id_seq', 1, false);


--
-- Data for Name: synonym; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY synonym (synonym_id, name, type_id, synonym_sgml) FROM stdin;
\.


--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('synonym_synonym_id_seq', 1, false);


--
-- Data for Name: tableinfo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tableinfo (tableinfo_id, name, primary_key_column, is_view, view_on_table_id, superclass_table_id, is_updateable, modification_date) FROM stdin;
\.


--
-- Name: tableinfo_tableinfo_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('tableinfo_tableinfo_id_seq', 1, false);


--
-- Data for Name: treatment; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY treatment (treatment_id, rank, biomaterial_id, type_id, protocol_id, name) FROM stdin;
\.


--
-- Name: treatment_treatment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('treatment_treatment_id_seq', 1, false);


SET search_path = so, pg_catalog;

--
-- Data for Name: sequence_cv_lookup_table; Type: TABLE DATA; Schema: so; Owner: postgres
--

COPY sequence_cv_lookup_table (sequence_cv_lookup_table_id, original_cvterm_name, relation_name) FROM stdin;
1	transcription_variant	transcription_variant
2	helitron	helitron
3	cleaved_initiator_methionine	cleaved_initiator_methionine
4	epoxyqueuosine	epoxyqueuosine
5	u4atac_snrna	u4atac_snrna
6	kinetoplast	kinetoplast
7	elongated_out_of_frame_polypeptide_n_terminal	elongated_out_of_frame_polypeptide_n_terminal
8	shadow_enhancer	shadow_enhancer
9	engineered	engineered
10	rna_polymerase_ii_tata_box	rna_polymerase_ii_tata_box
11	seven_aminomethyl_seven_deazaguanosine	seven_aminomethyl_seven_deazaguanosine
12	sequence_motif	sequence_motif
13	low_complexity	low_complexity
14	est_match	est_match
15	v_nonamer	v_nonamer
16	d_dj_j_c_cluster	d_dj_j_c_cluster
17	rrna_21s	rrna_21s
18	bound_by_factor	bound_by_factor
19	five_carboxymethyluridine	five_carboxymethyluridine
20	dinucleotide_repeat_microsatellite_feature	dinucleotide_repeat_microsatellite_feature
21	two_methylthio_n6_methyladenosine	two_methylthio_n6_methyladenosine
22	trans_spliced_mrna	trans_spliced_mrna
23	g_to_c_transversion	g_to_c_transversion
24	heptamer_of_recombination_feature_of_vertebrate_immune_system_gene	heptamer_of_recombination_feature_of_vertebrate_im_sys_gene
25	genotype	so_genotype
26	cloned_region	cloned_region
27	tmrna_coding_piece	tmrna_coding_piece
28	rna_6s	rna_6s
29	x_element	x_element
30	minicircle	minicircle
31	grna_encoding	grna_encoding
32	endonuclease_spliced_intron	endonuclease_spliced_intron
33	insertional_duplication	insertional_duplication
34	databank_entry	databank_entry
35	glycine	glycine
36	variant_phenotype	variant_phenotype
37	v_cluster	v_cluster
38	sl12_acceptor_site	sl12_acceptor_site
39	polypeptide_nickel_ion_contact_site	polypeptide_nickel_ion_contact_site
40	circular_single_stranded_rna_chromosome	circular_single_stranded_rna_chromosome
41	wc_base_pair	wc_base_pair
42	pcr_product	pcr_product
43	3_prime_utr_variant	three_prime_utr_variant
44	three_three_amino_three_carboxypropyl_uridine	three_three_amino_three_carboxypropyl_uridine
45	site_specific_recombination_target_region	site_specific_recombination_target_region
46	gene_with_polycistronic_transcript	gene_with_polycistronic_transcript
47	rescue	rescue
48	nuclease_hypersensitive_site	nuclease_hypersensitive_site
49	upstream_gene_variant	upstream_gene_variant
50	mirna_loop	mirna_loop
51	double_stranded_cdna	double_stranded_cdna
52	polypeptide_post_translational_processing_variant	polypeptide_post_translational_processing_variant
53	2kb_upstream_variant	twokb_upstream_variant
54	supported_by_domain_match	supported_by_domain_match
55	one_methylpseudouridine	one_methylpseudouridine
56	n_terminal_region	n_terminal_region
57	blunt_end_restriction_enzyme_cleavage_site	blunt_end_restriction_enzyme_cleavage_site
58	experimental_result_region	experimental_result_region
59	methionine_trna_primary_transcript	methionine_trna_primary_transcript
60	utr	utr
61	non_terminal_residue	non_terminal_residue
62	member_of_regulon	member_of_regulon
63	threonine_trna_primary_transcript	thr_trna_primary_transcript
64	cds_supported_by_sequence_similarity_data	cds_supported_by_sequence_similarity_data
65	polypeptide_structural_region	polypeptide_structural_region
66	trna_gene	trna_gene
67	polypeptide_tungsten_ion_contact_site	polypeptide_tungsten_ion_contact_site
68	beta_bulge_loop_six	beta_bulge_loop_six
69	d_dj_c_cluster	d_dj_c_cluster
70	sequence_location	sequence_location
71	polypeptide_nest_right_left_motif	polypeptide_nest_right_left_motif
72	encodes_overlapping_polypeptides_different_start_and_stop	encodes_overlapping_polypeptides_different_start_and_stop
73	leucoplast_gene	leucoplast_gene
74	y_rna	y_rna
75	trans_spliced_transcript	trans_spliced_transcript
76	inverted	inverted
77	splicing_regulatory_region	splicing_regulatory_region
78	branch_site	branch_site
79	beta_bulge_loop_five	beta_bulge_loop_five
80	chromosome_breakpoint	chromosome_breakpoint
81	sequence_uncertainty	sequence_uncertainty
82	n6_methyl_n6_threonylcarbamoyladenosine	n6_methyl_n6_threonylcarbamoyladenosine
83	gene_with_mrna_with_frameshift	gene_with_mrna_with_frameshift
84	compositionally_biased_region_of_peptide	compositionally_biased_region_of_peptide
85	vj_j_c_cluster	vj_j_c_cluster
86	pirna	pirna
87	reverse_hoogsteen_base_pair	reverse_hoogsteen_base_pair
88	tryptophanyl_trna	tryptophanyl_trna
89	polya_primed_cdna_clone	polya_primed_cdna_clone
90	leucoplast_chromosome	leucoplast_chromosome
91	status	status
92	ltr_retrotransposon	ltr_retrotransposon
93	rnase_p_rna	rnase_p_rna
94	conjugative_transposon	conjugative_transposon
95	improved_high_quality_draft	improved_high_quality_draft
96	copy_number_gain	copy_number_gain
97	linkage_group	linkage_group
98	gene_with_trans_spliced_transcript	gene_with_trans_spliced_transcript
99	sl8_acceptor_site	sl8_acceptor_site
100	peptide_coil	peptide_coil
101	pyrrolysine_trna_primary_transcript	pyrrolysine_trna_primary_transcript
102	v_vj_c_cluster	v_vj_c_cluster
103	phage_sequence	phage_sequence
104	h3k79_methylation_site	h3k79_methylation_site
105	recoded	recoded
106	transposon_fragment	transposon_fragment
107	vj_c_cluster	vj_c_cluster
108	editing_domain	editing_domain
109	five_methylaminomethyluridine	five_methylaminomethyluridine
110	centromere_dna_element_ii	centromere_dna_element_ii
111	alteration_attribute	alteration_attribute
112	non_ltr_retrotransposon_polymeric_tract	non_ltr_retrotransposon_polymeric_tract
113	transversion	transversion
114	tryptophan	tryptophan
115	recursive_splice_site	recursive_splice_site
116	polypeptide_fusion	polypeptide_fusion
117	insulator_binding_site	insulator_binding_site
118	increased_polyadenylation_variant	increased_polyadenylation_variant
119	proline_trna_primary_transcript	proline_trna_primary_transcript
120	repeat_fragment	repeat_fragment
121	blocked_reading_frame	blocked_reading_frame
122	rrna_cleavage_snorna_primary_transcript	rrna_cleavage_snorna_primary_transcript
123	n6_isopentenyladenosine	n6_isopentenyladenosine
124	modified_l_arginine	modified_l_arginine
125	polypeptide_conserved_motif	polypeptide_conserved_motif
126	paracentric	paracentric
127	t3_rna_polymerase_promoter	t3_rna_polymerase_promoter
128	inversion_derived_bipartite_duplication	inversion_derived_bipartite_duplication
129	trans_splice_acceptor_site	trans_splice_acceptor_site
130	a_box_type_2	a_box_type_2
131	rre_rna	rre_rna
132	two_prime_o_ribosyladenosine_phosphate	two_prime_o_riboA_phosphate
133	pac_end	pac_end
134	extramembrane_polypeptide_region	extramembrane_polypeptide_region
135	copy_number_change	copy_number_change
136	intein	intein
137	endosomal_localization_signal	endosomal_localization_signal
138	twintron	twintron
139	scrna_primary_transcript	scrna_primary_transcript
140	five_carboxymethylaminomethyl_two_prime_o_methyluridine	five_carboxymethylaminomethyl_two_prime_o_methyluridine
141	somatic_variant	somatic_variant
142	duplication	duplication
143	tmrna_encoding	tmrna_encoding
144	polypeptide_cobalt_ion_contact_site	polypeptide_cobalt_ion_contact_site
145	flanked	flanked
146	inversion	inversion
147	ctg_start_codon	ctg_start_codon
148	tyrosine_trna_primary_transcript	tyrosine_trna_primary_transcript
149	eukaryotic_terminator	eukaryotic_terminator
150	frt_flanked	frt_flanked
151	spliceosomal_intron_region	spliceosomal_intron_region
152	coding_region_of_exon	coding_region_of_exon
153	cloned_cdna_insert	cloned_cdna_insert
154	decreased_transcription_rate_variant	decreased_transcription_rate_variant
155	v_vdj_c_cluster	v_vdj_c_cluster
156	rnase_p_rna_gene	rnase_p_rna_gene
157	translationally_regulated	translationally_regulated
158	histidyl_trna	histidyl_trna
159	sonicate_fragment	sonicate_fragment
160	gene_with_recoded_mrna	gene_with_recoded_mrna
161	two_prime_o_methyluridine	two_prime_o_methyluridine
162	cosmid	cosmid
163	silenced_by_rna_interference	silenced_by_rna_interference
164	non_conservative_missense_codon	non_conservative_missense_codon
165	snorna	snorna
166	mature_transcript	mature_transcript
167	pseudouridylation_guide_snorna	pseudouridylation_guide_snorna
168	c_gene	c_gene
169	processed_transcript	processed_transcript
170	floxed_gene	floxed_gene
171	spot_42_rna	spot_42_rna
172	cdna_clone	cdna_clone
173	cryptic_splice_site	cryptic_splice_site
174	pseudogenic_gene_segment	pseudogenic_gene_segment
175	three_prime_ltr	three_prime_ltr
176	group_ii_intron	group_ii_intron
177	rnase_mrp_rna_gene	rnase_mrp_rna_gene
178	structural_alteration	structural_alteration
179	pna_oligo	pna_oligo
180	insertion_sequence	insertion_sequence
181	junction	junction
182	paralogous	paralogous
183	tna	tna
184	five_isopentenylaminomethyl_two_thiouridine	five_isopentenylaminomethyl_two_thiouridine
185	nested_tandem_repeat	nested_tandem_repeat
186	minus_1_frameshift	minus_1_frameshift
187	non_canonical_three_prime_splice_site	non_canonical_three_prime_splice_site
188	gene_with_non_canonical_start_codon	gene_with_non_canonical_start_codon
189	pseudogenic_rrna	pseudogenic_rrna
190	serine_threonine_turn	serine_threonine_turn
191	j_gene	j_gene
192	h3k27_trimethylation_site	h3k27_trimethylation_site
193	strna_primary_transcript	strna_primary_transcript
194	internal_eliminated_sequence	internal_eliminated_sequence
195	allelically_excluded_gene	allelically_excluded_gene
196	qtl	qtl
197	three_prime_est	three_prime_est
198	bred_motif	bred_motif
199	reverse	reverse
200	mirna_encoding	mirna_encoding
201	n2_n2_2_prime_o_trimethylguanosine	n2_n2_2_prime_o_trimethylguanosine
202	translational_product_function_variant	translational_product_function_variant
203	encodes_alternate_transcription_start_sites	encodes_alternate_transcription_start_sites
204	gene_array	gene_array
205	tetranucleotide_repeat_microsatellite_feature	tetranuc_repeat_microsat
206	five_aminomethyl_two_thiouridine	five_aminomethyl_two_thiouridine
524	point_mutation	point_mutation
207	monocistronic_primary_transcript	monocistronic_primary_transcript
208	snv	snv
209	direct	direct
210	mobile_genetic_element	mobile_genetic_element
211	polypeptide_ligand_contact	polypeptide_ligand_contact
212	biomaterial_region	biomaterial_region
213	transposable_element_flanking_region	transposable_element_flanking_region
214	symmetric_rna_internal_loop	symmetric_rna_internal_loop
215	mrna_with_plus_1_frameshift	mrna_with_plus_1_frameshift
216	transcriptionally_regulated	transcriptionally_regulated
217	five_prime_intron	five_prime_intron
218	vertebrate_immune_system_gene_recombination_feature	vertebrate_immune_system_gene_recombination_feature
219	five_carboxyhydroxymethyl_uridine_methyl_ester	five_carboxyhydroxymethyl_uridine_methyl_ester
220	chromosomal_transposition	chromosomal_transposition
221	proplastid_gene	proplastid_gene
222	serine_trna_primary_transcript	serine_trna_primary_transcript
223	attp_site	attp_site
224	antisense	antisense
225	terminal_inverted_repeat_element	terminal_inverted_repeat_element
226	coiled_coil	coiled_coil
227	v_vdj_cluster	v_vdj_cluster
228	edited_transcript_by_a_to_i_substitution	edited_transcript_by_a_to_i_substitution
229	protein_coding_primary_transcript	protein_coding_primary_transcript
230	mite	mite
231	cryptic_splice_site_variant	cryptic_splice_site_variant
232	insertion	insertion
233	secis_element	secis_element
234	maxicircle	maxicircle
235	tss	tss
236	pedigree_specific_variant	pedigree_specific_variant
237	cysteine	cysteine
238	ribothymidine	ribothymidine
239	non_adjacent_residues	non_adjacent_residues
240	histone_modification	histone_modification
241	internal_ribosome_entry_site	internal_ribosome_entry_site
242	outron	outron
243	polypeptide_repeat	polypeptide_repeat
244	clone_insert_start	clone_insert_start
245	attr_site	attr_site
246	dmv3_motif	dmv3_motif
247	capped_mrna	capped_mrna
248	sequence_rearrangement_feature	sequence_rearrangement_feature
249	apicoplast_chromosome	apicoplast_chromosome
250	beta_turn_type_six_a_two	beta_turn_type_six_a_two
251	invalidated	invalidated
252	valine	valine
253	translationally_regulated_gene	translationally_regulated_gene
254	amino_acid_insertion	amino_acid_insertion
255	promoter_targeting_sequence	promoter_targeting_sequence
256	polinton	polinton
257	engineered_tag	engineered_tag
258	non_coding_exon_variant	non_coding_exon_variant
259	five_methylcytidine	five_methylcytidine
260	sl5_acceptor_site	sl5_acceptor_site
261	positively_autoregulated	positively_autoregulated
262	pseudouridine	pseudouridine
263	amplification_origin	amplification_origin
264	unoriented_insertional_duplication	unorient_insert_dup
265	transcriptionally_constitutive	transcriptionally_constitutive
266	extrachromosomal_mobile_genetic_element	extrachromosomal_mobile_genetic_element
267	variant_origin	variant_origin
268	utr_region	utr_region
269	mirna	mirna
270	tyrosine	tyrosine
271	inr1_motif	inr1_motif
272	h2b_ubiquitination_site	h2b_ubiquitination_site
273	n6_acetyladenosine	n6_acetyladenosine
274	cis_splice_site	cis_splice_site
275	floxed	floxed
276	beta_turn_right_handed_type_two	beta_turn_right_handed_type_two
277	utr_variant	utr_variant
278	c_terminal_region	c_terminal_region
279	transcription_regulatory_region	transcription_regulatory_region
280	modified_l_leucine	modified_l_leucine
281	five_prime_ltr_component	five_prime_ltr_component
282	histone_acylation_region	histone_acylation_region
283	vdj_c_cluster	vdj_c_cluster
284	chromosome_part	chromosome_part
285	transcriptional_cis_regulatory_region	transcriptional_cis_regulatory_region
286	phenylalanyl_trna	phenylalanyl_trna
287	insertion_site	insertion_site
288	gc_rich_promoter_region	gc_rich_promoter_region
289	overlapping_est_set	overlapping_est_set
290	asx_turn_right_handed_type_two	asx_turn_right_handed_type_two
291	anticodon_loop	anticodon_loop
292	dmv5_motif	dmv5_motif
293	sl1_acceptor_site	sl1_acceptor_site
294	cds_region	cds_region
295	regulatory_region_variant	regulatory_region_variant
296	h3k9_dimethylation_site	h3k9_dimethylation_site
297	stop_gained	stop_gained
298	telomerase_rna_gene	telomerase_rna_gene
299	v_dj_j_c_cluster	v_dj_j_c_cluster
300	engineered_insert	engineered_insert
301	recombinationally_inverted_gene	recombinationally_inverted_gene
302	microarray_oligo	microarray_oligo
303	cassette_array_member	cassette_array_member
304	plus_1_frameshift_variant	plus_1_frameshift_variant
305	u12_snrna	u12_snrna
306	supported_by_est_or_cdna	supported_by_est_or_cdna
307	minus_10_signal	minus_10_signal
308	clone_insert_end	clone_insert_end
309	inr_motif	inr_motif
310	three_prime_stem_loop_structure	three_prime_stem_loop_structure
311	rflp_fragment	rflp_fragment
312	phage_rna_polymerase_promoter	phage_rna_polymerase_promoter
313	pyrimidine_transition	pyrimidine_transition
525	pseudoknot	pseudoknot
314	intrinsically_unstructured_polypeptide_region	intrinsically_unstructured_polypeptide_region
315	n2_2_prime_o_dimethylguanosine	n2_2_prime_o_dimethylguanosine
316	exon_loss	exon_loss
317	archaeal_intron	archaeal_intron
318	lna	lna
319	exon_junction	exon_junction
320	t7_rna_polymerase_promoter	t7_rna_polymerase_promoter
321	inverted_interchromosomal_transposition	invert_inter_transposition
322	episome	episome
323	uninverted_insertional_duplication	uninvert_insert_dup
324	free	free
325	sequence_difference	sequence_difference
326	h4k5_acylation_site	h4k5_acylation_site
327	v_d_dj_c_cluster	v_d_dj_c_cluster
328	sequence_conflict	sequence_conflict
329	nmd_transcript_variant	nmd_transcript_variant
330	tiling_path_clone	tiling_path_clone
331	group_iii_intron	group_iii_intron
332	modified_glycine	modified_glycine
333	sequence_alteration	sequence_alteration
334	polyploid	polyploid
335	mathematically_defined_repeat	mathematically_defined_repeat
336	gene_silenced_by_dna_modification	gene_silenced_by_dna_modification
337	v_vj_j_cluster	v_vj_j_cluster
338	isoleucine_trna_primary_transcript	isoleucine_trna_primary_transcript
339	rrna_small_subunit_primary_transcript	rrna_small_subunit_primary_transcript
340	ltr_component	ltr_component
341	plus_2_framshift	plus_2_framshift
342	translational_product_structure_variant	translational_product_structure_variant
343	glutamic_acid_trna_primary_transcript	glutamic_acid_trna_primary_transcript
344	gene_rearranged_at_dna_level	gene_rearranged_at_dna_level
345	edited_transcript	edited_transcript
346	invalidated_by_partial_processing	invalidated_by_partial_processing
347	increased_transcript_stability_variant	increased_transcript_stability_variant
348	sequencing_primer	sequencing_primer
349	cleaved_for_gpi_anchor_region	cleaved_for_gpi_anchor_region
350	modified_l_cysteine	modified_l_cysteine
351	five_prime_utr	five_prime_utr
352	restriction_enzyme_recognition_site	restriction_enzyme_recognition_site
353	frt_site	frt_site
354	terminal_inverted_repeat	terminal_inverted_repeat
355	centromere_dna_element_i	centromere_dna_element_i
356	transition	transition
357	deletion_junction	deletion_junction
358	beta_turn_right_handed_type_one	beta_turn_right_handed_type_one
359	two_prime_o_ribosylguanosine_phosphate	two_prime_o_ribosylguanosine_phosphate
360	five_carbamoylmethyl_two_prime_o_methyluridine	five_cm_2_prime_o_methU
361	internal_transcribed_spacer_region	internal_transcribed_spacer_region
362	dicistronic	dicistronic
363	supported_by_sequence_similarity	supported_by_sequence_similarity
364	reverse_primer	reverse_primer
365	u3_three_prime_ltr_region	u3_three_prime_ltr_region
366	glutamine_trna_primary_transcript	glutamine_trna_primary_transcript
367	rnapol_ii_promoter	rnapol_ii_promoter
368	overlapping	overlapping
369	alpha_beta_motif	alpha_beta_motif
370	engineered_transposable_element	engineered_transposable_element
371	forward_primer	forward_primer
372	attctn_site	attctn_site
373	five_prime_d_recombination_signal_sequence	five_prime_d_recombination_signal_sequence
374	u6_snrna	u6_snrna
375	recombinationally_rearranged_gene	recombinationally_rearranged_gene
376	n6_threonylcarbamoyladenosine	n6_threonylcarbamoyladenosine
377	five_carbamoylmethyluridine	five_carbamoylmethyluridine
378	cds_fragment	cds_fragment
379	genome	genome
380	increased_translational_product_level	increased_translational_product_level
381	translational_product_level_variant	translational_product_level_variant
382	promoter	promoter
383	protein_coding_gene	protein_coding_gene
384	u5_snrna	u5_snrna
385	wybutosine	wybutosine
386	methylwyosine	methylwyosine
387	large_subunit_rrna	large_subunit_rrna
388	chromosomally_aberrant_genome	chromosomally_aberrant_genome
389	n4_2_prime_o_dimethylcytidine	n4_2_prime_o_dimethylcytidine
390	c_to_t_transition	c_to_t_transition
391	bidirectional_promoter	bidirectional_promoter
392	validated_cdna_clone	validated_cdna_clone
393	k_turn_rna_motif	k_turn_rna_motif
394	transcribed_fragment	transcribed_fragment
395	five_prime_ust	five_prime_ust
396	three_prime_utr_intron	three_prime_utr_intron
397	retrogene	retrogene
398	pyrimidine_to_purine_transversion	pyrimidine_to_purine_transversion
399	sine_element	sine_element
400	five_prime_rst	five_prime_rst
401	utr_intron	utr_intron
402	interchromosomal_transposition	interchromosomal_transposition
403	rna_sequence_secondary_structure	rna_sequence_secondary_structure
404	complex_change_in_transcript	complex_change_in_transcript
405	engineered_foreign_transposable_element	engineered_foreign_transposable_element
406	ds_rna_viral_sequence	ds_rna_viral_sequence
407	fosmid	fosmid
408	complex_substitution	complex_substitution
409	validated	validated
410	u2_snrna	u2_snrna
411	duplication_attribute	duplication_attribute
412	caat_signal	caat_signal
413	c_cluster	c_cluster
414	consensus_region	consensus_region
415	vertebrate_immune_system_gene_recombination_spacer	vertebrate_immune_system_gene_recombination_spacer
526	g_quartet	g_quartet
416	three_prime_restriction_enzyme_junction	three_prime_restriction_enzyme_junction
417	gene_trap_construct	gene_trap_construct
418	rna_aptamer	rna_aptamer
419	transcriptionally_induced	transcriptionally_induced
420	intrachromosomal	intrachromosomal
421	nuclear_localization_signal	nuclear_localization_signal
422	rescue_region	rescue_region
423	inversion_site_part	inversion_site_part
424	plus_2_frameshift variant	plus_2_frameshift_variant
425	origin_of_replication	origin_of_replication
426	standard_draft	standard_draft
427	h3k79_dimethylation_site	h3k79_dimethylation_site
428	rna_internal_loop	rna_internal_loop
429	ultracontig	ultracontig
430	peptidyl	peptidyl
431	polypeptide_region	polypeptide_region
432	epigenetically_modified_region	epigenetically_modified_region
433	transgenic_insertion	transgenic_insertion
434	mirna_antiguide	mirna_antiguide
435	rearranged_at_dna_level	rearranged_at_dna_level
436	intergenic_variant	intergenic_variant
437	v_spacer	v_spacer
438	strand_attribute	strand_attribute
439	stop_lost	stop_lost
440	alternatively_spliced	alternatively_spliced
441	five_formyl_two_prime_o_methylcytidine	five_formyl_two_prime_o_methylcytidine
442	plasmid_location	plasmid_location
443	four_bp_start_codon	four_bp_start_codon
444	increased_transcription_rate_variant	increased_transcription_rate_variant
445	recombinationally_rearranged	recombinationally_rearranged
446	complex_3d_structural_variant	complex_3d_structural_variant
447	chimeric_cdna_clone	chimeric_cdna_clone
448	tasirna_primary_transcript	tasirna_primary_transcript
449	gene_with_dicistronic_transcript	gene_with_dicistronic_transcript
450	three_prime_ltr_component	three_prime_ltr_component
451	retron	retron
452	autopolyploid	autopolyploid
453	phenylalanine	phenylalanine
454	translation_regulatory_region	translation_regulatory_region
455	transit_peptide	transit_peptide
456	amino_acid_deletion	amino_acid_deletion
457	rrna_28s	rrna_28s
458	one_two_prime_o_dimethylinosine	one_two_prime_o_dimethylinosine
459	threonine	threonine
460	a_minor_rna_motif	a_minor_rna_motif
461	j_cluster	j_cluster
462	dce	dce
463	quantitative_variant	quantitative_variant
464	lysosomal_localization_signal	lysosomal_localization_signal
465	d_dj_cluster	d_dj_cluster
466	chromosome_arm	chromosome_arm
467	kinetoplast_gene	kinetoplast_gene
468	line_element	line_element
469	solo_ltr	solo_ltr
470	external_transcribed_spacer_region	external_transcribed_spacer_region
471	non_transcribed_region	non_transcribed_region
472	mirna_stem	mirna_stem
473	dj_j_c_cluster	dj_j_c_cluster
474	hyperploid	hyperploid
475	cryptic	cryptic
476	h3k9_acetylation_site	h3k9_acetylation_site
477	alpha_helix	alpha_helix
478	fusion	fusion
479	vdj_j_cluster	vdj_j_cluster
480	isowyosine	isowyosine
481	paracentric_inversion	paracentric_inversion
482	homing_endonuclease_binding_site	homing_endonuclease_binding_site
483	tna_oligo	tna_oligo
484	mini_gene	mini_gene
485	restriction_fragment	restriction_fragment
486	base_pair	base_pair
487	inside_intron_antiparallel	inside_intron_antiparallel
488	dna_binding_site	dna_binding_site
489	modified_cytidine	modified_cytidine
490	hydrophobic_region_of_peptide	hydrophobic_region_of_peptide
491	polycistronic_primary_transcript	polycistronic_primary_transcript
492	modified_l_proline	modified_l_proline
493	overlapping_feature_set	overlapping_feature_set
494	asx_turn_left_handed_type_two	asx_turn_left_handed_type_two
495	interchromosomal_duplication	interchromosomal_duplication
496	inframe_codon_loss	inframe_codon_loss
497	substitution	substitution
498	isoleucine	isoleucine
499	functional_variant	functional_variant
500	three_prime_recoding_site	three_prime_recoding_site
501	transcript_stability_variant	transcript_stability_variant
502	5kb_upstream_variant	fivekb_upstream_variant
503	terminator_of_type_2_rnapol_iii_promoter	terminator_of_type_2_rnapol_iii_promoter
504	glycine_trna_primary_transcript	glycine_trna_primary_transcript
505	intron_variant	intron_variant
506	regional_centromere_outer_repeat_region	regional_centromere_outer_repeat_region
507	replication_regulatory_region	replication_regulatory_region
508	mating_type_region	mating_type_region
509	v_heptamer	v_heptamer
510	dispersed_repeat	dispersed_repeat
511	primer	primer
512	polypeptide_domain	polypeptide_domain
513	wild_type	wild_type
514	fusion_gene	fusion_gene
515	transcript_function_variant	transcript_function_variant
516	gene_member_region	gene_member_region
517	arginyl_trna	arginyl_trna
518	compensatory_transcript_secondary_structure_variant	compensatory_transcript_secondary_structure_variant
519	methylated_base_feature	methylated_base_feature
520	uninverted_intrachromosomal_transposition	uninvert_intra_transposition
521	scrna_gene	scrna_gene
522	rrna_18s	rrna_18s
523	rnapol_iii_promoter_type_1	rnapol_iii_promoter_type_1
527	schellmann_loop	schellmann_loop
528	modified_l_selenocysteine	modified_l_selenocysteine
529	pna	pna
530	three_prime_coding_exon	three_prime_coding_exon
531	endogenous_retroviral_gene	endogenous_retroviral_gene
532	vertebrate_immunoglobulin_t_cell_receptor_segment	vertebrate_immunoglobulin_t_cell_receptor_segment
533	mrna_recoded_by_translational_bypass	mrna_recoded_by_translational_bypass
534	engineered_foreign_region	engineered_foreign_region
535	snorna_encoding	snorna_encoding
536	five_prime_est	five_prime_est
537	foldback_element	foldback_element
538	srp_rna_encoding	srp_rna_encoding
539	d_j_c_cluster	d_j_c_cluster
540	dj_c_cluster	dj_c_cluster
541	histone_ubiqitination_site	histone_ubiqitination_site
542	complex_structural_alteration	complex_structural_alteration
543	rrna_encoding	rrna_encoding
544	mrna_recoded_by_codon_redefinition	mrna_recoded_by_codon_redefinition
545	five_methyluridine	five_methyluridine
546	polya_sequence	polya_sequence
547	metabolic_island	metabolic_island
548	homologous	homologous
549	immature_peptide_region	immature_peptide_region
550	h2bk5_monomethylation_site	h2bk5_monomethylation_site
551	sequence_attribute	sequence_attribute
552	sirna	sirna
553	dart_marker	dart_marker
554	nucleotide_motif	nucleotide_motif
555	plus_1_translationally_frameshifted	plus_1_translationally_frameshifted
556	trna_intron	trna_intron
557	five_prime_noncoding_exon	five_prime_noncoding_exon
558	dna_motif	dna_motif
559	beta_strand	beta_strand
560	ds_oligo	ds_oligo
561	one_methyladenosine	one_methyladenosine
562	oxys_rna	oxys_rna
563	asx_motif	asx_motif
564	five_hydroxyuridine	five_hydroxyuridine
565	coding_exon	coding_exon
566	plus_1_translational_frameshift	plus_1_translational_frameshift
567	five_formylcytidine	five_formylcytidine
568	h3k27_dimethylation_site	h3k27_dimethylation_site
569	spliced_leader_rna	spliced_leader_rna
570	mitochondrial_chromosome	mitochondrial_chromosome
571	gene_fragment	gene_fragment
572	n2_7_2prirme_o_trimethylguanosine	n2_7_2prirme_o_trimethylguanosine
573	frameshift	frameshift
574	propeptide_cleavage_site	propeptide_cleavage_site
575	five_methyldihydrouridine	five_methyldihydrouridine
576	amino_acid	amino_acid
577	translocation_breakpoint	translocation_breakpoint
578	rrna_5_8s	rrna_5_8s
579	helix_turn_helix	helix_turn_helix
580	simple_sequence_length_variation	simple_sequence_length_variation
581	methionine	methionine
582	polypeptide_loss_of_function_variant	polypeptide_loss_of_function_variant
583	transposable_element_gene	transposable_element_gene
584	whole_genome_sequence_status	whole_genome_sequence_status
585	genomic_island	genomic_island
586	gene_segment	gene_segment
587	snrna_gene	snrna_gene
588	engineered_region	engineered_region
589	common_variant	common_variant
590	cryptogene	cryptogene
591	three_prime_coding_exon_noncoding_region	three_prime_coding_exon_noncoding_region
592	gene_silenced_by_rna_interference	gene_silenced_by_rna_interference
593	deficient_interchromosomal_transposition	d_interchr_transposition
594	natural_variant_site	natural_variant_site
595	assembly	assembly
596	major_tss	major_tss
597	trna	trna
598	encodes_overlapping_peptides	encodes_overlapping_peptides
599	nc_conserved_region	nc_conserved_region
600	locus_control_region	locus_control_region
601	s_gna_oligo	s_gna_oligo
602	dna_chromosome	dna_chromosome
603	beta_turn_type_six_b	beta_turn_type_six_b
604	loss_of_heterozygosity	loss_of_heterozygosity
605	engineered_gene	engineered_gene
606	wobble_base_pair	wobble_base_pair
607	modified_amino_acid_feature	modified_amino_acid_feature
608	t_to_c_transition	t_to_c_transition
609	translocaton_attribute	translocaton_attribute
610	apicoplast_sequence	apicoplast_sequence
611	terminal_codon_variant	terminal_codon_variant
612	irlinv_site	irlinv_site
613	synthetic_sequence	synthetic_sequence
614	encodes_1_polypeptide	encodes_1_polypeptide
615	group_iia_intron	group_iia_intron
616	telomere	telomere
617	interior_intron	interior_intron
618	edited_mrna	edited_mrna
619	catmat_right_handed_three	catmat_right_handed_three
620	tandem_duplication	tandem_duplication
621	tmrna_gene	tmrna_gene
622	pre_edited_region	pre_edited_region
623	n6_hydroxynorvalylcarbamoyladenosine	n6_hydroxynorvalylcarbamoyladenosine
624	nucleomorphic_chromosome	nucleomorphic_chromosome
625	fragmentary	fragmentary
626	single	single
627	binding_site	binding_site
628	seven_methylguanine	seven_methylguanine
629	target_site_duplication	target_site_duplication
630	vdj_gene	vdj_gene
631	bound_by_nucleic_acid	bound_by_nucleic_acid
632	peptide_localization_signal	peptide_localization_signal
633	catmat_right_handed_four	catmat_right_handed_four
634	h3k27_acylation_site	h3k27_acylation_site
635	compound_chromosome	compound_chromosome
636	coding_end	coding_end
637	gap	gap
638	ligand_binding_site	ligand_binding_site
639	upstream_aug_codon	upstream_aug_codon
640	pseudogenic_transcript	pseudogenic_transcript
641	satellite_dna	satellite_dna
642	assortment_derived_deficiency_plus_duplication	assortment_derived_deficiency_plus_duplication
643	transposable_element	transposable_element
644	endogenous_retroviral_sequence	endogenous_retroviral_sequence
645	microsatellite	microsatellite
646	encodes_different_polypeptides_different_stop	encodes_different_polypeptides_different_stop
647	primary_transcript	primary_transcript
648	consensus_mrna	consensus_mrna
649	membrane_peptide_loop	membrane_peptide_loop
650	foreign	so_foreign
651	rho_independent_bacterial_terminator	rho_independent_bacterial_terminator
652	u_box	u_box
653	gene_silenced_by_histone_deacetylation	gene_silenced_by_histone_deacetylation
654	vdj_j_c_cluster	vdj_j_c_cluster
655	cpg_island	cpg_island
656	haplotype	haplotype
657	two_prime_o_methylinosine	two_prime_o_methylinosine
658	dna	dna
659	circular_double_stranded_rna_chromosome	circular_double_stranded_rna_chromosome
660	mature_protein_region	mature_protein_region
661	b_box	b_box
662	polypeptide_zinc_ion_contact_site	polypeptide_zinc_ion_contact_site
663	gene_subarray_member	gene_subarray_member
664	gene_cassette	gene_cassette
665	oric	oric
666	deletion_breakpoint	deletion_breakpoint
667	insertion_attribute	insertion_attribute
668	mrna_with_plus_2_frameshift	mrna_with_plus_2_frameshift
669	chip_seq_region	chip_seq_region
670	asx_turn_right_handed_type_one	asx_turn_right_handed_type_one
671	transcribed_cluster	transcribed_cluster
672	tyrosyl_trna	tyrosyl_trna
673	orthologous	orthologous
674	s_gna	s_gna
675	canonical_three_prime_splice_site	canonical_three_prime_splice_site
676	noncoding_exon	noncoding_exon
677	lethal_variant	lethal_variant
678	minor_tss	minor_tss
679	five_two_prime_o_dimethylcytidine	five_two_prime_o_dimethylcytidine
680	h3k36_trimethylation_site	h3k36_trimethylation_site
681	macronuclear_chromosome	macronuclear_chromosome
682	deficient_translocation	deficient_translocation
683	read_pair	read_pair
684	transcript_with_translational_frameshift	transcript_with_translational_frameshift
685	finished_genome	finished_genome
686	rnapol_iii_promoter_type_3	rnapol_iii_promoter_type_3
687	dna_transposon	dna_transposon
688	orf	orf
689	right_handed_peptide_helix	right_handed_peptide_helix
690	polypeptide_nest_left_right_motif	polypeptide_nest_left_right_motif
691	topology_attribute	topology_attribute
692	mirtron	mirtron
693	polypeptide_motif	polypeptide_motif
694	sl9_acceptor_site	sl9_acceptor_site
695	proplastid_sequence	proplastid_sequence
696	negatively_autoregulated_gene	negatively_autoregulated_gene
697	retinoic_acid_responsive_element	retinoic_acid_responsive_element
698	c_d_box_snorna_encoding	c_d_box_snorna_encoding
699	sequence_assembly	sequence_assembly
700	chromoplast_gene	chromoplast_gene
701	dcaps_primer	dcaps_primer
702	five_prime_clip	five_prime_clip
703	golden_path	golden_path
704	splice_acceptor_variant	splice_acceptor_variant
705	alanine	alanine
706	cleaved_peptide_region	cleaved_peptide_region
707	v_dj_j_cluster	v_dj_j_cluster
708	pseudogenic_region	pseudogenic_region
709	terminator_codon_variant	terminator_codon_variant
710	methylation_guide_snorna	methylation_guide_snorna
711	v_vj_j_c_cluster	v_vj_j_c_cluster
712	non_canonical_start_codon	non_canonical_start_codon
713	gene_with_mrna_recoded_by_translational_bypass	gene_with_mrna_recoded_by_translational_bypass
714	polypeptide_turn_motif	polypeptide_turn_motif
715	autocatalytically_spliced_intron	autocatalytically_spliced_intron
716	mobile	mobile
717	tandem	tandem
718	intron	intron
719	clip	clip
720	dye_terminator_read	dye_terminator_read
721	dmv4_motif	dmv4_motif
722	au_rich_element	au_rich_element
723	inversion_breakpoint	inversion_breakpoint
724	dce_siii	dce_siii
725	five_prime_recoding_site	five_prime_recoding_site
726	non_protein_coding	non_protein_coding
727	mobile_intron	mobile_intron
728	vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment	vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment
729	st_turn_right_handed_type_one	st_turn_right_handed_type_one
730	rrna	rrna
731	inside_intron_parallel	inside_intron_parallel
732	spliceosomal_intron	spliceosomal_intron
733	phagemid	phagemid
734	editing_block	editing_block
735	fragment_assembly	fragment_assembly
736	tmrna_acceptor_piece	tmrna_acceptor_piece
737	beta_turn_type_six	beta_turn_type_six
738	three_prime_rst	three_prime_rst
739	cysteine_trna_primary_transcript	cysteine_trna_primary_transcript
740	post_translationally_regulated_gene	post_translationally_regulated_gene
741	transcriptionally_repressed	transcriptionally_repressed
742	crm	crm
743	cointegrated_plasmid	cointegrated_plasmid
1060	v_j_cluster	v_j_cluster
744	polypeptide_sequencing_information	polypeptide_sequencing_information
745	three_prime_d_spacer	three_prime_d_spacer
746	tiling_path_fragment	tiling_path_fragment
747	natural	so_natural
748	pi_helix	pi_helix
749	possible_base_call_error	possible_base_call_error
750	polypeptide_truncation	polypeptide_truncation
751	h3k14_acetylation_site	h3k14_acetylation_site
752	adaptive_island	adaptive_island
753	uridine_five_oxyacetic_acid	uridine_five_oxyacetic_acid
754	sl7_acceptor_site	sl7_acceptor_site
755	plus_2_translational_frameshift	plus_2_translational_frameshift
756	stop_retained_variant	stop_retained_variant
757	homologous_region	homologous_region
758	500b_downstream_variant	fivehundred_b_downstream_variant
759	internal_utr	internal_utr
760	non_cytoplasmic_polypeptide_region	non_cytoplasmic_polypeptide_region
761	experimental_feature	experimental_feature
762	nuclear_chromosome	nuclear_chromosome
763	exemplar	exemplar
764	rnapol_ii_core_promoter	rnapol_ii_core_promoter
765	h3k9_methylation_site	h3k9_methylation_site
766	alanine_trna_primary_transcript	alanine_trna_primary_transcript
767	assortment_derived_variation	assortment_derived_variation
768	n2_n2_dimethylguanosine	n2_n2_dimethylguanosine
769	rna_hook_turn	rna_hook_turn
770	transcribed_spacer_region	transcribed_spacer_region
771	plasmid_gene	plasmid_gene
772	u14_snorna	u14_snorna
773	galactosyl_queuosine	galactosyl_queuosine
774	cyanelle_gene	cyanelle_gene
775	wild_type_rescue_gene	wild_type_rescue_gene
776	u12_intron	u12_intron
777	aptamer	aptamer
778	recoded_mrna	recoded_mrna
779	nested_transposon	nested_transposon
780	tf_binding_site_variant	tf_binding_site_variant
781	macronuclear_sequence	macronuclear_sequence
782	ust	ust
783	selenocysteine	selenocysteine
784	elongated_out_of_frame_polypeptide_c_terminal	elongated_out_of_frame_polypeptide_c_terminal
785	gene_with_dicistronic_mrna	gene_with_dicistronic_mrna
786	match_part	match_part
787	nucleomorphic_sequence	nucleomorphic_sequence
788	apicoplast_gene	apicoplast_gene
789	regulon	regulon
790	plasmid_vector	plasmid_vector
791	modified_l_tryptophan	modified_l_tryptophan
792	free_chromosome_arm	free_chromosome_arm
793	srp_rna_primary_transcript	srp_rna_primary_transcript
794	asx_turn	asx_turn
795	anchor_binding_site	anchor_binding_site
796	rrna_primary_transcript	rrna_primary_transcript
797	reading_frame	reading_frame
798	h3k23_acylation site	h3k23_acylation_site
799	maternal_variant	maternal_variant
800	dhu_loop	dhu_loop
801	n4_acetylcytidine	n4_acetylcytidine
802	experimental_feature_attribute	experimental_feature_attribute
803	silenced_gene	silenced_gene
804	cloned_genomic_insert	cloned_genomic_insert
805	intron_gain	intron_gain
806	dna_sequence_secondary_structure	dna_sequence_secondary_structure
807	cdna_match	cdna_match
808	five_prime_flanking_region	five_prime_flanking_region
809	pyrrolysyl_trna	pyrrolysyl_trna
810	two_methylthio_n6_cis_hydroxyisopentenyl_adenosine	two_methylthio_n6_cis_hydroxyisopentenyl_adenosine
811	repeat_component	repeat_component
812	one_methyl_three_three_amino_three_carboxypropyl_pseudouridine	one_methyl_3_3_amino_three_carboxypropyl_pseudouridine
813	rpra_rna	rpra_rna
814	nuclease_sensitive_site	nuclease_sensitive_site
815	conservative_amino_acid_substitution	conservative_amino_acid_substitution
816	five_prime_coding_exon_noncoding_region	five_prime_coding_exon_noncoding_region
817	rnapol_iii_promoter	rnapol_iii_promoter
818	tryptophan_trna_primary_transcript	try_trna_primary_transcript
819	noncontiguous_finished	noncontiguous_finished
820	region	region
821	tf_binding_site	tf_binding_site
822	attl_site	attl_site
823	natural_plasmid	natural_plasmid
824	upd	upd
825	conservative_missense_codon	conservative_missense_codon
826	n6_n6_dimethyladenosine	n6_n6_dimethyladenosine
827	laevosynaptic_chromosome	laevosynaptic_chromosome
828	chromosomal_structural_element	chromosomal_structural_element
829	gene_cassette_array	gene_cassette_array
830	vertebrate_immunoglobulin_t_cell_receptor_gene_cluster	vertebrate_immunoglobulin_t_cell_receptor_gene_cluster
831	canonical_five_prime_splice_site	canonical_five_prime_splice_site
832	bound_by_protein	bound_by_protein
833	sts_map	sts_map
834	dnazyme	dnazyme
835	silent_mutation	silent_mutation
836	v_d_j_cluster	v_d_j_cluster
837	distal_promoter_element	distal_promoter_element
838	bipartite_duplication	bipartite_duplication
839	hydroxywybutosine	hydroxywybutosine
840	dihydrouridine	dihydrouridine
841	five_prime_coding_exon_coding_region	five_prime_coding_exon_coding_region
842	beta_turn_left_handed_type_one	beta_turn_left_handed_type_one
843	h3k4_trimethylation	h3k4_trimethylation
844	recoded_codon	recoded_codon
845	predicted	predicted
846	resolution_site	resolution_site
847	seven_cyano_seven_deazaguanosine	seven_cyano_seven_deazaguanosine
848	disease_associated_variant	disease_associated_variant
849	conformational_switch	conformational_switch
850	regulated	regulated
851	inverted_repeat	inverted_repeat
852	t_to_a_transversion	t_to_a_transversion
853	attc_site	attc_site
854	two_methyladenosine	two_methyladenosine
855	cross_genome_match	cross_genome_match
856	tandem_repeat	tandem_repeat
857	copy_number_loss	copy_number_loss
858	antisense_primary_transcript	antisense_primary_transcript
859	sequence_collection	sequence_collection
860	gene_with_polyadenylated_mrna	gene_with_polyadenylated_mrna
861	rnapol_i_promoter	rnapol_i_promoter
862	three_methyluridine	three_methyluridine
863	start_codon	start_codon
864	retrotransposon	retrotransposon
865	elongated_in_frame_polypeptide_c_terminal	elongated_in_frame_polypeptide_c_terminal
866	v_gene	v_gene
867	chloroplast_dna	chloroplast_dna
868	negative_sense_ssrna_viral_sequence	negative_sense_ssrna_viral_sequence
869	primer_binding_site	primer_binding_site
870	c_box	c_box
871	plasmid	plasmid
872	biological_region	biological_region
873	g_to_a_transition	g_to_a_transition
874	non_canonical_five_prime_splice_site	non_canonical_five_prime_splice_site
875	c_d_box_snorna_primary_transcript	c_d_box_snorna_primary_transcript
876	trna_region	trna_region
877	n6_cis_hydroxyisopentenyl_adenosine	n6_cis_hydroxyisopentenyl_adenosine
878	chloroplast_sequence	chloroplast_sequence
879	variant_frequency	variant_frequency
880	exon_region	exon_region
881	r_five_prime_ltr_region	r_five_prime_ltr_region
882	v_j_c_cluster	v_j_c_cluster
883	r_three_prime_ltr_region	r_three_prime_ltr_region
884	snrna	snrna
885	one_methylinosine	one_methylinosine
886	inframe_codon_gain	inframe_codon_gain
887	j_gene_recombination_feature	j_gene_recombination_feature
888	polypeptide_structural_motif	polypeptide_structural_motif
889	conserved_region	conserved_region
890	sl3_acceptor_site	sl3_acceptor_site
891	remark	remark
892	fixed_variant	fixed_variant
893	polypeptide_dna_contact	polypeptide_dna_contact
894	codon	codon
895	rrna_23s	rrna_23s
896	polypeptide_gain_of_function_variant	polypeptide_gain_of_function_variant
897	mrna	mrna
898	glycyl_trna	glycyl_trna
899	cyanelle_sequence	cyanelle_sequence
900	cds_independently_known	cds_independently_known
901	insulator	insulator
902	positive_sense_ssrna_viral_sequence	positive_sense_ssrna_viral_sequence
903	sticky_end_restriction_enzyme_cleavage_site	sticky_end_restriction_enzyme_cleavage_site
904	expressed_sequence_match	expressed_sequence_match
905	possible_assembly_error	possible_assembly_error
906	u3_snorna	u3_snorna
907	polypeptide_manganese_ion_contact_site	polypeptide_manganese_ion_contact_site
908	h4k16_acylation_site	h4k16_acylation_site
909	g_to_t_transversion	g_to_t_transversion
910	recombination_feature_of_rearranged_gene	recombination_feature_of_rearranged_gene
911	three_prime_coding_exon_coding_region	three_prime_coding_exon_coding_region
912	tmrna_primary_transcript	tmrna_primary_transcript
913	single_stranded_cdna	single_stranded_cdna
914	experimentally_determined	experimentally_determined
915	pseudogenic_exon	pseudogenic_exon
916	u2_intron	u2_intron
917	chromosome	chromosome
918	encodes_alternately_spliced_transcripts	encodes_alternately_spliced_transcripts
919	aberrant_processed_transcript	aberrant_processed_transcript
920	complex_change_of_translational_product_variant	complex_change_of_translational_product_variant
921	gna	gna
922	dsra_rna	dsra_rna
923	intron_domain	intron_domain
924	cds_predicted	cds_predicted
925	modified_l_asparagine	modified_l_asparagine
926	inframe_variant	inframe_variant
927	five_prime_d_nonamer	five_prime_d_nonamer
928	sl2_acceptor_site	sl2_acceptor_site
929	polypeptide_localization_variant	polypeptide_localization_variant
930	dce_si	dce_si
931	snrna_primary_transcript	snrna_primary_transcript
932	translocation	translocation
933	h3k27_methylation_site	h3k27_methylation_site
934	modified_l_phenylalanine	modified_l_phenylalanine
935	lincrna	lincrna
936	modified_l_valine	modified_l_valine
937	yac	yac
938	signal_peptide	signal_peptide
939	r_ltr_region	r_ltr_region
940	srp_rna_gene	srp_rna_gene
941	elongated_polypeptide_n_terminal	elongated_polypeptide_n_terminal
942	recombination_hotspot	recombination_hotspot
943	v_dj_c_cluster	v_dj_c_cluster
944	viral_sequence	viral_sequence
945	five_prime_terminal_inverted_repeat	five_prime_terminal_inverted_repeat
946	five_methoxycarbonylmethyl_two_thiouridine	five_mcm_2_thiouridine
947	edited	edited
948	breu_motif	breu_motif
949	coding_start	coding_start
950	h3k9_monomethylation_site	h3k9_monomethylation_site
951	three_prime_utr	three_prime_utr
952	dpe1_motif	dpe1_motif
953	modified_l_tyrosine	modified_l_tyrosine
954	v_d_j_c_cluster	v_d_j_c_cluster
955	silenced_by_histone_methylation	silenced_by_histone_methylation
956	deficient_inversion	deficient_inversion
1061	three_prime_five_prime_overlap	three_prime_five_prime_overlap
957	decreased_transcript_level_variant	decreased_transcript_level_variant
958	two_thiouridine	two_thiouridine
959	polyadenylation_variant	polyadenylation_variant
960	rna_polymerase_iii_tata_box	rna_polymerase_iii_tata_box
961	two_thio_two_prime_o_methyluridine	two_thio_two_prime_o_methyluridine
962	h3k18_acetylation_site	h3k18_acetylation_site
963	leucoplast_sequence	leucoplast_sequence
964	cds	cds
965	polya_signal_sequence	polya_signal_sequence
966	micronuclear_sequence	micronuclear_sequence
967	glutamyl_trna	glutamyl_trna
968	h3k27_monomethylation_site	h3k27_monomethylation_site
969	minus_2_frameshift_variant	minus_2_frameshift_variant
970	strna_gene	strna_gene
971	paternally_imprinted_gene	paternally_imprinted_gene
972	rna_chromosome	rna_chromosome
973	ndm3_motif	ndm3_motif
974	u1_snrna	u1_snrna
975	five_hydroxymethylcytidine	five_hydroxymethylcytidine
976	recombination_feature	recombination_feature
977	encodes_disjoint_polypeptides	encodes_disjoint_polypeptides
978	post_translationally_regulated	post_translationally_regulated
979	engineered_fusion_gene	engineered_fusion_gene
980	three_prime_d_recombination_signal_sequence	three_prime_d_recombination_signal_sequence
981	intermediate	intermediate
982	polypeptide_calcium_ion_contact_site	polypeptide_calcium_ion_contact_site
983	syntenic_region	syntenic_region
984	variant_collection	variant_collection
985	cryptic_splice_donor	cryptic_splice_donor
986	assembly_error_correction	assembly_error_correction
987	sugar_edge_base_pair	sugar_edge_base_pair
988	engineered_foreign_gene	engineered_foreign_gene
989	h3k4_monomethylation_site	h3k4_monomethylation_site
990	n4_acetyl_2_prime_o_methylcytidine	n4_acetyl_2_prime_o_methylcytidine
991	predicted_by_ab_initio_computation	predicted_by_ab_initio_computation
992	polypeptide_secondary_structure	polypeptide_secondary_structure
993	ncrna_gene	ncrna_gene
994	rna_junction_loop	rna_junction_loop
995	haplotype_block	haplotype_block
996	oriv	oriv
997	peptide_collection	peptide_collection
998	ambisense_ssrna_viral_sequence	ambisense_ssrna_viral_sequence
999	morpholino_oligo	morpholino_oligo
1000	centromere	centromere
1001	epigenetically_modified_gene	epigenetically_modified_gene
1002	chromosomal_inversion	chromosomal_inversion
1003	minus_35_signal	minus_35_signal
1004	three_two_prime_o_dimethyluridine	three_two_prime_o_dimethyluridine
1005	four_thiouridine	four_thiouridine
1006	transcription_end_site	transcription_end_site
1007	pirna_gene	pirna_gene
1008	pre_mirna	pre_mirna
1009	cysteinyl_trna	cysteinyl_trna
1010	catmat_left_handed_three	catmat_left_handed_three
1011	cryptic_splice_acceptor	cryptic_splice_acceptor
1012	schellmann_loop_seven	schellmann_loop_seven
1013	v_vdj_j_c_cluster	v_vdj_j_c_cluster
1014	transposable_element_insertion_site	transposable_element_insertion_site
1015	translocation_element	translocation_element
1016	mirna_primary_transcript_region	mirna_primary_transcript_region
1017	orphan_cds	orphan_cds
1018	monocistronic_mrna	monocistronic_mrna
1019	natural_transposable_element	natural_transposable_element
1020	golden_path_fragment	golden_path_fragment
1021	lipoprotein_signal_peptide	lipoprotein_signal_peptide
1022	arginine	arginine
1023	linear_double_stranded_rna_chromosome	linear_double_stranded_rna_chromosome
1024	h4k8_acylation site	h4k8_acylation_site
1025	rrna_large_subunit_primary_transcript	rrna_large_subunit_primary_transcript
1026	irrinv_site	irrinv_site
1027	plastid_sequence	plastid_sequence
1028	base_call_error_correction	base_call_error_correction
1029	integrated_plasmid	integrated_plasmid
1030	modified_l_methionine	modified_l_methionine
1031	linear_single_stranded_rna_chromosome	linear_single_stranded_rna_chromosome
1032	chromoplast_sequence	chromoplast_sequence
1033	proximal_promoter_element	proximal_promoter_element
1034	contig_read	contig_read
1035	promoter_trap_construct	promoter_trap_construct
1036	stop_codon_redefined_as_selenocysteine	stop_codon_redefined_as_selenocysteine
1037	seven_methylguanosine	seven_methylguanosine
1038	gamma_turn	gamma_turn
1039	tmrna	tmrna
1040	methionyl_trna	methionyl_trna
1041	synonymous_codon	synonymous_codon
1042	cdna	cdna
1043	sl4_acceptor_site	sl4_acceptor_site
1044	nuclease_binding_site	nuclease_binding_site
1045	uridine_five_oxyacetic_acid_methyl_ester	uridine_five_oxyacetic_acid_methyl_ester
1046	three_prime_race_clone	three_prime_race_clone
1047	circular_double_stranded_dna_chromosome	circular_double_stranded_dna_chromosome
1048	consensus	consensus
1049	positively_autoregulated_gene	positively_autoregulated_gene
1050	tss_region	tss_region
1051	modified_l_histidine	modified_l_histidine
1052	unitary_pseudogene	unitary_pseudogene
1053	polypeptide_metal_contact	polypeptide_metal_contact
1054	integron	integron
1055	d_loop	d_loop
1056	decayed_exon	decayed_exon
1057	recombination_signal_sequence	recombination_signal_sequence
1058	modified_inosine	modified_inosine
1059	three_prime_three_prime_overlap	three_prime_three_prime_overlap
1062	recombination_regulatory_region	recombination_regulatory_region
1063	beta_bulge_loop	beta_bulge_loop
1064	restriction_enzyme_cleavage_junction	restriction_enzyme_cleavage_junction
1065	blunt_end_restriction_enzyme_cleavage_junction	blunt_end_restriction_enzyme_cleavage_junction
1066	intergenic_region	intergenic_region
1067	dmv2_motif	dmv2_motif
1068	intrachromosomal_mutation	intrachromosomal_mutation
1069	antisense_rna	antisense_rna
1070	sequence_feature	sequence_feature
1071	n6_glycinylcarbamoyladenosine	n6_glycinylcarbamoyladenosine
1072	gamma_turn_classic	gamma_turn_classic
1073	three_prime_cis_splice_site	three_prime_cis_splice_site
1074	rapd	rapd
1075	inverted_ring_chromosome	inverted_ring_chromosome
1076	cca_tail	cca_tail
1077	linear_double_stranded_dna_chromosome	linear_double_stranded_dna_chromosome
1078	u5_five_prime_ltr_region	u5_five_prime_ltr_region
1079	bruno_response_element	bruno_response_element
1080	t_to_g_transversion	t_to_g_transversion
1081	c_to_a_transversion	c_to_a_transversion
1082	macronucleus_destined_segment	macronucleus_destined_segment
1083	distant_three_prime_recoding_signal	distant_three_prime_recoding_signal
1084	pre_edited_mrna	pre_edited_mrna
1085	p_element	p_element
1086	pac	pac
1087	gene_fusion	gene_fusion
1088	base	base
1089	codon_redefined	codon_redefined
1090	polycistronic_mrna	polycistronic_mrna
1091	codon_variant	codon_variant
1092	five_methoxycarbonylmethyl_two_prime_o_methyluridine	five_methoxycarbonylmethyl_two_prime_o_methyluridine
1093	match	match
1094	gene_with_stop_codon_read_through	gene_with_stop_codon_read_through
1095	asparaginyl_trna	asparaginyl_trna
1096	threonyl_trna	threonyl_trna
1097	u3_five_prime_ltr_region	u3_five_prime_ltr_region
1098	five_prime_ltr	five_prime_ltr
1099	vj_gene	vj_gene
1100	rho_dependent_bacterial_terminator	rho_dependent_bacterial_terminator
1101	n2_methylguanosine	n2_methylguanosine
1102	three_prime_flanking_region	three_prime_flanking_region
1103	genomically_contaminated_cdna_clone	genomically_contaminated_cdna_clone
1104	internal_guide_sequence	internal_guide_sequence
1105	mirna_target_site	mirna_target_site
1106	u5_three_prime_ltr_region	u5_three_prime_ltr_region
1107	undermodified_hydroxywybutosine	undermodified_hydroxywybutosine
1108	introgressed_chromosome_region	introgressed_chromosome_region
1109	translationally_frameshifted	translationally_frameshifted
1110	trans_spliced	trans_spliced
1111	methylation_guide_snorna_primary_transcript	methylation_guide_snorna_primary_transcript
1112	leucine	leucine
1113	chromosomal_deletion	chromosomal_deletion
1114	five_isopentenylaminomethyl_uridine	five_isopentenylaminomethyl_uridine
1115	stop_codon	stop_codon
1116	two_methylthio_n6_threonyl_carbamoyladenosine	two_methylthio_n6_threonyl_carbamoyladenosine
1117	decreased_polyadenylation_variant	decreased_polyadenylation_variant
1118	biochemical_region_of_peptide	biochemical_region_of_peptide
1119	interband	interband
1120	dna_constraint_sequence	dna_constraint_sequence
1121	clone_insert	clone_insert
1122	snp	snp
1123	chromoplast_chromosome	chromoplast_chromosome
1124	rrna_25s	rrna_25s
1125	tata_box	tata_box
1126	plastid_gene	plastid_gene
1127	asx_turn_left_handed_type_one	asx_turn_left_handed_type_one
1128	modified_uridine	modified_uridine
1129	dce_sii	dce_sii
1130	intramembrane_polypeptide_region	intramembrane_polypeptide_region
1131	lysyl_trna	lysyl_trna
1132	rr_tract	rr_tract
1133	rrna_primary_transcript_region	rrna_primary_transcript_region
1134	h4k20_monomethylation_site	h4k20_monomethylation_site
1135	ds_dna_viral_sequence	ds_dna_viral_sequence
1136	alternatively_spliced_transcript	alternatively_spliced_transcript
1137	polypeptide_copper_ion_contact_site	polypeptide_copper_ion_contact_site
1138	scrna_encoding	scrna_encoding
1139	chromosomal_duplication	chromosomal_duplication
1140	clone	clone
1141	modified_l_isoleucine	modified_l_isoleucine
1142	gene_subarray	gene_subarray
1143	hetero_compound_chromosome	hetero_compound_chromosome
1144	dicistronic_transcript	dicistronic_transcript
1145	inactive_ligand_binding_site	inactive_ligand_binding_site
1146	silenced_by_dna_methylation	silenced_by_dna_methylation
1147	sl6_acceptor_site	sl6_acceptor_site
1148	t_loop	t_loop
1149	targeting_vector	targeting_vector
1150	two_thiocytidine	two_thiocytidine
1151	modified_l_serine	modified_l_serine
1152	srp_rna	srp_rna
1153	three_prime_repeat_recoding_signal	three_prime_repeat_recoding_signal
1154	rate_of_transcription_variant	rate_of_transcription_variant
1155	two_prime_o_methylguanosine	two_prime_o_methylguanosine
1156	polypeptide_binding_motif	polypeptide_binding_motif
1157	recombinationally_rearranged_vertebrate_immune_system_gene	recombinationally_rearranged_vertebrate_immune_system_gene
1158	a_box	a_box
1159	splicing_variant	splicing_variant
1160	one_methylguanosine	one_methylguanosine
1161	modified_l_glutamine	modified_l_glutamine
1162	sequence_variant	sequence_variant
1163	sequence_length_variation	sequence_length_variation
1164	strna_encoding	strna_encoding
1165	plus_1_frameshift	plus_1_frameshift
1166	topologically_defined_region	topologically_defined_region
1167	edited_cds	edited_cds
1168	gene_silenced_by_histone_modification	gene_silenced_by_histone_modification
1169	e_box_motif	e_box_motif
1170	paternal_uniparental_disomy	paternal_uniparental_disomy
1171	small_subunit_rrna	small_subunit_rrna
1172	dnasei_hypersensitive_site	dnasei_hypersensitive_site
1173	v_d_dj_j_c_cluster	v_d_dj_j_c_cluster
1174	compound_chromosome_arm	compound_chromosome_arm
1175	score	score
1176	feature_attribute	feature_attribute
1177	protein_match	protein_match
1178	downstream_gene_variant	downstream_gene_variant
1179	sl10_accceptor_site	sl10_accceptor_site
1180	chromosome_variation	chromosome_variation
1181	serine_threonine_motif	serine_threonine_motif
1182	a_box_type_1	a_box_type_1
1183	allelically_excluded	allelically_excluded
1184	assortment_derived_aneuploid	assortment_derived_aneuploid
1185	rare_variant	rare_variant
1186	five_isopentenylaminomethyl_two_prime_o_methyluridine	five_isopentenylaminomethyl_two_prime_o_methyluridine
1187	regional_centromere_central_core	regional_centromere_central_core
1188	gna_oligo	gna_oligo
1189	nc_transcript_variant	nc_transcript_variant
1190	copy_number_variation	copy_number_variation
1191	silenced	silenced
1192	three_methylcytidine	three_methylcytidine
1193	dexstrosynaptic_chromosome	dexstrosynaptic_chromosome
1194	inverted_insertional_duplication	inverted_insertional_duplication
1195	rescue_mini_gene	rescue_mini_gene
1196	catmat_left_handed_four	catmat_left_handed_four
1197	alternate_sequence_site	alternate_sequence_site
1198	polypeptide_iron_ion_contact_site	polypeptide_iron_ion_contact_site
1199	c_to_t_transition_at_pcpg_site	c_to_t_transition_at_pcpg_site
1200	polypeptide_molybdenum_ion_contact_site	polypeptide_molybdenum_ion_contact_site
1201	phenylalanine_trna_primary_transcript	phe_trna_primary_transcript
1202	decreased_translational_product_level	decreased_translational_product_level
1203	h_aca_box_snorna_primary_transcript	h_aca_box_snorna_primary_transcript
1204	r_gna	r_gna
1205	coding_sequence_variant	coding_sequence_variant
1206	polypeptide_partial_loss_of_function	polypeptide_partial_loss_of_function
1207	five_prime_restriction_enzyme_junction	five_prime_restriction_enzyme_junction
1208	intrachromosomal_transposition	intrachromosomal_transposition
1209	methylated_a	methylated_a
1210	rrna_16s	rrna_16s
1211	disease_causing_variant	disease_causing_variant
1212	n4_methylcytidine	n4_methylcytidine
1213	riboswitch	riboswitch
1214	duplicated_pseudogene	duplicated_pseudogene
1215	assortment_derived_duplication	assortment_derived_duplication
1216	chromosomal_regulatory_element	chromosomal_regulatory_element
1217	five_prime_five_prime_overlap	five_prime_five_prime_overlap
1218	polypeptide_function_variant	polypeptide_function_variant
1219	ribozymic	ribozymic
1220	inversion_derived_bipartite_deficiency	inversion_derived_bipartite_deficiency
1221	invalidated_by_genomic_contamination	invalidated_by_genomic_contamination
1222	variant_genome	variant_genome
1223	vj_j_cluster	vj_j_cluster
1224	chromosome_number_variation	chromosome_number_variation
1225	gene_attribute	gene_attribute
1226	uag_stop_codon_signal	uag_stop_codon_signal
1227	nucleotide_match	nucleotide_match
1228	mature_mirna_variant	mature_mirna_variant
1229	st_turn_left_handed_type_two	st_turn_left_handed_type_two
1230	epigenetically_modified	epigenetically_modified
1231	inversion_derived_deficiency_plus_duplication	inversion_derived_deficiency_plus_duplication
1232	five_methylaminomethyl_two_selenouridine	five_methylaminomethyl_two_selenouridine
1233	aspartic_acid_trna_primary_transcript	aspartic_acid_trna_primary_transcript
1234	nuclear_mt_pseudogene	nuclear_mt_pseudogene
1235	exonic_splice_enhancer	exonic_splice_enhancer
1236	u4_snrna	u4_snrna
1237	csrb_rsmb_rna	csrb_rsmb_rna
1238	group_1_intron_homing_endonuclease_target_region	group_1_intron_homing_endonuclease_target_region
1239	crispr	crispr
1240	snorna_gene	snorna_gene
1241	trans_splice_junction	trans_splice_junction
1242	flanking_three_prime_quadruplet_recoding_signal	flanking_three_prime_quadruplet_recoding_signal
1243	v_vdj_j_cluster	v_vdj_j_cluster
1244	cassette_pseudogene	cassette_pseudogene
1245	incomplete_terminal_codon_variant	incomplete_terminal_codon_variant
1246	silenced_by_histone_modification	silenced_by_histone_modification
1247	proviral_gene	proviral_gene
1248	five_carboxyhydroxymethyl_uridine	five_carboxyhydroxymethyl_uridine
1249	mt_gene	mt_gene
1250	single_stranded_rna_chromosome	single_stranded_rna_chromosome
1251	recoding_stimulatory_region	recoding_stimulatory_region
1252	five_taurinomethyluridine	five_taurinomethyluridine
1253	modified_l_threonine	modified_l_threonine
1254	v_d_dj_cluster	v_d_dj_cluster
1255	synthetic_oligo	synthetic_oligo
1256	purine_to_pyrimidine_transversion	purine_to_pyrimidine_transversion
1257	editing_variant	editing_variant
1258	antiparallel_beta_strand	antiparallel_beta_strand
1259	central_hydrophobic_region_of_signal_peptide	central_hydrophobic_region_of_signal_peptide
1260	integrated_mobile_genetic_element	integrated_mobile_genetic_element
1261	parallel_beta_strand	parallel_beta_strand
1262	v_dj_cluster	v_dj_cluster
1263	dre_motif	dre_motif
1264	non_ltr_retrotransposon	non_ltr_retrotransposon
1265	r_gna_oligo	r_gna_oligo
1266	autoregulated	autoregulated
1267	modified_l_lysine	modified_l_lysine
1268	bac_end	bac_end
1269	pyrrolysine	pyrrolysine
1270	high_quality_draft	high_quality_draft
1271	lysine	lysine
1272	elongated_polypeptide	elongated_polypeptide
1273	unique_variant	unique_variant
1274	protein_protein_contact	protein_protein_contact
1275	inversion_attribute	inversion_attribute
1276	nucleotide_binding_site	nucleotide_binding_site
1277	splice_site	splice_site
1278	non_synonymous_codon	non_synonymous_codon
1279	5kb_downstream_variant	fivekb_downstream_variant
1280	chromosomal_translocation	chromosomal_translocation
1281	epitope	epitope
1282	allele	allele
1283	n4_n4_2_prime_o_trimethylcytidine	n4_n4_2_prime_o_trimethylcytidine
1284	u5_ltr_region	u5_ltr_region
1285	paired_end_fragment	paired_end_fragment
1286	rescue_gene	rescue_gene
1287	transgenic_transposable_element	transgenic_transposable_element
1288	polypeptide_conserved_region	polypeptide_conserved_region
1289	sts	sts
1290	a_to_c_transversion	a_to_c_transversion
1291	class_ii_rna	class_ii_rna
1292	nonamer_of_recombination_feature_of_vertebrate_immune_system_gene	nonamer_of_recombination_feature_of_vertebrate_im_sys_gene
1293	unedited_region	unedited_region
1294	lambda_vector	lambda_vector
1295	gene	gene
1296	alanyl_trna	alanyl_trna
1297	amino_acid_substitution	amino_acid_substitution
1298	virtual_sequence	virtual_sequence
1299	group_iib_intron	group_iib_intron
1300	retrotransposed	retrotransposed
1301	mrna_with_minus_2_frameshift	mrna_with_minus_2_frameshift
1302	polymer_attribute	polymer_attribute
1303	autosynaptic_chromosome	autosynaptic_chromosome
1304	peptide_helix	peptide_helix
1305	partially_processed_cdna_clone	partially_processed_cdna_clone
1306	rst_match	rst_match
1307	paternally_imprinted	paternally_imprinted
1308	predicted_gene	predicted_gene
1309	x_element_combinatorial_repeat	x_element_combinatorial_repeat
1310	robertsonian_fusion	robertsonian_fusion
1311	two_prime_o_methylpseudouridine	two_prime_o_methylpseudouridine
1312	pericentric_inversion	pericentric_inversion
1313	aspartyl_trna	aspartyl_trna
1314	strna	strna
1315	three_prime_intron	three_prime_intron
1316	linear	linear
1317	j_nonamer	j_nonamer
1318	a_to_t_transversion	a_to_t_transversion
1319	idna	idna
1320	n2_n2_7_trimethylguanosine	n2_n2_7_trimethylguanosine
1321	complex_chromosomal_mutation	complex_chromosomal_mutation
1322	inversion_derived_deficiency_plus_aneuploid	inversion_derived_deficiency_plus_aneuploid
1323	h3k4_methylation_site	h3k4_methylation_site
1324	asymmetric_rna_internal_loop	asymmetric_rna_internal_loop
1325	deletion	deletion
1326	h3k79_monomethylation_site	h3k79_monomethylation_site
1327	cyclic_translocation	cyclic_translocation
1328	ars	ars
1329	glutaminyl_trna	glutaminyl_trna
1330	allopolyploid	allopolyploid
1331	replicon	replicon
1332	two_prime_o_methylcytidine	two_prime_o_methylcytidine
1333	regional_centromere	regional_centromere
1334	st_turn_left_handed_type_one	st_turn_left_handed_type_one
1335	paralogous_region	paralogous_region
1336	mature_transcript_region	mature_transcript_region
1337	mrna_with_frameshift	mrna_with_frameshift
1338	reference_genome	reference_genome
1339	unoriented_interchromosomal_transposition	unoriented_interchromosomal_transposition
1340	d_dj_j_cluster	d_dj_j_cluster
1341	maxicircle_gene	maxicircle_gene
1342	st_turn_right_handed_type_two	st_turn_right_handed_type_two
1343	snrna_encoding	snrna_encoding
1344	annotation_directed_improved_draft	annotation_directed_improved_draft
1345	five_prime_d_spacer	five_prime_d_spacer
1346	read	read
1347	arginine_trna_primary_transcript	arg_trna_primary_transcript
1348	oligo_u_tail	oligo_u_tail
1349	recoding_pseudoknot	recoding_pseudoknot
1350	five_methylaminomethyl_two_thiouridine	five_mam_2_thiouridine
1351	monocistronic	monocistronic
1352	3d_polypeptide_structure_variant	threed_polypeptide_structure_variant
1353	transmembrane_polypeptide_region	transmembrane_polypeptide_region
1354	transcript_processing_variant	transcript_processing_variant
1355	vector_replicon	vector_replicon
1356	maternal_uniparental_disomy	maternal_uniparental_disomy
1357	pyrosequenced_read	pyrosequenced_read
1358	splice_site_variant	splice_site_variant
1359	polypeptide_magnesium_ion_contact_site	polypeptide_magnesium_ion_contact_site
1360	polycistronic_transcript	polycistronic_transcript
1361	polya_site	polya_site
1362	chromosomal_variation_attribute	chromosomal_variation_attribute
1363	free_duplication	free_duplication
1364	chromosome_structure_variation	chromosome_structure_variation
1365	modified_rna_base_feature	modified_rna_base_feature
1366	mutated_variant_site	mutated_variant_site
1367	gaga_motif	gaga_motif
1368	centromeric_repeat	centromeric_repeat
1369	rrna_gene	rrna_gene
1370	interchromosomal_mutation	interchromosomal_mutation
1371	prophage	prophage
1372	syntenic	syntenic
1373	engineered_foreign_repetitive_element	engineered_foreign_repetitive_element
1374	translated_nucleotide_match	translated_nucleotide_match
1375	exon_variant	exon_variant
1376	h_aca_box_snorna	h_aca_box_snorna
1377	vault_rna	vault_rna
1378	orphan	orphan
1379	linear_single_stranded_dna_chromosome	linear_single_stranded_dna_chromosome
1380	telomeric_repeat	telomeric_repeat
1381	encodes_greater_than_1_polypeptide	encodes_greater_than_1_polypeptide
1382	atti_site	atti_site
1383	gene_with_start_codon_cug	gene_with_start_codon_cug
1384	silenced_by_histone_deacetylation	silenced_by_histone_deacetylation
1385	reagent	reagent
1386	chromosome_fission	chromosome_fission
1387	ct_gene	ct_gene
1388	capped_primary_transcript	capped_primary_transcript
1389	methylinosine	methylinosine
1390	j_spacer	j_spacer
1391	glutamine	glutamine
1392	modified_guanosine	modified_guanosine
1393	n2_7_dimethylguanosine	n2_7_dimethylguanosine
1394	h3k79_trimethylation_site	h3k79_trimethylation_site
1395	three_prime_d_heptamer	three_prime_d_heptamer
1396	invalidated_cdna_clone	invalidated_cdna_clone
1397	terminator	terminator
1398	stem_loop	stem_loop
1399	five_prime_utr_intron	five_prime_utr_intron
1400	unoriented_intrachromosomal_transposition	unoriented_intrachromosomal_transposition
1401	chromosome_band	chromosome_band
1402	mini_exon_donor_rna	mini_exon_donor_rna
1403	aneuploid	aneuploid
1404	five_methyl_2_thiouridine	five_methyl_2_thiouridine
1405	gene_silenced_by_dna_methylation	gene_silenced_by_dna_methylation
1406	engineered_foreign_transposable_element_gene	engineered_foreign_transposable_element_gene
1407	processed_pseudogene	processed_pseudogene
1408	supercontig	supercontig
1409	trna_encoding	trna_encoding
1410	reciprocal_chromosomal_translocation	reciprocal_chromosomal_translocation
1411	tasirna	tasirna
1412	hoogsteen_base_pair	hoogsteen_base_pair
1413	regional_centromere_inner_repeat_region	regional_centromere_inner_repeat_region
1414	yac_end	yac_end
1415	purine_transition	purine_transition
1416	c_d_box_snorna	c_d_box_snorna
1417	snorna_primary_transcript	snorna_primary_transcript
1418	v_vj_cluster	v_vj_cluster
1419	intronic_regulatory_region	intronic_regulatory_region
1420	u3_ltr_region	u3_ltr_region
1421	attenuator	attenuator
1422	three_prime_noncoding_exon	three_prime_noncoding_exon
1423	u14_snorna_primary_transcript	u14_snorna_primary_transcript
1424	d_gene_recombination_feature	d_gene_recombination_feature
1425	mte	mte
1426	gcvb_rna	gcvb_rna
1427	rst	rst
1428	operator	operator
1429	ring_chromosome	ring_chromosome
1430	ndm2_motif	ndm2_motif
1431	h3k4_dimethylation_site	h3k4_dimethylation_site
1432	selenocysteine_trna_primary_transcript	selenocysteine_trna_primary_transcript
1433	edited_transcript_feature	edited_transcript_feature
1434	stop_codon_redefined_as_pyrrolysine	stop_codon_redefined_as_pyrrolysine
1435	homo_compound_chromosome	homo_compound_chromosome
1436	foreign_gene	foreign_gene
1437	four_demethylwyosine	four_demethylwyosine
1438	guide_rna	guide_rna
1439	three_methylpseudouridine	three_methylpseudouridine
1440	inversion_derived_aneuploid_chromosome	inversion_derived_aneuploid_chromosome
1441	decreased_transcript_stability_variant	decreased_transcript_stability_variant
1442	lincrna_gene	lincrna_gene
1443	specific_recombination_site	specific_recombination_site
1444	inosine	inosine
1445	foreign_transposable_element	foreign_transposable_element
1446	d_gene	d_gene
1447	bipartite_inversion	bipartite_inversion
1448	engineered_plasmid	engineered_plasmid
1449	gene_group_regulatory_region	gene_group_regulatory_region
1450	vd_gene	vd_gene
1451	regulatory_region	regulatory_region
1452	sl11_acceptor_site	sl11_acceptor_site
1453	guide_rna_region	guide_rna_region
1454	modified_base	modified_base
1455	elongated_polypeptide_c_terminal	elongated_polypeptide_c_terminal
1456	three_ten_helix	three_ten_helix
1457	elongated_in_frame_polypeptide_n_terminal_elongation	elongated_in_frame_polypeptide_n_terminal_elongation
1458	sarcin_like_rna_motif	sarcin_like_rna_motif
1459	minus_1_translationally_frameshifted	minus_1_translationally_frameshifted
1460	modified_l_alanine	modified_l_alanine
1461	inversion_cum_translocation	inversion_cum_translocation
1462	tag	tag
1463	uninverted_interchromosomal_transposition	uninvert_inter_transposition
1464	cryptic_gene	cryptic_gene
1465	pericentric	pericentric
1466	transgenic	transgenic
1467	genomic_clone	genomic_clone
1468	chromosome_breakage_sequence	chromosome_breakage_sequence
1469	d_j_cluster	d_j_cluster
1470	beta_turn_type_six_a_one	beta_turn_type_six_a_one
1471	ribosome_entry_site	ribosome_entry_site
1472	left_handed_peptide_helix	left_handed_peptide_helix
1473	dna_aptamer	dna_aptamer
1474	i_motif	i_motif
1475	deficient_intrachromosomal_transposition	d_intrachr_transposition
1476	single_stranded_dna_chromosome	single_stranded_dna_chromosome
1477	methylated_c	methylated_c
1478	clone_end	clone_end
1479	ligation_based_read	ligation_based_read
1480	expressed_sequence_assembly	expressed_sequence_assembly
1481	five_two_prime_o_dimethyluridine	five_two_prime_o_dimethyluridine
1482	histidine_trna_primary_transcript	histidine_trna_primary_transcript
1483	orthologous_region	orthologous_region
1484	valine_trna_primary_transcript	valine_trna_primary_transcript
1485	operon_member	operon_member
1486	missense_codon	missense_codon
1487	bacterial_rnapol_promoter_sigma54	bacterial_rnapol_promoter_sigma54
1488	gene_group	gene_group
1489	small_regulatory_ncrna	small_regulatory_ncrna
1490	intrachromosomal_duplication	intrachromosomal_duplication
1491	non_conservative_amino_acid_substitution	non_conservative_amino_acid_substitution
1492	uaa_stop_codon_signal	uaa_stop_codon_signal
1493	h3k36_methylation_site	h3k36_methylation_site
1494	transcript_variant	transcript_variant
1495	minus_2_frameshift	minus_2_frameshift
1496	organelle_sequence	organelle_sequence
1497	initiator_codon_change	initiator_codon_change
1498	cryptic_prophage	cryptic_prophage
1499	micf_rna	micf_rna
1500	direct_tandem_duplication	direct_tandem_duplication
1501	conserved	conserved
1502	telomerase_rna	telomerase_rna
1503	u6atac_snrna	u6atac_snrna
1504	attb_site	attb_site
1505	gene_array_member	gene_array_member
1506	polyadenylated_mrna	polyadenylated_mrna
1507	symbiosis_island	symbiosis_island
1508	polymorphic_variant	polymorphic_variant
1509	splice_junction	splice_junction
1510	fingerprint_map	fingerprint_map
1511	single_strand_restriction_enzyme_cleavage_site	single_strand_restriction_enzyme_cleavage_site
1512	wyosine	wyosine
1513	uga_stop_codon_signal	uga_stop_codon_signal
1514	minus_24_signal	minus_24_signal
1515	cytoplasmic_polypeptide_region	cytoplasmic_polypeptide_region
1516	h4k_acylation_region	h4k_acylation_region
1517	one_two_prime_o_dimethylguanosine	one_two_prime_o_dimethylguanosine
1518	rh_map	rh_map
1519	silenced_by_dna_modification	silenced_by_dna_modification
1520	inactive_catalytic_site	inactive_catalytic_site
1521	anticodon	anticodon
1522	seven_deazaguanosine	seven_deazaguanosine
1523	asparagine	asparagine
1524	probe	probe
1525	defective_conjugative_transposon	defective_conjugative_transposon
1526	archaeosine	archaeosine
1527	molecular_contact_region	molecular_contact_region
1528	nested_repeat	nested_repeat
1529	membrane_structure	membrane_structure
1530	contig_collection	contig_collection
1531	tetraloop	tetraloop
1532	coding_conserved_region	coding_conserved_region
1533	long_terminal_repeat	long_terminal_repeat
1534	vertebrate_immune_system_gene_recombination_signal_feature	vertebrate_immune_system_gene_recombination_signal_feature
1535	untranslated_region_polycistronic_mrna	untranslated_region_polycistronic_mrna
1536	leucine_trna_primary_transcript	leucine_trna_primary_transcript
1537	high_identity_region	high_identity_region
1538	circular_single_stranded_dna_chromosome	circular_single_stranded_dna_chromosome
1539	nuclear_rim_localization_signal	nuclear_rim_localization_signal
1540	isoleucyl_trna	isoleucyl_trna
1541	insertion_breakpoint	insertion_breakpoint
1542	5_prime_utr_variant	five_prime_utr_variant
1543	transgene	transgene
1544	mrna_region	mrna_region
1545	transcript_attribute	transcript_attribute
1546	serine_threonine_staple_motif	serine_threonine_staple_motif
1547	protein_coding	protein_coding
1548	enhancer_bound_by_factor	enhancer_bound_by_factor
1549	recoded_by_translational_bypass	recoded_by_translational_bypass
1550	operon	operon
1551	monocistronic_transcript	monocistronic_transcript
1552	reciprocal	reciprocal
1553	polyadenylated	polyadenylated
1554	unigene_cluster	unigene_cluster
1555	vertebrate_immunoglobulin_t_cell_receptor_rearranged_gene_cluster	vertebrate_ig_t_cell_receptor_rearranged_gene_cluster
1556	gene_cassette_member	gene_cassette_member
1557	stop_codon_read_through	stop_codon_read_through
1558	gene_with_transcript_with_translational_frameshift	gene_with_transcript_with_translational_frameshift
1559	variant_quality	variant_quality
1560	mnp	mnp
1561	glutamic_acid	glutamic_acid
1562	y_prime_element	y_prime_element
1563	beta_turn	beta_turn
1564	pathogenic_island	pathogenic_island
1565	ust_match	ust_match
1566	transcript_bound_by_protein	transcript_bound_by_protein
1567	n6_methyladenosine	n6_methyladenosine
1568	cyanelle_chromosome	cyanelle_chromosome
1569	orit	orit
1570	maternally_imprinted	maternally_imprinted
1571	chloroplast_chromosome	chloroplast_chromosome
1572	minicircle_gene	minicircle_gene
1573	polypeptide_catalytic_motif	polypeptide_catalytic_motif
1574	rnapol_iii_promoter_type_2	rnapol_iii_promoter_type_2
1575	no_output	no_output
1576	interior_coding_exon	interior_coding_exon
1577	five_taurinomethyl_two_thiouridine	five_taurinomethyl_two_thiouridine
1578	h3k9_trimethylation_site	h3k9_trimethylation_site
1579	transcript_secondary_structure_variant	transcript_secondary_structure_variant
1580	polypeptide	polypeptide
1581	splice_donor_5th_base_variant	splice_donor_5th_base_variant
1582	polymerase_synthesis_read	polymerase_synthesis_read
1583	enhancer_binding_site	enhancer_binding_site
1584	nucleotide_to_protein_binding_site	nucleotide_to_protein_binding_site
1585	beta_turn_left_handed_type_two	beta_turn_left_handed_type_two
1586	invalidated_by_genomic_polya_primed_cdna	invalidated_by_genomic_polya_primed_cdna
1587	gene_with_edited_transcript	gene_with_edited_transcript
1588	dmv1_motif	dmv1_motif
1589	minus_12_signal	minus_12_signal
1590	post_translationally_modified_region	post_translationally_modified_region
1591	proline	proline
1592	flanking_region	flanking_region
1593	two_methylthio_n6_isopentenyladenosine	two_methylthio_n6_isopentenyladenosine
1594	polypyrimidine_tract	polypyrimidine_tract
1595	five_methoxyuridine	five_methoxyuridine
1596	gene_to_gene_feature	gene_to_gene_feature
1597	bac_cloned_genomic_insert	bac_cloned_genomic_insert
1598	j_heptamer	j_heptamer
1599	three_prime_ust	three_prime_ust
1600	n6_2_prime_o_dimethyladenosine	n6_2_prime_o_dimethyladenosine
1601	trans_splice_site	trans_splice_site
1602	de_novo_variant	de_novo_variant
1603	engineered_rescue_region	engineered_rescue_region
1604	nucleomorph_gene	nucleomorph_gene
1605	mrna_attribute	mrna_attribute
1606	five_prime_three_prime_overlap	five_prime_three_prime_overlap
1607	group_i_intron	group_i_intron
1608	d_cluster	d_cluster
1609	open_chromatin_region	open_chromatin_region
1610	genomic_dna	genomic_dna
1611	inside_intron	inside_intron
1612	hammerhead_ribozyme	hammerhead_ribozyme
1613	five_prime_d_heptamer	five_prime_d_heptamer
1614	intronic_splice_enhancer	intronic_splice_enhancer
1615	modified_adenosine	modified_adenosine
1616	five_carboxymethylaminomethyluridine	five_carboxymethylaminomethyluridine
1617	repeat_region	repeat_region
1618	repeat_unit	repeat_unit
1619	double_stranded_dna_chromosome	double_stranded_dna_chromosome
1620	heritable_phenotypic_marker	heritable_phenotypic_marker
1621	template_region	template_region
1622	primary_transcript_region	primary_transcript_region
1623	mitochondrial_dna	mitochondrial_dna
1624	transcript_region	transcript_region
1625	histone_acetylation_site	histone_acetylation_site
1626	ribozyme	ribozyme
1627	matrix_attachment_site	matrix_attachment_site
1628	imprinted	imprinted
1629	polypeptide_sequence_variant	polypeptide_sequence_variant
1630	est	est
1631	rna_motif	rna_motif
1632	polypeptide_variation_site	polypeptide_variation_site
1633	class_i_rna	class_i_rna
1634	oligo	oligo
1635	stop_codon_signal	stop_codon_signal
1636	hypoploid	hypoploid
1637	exemplar_mrna	exemplar_mrna
1638	experimentally_defined_binding_region	experimentally_defined_binding_region
1639	c_to_g_transversion	c_to_g_transversion
1640	active_peptide	active_peptide
1641	mannosyl_queuosine	mannosyl_queuosine
1642	gene_with_stop_codon_redefined_as_pyrrolysine	gene_with_stop_codon_redefined_as_pyrrolysine
1643	queuosine	queuosine
1644	lna_oligo	lna_oligo
1645	independently_known	independently_known
1646	proviral_region	proviral_region
1647	capped	capped
1648	minus_1_frameshift_variant	minus_1_frameshift_variant
1649	direction_attribute	direction_attribute
1650	micronuclear_chromosome	micronuclear_chromosome
1651	pseudogene_by_unequal_crossing_over	pseudogene_by_unequal_crossing_over
1652	one_two_prime_o_dimethyladenosine	one_two_prime_o_dimethyladenosine
1653	dpe_motif	dpe_motif
1654	frame_restoring_variant	frame_restoring_variant
1655	seryl_trna	seryl_trna
1656	structural_variant	structural_variant
1657	regulatory_promoter_element	regulatory_promoter_element
1658	integration_excision_site	integration_excision_site
1659	noncoding_region_of_exon	noncoding_region_of_exon
1660	rnase_mrp_rna	rnase_mrp_rna
1661	nuclear_export_signal	nuclear_export_signal
1662	five_methoxycarbonylmethyluridine	five_methoxycarbonylmethyluridine
1663	exon_of_single_exon_gene	exon_of_single_exon_gene
1664	gene_with_dicistronic_primary_transcript	gene_with_dicistronic_primary_transcript
1665	sequence_secondary_structure	sequence_secondary_structure
1666	bacterial_rnapol_promoter_sigma_70	bacterial_rnapol_promoter_sigma_70
1667	tiling_path	tiling_path
1668	nuclear_sequence	nuclear_sequence
1669	contig	contig
1670	quality_value	quality_value
1671	kozak_sequence	kozak_sequence
1672	population_specific_variant	population_specific_variant
1673	catalytic_residue	catalytic_residue
1674	inversion_site	inversion_site
1675	aspartic_acid	aspartic_acid
1676	dif_site	dif_site
1677	mirna_gene	mirna_gene
1678	valyl_trna	valyl_trna
1679	inverted_tandem_duplication	inverted_tandem_duplication
1680	cis_regulatory_frameshift_element	cis_regulatory_frameshift_element
1681	minisatellite	minisatellite
1682	assembly_component	assembly_component
1683	low_complexity_region	low_complexity_region
1684	morpholino_backbone	morpholino_backbone
1685	designed_sequence	designed_sequence
1686	n6_n6_2_prime_o_trimethyladenosine	n6_n6_2_prime_o_trimethyladenosine
1687	rna_polymerase_promoter	rna_polymerase_promoter
1688	v_gene_recombination_feature	v_gene_recombination_feature
1689	five_carboxymethylaminomethyl_two_thiouridine	five_carboxymethylaminomethyl_two_thiouridine
1690	free_ring_duplication	free_ring_duplication
1691	point_centromere	point_centromere
1692	dicistronic_mrna	dicistronic_mrna
1693	interchromosomal	interchromosomal
1694	uncharacterised_chromosomal_mutation	uncharacterised_chromosomal_mutation
1695	five_prime_cis_splice_site	five_prime_cis_splice_site
1696	octamer_motif	octamer_motif
1697	encodes_overlapping_peptides_different_start	encodes_overlapping_peptides_different_start
1698	ss_rna_viral_sequence	ss_rna_viral_sequence
1699	indel	indel
1700	dicistronic_primary_transcript	dicistronic_primary_transcript
1701	protein_binding_site	protein_binding_site
1702	polycistronic	polycistronic
1703	asparagine_trna_primary_transcript	asparagine_trna_primary_transcript
1704	splice_enhancer	splice_enhancer
1705	aneuploid_chromosome	aneuploid_chromosome
1706	peroxywybutosine	peroxywybutosine
1707	modified_l_aspartic_acid	modified_l_aspartic_acid
1708	engineered_episome	engineered_episome
1709	rnai_reagent	rnai_reagent
1710	rasirna	rasirna
1711	tmrna_region	tmrna_region
1712	increased_transcript_level_variant	increased_transcript_level_variant
1713	bacterial_rnapol_promoter	bacterial_rnapol_promoter
1714	mitochondrial_sequence	mitochondrial_sequence
1715	trinucleotide_repeat_microsatellite_feature	trinuc_repeat_microsat
1716	post_translationally_regulated_by_protein_stability	post_translationally_regulated_by_protein_stability
1717	nc_primary_transcript	nc_primary_transcript
1718	iron_responsive_element	iron_responsive_element
1719	v_d_dj_j_cluster	v_d_dj_j_cluster
1720	forward	forward
1721	proviral_location	proviral_location
1722	histone_binding_site	histone_binding_site
1723	promoter_element	promoter_element
1724	pse_motif	pse_motif
1725	beta_turn_type_eight	beta_turn_type_eight
1726	double	double
1727	cds_supported_by_est_or_cdna_data	cds_supported_by_est_or_cdna_data
1728	double_stranded_rna_chromosome	double_stranded_rna_chromosome
1729	modified_l_glutamic_acid	modified_l_glutamic_acid
1730	polypeptide_nest_motif	polypeptide_nest_motif
1731	translational_frameshift	translational_frameshift
1732	three_prime_terminal_inverted_repeat	three_prime_terminal_inverted_repeat
1733	pseudogenic_trna	pseudogenic_trna
1734	cap	cap
1735	five_prime_coding_exon	five_prime_coding_exon
1736	enzymatic	enzymatic
1737	interior_exon	interior_exon
1738	genetic_marker	genetic_marker
1739	a_to_g_transition	a_to_g_transition
1740	two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine	two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine
1741	isre	isre
1742	maternally_imprinted_gene	maternally_imprinted_gene
1743	circular	circular
1744	h_pseudoknot	h_pseudoknot
1745	intermediate_element	intermediate_element
1746	transcript	transcript
1747	pseudogene	pseudogene
1748	direct_repeat	direct_repeat
1749	bacterial_terminator	bacterial_terminator
1750	diplotype	diplotype
1751	metal_binding_site	metal_binding_site
1752	dj_gene	dj_gene
1753	two_prime_o_methyladenosine	two_prime_o_methyladenosine
1754	splice_region_variant	splice_region_variant
1755	aspe_primer	aspe_primer
1756	restriction_enzyme_binding_site	restriction_enzyme_binding_site
1757	bac	bac
1758	dj_j_cluster	dj_j_cluster
1759	h3k36_dimethylation_site	h3k36_dimethylation_site
1760	trans_splice_donor_site	trans_splice_donor_site
1761	gene_variant	gene_variant
1762	conformational_change_variant	conformational_change_variant
1763	h3k36_monomethylation_site	h3k36_monomethylation_site
1764	nucleic_acid	nucleic_acid
1765	invalidated_by_chimeric_cdna	invalidated_by_chimeric_cdna
1766	histidine	histidine
1767	gene_component_region	gene_component_region
1768	primer_match	primer_match
1769	trna_primary_transcript	trna_primary_transcript
1770	loxp_site	loxp_site
1771	serine	serine
1772	propeptide	propeptide
1773	five_prime_open_reading_frame	five_prime_open_reading_frame
1774	schellmann_loop_six	schellmann_loop_six
1775	shine_dalgarno_sequence	shine_dalgarno_sequence
1776	sp6_rna_polymerase_promoter	sp6_rna_polymerase_promoter
1777	centromere_dna_element_iii	centromere_dna_element_iii
1778	lysine_trna_primary_transcript	lysine_trna_primary_transcript
1779	j_c_cluster	j_c_cluster
1780	assortment_derived_deficiency	assortment_derived_deficiency
1781	mirna_primary_transcript	mirna_primary_transcript
1782	rrna_5s	rrna_5s
1783	leucyl_trna	leucyl_trna
1784	inverted_intrachromosomal_transposition	invert_intra_transposition
1785	enzymatic_rna	enzymatic_rna
1786	germline_variant	germline_variant
1787	negatively_autoregulated	negatively_autoregulated
1788	benign_variant	benign_variant
1789	anchor_region	anchor_region
1790	exon	exon
1791	beta_turn_type_six_a	beta_turn_type_six_a
1792	random_sequence	random_sequence
1793	partially_characterised_chromosomal_mutation	partially_characterised_chromosomal_mutation
1794	rna	rna
1795	core_promoter_element	core_promoter_element
1796	restriction_enzyme_single_strand_overhang	restriction_enzyme_single_strand_overhang
1797	ss_oligo	ss_oligo
1798	histone_methylation_site	histone_methylation_site
1799	inversion_derived_duplication_plus_aneuploid	inversion_derived_duplication_plus_aneuploid
1800	transcript_bound_by_nucleic_acid	transcript_bound_by_nucleic_acid
1801	intein_containing	intein_containing
1802	h_aca_box_snorna_encoding	h_aca_box_snorna_encoding
1803	rrna_cleavage_rna	rrna_cleavage_rna
1804	enhancer_trap_construct	enhancer_trap_construct
1805	gamma_turn_inverse	gamma_turn_inverse
1806	three_prime_d_nonamer	three_prime_d_nonamer
1807	paternal_variant	paternal_variant
1808	level_of_transcript_variant	level_of_transcript_variant
1809	selenocysteinyl_trna	selenocysteinyl_trna
1810	gene_silenced_by_histone_methylation	gene_silenced_by_histone_methylation
1811	u11_snrna	u11_snrna
1812	scrna	scrna
1813	gene_with_stop_codon_redefined_as_selenocysteine	gene_with_stop_codon_redefined_as_selenocysteine
1814	silencer	silencer
1815	sage_tag	sage_tag
1816	mrna_with_minus_1_frameshift	mrna_with_minus_1_frameshift
1817	nuclear_gene	nuclear_gene
1818	cds_supported_by_domain_match_data	cds_supported_by_domain_match_data
1819	internal_shine_dalgarno_sequence	internal_shine_dalgarno_sequence
1820	prolyl_trna	prolyl_trna
1821	lysidine	lysidine
1822	beta_bulge	beta_bulge
1823	post_translationally_regulated_by_protein_modification	post_translationally_regulated_by_protein_modification
1824	splice_donor_variant	splice_donor_variant
1825	ncrna	ncrna
1826	grna_gene	grna_gene
1827	enhancer	enhancer
1828	polymorphic_sequence_variant	polymorphic_sequence_variant
1829	three_prime_clip	three_prime_clip
1830	frameshift_variant	frameshift_variant
1831	insertional	insertional
1832	non_processed_pseudogene	non_processed_pseudogene
\.


--
-- Name: sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq; Type: SEQUENCE SET; Schema: so; Owner: postgres
--

SELECT pg_catalog.setval('sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq', 1832, true);


SET search_path = frange, pg_catalog;

--
-- Name: featuregroup_c1; Type: CONSTRAINT; Schema: frange; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY featuregroup
    ADD CONSTRAINT featuregroup_c1 UNIQUE (subject_id, object_id, group_id, srcfeature_id, fmin, fmax, strand);


--
-- Name: featuregroup_pkey; Type: CONSTRAINT; Schema: frange; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY featuregroup
    ADD CONSTRAINT featuregroup_pkey PRIMARY KEY (featuregroup_id);


SET search_path = genetic_code, pg_catalog;

--
-- Name: gencode_codon_unique; Type: CONSTRAINT; Schema: genetic_code; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY gencode_codon_aa
    ADD CONSTRAINT gencode_codon_unique UNIQUE (gencode_id, codon);


--
-- Name: gencode_pkey; Type: CONSTRAINT; Schema: genetic_code; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY gencode
    ADD CONSTRAINT gencode_pkey PRIMARY KEY (gencode_id);


--
-- Name: gencode_startcodon_unique; Type: CONSTRAINT; Schema: genetic_code; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY gencode_startcodon
    ADD CONSTRAINT gencode_startcodon_unique UNIQUE (gencode_id, codon);


SET search_path = public, pg_catalog;

--
-- Name: acquisition_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY acquisition
    ADD CONSTRAINT acquisition_c1 UNIQUE (name);


--
-- Name: acquisition_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY acquisition
    ADD CONSTRAINT acquisition_pkey PRIMARY KEY (acquisition_id);


--
-- Name: acquisition_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY acquisition_relationship
    ADD CONSTRAINT acquisition_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: acquisition_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY acquisition_relationship
    ADD CONSTRAINT acquisition_relationship_pkey PRIMARY KEY (acquisition_relationship_id);


--
-- Name: acquisitionprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY acquisitionprop
    ADD CONSTRAINT acquisitionprop_c1 UNIQUE (acquisition_id, type_id, rank);


--
-- Name: acquisitionprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY acquisitionprop
    ADD CONSTRAINT acquisitionprop_pkey PRIMARY KEY (acquisitionprop_id);


--
-- Name: analysis_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY analysis
    ADD CONSTRAINT analysis_c1 UNIQUE (program, programversion, sourcename);


--
-- Name: analysis_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY analysis
    ADD CONSTRAINT analysis_pkey PRIMARY KEY (analysis_id);


--
-- Name: analysisfeature_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY analysisfeature
    ADD CONSTRAINT analysisfeature_c1 UNIQUE (feature_id, analysis_id);


--
-- Name: analysisfeature_id_type_id_rank; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY analysisfeatureprop
    ADD CONSTRAINT analysisfeature_id_type_id_rank UNIQUE (analysisfeature_id, type_id, rank);


--
-- Name: analysisfeature_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY analysisfeature
    ADD CONSTRAINT analysisfeature_pkey PRIMARY KEY (analysisfeature_id);


--
-- Name: analysisfeatureprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY analysisfeatureprop
    ADD CONSTRAINT analysisfeatureprop_pkey PRIMARY KEY (analysisfeatureprop_id);


--
-- Name: analysisprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY analysisprop
    ADD CONSTRAINT analysisprop_c1 UNIQUE (analysis_id, type_id, rank);


--
-- Name: analysisprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY analysisprop
    ADD CONSTRAINT analysisprop_pkey PRIMARY KEY (analysisprop_id);


--
-- Name: arraydesign_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY arraydesign
    ADD CONSTRAINT arraydesign_c1 UNIQUE (name);


--
-- Name: arraydesign_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY arraydesign
    ADD CONSTRAINT arraydesign_pkey PRIMARY KEY (arraydesign_id);


--
-- Name: arraydesignprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY arraydesignprop
    ADD CONSTRAINT arraydesignprop_c1 UNIQUE (arraydesign_id, type_id, rank);


--
-- Name: arraydesignprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY arraydesignprop
    ADD CONSTRAINT arraydesignprop_pkey PRIMARY KEY (arraydesignprop_id);


--
-- Name: assay_biomaterial_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY assay_biomaterial
    ADD CONSTRAINT assay_biomaterial_c1 UNIQUE (assay_id, biomaterial_id, channel_id, rank);


--
-- Name: assay_biomaterial_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY assay_biomaterial
    ADD CONSTRAINT assay_biomaterial_pkey PRIMARY KEY (assay_biomaterial_id);


--
-- Name: assay_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY assay
    ADD CONSTRAINT assay_c1 UNIQUE (name);


--
-- Name: assay_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY assay
    ADD CONSTRAINT assay_pkey PRIMARY KEY (assay_id);


--
-- Name: assay_project_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY assay_project
    ADD CONSTRAINT assay_project_c1 UNIQUE (assay_id, project_id);


--
-- Name: assay_project_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY assay_project
    ADD CONSTRAINT assay_project_pkey PRIMARY KEY (assay_project_id);


--
-- Name: assayprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY assayprop
    ADD CONSTRAINT assayprop_c1 UNIQUE (assay_id, type_id, rank);


--
-- Name: assayprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY assayprop
    ADD CONSTRAINT assayprop_pkey PRIMARY KEY (assayprop_id);


--
-- Name: biomaterial_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY biomaterial
    ADD CONSTRAINT biomaterial_c1 UNIQUE (name);


--
-- Name: biomaterial_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY biomaterial_dbxref
    ADD CONSTRAINT biomaterial_dbxref_c1 UNIQUE (biomaterial_id, dbxref_id);


--
-- Name: biomaterial_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY biomaterial_dbxref
    ADD CONSTRAINT biomaterial_dbxref_pkey PRIMARY KEY (biomaterial_dbxref_id);


--
-- Name: biomaterial_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY biomaterial
    ADD CONSTRAINT biomaterial_pkey PRIMARY KEY (biomaterial_id);


--
-- Name: biomaterial_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY biomaterial_relationship
    ADD CONSTRAINT biomaterial_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: biomaterial_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY biomaterial_relationship
    ADD CONSTRAINT biomaterial_relationship_pkey PRIMARY KEY (biomaterial_relationship_id);


--
-- Name: biomaterial_treatment_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY biomaterial_treatment
    ADD CONSTRAINT biomaterial_treatment_c1 UNIQUE (biomaterial_id, treatment_id);


--
-- Name: biomaterial_treatment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY biomaterial_treatment
    ADD CONSTRAINT biomaterial_treatment_pkey PRIMARY KEY (biomaterial_treatment_id);


--
-- Name: biomaterialprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY biomaterialprop
    ADD CONSTRAINT biomaterialprop_c1 UNIQUE (biomaterial_id, type_id, rank);


--
-- Name: biomaterialprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY biomaterialprop
    ADD CONSTRAINT biomaterialprop_pkey PRIMARY KEY (biomaterialprop_id);


--
-- Name: cell_line_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line
    ADD CONSTRAINT cell_line_c1 UNIQUE (uniquename, organism_id);


--
-- Name: cell_line_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_cvterm
    ADD CONSTRAINT cell_line_cvterm_c1 UNIQUE (cell_line_id, cvterm_id, pub_id, rank);


--
-- Name: cell_line_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_cvterm
    ADD CONSTRAINT cell_line_cvterm_pkey PRIMARY KEY (cell_line_cvterm_id);


--
-- Name: cell_line_cvtermprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_cvtermprop
    ADD CONSTRAINT cell_line_cvtermprop_c1 UNIQUE (cell_line_cvterm_id, type_id, rank);


--
-- Name: cell_line_cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_cvtermprop
    ADD CONSTRAINT cell_line_cvtermprop_pkey PRIMARY KEY (cell_line_cvtermprop_id);


--
-- Name: cell_line_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_dbxref
    ADD CONSTRAINT cell_line_dbxref_c1 UNIQUE (cell_line_id, dbxref_id);


--
-- Name: cell_line_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_dbxref
    ADD CONSTRAINT cell_line_dbxref_pkey PRIMARY KEY (cell_line_dbxref_id);


--
-- Name: cell_line_feature_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_feature
    ADD CONSTRAINT cell_line_feature_c1 UNIQUE (cell_line_id, feature_id, pub_id);


--
-- Name: cell_line_feature_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_feature
    ADD CONSTRAINT cell_line_feature_pkey PRIMARY KEY (cell_line_feature_id);


--
-- Name: cell_line_library_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_library
    ADD CONSTRAINT cell_line_library_c1 UNIQUE (cell_line_id, library_id, pub_id);


--
-- Name: cell_line_library_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_library
    ADD CONSTRAINT cell_line_library_pkey PRIMARY KEY (cell_line_library_id);


--
-- Name: cell_line_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line
    ADD CONSTRAINT cell_line_pkey PRIMARY KEY (cell_line_id);


--
-- Name: cell_line_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_pub
    ADD CONSTRAINT cell_line_pub_c1 UNIQUE (cell_line_id, pub_id);


--
-- Name: cell_line_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_pub
    ADD CONSTRAINT cell_line_pub_pkey PRIMARY KEY (cell_line_pub_id);


--
-- Name: cell_line_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_relationship
    ADD CONSTRAINT cell_line_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: cell_line_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_relationship
    ADD CONSTRAINT cell_line_relationship_pkey PRIMARY KEY (cell_line_relationship_id);


--
-- Name: cell_line_synonym_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_synonym
    ADD CONSTRAINT cell_line_synonym_c1 UNIQUE (synonym_id, cell_line_id, pub_id);


--
-- Name: cell_line_synonym_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_line_synonym
    ADD CONSTRAINT cell_line_synonym_pkey PRIMARY KEY (cell_line_synonym_id);


--
-- Name: cell_lineprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_lineprop
    ADD CONSTRAINT cell_lineprop_c1 UNIQUE (cell_line_id, type_id, rank);


--
-- Name: cell_lineprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_lineprop
    ADD CONSTRAINT cell_lineprop_pkey PRIMARY KEY (cell_lineprop_id);


--
-- Name: cell_lineprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_lineprop_pub
    ADD CONSTRAINT cell_lineprop_pub_c1 UNIQUE (cell_lineprop_id, pub_id);


--
-- Name: cell_lineprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cell_lineprop_pub
    ADD CONSTRAINT cell_lineprop_pub_pkey PRIMARY KEY (cell_lineprop_pub_id);


--
-- Name: chadoprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY chadoprop
    ADD CONSTRAINT chadoprop_c1 UNIQUE (type_id, rank);


--
-- Name: chadoprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY chadoprop
    ADD CONSTRAINT chadoprop_pkey PRIMARY KEY (chadoprop_id);


--
-- Name: channel_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY channel
    ADD CONSTRAINT channel_c1 UNIQUE (name);


--
-- Name: channel_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY channel
    ADD CONSTRAINT channel_pkey PRIMARY KEY (channel_id);


--
-- Name: contact_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY contact
    ADD CONSTRAINT contact_c1 UNIQUE (name);


--
-- Name: contact_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY contact
    ADD CONSTRAINT contact_pkey PRIMARY KEY (contact_id);


--
-- Name: contact_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY contact_relationship
    ADD CONSTRAINT contact_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: contact_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY contact_relationship
    ADD CONSTRAINT contact_relationship_pkey PRIMARY KEY (contact_relationship_id);


--
-- Name: control_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY control
    ADD CONSTRAINT control_pkey PRIMARY KEY (control_id);


--
-- Name: cv_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cv
    ADD CONSTRAINT cv_c1 UNIQUE (name);


--
-- Name: cv_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cv
    ADD CONSTRAINT cv_pkey PRIMARY KEY (cv_id);


--
-- Name: cvprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cvprop
    ADD CONSTRAINT cvprop_c1 UNIQUE (cv_id, type_id, rank);


--
-- Name: cvprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cvprop
    ADD CONSTRAINT cvprop_pkey PRIMARY KEY (cvprop_id);


--
-- Name: cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cvterm
    ADD CONSTRAINT cvterm_c1 UNIQUE (name, cv_id, is_obsolete);


--
-- Name: cvterm_c2; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cvterm
    ADD CONSTRAINT cvterm_c2 UNIQUE (dbxref_id);


--
-- Name: cvterm_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_c1 UNIQUE (cvterm_id, dbxref_id);


--
-- Name: cvterm_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_pkey PRIMARY KEY (cvterm_dbxref_id);


--
-- Name: cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cvterm
    ADD CONSTRAINT cvterm_pkey PRIMARY KEY (cvterm_id);


--
-- Name: cvterm_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: cvterm_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_pkey PRIMARY KEY (cvterm_relationship_id);


--
-- Name: cvtermpath_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_c1 UNIQUE (subject_id, object_id, type_id, pathdistance);


--
-- Name: cvtermpath_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_pkey PRIMARY KEY (cvtermpath_id);


--
-- Name: cvtermprop_cvterm_id_type_id_value_rank_key; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cvtermprop
    ADD CONSTRAINT cvtermprop_cvterm_id_type_id_value_rank_key UNIQUE (cvterm_id, type_id, value, rank);


--
-- Name: cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cvtermprop
    ADD CONSTRAINT cvtermprop_pkey PRIMARY KEY (cvtermprop_id);


--
-- Name: cvtermsynonym_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_c1 UNIQUE (cvterm_id, synonym);


--
-- Name: cvtermsynonym_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_pkey PRIMARY KEY (cvtermsynonym_id);


--
-- Name: db_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY db
    ADD CONSTRAINT db_c1 UNIQUE (name);


--
-- Name: db_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY db
    ADD CONSTRAINT db_pkey PRIMARY KEY (db_id);


--
-- Name: dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dbxref
    ADD CONSTRAINT dbxref_c1 UNIQUE (db_id, accession, version);


--
-- Name: dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dbxref
    ADD CONSTRAINT dbxref_pkey PRIMARY KEY (dbxref_id);


--
-- Name: dbxrefprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dbxrefprop
    ADD CONSTRAINT dbxrefprop_c1 UNIQUE (dbxref_id, type_id, rank);


--
-- Name: dbxrefprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dbxrefprop
    ADD CONSTRAINT dbxrefprop_pkey PRIMARY KEY (dbxrefprop_id);


--
-- Name: eimage_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY eimage
    ADD CONSTRAINT eimage_pkey PRIMARY KEY (eimage_id);


--
-- Name: element_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY element
    ADD CONSTRAINT element_c1 UNIQUE (feature_id, arraydesign_id);


--
-- Name: element_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY element
    ADD CONSTRAINT element_pkey PRIMARY KEY (element_id);


--
-- Name: element_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY element_relationship
    ADD CONSTRAINT element_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: element_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY element_relationship
    ADD CONSTRAINT element_relationship_pkey PRIMARY KEY (element_relationship_id);


--
-- Name: elementresult_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elementresult
    ADD CONSTRAINT elementresult_c1 UNIQUE (element_id, quantification_id);


--
-- Name: elementresult_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elementresult
    ADD CONSTRAINT elementresult_pkey PRIMARY KEY (elementresult_id);


--
-- Name: elementresult_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elementresult_relationship
    ADD CONSTRAINT elementresult_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: elementresult_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elementresult_relationship
    ADD CONSTRAINT elementresult_relationship_pkey PRIMARY KEY (elementresult_relationship_id);


--
-- Name: environment_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY environment
    ADD CONSTRAINT environment_c1 UNIQUE (uniquename);


--
-- Name: environment_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY environment_cvterm
    ADD CONSTRAINT environment_cvterm_c1 UNIQUE (environment_id, cvterm_id);


--
-- Name: environment_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY environment_cvterm
    ADD CONSTRAINT environment_cvterm_pkey PRIMARY KEY (environment_cvterm_id);


--
-- Name: environment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY environment
    ADD CONSTRAINT environment_pkey PRIMARY KEY (environment_id);


--
-- Name: expression_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY expression
    ADD CONSTRAINT expression_c1 UNIQUE (uniquename);


--
-- Name: expression_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY expression_cvterm
    ADD CONSTRAINT expression_cvterm_c1 UNIQUE (expression_id, cvterm_id, cvterm_type_id);


--
-- Name: expression_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY expression_cvterm
    ADD CONSTRAINT expression_cvterm_pkey PRIMARY KEY (expression_cvterm_id);


--
-- Name: expression_cvtermprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY expression_cvtermprop
    ADD CONSTRAINT expression_cvtermprop_c1 UNIQUE (expression_cvterm_id, type_id, rank);


--
-- Name: expression_cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY expression_cvtermprop
    ADD CONSTRAINT expression_cvtermprop_pkey PRIMARY KEY (expression_cvtermprop_id);


--
-- Name: expression_image_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY expression_image
    ADD CONSTRAINT expression_image_c1 UNIQUE (expression_id, eimage_id);


--
-- Name: expression_image_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY expression_image
    ADD CONSTRAINT expression_image_pkey PRIMARY KEY (expression_image_id);


--
-- Name: expression_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY expression
    ADD CONSTRAINT expression_pkey PRIMARY KEY (expression_id);


--
-- Name: expression_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY expression_pub
    ADD CONSTRAINT expression_pub_c1 UNIQUE (expression_id, pub_id);


--
-- Name: expression_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY expression_pub
    ADD CONSTRAINT expression_pub_pkey PRIMARY KEY (expression_pub_id);


--
-- Name: expressionprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY expressionprop
    ADD CONSTRAINT expressionprop_c1 UNIQUE (expression_id, type_id, rank);


--
-- Name: expressionprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY expressionprop
    ADD CONSTRAINT expressionprop_pkey PRIMARY KEY (expressionprop_id);


--
-- Name: feature_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature
    ADD CONSTRAINT feature_c1 UNIQUE (organism_id, uniquename, type_id);


--
-- Name: feature_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_cvterm
    ADD CONSTRAINT feature_cvterm_c1 UNIQUE (feature_id, cvterm_id, pub_id, rank);


--
-- Name: feature_cvterm_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_c1 UNIQUE (feature_cvterm_id, dbxref_id);


--
-- Name: feature_cvterm_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_pkey PRIMARY KEY (feature_cvterm_dbxref_id);


--
-- Name: feature_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_cvterm
    ADD CONSTRAINT feature_cvterm_pkey PRIMARY KEY (feature_cvterm_id);


--
-- Name: feature_cvterm_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_c1 UNIQUE (feature_cvterm_id, pub_id);


--
-- Name: feature_cvterm_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_pkey PRIMARY KEY (feature_cvterm_pub_id);


--
-- Name: feature_cvtermprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_c1 UNIQUE (feature_cvterm_id, type_id, rank);


--
-- Name: feature_cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_pkey PRIMARY KEY (feature_cvtermprop_id);


--
-- Name: feature_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_dbxref
    ADD CONSTRAINT feature_dbxref_c1 UNIQUE (feature_id, dbxref_id);


--
-- Name: feature_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_dbxref
    ADD CONSTRAINT feature_dbxref_pkey PRIMARY KEY (feature_dbxref_id);


--
-- Name: feature_expression_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_expression
    ADD CONSTRAINT feature_expression_c1 UNIQUE (expression_id, feature_id, pub_id);


--
-- Name: feature_expression_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_expression
    ADD CONSTRAINT feature_expression_pkey PRIMARY KEY (feature_expression_id);


--
-- Name: feature_expressionprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_expressionprop
    ADD CONSTRAINT feature_expressionprop_c1 UNIQUE (feature_expression_id, type_id, rank);


--
-- Name: feature_expressionprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_expressionprop
    ADD CONSTRAINT feature_expressionprop_pkey PRIMARY KEY (feature_expressionprop_id);


--
-- Name: feature_genotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_c1 UNIQUE (feature_id, genotype_id, cvterm_id, chromosome_id, rank, cgroup);


--
-- Name: feature_genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_pkey PRIMARY KEY (feature_genotype_id);


--
-- Name: feature_phenotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_phenotype
    ADD CONSTRAINT feature_phenotype_c1 UNIQUE (feature_id, phenotype_id);


--
-- Name: feature_phenotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_phenotype
    ADD CONSTRAINT feature_phenotype_pkey PRIMARY KEY (feature_phenotype_id);


--
-- Name: feature_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature
    ADD CONSTRAINT feature_pkey PRIMARY KEY (feature_id);


--
-- Name: feature_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_pub
    ADD CONSTRAINT feature_pub_c1 UNIQUE (feature_id, pub_id);


--
-- Name: feature_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_pub
    ADD CONSTRAINT feature_pub_pkey PRIMARY KEY (feature_pub_id);


--
-- Name: feature_pubprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_pubprop
    ADD CONSTRAINT feature_pubprop_c1 UNIQUE (feature_pub_id, type_id, rank);


--
-- Name: feature_pubprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_pubprop
    ADD CONSTRAINT feature_pubprop_pkey PRIMARY KEY (feature_pubprop_id);


--
-- Name: feature_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_relationship
    ADD CONSTRAINT feature_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: feature_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_relationship
    ADD CONSTRAINT feature_relationship_pkey PRIMARY KEY (feature_relationship_id);


--
-- Name: feature_relationship_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_c1 UNIQUE (feature_relationship_id, pub_id);


--
-- Name: feature_relationship_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_pkey PRIMARY KEY (feature_relationship_pub_id);


--
-- Name: feature_relationshipprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_c1 UNIQUE (feature_relationship_id, type_id, rank);


--
-- Name: feature_relationshipprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_pkey PRIMARY KEY (feature_relationshipprop_id);


--
-- Name: feature_relationshipprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_c1 UNIQUE (feature_relationshipprop_id, pub_id);


--
-- Name: feature_relationshipprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_pkey PRIMARY KEY (feature_relationshipprop_pub_id);


--
-- Name: feature_synonym_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_synonym
    ADD CONSTRAINT feature_synonym_c1 UNIQUE (synonym_id, feature_id, pub_id);


--
-- Name: feature_synonym_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feature_synonym
    ADD CONSTRAINT feature_synonym_pkey PRIMARY KEY (feature_synonym_id);


--
-- Name: featureloc_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY featureloc
    ADD CONSTRAINT featureloc_c1 UNIQUE (feature_id, locgroup, rank);


--
-- Name: featureloc_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY featureloc
    ADD CONSTRAINT featureloc_pkey PRIMARY KEY (featureloc_id);


--
-- Name: featureloc_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY featureloc_pub
    ADD CONSTRAINT featureloc_pub_c1 UNIQUE (featureloc_id, pub_id);


--
-- Name: featureloc_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY featureloc_pub
    ADD CONSTRAINT featureloc_pub_pkey PRIMARY KEY (featureloc_pub_id);


--
-- Name: featuremap_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY featuremap
    ADD CONSTRAINT featuremap_c1 UNIQUE (name);


--
-- Name: featuremap_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY featuremap
    ADD CONSTRAINT featuremap_pkey PRIMARY KEY (featuremap_id);


--
-- Name: featuremap_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY featuremap_pub
    ADD CONSTRAINT featuremap_pub_pkey PRIMARY KEY (featuremap_pub_id);


--
-- Name: featurepos_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY featurepos
    ADD CONSTRAINT featurepos_pkey PRIMARY KEY (featurepos_id);


--
-- Name: featureprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY featureprop
    ADD CONSTRAINT featureprop_c1 UNIQUE (feature_id, type_id, rank);


--
-- Name: featureprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY featureprop
    ADD CONSTRAINT featureprop_pkey PRIMARY KEY (featureprop_id);


--
-- Name: featureprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY featureprop_pub
    ADD CONSTRAINT featureprop_pub_c1 UNIQUE (featureprop_id, pub_id);


--
-- Name: featureprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY featureprop_pub
    ADD CONSTRAINT featureprop_pub_pkey PRIMARY KEY (featureprop_pub_id);


--
-- Name: featurerange_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY featurerange
    ADD CONSTRAINT featurerange_pkey PRIMARY KEY (featurerange_id);


--
-- Name: genotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY genotype
    ADD CONSTRAINT genotype_c1 UNIQUE (uniquename);


--
-- Name: genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY genotype
    ADD CONSTRAINT genotype_pkey PRIMARY KEY (genotype_id);


--
-- Name: genotypeprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY genotypeprop
    ADD CONSTRAINT genotypeprop_c1 UNIQUE (genotype_id, type_id, rank);


--
-- Name: genotypeprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY genotypeprop
    ADD CONSTRAINT genotypeprop_pkey PRIMARY KEY (genotypeprop_id);


--
-- Name: library_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_c1 UNIQUE (organism_id, uniquename, type_id);


--
-- Name: library_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY library_cvterm
    ADD CONSTRAINT library_cvterm_c1 UNIQUE (library_id, cvterm_id, pub_id);


--
-- Name: library_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY library_cvterm
    ADD CONSTRAINT library_cvterm_pkey PRIMARY KEY (library_cvterm_id);


--
-- Name: library_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY library_dbxref
    ADD CONSTRAINT library_dbxref_c1 UNIQUE (library_id, dbxref_id);


--
-- Name: library_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY library_dbxref
    ADD CONSTRAINT library_dbxref_pkey PRIMARY KEY (library_dbxref_id);


--
-- Name: library_feature_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY library_feature
    ADD CONSTRAINT library_feature_c1 UNIQUE (library_id, feature_id);


--
-- Name: library_feature_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY library_feature
    ADD CONSTRAINT library_feature_pkey PRIMARY KEY (library_feature_id);


--
-- Name: library_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_pkey PRIMARY KEY (library_id);


--
-- Name: library_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY library_pub
    ADD CONSTRAINT library_pub_c1 UNIQUE (library_id, pub_id);


--
-- Name: library_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY library_pub
    ADD CONSTRAINT library_pub_pkey PRIMARY KEY (library_pub_id);


--
-- Name: library_synonym_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY library_synonym
    ADD CONSTRAINT library_synonym_c1 UNIQUE (synonym_id, library_id, pub_id);


--
-- Name: library_synonym_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY library_synonym
    ADD CONSTRAINT library_synonym_pkey PRIMARY KEY (library_synonym_id);


--
-- Name: libraryprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY libraryprop
    ADD CONSTRAINT libraryprop_c1 UNIQUE (library_id, type_id, rank);


--
-- Name: libraryprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY libraryprop
    ADD CONSTRAINT libraryprop_pkey PRIMARY KEY (libraryprop_id);


--
-- Name: libraryprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY libraryprop_pub
    ADD CONSTRAINT libraryprop_pub_c1 UNIQUE (libraryprop_id, pub_id);


--
-- Name: libraryprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY libraryprop_pub
    ADD CONSTRAINT libraryprop_pub_pkey PRIMARY KEY (libraryprop_pub_id);


--
-- Name: magedocumentation_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY magedocumentation
    ADD CONSTRAINT magedocumentation_pkey PRIMARY KEY (magedocumentation_id);


--
-- Name: mageml_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mageml
    ADD CONSTRAINT mageml_pkey PRIMARY KEY (mageml_id);


--
-- Name: materialized_view_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY materialized_view
    ADD CONSTRAINT materialized_view_name_key UNIQUE (name);


--
-- Name: nd_experiment_contact_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experiment_contact
    ADD CONSTRAINT nd_experiment_contact_pkey PRIMARY KEY (nd_experiment_contact_id);


--
-- Name: nd_experiment_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experiment_dbxref
    ADD CONSTRAINT nd_experiment_dbxref_pkey PRIMARY KEY (nd_experiment_dbxref_id);


--
-- Name: nd_experiment_genotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_c1 UNIQUE (nd_experiment_id, genotype_id);


--
-- Name: nd_experiment_genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_pkey PRIMARY KEY (nd_experiment_genotype_id);


--
-- Name: nd_experiment_phenotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_c1 UNIQUE (nd_experiment_id, phenotype_id);


--
-- Name: nd_experiment_phenotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_pkey PRIMARY KEY (nd_experiment_phenotype_id);


--
-- Name: nd_experiment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experiment
    ADD CONSTRAINT nd_experiment_pkey PRIMARY KEY (nd_experiment_id);


--
-- Name: nd_experiment_project_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experiment_project
    ADD CONSTRAINT nd_experiment_project_pkey PRIMARY KEY (nd_experiment_project_id);


--
-- Name: nd_experiment_protocol_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experiment_protocol
    ADD CONSTRAINT nd_experiment_protocol_pkey PRIMARY KEY (nd_experiment_protocol_id);


--
-- Name: nd_experiment_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_c1 UNIQUE (nd_experiment_id, pub_id);


--
-- Name: nd_experiment_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_pkey PRIMARY KEY (nd_experiment_pub_id);


--
-- Name: nd_experiment_stock_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experiment_stock_dbxref
    ADD CONSTRAINT nd_experiment_stock_dbxref_pkey PRIMARY KEY (nd_experiment_stock_dbxref_id);


--
-- Name: nd_experiment_stock_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_pkey PRIMARY KEY (nd_experiment_stock_id);


--
-- Name: nd_experiment_stockprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_c1 UNIQUE (nd_experiment_stock_id, type_id, rank);


--
-- Name: nd_experiment_stockprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_pkey PRIMARY KEY (nd_experiment_stockprop_id);


--
-- Name: nd_experimentprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_c1 UNIQUE (nd_experiment_id, type_id, rank);


--
-- Name: nd_experimentprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_pkey PRIMARY KEY (nd_experimentprop_id);


--
-- Name: nd_geolocation_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_geolocation
    ADD CONSTRAINT nd_geolocation_pkey PRIMARY KEY (nd_geolocation_id);


--
-- Name: nd_geolocationprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_c1 UNIQUE (nd_geolocation_id, type_id, rank);


--
-- Name: nd_geolocationprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_pkey PRIMARY KEY (nd_geolocationprop_id);


--
-- Name: nd_protocol_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_protocol
    ADD CONSTRAINT nd_protocol_name_key UNIQUE (name);


--
-- Name: nd_protocol_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_protocol
    ADD CONSTRAINT nd_protocol_pkey PRIMARY KEY (nd_protocol_id);


--
-- Name: nd_protocol_reagent_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_pkey PRIMARY KEY (nd_protocol_reagent_id);


--
-- Name: nd_protocolprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_c1 UNIQUE (nd_protocol_id, type_id, rank);


--
-- Name: nd_protocolprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_pkey PRIMARY KEY (nd_protocolprop_id);


--
-- Name: nd_reagent_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_reagent
    ADD CONSTRAINT nd_reagent_pkey PRIMARY KEY (nd_reagent_id);


--
-- Name: nd_reagent_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_pkey PRIMARY KEY (nd_reagent_relationship_id);


--
-- Name: nd_reagentprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_c1 UNIQUE (nd_reagent_id, type_id, rank);


--
-- Name: nd_reagentprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_pkey PRIMARY KEY (nd_reagentprop_id);


--
-- Name: organism_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_c1 UNIQUE (genus, species);


--
-- Name: organism_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY organism_dbxref
    ADD CONSTRAINT organism_dbxref_c1 UNIQUE (organism_id, dbxref_id);


--
-- Name: organism_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY organism_dbxref
    ADD CONSTRAINT organism_dbxref_pkey PRIMARY KEY (organism_dbxref_id);


--
-- Name: organism_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_pkey PRIMARY KEY (organism_id);


--
-- Name: organismprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY organismprop
    ADD CONSTRAINT organismprop_c1 UNIQUE (organism_id, type_id, rank);


--
-- Name: organismprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY organismprop
    ADD CONSTRAINT organismprop_pkey PRIMARY KEY (organismprop_id);


--
-- Name: phendesc_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_c1 UNIQUE (genotype_id, environment_id, type_id, pub_id);


--
-- Name: phendesc_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_pkey PRIMARY KEY (phendesc_id);


--
-- Name: phenotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_c1 UNIQUE (uniquename);


--
-- Name: phenotype_comparison_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_c1 UNIQUE (genotype1_id, environment1_id, genotype2_id, environment2_id, phenotype1_id, pub_id);


--
-- Name: phenotype_comparison_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_c1 UNIQUE (phenotype_comparison_id, cvterm_id);


--
-- Name: phenotype_comparison_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_pkey PRIMARY KEY (phenotype_comparison_cvterm_id);


--
-- Name: phenotype_comparison_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_pkey PRIMARY KEY (phenotype_comparison_id);


--
-- Name: phenotype_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_c1 UNIQUE (phenotype_id, cvterm_id, rank);


--
-- Name: phenotype_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_pkey PRIMARY KEY (phenotype_cvterm_id);


--
-- Name: phenotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_pkey PRIMARY KEY (phenotype_id);


--
-- Name: phenstatement_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_c1 UNIQUE (genotype_id, phenotype_id, environment_id, type_id, pub_id);


--
-- Name: phenstatement_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_pkey PRIMARY KEY (phenstatement_id);


--
-- Name: phylonode_dbxref_phylonode_id_dbxref_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_phylonode_id_dbxref_id_key UNIQUE (phylonode_id, dbxref_id);


--
-- Name: phylonode_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_pkey PRIMARY KEY (phylonode_dbxref_id);


--
-- Name: phylonode_organism_phylonode_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylonode_organism
    ADD CONSTRAINT phylonode_organism_phylonode_id_key UNIQUE (phylonode_id);


--
-- Name: phylonode_organism_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylonode_organism
    ADD CONSTRAINT phylonode_organism_pkey PRIMARY KEY (phylonode_organism_id);


--
-- Name: phylonode_phylotree_id_left_idx_key; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylonode
    ADD CONSTRAINT phylonode_phylotree_id_left_idx_key UNIQUE (phylotree_id, left_idx);


--
-- Name: phylonode_phylotree_id_right_idx_key; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylonode
    ADD CONSTRAINT phylonode_phylotree_id_right_idx_key UNIQUE (phylotree_id, right_idx);


--
-- Name: phylonode_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylonode
    ADD CONSTRAINT phylonode_pkey PRIMARY KEY (phylonode_id);


--
-- Name: phylonode_pub_phylonode_id_pub_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylonode_pub
    ADD CONSTRAINT phylonode_pub_phylonode_id_pub_id_key UNIQUE (phylonode_id, pub_id);


--
-- Name: phylonode_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylonode_pub
    ADD CONSTRAINT phylonode_pub_pkey PRIMARY KEY (phylonode_pub_id);


--
-- Name: phylonode_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_pkey PRIMARY KEY (phylonode_relationship_id);


--
-- Name: phylonode_relationship_subject_id_object_id_type_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_subject_id_object_id_type_id_key UNIQUE (subject_id, object_id, type_id);


--
-- Name: phylonodeprop_phylonode_id_type_id_value_rank_key; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylonodeprop
    ADD CONSTRAINT phylonodeprop_phylonode_id_type_id_value_rank_key UNIQUE (phylonode_id, type_id, value, rank);


--
-- Name: phylonodeprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylonodeprop
    ADD CONSTRAINT phylonodeprop_pkey PRIMARY KEY (phylonodeprop_id);


--
-- Name: phylotree_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylotree
    ADD CONSTRAINT phylotree_pkey PRIMARY KEY (phylotree_id);


--
-- Name: phylotree_pub_phylotree_id_pub_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylotree_pub
    ADD CONSTRAINT phylotree_pub_phylotree_id_pub_id_key UNIQUE (phylotree_id, pub_id);


--
-- Name: phylotree_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phylotree_pub
    ADD CONSTRAINT phylotree_pub_pkey PRIMARY KEY (phylotree_pub_id);


--
-- Name: project_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY project
    ADD CONSTRAINT project_c1 UNIQUE (name);


--
-- Name: project_contact_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY project_contact
    ADD CONSTRAINT project_contact_c1 UNIQUE (project_id, contact_id);


--
-- Name: project_contact_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY project_contact
    ADD CONSTRAINT project_contact_pkey PRIMARY KEY (project_contact_id);


--
-- Name: project_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY project
    ADD CONSTRAINT project_pkey PRIMARY KEY (project_id);


--
-- Name: project_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY project_pub
    ADD CONSTRAINT project_pub_c1 UNIQUE (project_id, pub_id);


--
-- Name: project_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY project_pub
    ADD CONSTRAINT project_pub_pkey PRIMARY KEY (project_pub_id);


--
-- Name: project_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY project_relationship
    ADD CONSTRAINT project_relationship_c1 UNIQUE (subject_project_id, object_project_id, type_id);


--
-- Name: project_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY project_relationship
    ADD CONSTRAINT project_relationship_pkey PRIMARY KEY (project_relationship_id);


--
-- Name: projectprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY projectprop
    ADD CONSTRAINT projectprop_c1 UNIQUE (project_id, type_id, rank);


--
-- Name: projectprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY projectprop
    ADD CONSTRAINT projectprop_pkey PRIMARY KEY (projectprop_id);


--
-- Name: protocol_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY protocol
    ADD CONSTRAINT protocol_c1 UNIQUE (name);


--
-- Name: protocol_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY protocol
    ADD CONSTRAINT protocol_pkey PRIMARY KEY (protocol_id);


--
-- Name: protocolparam_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY protocolparam
    ADD CONSTRAINT protocolparam_pkey PRIMARY KEY (protocolparam_id);


--
-- Name: pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pub
    ADD CONSTRAINT pub_c1 UNIQUE (uniquename);


--
-- Name: pub_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pub_dbxref
    ADD CONSTRAINT pub_dbxref_c1 UNIQUE (pub_id, dbxref_id);


--
-- Name: pub_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pub_dbxref
    ADD CONSTRAINT pub_dbxref_pkey PRIMARY KEY (pub_dbxref_id);


--
-- Name: pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pub
    ADD CONSTRAINT pub_pkey PRIMARY KEY (pub_id);


--
-- Name: pub_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pub_relationship
    ADD CONSTRAINT pub_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: pub_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pub_relationship
    ADD CONSTRAINT pub_relationship_pkey PRIMARY KEY (pub_relationship_id);


--
-- Name: pubauthor_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pubauthor
    ADD CONSTRAINT pubauthor_c1 UNIQUE (pub_id, rank);


--
-- Name: pubauthor_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pubauthor
    ADD CONSTRAINT pubauthor_pkey PRIMARY KEY (pubauthor_id);


--
-- Name: pubprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pubprop
    ADD CONSTRAINT pubprop_c1 UNIQUE (pub_id, type_id, rank);


--
-- Name: pubprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pubprop
    ADD CONSTRAINT pubprop_pkey PRIMARY KEY (pubprop_id);


--
-- Name: quantification_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY quantification
    ADD CONSTRAINT quantification_c1 UNIQUE (name, analysis_id);


--
-- Name: quantification_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY quantification
    ADD CONSTRAINT quantification_pkey PRIMARY KEY (quantification_id);


--
-- Name: quantification_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY quantification_relationship
    ADD CONSTRAINT quantification_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: quantification_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY quantification_relationship
    ADD CONSTRAINT quantification_relationship_pkey PRIMARY KEY (quantification_relationship_id);


--
-- Name: quantificationprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY quantificationprop
    ADD CONSTRAINT quantificationprop_c1 UNIQUE (quantification_id, type_id, rank);


--
-- Name: quantificationprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY quantificationprop
    ADD CONSTRAINT quantificationprop_pkey PRIMARY KEY (quantificationprop_id);


--
-- Name: stock_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock
    ADD CONSTRAINT stock_c1 UNIQUE (organism_id, uniquename, type_id);


--
-- Name: stock_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_cvterm
    ADD CONSTRAINT stock_cvterm_c1 UNIQUE (stock_id, cvterm_id, pub_id, rank);


--
-- Name: stock_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_cvterm
    ADD CONSTRAINT stock_cvterm_pkey PRIMARY KEY (stock_cvterm_id);


--
-- Name: stock_cvtermprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_c1 UNIQUE (stock_cvterm_id, type_id, rank);


--
-- Name: stock_cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_pkey PRIMARY KEY (stock_cvtermprop_id);


--
-- Name: stock_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_dbxref
    ADD CONSTRAINT stock_dbxref_c1 UNIQUE (stock_id, dbxref_id);


--
-- Name: stock_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_dbxref
    ADD CONSTRAINT stock_dbxref_pkey PRIMARY KEY (stock_dbxref_id);


--
-- Name: stock_dbxrefprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_c1 UNIQUE (stock_dbxref_id, type_id, rank);


--
-- Name: stock_dbxrefprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_pkey PRIMARY KEY (stock_dbxrefprop_id);


--
-- Name: stock_genotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_genotype
    ADD CONSTRAINT stock_genotype_c1 UNIQUE (stock_id, genotype_id);


--
-- Name: stock_genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_genotype
    ADD CONSTRAINT stock_genotype_pkey PRIMARY KEY (stock_genotype_id);


--
-- Name: stock_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock
    ADD CONSTRAINT stock_pkey PRIMARY KEY (stock_id);


--
-- Name: stock_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_pub
    ADD CONSTRAINT stock_pub_c1 UNIQUE (stock_id, pub_id);


--
-- Name: stock_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_pub
    ADD CONSTRAINT stock_pub_pkey PRIMARY KEY (stock_pub_id);


--
-- Name: stock_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_relationship
    ADD CONSTRAINT stock_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: stock_relationship_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_pkey PRIMARY KEY (stock_relationship_cvterm_id);


--
-- Name: stock_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_relationship
    ADD CONSTRAINT stock_relationship_pkey PRIMARY KEY (stock_relationship_id);


--
-- Name: stock_relationship_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_c1 UNIQUE (stock_relationship_id, pub_id);


--
-- Name: stock_relationship_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_pkey PRIMARY KEY (stock_relationship_pub_id);


--
-- Name: stockcollection_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stockcollection
    ADD CONSTRAINT stockcollection_c1 UNIQUE (uniquename, type_id);


--
-- Name: stockcollection_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stockcollection
    ADD CONSTRAINT stockcollection_pkey PRIMARY KEY (stockcollection_id);


--
-- Name: stockcollection_stock_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_c1 UNIQUE (stockcollection_id, stock_id);


--
-- Name: stockcollection_stock_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_pkey PRIMARY KEY (stockcollection_stock_id);


--
-- Name: stockcollectionprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_c1 UNIQUE (stockcollection_id, type_id, rank);


--
-- Name: stockcollectionprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_pkey PRIMARY KEY (stockcollectionprop_id);


--
-- Name: stockprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stockprop
    ADD CONSTRAINT stockprop_c1 UNIQUE (stock_id, type_id, rank);


--
-- Name: stockprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stockprop
    ADD CONSTRAINT stockprop_pkey PRIMARY KEY (stockprop_id);


--
-- Name: stockprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stockprop_pub
    ADD CONSTRAINT stockprop_pub_c1 UNIQUE (stockprop_id, pub_id);


--
-- Name: stockprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stockprop_pub
    ADD CONSTRAINT stockprop_pub_pkey PRIMARY KEY (stockprop_pub_id);


--
-- Name: study_assay_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY study_assay
    ADD CONSTRAINT study_assay_c1 UNIQUE (study_id, assay_id);


--
-- Name: study_assay_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY study_assay
    ADD CONSTRAINT study_assay_pkey PRIMARY KEY (study_assay_id);


--
-- Name: study_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY study
    ADD CONSTRAINT study_c1 UNIQUE (name);


--
-- Name: study_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY study
    ADD CONSTRAINT study_pkey PRIMARY KEY (study_id);


--
-- Name: studydesign_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY studydesign
    ADD CONSTRAINT studydesign_pkey PRIMARY KEY (studydesign_id);


--
-- Name: studydesignprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY studydesignprop
    ADD CONSTRAINT studydesignprop_c1 UNIQUE (studydesign_id, type_id, rank);


--
-- Name: studydesignprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY studydesignprop
    ADD CONSTRAINT studydesignprop_pkey PRIMARY KEY (studydesignprop_id);


--
-- Name: studyfactor_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY studyfactor
    ADD CONSTRAINT studyfactor_pkey PRIMARY KEY (studyfactor_id);


--
-- Name: studyfactorvalue_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY studyfactorvalue
    ADD CONSTRAINT studyfactorvalue_pkey PRIMARY KEY (studyfactorvalue_id);


--
-- Name: studyprop_feature_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY studyprop_feature
    ADD CONSTRAINT studyprop_feature_pkey PRIMARY KEY (studyprop_feature_id);


--
-- Name: studyprop_feature_studyprop_id_feature_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY studyprop_feature
    ADD CONSTRAINT studyprop_feature_studyprop_id_feature_id_key UNIQUE (studyprop_id, feature_id);


--
-- Name: studyprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY studyprop
    ADD CONSTRAINT studyprop_pkey PRIMARY KEY (studyprop_id);


--
-- Name: studyprop_study_id_type_id_rank_key; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY studyprop
    ADD CONSTRAINT studyprop_study_id_type_id_rank_key UNIQUE (study_id, type_id, rank);


--
-- Name: synonym_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY synonym
    ADD CONSTRAINT synonym_c1 UNIQUE (name, type_id);


--
-- Name: synonym_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY synonym
    ADD CONSTRAINT synonym_pkey PRIMARY KEY (synonym_id);


--
-- Name: tableinfo_c1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tableinfo
    ADD CONSTRAINT tableinfo_c1 UNIQUE (name);


--
-- Name: tableinfo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tableinfo
    ADD CONSTRAINT tableinfo_pkey PRIMARY KEY (tableinfo_id);


--
-- Name: treatment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY treatment
    ADD CONSTRAINT treatment_pkey PRIMARY KEY (treatment_id);


SET search_path = so, pg_catalog;

--
-- Name: sequence_cv_lookup_table_pkey; Type: CONSTRAINT; Schema: so; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sequence_cv_lookup_table
    ADD CONSTRAINT sequence_cv_lookup_table_pkey PRIMARY KEY (sequence_cv_lookup_table_id);


SET search_path = frange, pg_catalog;

--
-- Name: bingroup_boxrange; Type: INDEX; Schema: frange; Owner: postgres; Tablespace: 
--

CREATE INDEX bingroup_boxrange ON featuregroup USING gist (public.boxrange(fmin, fmax)) WHERE (is_root = 1);


--
-- Name: featuregroup_idx1; Type: INDEX; Schema: frange; Owner: postgres; Tablespace: 
--

CREATE INDEX featuregroup_idx1 ON featuregroup USING btree (subject_id);


--
-- Name: featuregroup_idx2; Type: INDEX; Schema: frange; Owner: postgres; Tablespace: 
--

CREATE INDEX featuregroup_idx2 ON featuregroup USING btree (object_id);


--
-- Name: featuregroup_idx3; Type: INDEX; Schema: frange; Owner: postgres; Tablespace: 
--

CREATE INDEX featuregroup_idx3 ON featuregroup USING btree (group_id);


--
-- Name: featuregroup_idx4; Type: INDEX; Schema: frange; Owner: postgres; Tablespace: 
--

CREATE INDEX featuregroup_idx4 ON featuregroup USING btree (srcfeature_id);


--
-- Name: featuregroup_idx5; Type: INDEX; Schema: frange; Owner: postgres; Tablespace: 
--

CREATE INDEX featuregroup_idx5 ON featuregroup USING btree (strand);


--
-- Name: featuregroup_idx6; Type: INDEX; Schema: frange; Owner: postgres; Tablespace: 
--

CREATE INDEX featuregroup_idx6 ON featuregroup USING btree (is_root);


SET search_path = genetic_code, pg_catalog;

--
-- Name: gencode_codon_aa_i1; Type: INDEX; Schema: genetic_code; Owner: postgres; Tablespace: 
--

CREATE INDEX gencode_codon_aa_i1 ON gencode_codon_aa USING btree (gencode_id, codon, aa);


SET search_path = public, pg_catalog;

--
-- Name: acquisition_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX acquisition_idx1 ON acquisition USING btree (assay_id);


--
-- Name: acquisition_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX acquisition_idx2 ON acquisition USING btree (protocol_id);


--
-- Name: acquisition_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX acquisition_idx3 ON acquisition USING btree (channel_id);


--
-- Name: acquisition_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX acquisition_relationship_idx1 ON acquisition_relationship USING btree (subject_id);


--
-- Name: acquisition_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX acquisition_relationship_idx2 ON acquisition_relationship USING btree (type_id);


--
-- Name: acquisition_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX acquisition_relationship_idx3 ON acquisition_relationship USING btree (object_id);


--
-- Name: acquisitionprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX acquisitionprop_idx1 ON acquisitionprop USING btree (acquisition_id);


--
-- Name: acquisitionprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX acquisitionprop_idx2 ON acquisitionprop USING btree (type_id);


--
-- Name: analysisfeature_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX analysisfeature_idx1 ON analysisfeature USING btree (feature_id);


--
-- Name: analysisfeature_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX analysisfeature_idx2 ON analysisfeature USING btree (analysis_id);


--
-- Name: analysisprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX analysisprop_idx1 ON analysisprop USING btree (analysis_id);


--
-- Name: analysisprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX analysisprop_idx2 ON analysisprop USING btree (type_id);


--
-- Name: arraydesign_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX arraydesign_idx1 ON arraydesign USING btree (manufacturer_id);


--
-- Name: arraydesign_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX arraydesign_idx2 ON arraydesign USING btree (platformtype_id);


--
-- Name: arraydesign_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX arraydesign_idx3 ON arraydesign USING btree (substratetype_id);


--
-- Name: arraydesign_idx4; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX arraydesign_idx4 ON arraydesign USING btree (protocol_id);


--
-- Name: arraydesign_idx5; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX arraydesign_idx5 ON arraydesign USING btree (dbxref_id);


--
-- Name: arraydesignprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX arraydesignprop_idx1 ON arraydesignprop USING btree (arraydesign_id);


--
-- Name: arraydesignprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX arraydesignprop_idx2 ON arraydesignprop USING btree (type_id);


--
-- Name: assay_biomaterial_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX assay_biomaterial_idx1 ON assay_biomaterial USING btree (assay_id);


--
-- Name: assay_biomaterial_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX assay_biomaterial_idx2 ON assay_biomaterial USING btree (biomaterial_id);


--
-- Name: assay_biomaterial_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX assay_biomaterial_idx3 ON assay_biomaterial USING btree (channel_id);


--
-- Name: assay_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX assay_idx1 ON assay USING btree (arraydesign_id);


--
-- Name: assay_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX assay_idx2 ON assay USING btree (protocol_id);


--
-- Name: assay_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX assay_idx3 ON assay USING btree (operator_id);


--
-- Name: assay_idx4; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX assay_idx4 ON assay USING btree (dbxref_id);


--
-- Name: assay_project_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX assay_project_idx1 ON assay_project USING btree (assay_id);


--
-- Name: assay_project_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX assay_project_idx2 ON assay_project USING btree (project_id);


--
-- Name: assayprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX assayprop_idx1 ON assayprop USING btree (assay_id);


--
-- Name: assayprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX assayprop_idx2 ON assayprop USING btree (type_id);


--
-- Name: binloc_boxrange; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX binloc_boxrange ON featureloc USING gist (boxrange(fmin, fmax));


--
-- Name: binloc_boxrange_src; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX binloc_boxrange_src ON featureloc USING gist (boxrange(srcfeature_id, fmin, fmax));


--
-- Name: biomaterial_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX biomaterial_dbxref_idx1 ON biomaterial_dbxref USING btree (biomaterial_id);


--
-- Name: biomaterial_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX biomaterial_dbxref_idx2 ON biomaterial_dbxref USING btree (dbxref_id);


--
-- Name: biomaterial_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX biomaterial_idx1 ON biomaterial USING btree (taxon_id);


--
-- Name: biomaterial_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX biomaterial_idx2 ON biomaterial USING btree (biosourceprovider_id);


--
-- Name: biomaterial_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX biomaterial_idx3 ON biomaterial USING btree (dbxref_id);


--
-- Name: biomaterial_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX biomaterial_relationship_idx1 ON biomaterial_relationship USING btree (subject_id);


--
-- Name: biomaterial_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX biomaterial_relationship_idx2 ON biomaterial_relationship USING btree (object_id);


--
-- Name: biomaterial_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX biomaterial_relationship_idx3 ON biomaterial_relationship USING btree (type_id);


--
-- Name: biomaterial_treatment_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX biomaterial_treatment_idx1 ON biomaterial_treatment USING btree (biomaterial_id);


--
-- Name: biomaterial_treatment_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX biomaterial_treatment_idx2 ON biomaterial_treatment USING btree (treatment_id);


--
-- Name: biomaterial_treatment_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX biomaterial_treatment_idx3 ON biomaterial_treatment USING btree (unittype_id);


--
-- Name: biomaterialprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX biomaterialprop_idx1 ON biomaterialprop USING btree (biomaterial_id);


--
-- Name: biomaterialprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX biomaterialprop_idx2 ON biomaterialprop USING btree (type_id);


--
-- Name: contact_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX contact_relationship_idx1 ON contact_relationship USING btree (type_id);


--
-- Name: contact_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX contact_relationship_idx2 ON contact_relationship USING btree (subject_id);


--
-- Name: contact_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX contact_relationship_idx3 ON contact_relationship USING btree (object_id);


--
-- Name: control_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX control_idx1 ON control USING btree (type_id);


--
-- Name: control_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX control_idx2 ON control USING btree (assay_id);


--
-- Name: control_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX control_idx3 ON control USING btree (tableinfo_id);


--
-- Name: control_idx4; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX control_idx4 ON control USING btree (row_id);


--
-- Name: INDEX cvterm_c1; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX cvterm_c1 IS 'A name can mean different things in
different contexts; for example "chromosome" in SO and GO. A name
should be unique within an ontology or cv. A name may exist twice in a
cv, in both obsolete and non-obsolete forms - these will be for
different cvterms with different OBO identifiers; so GO documentation
for more details on obsoletion. Note that occasionally multiple
obsolete terms with the same name will exist in the same cv. If this
is a possibility for the ontology under consideration (e.g. GO) then the
ID should be appended to the name to ensure uniqueness.';


--
-- Name: INDEX cvterm_c2; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX cvterm_c2 IS 'The OBO identifier is globally unique.';


--
-- Name: cvterm_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cvterm_dbxref_idx1 ON cvterm_dbxref USING btree (cvterm_id);


--
-- Name: cvterm_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cvterm_dbxref_idx2 ON cvterm_dbxref USING btree (dbxref_id);


--
-- Name: cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cvterm_idx1 ON cvterm USING btree (cv_id);


--
-- Name: cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cvterm_idx2 ON cvterm USING btree (name);


--
-- Name: cvterm_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cvterm_idx3 ON cvterm USING btree (dbxref_id);


--
-- Name: cvterm_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cvterm_relationship_idx1 ON cvterm_relationship USING btree (type_id);


--
-- Name: cvterm_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cvterm_relationship_idx2 ON cvterm_relationship USING btree (subject_id);


--
-- Name: cvterm_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cvterm_relationship_idx3 ON cvterm_relationship USING btree (object_id);


--
-- Name: cvtermpath_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cvtermpath_idx1 ON cvtermpath USING btree (type_id);


--
-- Name: cvtermpath_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cvtermpath_idx2 ON cvtermpath USING btree (subject_id);


--
-- Name: cvtermpath_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cvtermpath_idx3 ON cvtermpath USING btree (object_id);


--
-- Name: cvtermpath_idx4; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cvtermpath_idx4 ON cvtermpath USING btree (cv_id);


--
-- Name: cvtermprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cvtermprop_idx1 ON cvtermprop USING btree (cvterm_id);


--
-- Name: cvtermprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cvtermprop_idx2 ON cvtermprop USING btree (type_id);


--
-- Name: cvtermsynonym_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cvtermsynonym_idx1 ON cvtermsynonym USING btree (cvterm_id);


--
-- Name: dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX dbxref_idx1 ON dbxref USING btree (db_id);


--
-- Name: dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX dbxref_idx2 ON dbxref USING btree (accession);


--
-- Name: dbxref_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX dbxref_idx3 ON dbxref USING btree (version);


--
-- Name: dbxrefprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX dbxrefprop_idx1 ON dbxrefprop USING btree (dbxref_id);


--
-- Name: dbxrefprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX dbxrefprop_idx2 ON dbxrefprop USING btree (type_id);


--
-- Name: element_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX element_idx1 ON element USING btree (feature_id);


--
-- Name: element_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX element_idx2 ON element USING btree (arraydesign_id);


--
-- Name: element_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX element_idx3 ON element USING btree (type_id);


--
-- Name: element_idx4; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX element_idx4 ON element USING btree (dbxref_id);


--
-- Name: element_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX element_relationship_idx1 ON element_relationship USING btree (subject_id);


--
-- Name: element_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX element_relationship_idx2 ON element_relationship USING btree (type_id);


--
-- Name: element_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX element_relationship_idx3 ON element_relationship USING btree (object_id);


--
-- Name: element_relationship_idx4; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX element_relationship_idx4 ON element_relationship USING btree (value);


--
-- Name: elementresult_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX elementresult_idx1 ON elementresult USING btree (element_id);


--
-- Name: elementresult_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX elementresult_idx2 ON elementresult USING btree (quantification_id);


--
-- Name: elementresult_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX elementresult_idx3 ON elementresult USING btree (signal);


--
-- Name: elementresult_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX elementresult_relationship_idx1 ON elementresult_relationship USING btree (subject_id);


--
-- Name: elementresult_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX elementresult_relationship_idx2 ON elementresult_relationship USING btree (type_id);


--
-- Name: elementresult_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX elementresult_relationship_idx3 ON elementresult_relationship USING btree (object_id);


--
-- Name: elementresult_relationship_idx4; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX elementresult_relationship_idx4 ON elementresult_relationship USING btree (value);


--
-- Name: environment_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX environment_cvterm_idx1 ON environment_cvterm USING btree (environment_id);


--
-- Name: environment_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX environment_cvterm_idx2 ON environment_cvterm USING btree (cvterm_id);


--
-- Name: environment_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX environment_idx1 ON environment USING btree (uniquename);


--
-- Name: expression_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX expression_cvterm_idx1 ON expression_cvterm USING btree (expression_id);


--
-- Name: expression_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX expression_cvterm_idx2 ON expression_cvterm USING btree (cvterm_id);


--
-- Name: expression_cvterm_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX expression_cvterm_idx3 ON expression_cvterm USING btree (cvterm_type_id);


--
-- Name: expression_cvtermprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX expression_cvtermprop_idx1 ON expression_cvtermprop USING btree (expression_cvterm_id);


--
-- Name: expression_cvtermprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX expression_cvtermprop_idx2 ON expression_cvtermprop USING btree (type_id);


--
-- Name: expression_image_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX expression_image_idx1 ON expression_image USING btree (expression_id);


--
-- Name: expression_image_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX expression_image_idx2 ON expression_image USING btree (eimage_id);


--
-- Name: expression_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX expression_pub_idx1 ON expression_pub USING btree (expression_id);


--
-- Name: expression_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX expression_pub_idx2 ON expression_pub USING btree (pub_id);


--
-- Name: expressionprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX expressionprop_idx1 ON expressionprop USING btree (expression_id);


--
-- Name: expressionprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX expressionprop_idx2 ON expressionprop USING btree (type_id);


--
-- Name: feature_cvterm_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_cvterm_dbxref_idx1 ON feature_cvterm_dbxref USING btree (feature_cvterm_id);


--
-- Name: feature_cvterm_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_cvterm_dbxref_idx2 ON feature_cvterm_dbxref USING btree (dbxref_id);


--
-- Name: feature_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_cvterm_idx1 ON feature_cvterm USING btree (feature_id);


--
-- Name: feature_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_cvterm_idx2 ON feature_cvterm USING btree (cvterm_id);


--
-- Name: feature_cvterm_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_cvterm_idx3 ON feature_cvterm USING btree (pub_id);


--
-- Name: feature_cvterm_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_cvterm_pub_idx1 ON feature_cvterm_pub USING btree (feature_cvterm_id);


--
-- Name: feature_cvterm_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_cvterm_pub_idx2 ON feature_cvterm_pub USING btree (pub_id);


--
-- Name: feature_cvtermprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_cvtermprop_idx1 ON feature_cvtermprop USING btree (feature_cvterm_id);


--
-- Name: feature_cvtermprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_cvtermprop_idx2 ON feature_cvtermprop USING btree (type_id);


--
-- Name: feature_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_dbxref_idx1 ON feature_dbxref USING btree (feature_id);


--
-- Name: feature_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_dbxref_idx2 ON feature_dbxref USING btree (dbxref_id);


--
-- Name: feature_expression_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_expression_idx1 ON feature_expression USING btree (expression_id);


--
-- Name: feature_expression_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_expression_idx2 ON feature_expression USING btree (feature_id);


--
-- Name: feature_expression_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_expression_idx3 ON feature_expression USING btree (pub_id);


--
-- Name: feature_expressionprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_expressionprop_idx1 ON feature_expressionprop USING btree (feature_expression_id);


--
-- Name: feature_expressionprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_expressionprop_idx2 ON feature_expressionprop USING btree (type_id);


--
-- Name: feature_genotype_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_genotype_idx1 ON feature_genotype USING btree (feature_id);


--
-- Name: feature_genotype_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_genotype_idx2 ON feature_genotype USING btree (genotype_id);


--
-- Name: feature_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_idx1 ON feature USING btree (dbxref_id);


--
-- Name: feature_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_idx2 ON feature USING btree (organism_id);


--
-- Name: feature_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_idx3 ON feature USING btree (type_id);


--
-- Name: feature_idx4; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_idx4 ON feature USING btree (uniquename);


--
-- Name: feature_idx5; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_idx5 ON feature USING btree (lower((name)::text));


--
-- Name: feature_name_ind1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_name_ind1 ON feature USING btree (name);


--
-- Name: feature_phenotype_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_phenotype_idx1 ON feature_phenotype USING btree (feature_id);


--
-- Name: feature_phenotype_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_phenotype_idx2 ON feature_phenotype USING btree (phenotype_id);


--
-- Name: feature_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_pub_idx1 ON feature_pub USING btree (feature_id);


--
-- Name: feature_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_pub_idx2 ON feature_pub USING btree (pub_id);


--
-- Name: feature_pubprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_pubprop_idx1 ON feature_pubprop USING btree (feature_pub_id);


--
-- Name: feature_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_relationship_idx1 ON feature_relationship USING btree (subject_id);


--
-- Name: feature_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_relationship_idx2 ON feature_relationship USING btree (object_id);


--
-- Name: feature_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_relationship_idx3 ON feature_relationship USING btree (type_id);


--
-- Name: feature_relationship_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_relationship_pub_idx1 ON feature_relationship_pub USING btree (feature_relationship_id);


--
-- Name: feature_relationship_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_relationship_pub_idx2 ON feature_relationship_pub USING btree (pub_id);


--
-- Name: feature_relationshipprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_relationshipprop_idx1 ON feature_relationshipprop USING btree (feature_relationship_id);


--
-- Name: feature_relationshipprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_relationshipprop_idx2 ON feature_relationshipprop USING btree (type_id);


--
-- Name: feature_relationshipprop_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_relationshipprop_pub_idx1 ON feature_relationshipprop_pub USING btree (feature_relationshipprop_id);


--
-- Name: feature_relationshipprop_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_relationshipprop_pub_idx2 ON feature_relationshipprop_pub USING btree (pub_id);


--
-- Name: feature_synonym_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_synonym_idx1 ON feature_synonym USING btree (synonym_id);


--
-- Name: feature_synonym_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_synonym_idx2 ON feature_synonym USING btree (feature_id);


--
-- Name: feature_synonym_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX feature_synonym_idx3 ON feature_synonym USING btree (pub_id);


--
-- Name: featureloc_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featureloc_idx1 ON featureloc USING btree (feature_id);


--
-- Name: featureloc_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featureloc_idx2 ON featureloc USING btree (srcfeature_id);


--
-- Name: featureloc_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featureloc_idx3 ON featureloc USING btree (srcfeature_id, fmin, fmax);


--
-- Name: featureloc_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featureloc_pub_idx1 ON featureloc_pub USING btree (featureloc_id);


--
-- Name: featureloc_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featureloc_pub_idx2 ON featureloc_pub USING btree (pub_id);


--
-- Name: featuremap_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featuremap_pub_idx1 ON featuremap_pub USING btree (featuremap_id);


--
-- Name: featuremap_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featuremap_pub_idx2 ON featuremap_pub USING btree (pub_id);


--
-- Name: featurepos_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featurepos_idx1 ON featurepos USING btree (featuremap_id);


--
-- Name: featurepos_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featurepos_idx2 ON featurepos USING btree (feature_id);


--
-- Name: featurepos_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featurepos_idx3 ON featurepos USING btree (map_feature_id);


--
-- Name: INDEX featureprop_c1; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX featureprop_c1 IS 'For any one feature, multivalued
property-value pairs must be differentiated by rank.';


--
-- Name: featureprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featureprop_idx1 ON featureprop USING btree (feature_id);


--
-- Name: featureprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featureprop_idx2 ON featureprop USING btree (type_id);


--
-- Name: featureprop_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featureprop_pub_idx1 ON featureprop_pub USING btree (featureprop_id);


--
-- Name: featureprop_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featureprop_pub_idx2 ON featureprop_pub USING btree (pub_id);


--
-- Name: featurerange_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featurerange_idx1 ON featurerange USING btree (featuremap_id);


--
-- Name: featurerange_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featurerange_idx2 ON featurerange USING btree (feature_id);


--
-- Name: featurerange_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featurerange_idx3 ON featurerange USING btree (leftstartf_id);


--
-- Name: featurerange_idx4; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featurerange_idx4 ON featurerange USING btree (leftendf_id);


--
-- Name: featurerange_idx5; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featurerange_idx5 ON featurerange USING btree (rightstartf_id);


--
-- Name: featurerange_idx6; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX featurerange_idx6 ON featurerange USING btree (rightendf_id);


--
-- Name: genotype_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX genotype_idx1 ON genotype USING btree (uniquename);


--
-- Name: genotype_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX genotype_idx2 ON genotype USING btree (name);


--
-- Name: genotypeprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX genotypeprop_idx1 ON genotypeprop USING btree (genotype_id);


--
-- Name: genotypeprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX genotypeprop_idx2 ON genotypeprop USING btree (type_id);


--
-- Name: library_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_cvterm_idx1 ON library_cvterm USING btree (library_id);


--
-- Name: library_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_cvterm_idx2 ON library_cvterm USING btree (cvterm_id);


--
-- Name: library_cvterm_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_cvterm_idx3 ON library_cvterm USING btree (pub_id);


--
-- Name: library_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_dbxref_idx1 ON library_dbxref USING btree (library_id);


--
-- Name: library_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_dbxref_idx2 ON library_dbxref USING btree (dbxref_id);


--
-- Name: library_feature_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_feature_idx1 ON library_feature USING btree (library_id);


--
-- Name: library_feature_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_feature_idx2 ON library_feature USING btree (feature_id);


--
-- Name: library_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_idx1 ON library USING btree (organism_id);


--
-- Name: library_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_idx2 ON library USING btree (type_id);


--
-- Name: library_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_idx3 ON library USING btree (uniquename);


--
-- Name: library_name_ind1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_name_ind1 ON library USING btree (name);


--
-- Name: library_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_pub_idx1 ON library_pub USING btree (library_id);


--
-- Name: library_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_pub_idx2 ON library_pub USING btree (pub_id);


--
-- Name: library_synonym_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_synonym_idx1 ON library_synonym USING btree (synonym_id);


--
-- Name: library_synonym_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_synonym_idx2 ON library_synonym USING btree (library_id);


--
-- Name: library_synonym_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX library_synonym_idx3 ON library_synonym USING btree (pub_id);


--
-- Name: libraryprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX libraryprop_idx1 ON libraryprop USING btree (library_id);


--
-- Name: libraryprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX libraryprop_idx2 ON libraryprop USING btree (type_id);


--
-- Name: libraryprop_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX libraryprop_pub_idx1 ON libraryprop_pub USING btree (libraryprop_id);


--
-- Name: libraryprop_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX libraryprop_pub_idx2 ON libraryprop_pub USING btree (pub_id);


--
-- Name: magedocumentation_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX magedocumentation_idx1 ON magedocumentation USING btree (mageml_id);


--
-- Name: magedocumentation_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX magedocumentation_idx2 ON magedocumentation USING btree (tableinfo_id);


--
-- Name: magedocumentation_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX magedocumentation_idx3 ON magedocumentation USING btree (row_id);


--
-- Name: nd_experiment_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX nd_experiment_pub_idx1 ON nd_experiment_pub USING btree (nd_experiment_id);


--
-- Name: nd_experiment_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX nd_experiment_pub_idx2 ON nd_experiment_pub USING btree (pub_id);


--
-- Name: organism_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX organism_dbxref_idx1 ON organism_dbxref USING btree (organism_id);


--
-- Name: organism_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX organism_dbxref_idx2 ON organism_dbxref USING btree (dbxref_id);


--
-- Name: organismprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX organismprop_idx1 ON organismprop USING btree (organism_id);


--
-- Name: organismprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX organismprop_idx2 ON organismprop USING btree (type_id);


--
-- Name: phendesc_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phendesc_idx1 ON phendesc USING btree (genotype_id);


--
-- Name: phendesc_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phendesc_idx2 ON phendesc USING btree (environment_id);


--
-- Name: phendesc_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phendesc_idx3 ON phendesc USING btree (pub_id);


--
-- Name: phenotype_comparison_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phenotype_comparison_cvterm_idx1 ON phenotype_comparison_cvterm USING btree (phenotype_comparison_id);


--
-- Name: phenotype_comparison_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phenotype_comparison_cvterm_idx2 ON phenotype_comparison_cvterm USING btree (cvterm_id);


--
-- Name: phenotype_comparison_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phenotype_comparison_idx1 ON phenotype_comparison USING btree (genotype1_id);


--
-- Name: phenotype_comparison_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phenotype_comparison_idx2 ON phenotype_comparison USING btree (genotype2_id);


--
-- Name: phenotype_comparison_idx4; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phenotype_comparison_idx4 ON phenotype_comparison USING btree (pub_id);


--
-- Name: phenotype_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phenotype_cvterm_idx1 ON phenotype_cvterm USING btree (phenotype_id);


--
-- Name: phenotype_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phenotype_cvterm_idx2 ON phenotype_cvterm USING btree (cvterm_id);


--
-- Name: phenotype_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phenotype_idx1 ON phenotype USING btree (cvalue_id);


--
-- Name: phenotype_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phenotype_idx2 ON phenotype USING btree (observable_id);


--
-- Name: phenotype_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phenotype_idx3 ON phenotype USING btree (attr_id);


--
-- Name: phenstatement_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phenstatement_idx1 ON phenstatement USING btree (genotype_id);


--
-- Name: phenstatement_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phenstatement_idx2 ON phenstatement USING btree (phenotype_id);


--
-- Name: phylonode_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phylonode_dbxref_idx1 ON phylonode_dbxref USING btree (phylonode_id);


--
-- Name: phylonode_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phylonode_dbxref_idx2 ON phylonode_dbxref USING btree (dbxref_id);


--
-- Name: phylonode_organism_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phylonode_organism_idx1 ON phylonode_organism USING btree (phylonode_id);


--
-- Name: phylonode_organism_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phylonode_organism_idx2 ON phylonode_organism USING btree (organism_id);


--
-- Name: phylonode_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phylonode_pub_idx1 ON phylonode_pub USING btree (phylonode_id);


--
-- Name: phylonode_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phylonode_pub_idx2 ON phylonode_pub USING btree (pub_id);


--
-- Name: phylonode_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phylonode_relationship_idx1 ON phylonode_relationship USING btree (subject_id);


--
-- Name: phylonode_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phylonode_relationship_idx2 ON phylonode_relationship USING btree (object_id);


--
-- Name: phylonode_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phylonode_relationship_idx3 ON phylonode_relationship USING btree (type_id);


--
-- Name: phylonodeprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phylonodeprop_idx1 ON phylonodeprop USING btree (phylonode_id);


--
-- Name: phylonodeprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phylonodeprop_idx2 ON phylonodeprop USING btree (type_id);


--
-- Name: phylotree_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phylotree_idx1 ON phylotree USING btree (phylotree_id);


--
-- Name: phylotree_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phylotree_pub_idx1 ON phylotree_pub USING btree (phylotree_id);


--
-- Name: phylotree_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX phylotree_pub_idx2 ON phylotree_pub USING btree (pub_id);


--
-- Name: project_contact_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX project_contact_idx1 ON project_contact USING btree (project_id);


--
-- Name: project_contact_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX project_contact_idx2 ON project_contact USING btree (contact_id);


--
-- Name: project_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX project_pub_idx1 ON project_pub USING btree (project_id);


--
-- Name: project_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX project_pub_idx2 ON project_pub USING btree (pub_id);


--
-- Name: protocol_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX protocol_idx1 ON protocol USING btree (type_id);


--
-- Name: protocol_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX protocol_idx2 ON protocol USING btree (pub_id);


--
-- Name: protocol_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX protocol_idx3 ON protocol USING btree (dbxref_id);


--
-- Name: protocolparam_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX protocolparam_idx1 ON protocolparam USING btree (protocol_id);


--
-- Name: protocolparam_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX protocolparam_idx2 ON protocolparam USING btree (datatype_id);


--
-- Name: protocolparam_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX protocolparam_idx3 ON protocolparam USING btree (unittype_id);


--
-- Name: pub_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX pub_dbxref_idx1 ON pub_dbxref USING btree (pub_id);


--
-- Name: pub_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX pub_dbxref_idx2 ON pub_dbxref USING btree (dbxref_id);


--
-- Name: pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX pub_idx1 ON pub USING btree (type_id);


--
-- Name: pub_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX pub_relationship_idx1 ON pub_relationship USING btree (subject_id);


--
-- Name: pub_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX pub_relationship_idx2 ON pub_relationship USING btree (object_id);


--
-- Name: pub_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX pub_relationship_idx3 ON pub_relationship USING btree (type_id);


--
-- Name: pubauthor_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX pubauthor_idx2 ON pubauthor USING btree (pub_id);


--
-- Name: pubprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX pubprop_idx1 ON pubprop USING btree (pub_id);


--
-- Name: pubprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX pubprop_idx2 ON pubprop USING btree (type_id);


--
-- Name: quantification_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX quantification_idx1 ON quantification USING btree (acquisition_id);


--
-- Name: quantification_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX quantification_idx2 ON quantification USING btree (operator_id);


--
-- Name: quantification_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX quantification_idx3 ON quantification USING btree (protocol_id);


--
-- Name: quantification_idx4; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX quantification_idx4 ON quantification USING btree (analysis_id);


--
-- Name: quantification_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX quantification_relationship_idx1 ON quantification_relationship USING btree (subject_id);


--
-- Name: quantification_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX quantification_relationship_idx2 ON quantification_relationship USING btree (type_id);


--
-- Name: quantification_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX quantification_relationship_idx3 ON quantification_relationship USING btree (object_id);


--
-- Name: quantificationprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX quantificationprop_idx1 ON quantificationprop USING btree (quantification_id);


--
-- Name: quantificationprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX quantificationprop_idx2 ON quantificationprop USING btree (type_id);


--
-- Name: stock_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_cvterm_idx1 ON stock_cvterm USING btree (stock_id);


--
-- Name: stock_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_cvterm_idx2 ON stock_cvterm USING btree (cvterm_id);


--
-- Name: stock_cvterm_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_cvterm_idx3 ON stock_cvterm USING btree (pub_id);


--
-- Name: stock_cvtermprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_cvtermprop_idx1 ON stock_cvtermprop USING btree (stock_cvterm_id);


--
-- Name: stock_cvtermprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_cvtermprop_idx2 ON stock_cvtermprop USING btree (type_id);


--
-- Name: stock_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_dbxref_idx1 ON stock_dbxref USING btree (stock_id);


--
-- Name: stock_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_dbxref_idx2 ON stock_dbxref USING btree (dbxref_id);


--
-- Name: stock_dbxrefprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_dbxrefprop_idx1 ON stock_dbxrefprop USING btree (stock_dbxref_id);


--
-- Name: stock_dbxrefprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_dbxrefprop_idx2 ON stock_dbxrefprop USING btree (type_id);


--
-- Name: stock_genotype_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_genotype_idx1 ON stock_genotype USING btree (stock_id);


--
-- Name: stock_genotype_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_genotype_idx2 ON stock_genotype USING btree (genotype_id);


--
-- Name: stock_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_idx1 ON stock USING btree (dbxref_id);


--
-- Name: stock_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_idx2 ON stock USING btree (organism_id);


--
-- Name: stock_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_idx3 ON stock USING btree (type_id);


--
-- Name: stock_idx4; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_idx4 ON stock USING btree (uniquename);


--
-- Name: stock_name_ind1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_name_ind1 ON stock USING btree (name);


--
-- Name: stock_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_pub_idx1 ON stock_pub USING btree (stock_id);


--
-- Name: stock_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_pub_idx2 ON stock_pub USING btree (pub_id);


--
-- Name: stock_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_relationship_idx1 ON stock_relationship USING btree (subject_id);


--
-- Name: stock_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_relationship_idx2 ON stock_relationship USING btree (object_id);


--
-- Name: stock_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_relationship_idx3 ON stock_relationship USING btree (type_id);


--
-- Name: stock_relationship_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_relationship_pub_idx1 ON stock_relationship_pub USING btree (stock_relationship_id);


--
-- Name: stock_relationship_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stock_relationship_pub_idx2 ON stock_relationship_pub USING btree (pub_id);


--
-- Name: stockcollection_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stockcollection_idx1 ON stockcollection USING btree (contact_id);


--
-- Name: stockcollection_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stockcollection_idx2 ON stockcollection USING btree (type_id);


--
-- Name: stockcollection_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stockcollection_idx3 ON stockcollection USING btree (uniquename);


--
-- Name: stockcollection_name_ind1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stockcollection_name_ind1 ON stockcollection USING btree (name);


--
-- Name: stockcollection_stock_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stockcollection_stock_idx1 ON stockcollection_stock USING btree (stockcollection_id);


--
-- Name: stockcollection_stock_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stockcollection_stock_idx2 ON stockcollection_stock USING btree (stock_id);


--
-- Name: stockcollectionprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stockcollectionprop_idx1 ON stockcollectionprop USING btree (stockcollection_id);


--
-- Name: stockcollectionprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stockcollectionprop_idx2 ON stockcollectionprop USING btree (type_id);


--
-- Name: stockprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stockprop_idx1 ON stockprop USING btree (stock_id);


--
-- Name: stockprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stockprop_idx2 ON stockprop USING btree (type_id);


--
-- Name: stockprop_pub_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stockprop_pub_idx1 ON stockprop_pub USING btree (stockprop_id);


--
-- Name: stockprop_pub_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX stockprop_pub_idx2 ON stockprop_pub USING btree (pub_id);


--
-- Name: study_assay_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX study_assay_idx1 ON study_assay USING btree (study_id);


--
-- Name: study_assay_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX study_assay_idx2 ON study_assay USING btree (assay_id);


--
-- Name: study_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX study_idx1 ON study USING btree (contact_id);


--
-- Name: study_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX study_idx2 ON study USING btree (pub_id);


--
-- Name: study_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX study_idx3 ON study USING btree (dbxref_id);


--
-- Name: studydesign_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX studydesign_idx1 ON studydesign USING btree (study_id);


--
-- Name: studydesignprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX studydesignprop_idx1 ON studydesignprop USING btree (studydesign_id);


--
-- Name: studydesignprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX studydesignprop_idx2 ON studydesignprop USING btree (type_id);


--
-- Name: studyfactor_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX studyfactor_idx1 ON studyfactor USING btree (studydesign_id);


--
-- Name: studyfactor_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX studyfactor_idx2 ON studyfactor USING btree (type_id);


--
-- Name: studyfactorvalue_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX studyfactorvalue_idx1 ON studyfactorvalue USING btree (studyfactor_id);


--
-- Name: studyfactorvalue_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX studyfactorvalue_idx2 ON studyfactorvalue USING btree (assay_id);


--
-- Name: studyprop_feature_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX studyprop_feature_idx1 ON studyprop_feature USING btree (studyprop_id);


--
-- Name: studyprop_feature_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX studyprop_feature_idx2 ON studyprop_feature USING btree (feature_id);


--
-- Name: studyprop_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX studyprop_idx1 ON studyprop USING btree (study_id);


--
-- Name: studyprop_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX studyprop_idx2 ON studyprop USING btree (type_id);


--
-- Name: synonym_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX synonym_idx1 ON synonym USING btree (type_id);


--
-- Name: synonym_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX synonym_idx2 ON synonym USING btree (lower((synonym_sgml)::text));


--
-- Name: treatment_idx1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX treatment_idx1 ON treatment USING btree (biomaterial_id);


--
-- Name: treatment_idx2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX treatment_idx2 ON treatment USING btree (type_id);


--
-- Name: treatment_idx3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX treatment_idx3 ON treatment USING btree (protocol_id);


SET search_path = so, pg_catalog;

--
-- Name: sequence_cv_lookup_table_idx; Type: INDEX; Schema: so; Owner: postgres; Tablespace: 
--

CREATE INDEX sequence_cv_lookup_table_idx ON sequence_cv_lookup_table USING btree (original_cvterm_name);


SET search_path = frange, pg_catalog;

--
-- Name: featuregroup_group_id_fkey; Type: FK CONSTRAINT; Schema: frange; Owner: postgres
--

ALTER TABLE ONLY featuregroup
    ADD CONSTRAINT featuregroup_group_id_fkey FOREIGN KEY (group_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featuregroup_object_id_fkey; Type: FK CONSTRAINT; Schema: frange; Owner: postgres
--

ALTER TABLE ONLY featuregroup
    ADD CONSTRAINT featuregroup_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featuregroup_srcfeature_id_fkey; Type: FK CONSTRAINT; Schema: frange; Owner: postgres
--

ALTER TABLE ONLY featuregroup
    ADD CONSTRAINT featuregroup_srcfeature_id_fkey FOREIGN KEY (srcfeature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featuregroup_subject_id_fkey; Type: FK CONSTRAINT; Schema: frange; Owner: postgres
--

ALTER TABLE ONLY featuregroup
    ADD CONSTRAINT featuregroup_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


SET search_path = genetic_code, pg_catalog;

--
-- Name: gencode_codon_aa_gencode_id_fkey; Type: FK CONSTRAINT; Schema: genetic_code; Owner: postgres
--

ALTER TABLE ONLY gencode_codon_aa
    ADD CONSTRAINT gencode_codon_aa_gencode_id_fkey FOREIGN KEY (gencode_id) REFERENCES gencode(gencode_id);


--
-- Name: gencode_startcodon_gencode_id_fkey; Type: FK CONSTRAINT; Schema: genetic_code; Owner: postgres
--

ALTER TABLE ONLY gencode_startcodon
    ADD CONSTRAINT gencode_startcodon_gencode_id_fkey FOREIGN KEY (gencode_id) REFERENCES gencode(gencode_id);


SET search_path = public, pg_catalog;

--
-- Name: acquisition_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY acquisition
    ADD CONSTRAINT acquisition_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisition_channel_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY acquisition
    ADD CONSTRAINT acquisition_channel_id_fkey FOREIGN KEY (channel_id) REFERENCES channel(channel_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisition_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY acquisition
    ADD CONSTRAINT acquisition_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES protocol(protocol_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisition_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY acquisition_relationship
    ADD CONSTRAINT acquisition_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES acquisition(acquisition_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisition_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY acquisition_relationship
    ADD CONSTRAINT acquisition_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES acquisition(acquisition_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisition_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY acquisition_relationship
    ADD CONSTRAINT acquisition_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisitionprop_acquisition_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY acquisitionprop
    ADD CONSTRAINT acquisitionprop_acquisition_id_fkey FOREIGN KEY (acquisition_id) REFERENCES acquisition(acquisition_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisitionprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY acquisitionprop
    ADD CONSTRAINT acquisitionprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisfeature_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisfeature
    ADD CONSTRAINT analysisfeature_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisfeature_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisfeature
    ADD CONSTRAINT analysisfeature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisfeatureprop_analysisfeature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisfeatureprop
    ADD CONSTRAINT analysisfeatureprop_analysisfeature_id_fkey FOREIGN KEY (analysisfeature_id) REFERENCES analysisfeature(analysisfeature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisfeatureprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisfeatureprop
    ADD CONSTRAINT analysisfeatureprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisprop_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisprop
    ADD CONSTRAINT analysisprop_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisprop
    ADD CONSTRAINT analysisprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesign_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY arraydesign
    ADD CONSTRAINT arraydesign_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesign_manufacturer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY arraydesign
    ADD CONSTRAINT arraydesign_manufacturer_id_fkey FOREIGN KEY (manufacturer_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesign_platformtype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY arraydesign
    ADD CONSTRAINT arraydesign_platformtype_id_fkey FOREIGN KEY (platformtype_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesign_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY arraydesign
    ADD CONSTRAINT arraydesign_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES protocol(protocol_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesign_substratetype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY arraydesign
    ADD CONSTRAINT arraydesign_substratetype_id_fkey FOREIGN KEY (substratetype_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesignprop_arraydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY arraydesignprop
    ADD CONSTRAINT arraydesignprop_arraydesign_id_fkey FOREIGN KEY (arraydesign_id) REFERENCES arraydesign(arraydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesignprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY arraydesignprop
    ADD CONSTRAINT arraydesignprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_arraydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY assay
    ADD CONSTRAINT assay_arraydesign_id_fkey FOREIGN KEY (arraydesign_id) REFERENCES arraydesign(arraydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_biomaterial_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY assay_biomaterial
    ADD CONSTRAINT assay_biomaterial_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_biomaterial_biomaterial_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY assay_biomaterial
    ADD CONSTRAINT assay_biomaterial_biomaterial_id_fkey FOREIGN KEY (biomaterial_id) REFERENCES biomaterial(biomaterial_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_biomaterial_channel_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY assay_biomaterial
    ADD CONSTRAINT assay_biomaterial_channel_id_fkey FOREIGN KEY (channel_id) REFERENCES channel(channel_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY assay
    ADD CONSTRAINT assay_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_operator_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY assay
    ADD CONSTRAINT assay_operator_id_fkey FOREIGN KEY (operator_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_project_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY assay_project
    ADD CONSTRAINT assay_project_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES assay(assay_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_project_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY assay_project
    ADD CONSTRAINT assay_project_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY assay
    ADD CONSTRAINT assay_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES protocol(protocol_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assayprop_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY assayprop
    ADD CONSTRAINT assayprop_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assayprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY assayprop
    ADD CONSTRAINT assayprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_biosourceprovider_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterial
    ADD CONSTRAINT biomaterial_biosourceprovider_id_fkey FOREIGN KEY (biosourceprovider_id) REFERENCES contact(contact_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_dbxref_biomaterial_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterial_dbxref
    ADD CONSTRAINT biomaterial_dbxref_biomaterial_id_fkey FOREIGN KEY (biomaterial_id) REFERENCES biomaterial(biomaterial_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterial_dbxref
    ADD CONSTRAINT biomaterial_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterial
    ADD CONSTRAINT biomaterial_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterial_relationship
    ADD CONSTRAINT biomaterial_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES biomaterial(biomaterial_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterial_relationship
    ADD CONSTRAINT biomaterial_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES biomaterial(biomaterial_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterial_relationship
    ADD CONSTRAINT biomaterial_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_taxon_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterial
    ADD CONSTRAINT biomaterial_taxon_id_fkey FOREIGN KEY (taxon_id) REFERENCES organism(organism_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_treatment_biomaterial_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterial_treatment
    ADD CONSTRAINT biomaterial_treatment_biomaterial_id_fkey FOREIGN KEY (biomaterial_id) REFERENCES biomaterial(biomaterial_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_treatment_treatment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterial_treatment
    ADD CONSTRAINT biomaterial_treatment_treatment_id_fkey FOREIGN KEY (treatment_id) REFERENCES treatment(treatment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_treatment_unittype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterial_treatment
    ADD CONSTRAINT biomaterial_treatment_unittype_id_fkey FOREIGN KEY (unittype_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterialprop_biomaterial_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterialprop
    ADD CONSTRAINT biomaterialprop_biomaterial_id_fkey FOREIGN KEY (biomaterial_id) REFERENCES biomaterial(biomaterial_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterialprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY biomaterialprop
    ADD CONSTRAINT biomaterialprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_cvterm_cell_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_cvterm
    ADD CONSTRAINT cell_line_cvterm_cell_line_id_fkey FOREIGN KEY (cell_line_id) REFERENCES cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_cvterm
    ADD CONSTRAINT cell_line_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_cvterm
    ADD CONSTRAINT cell_line_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_cvtermprop_cell_line_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_cvtermprop
    ADD CONSTRAINT cell_line_cvtermprop_cell_line_cvterm_id_fkey FOREIGN KEY (cell_line_cvterm_id) REFERENCES cell_line_cvterm(cell_line_cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_cvtermprop
    ADD CONSTRAINT cell_line_cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_dbxref_cell_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_dbxref
    ADD CONSTRAINT cell_line_dbxref_cell_line_id_fkey FOREIGN KEY (cell_line_id) REFERENCES cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_dbxref
    ADD CONSTRAINT cell_line_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_feature_cell_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_feature
    ADD CONSTRAINT cell_line_feature_cell_line_id_fkey FOREIGN KEY (cell_line_id) REFERENCES cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_feature_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_feature
    ADD CONSTRAINT cell_line_feature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_feature_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_feature
    ADD CONSTRAINT cell_line_feature_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_library_cell_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_library
    ADD CONSTRAINT cell_line_library_cell_line_id_fkey FOREIGN KEY (cell_line_id) REFERENCES cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_library_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_library
    ADD CONSTRAINT cell_line_library_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_library_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_library
    ADD CONSTRAINT cell_line_library_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line
    ADD CONSTRAINT cell_line_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_pub_cell_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_pub
    ADD CONSTRAINT cell_line_pub_cell_line_id_fkey FOREIGN KEY (cell_line_id) REFERENCES cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_pub
    ADD CONSTRAINT cell_line_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_relationship
    ADD CONSTRAINT cell_line_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_relationship
    ADD CONSTRAINT cell_line_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_relationship
    ADD CONSTRAINT cell_line_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_synonym_cell_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_synonym
    ADD CONSTRAINT cell_line_synonym_cell_line_id_fkey FOREIGN KEY (cell_line_id) REFERENCES cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_synonym_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_synonym
    ADD CONSTRAINT cell_line_synonym_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_synonym_synonym_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_line_synonym
    ADD CONSTRAINT cell_line_synonym_synonym_id_fkey FOREIGN KEY (synonym_id) REFERENCES synonym(synonym_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_lineprop_cell_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_lineprop
    ADD CONSTRAINT cell_lineprop_cell_line_id_fkey FOREIGN KEY (cell_line_id) REFERENCES cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_lineprop_pub_cell_lineprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_lineprop_pub
    ADD CONSTRAINT cell_lineprop_pub_cell_lineprop_id_fkey FOREIGN KEY (cell_lineprop_id) REFERENCES cell_lineprop(cell_lineprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_lineprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_lineprop_pub
    ADD CONSTRAINT cell_lineprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_lineprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cell_lineprop
    ADD CONSTRAINT cell_lineprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: chadoprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY chadoprop
    ADD CONSTRAINT chadoprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact_relationship
    ADD CONSTRAINT contact_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact_relationship
    ADD CONSTRAINT contact_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact_relationship
    ADD CONSTRAINT contact_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact
    ADD CONSTRAINT contact_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id);


--
-- Name: control_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY control
    ADD CONSTRAINT control_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: control_tableinfo_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY control
    ADD CONSTRAINT control_tableinfo_id_fkey FOREIGN KEY (tableinfo_id) REFERENCES tableinfo(tableinfo_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: control_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY control
    ADD CONSTRAINT control_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvprop_cv_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvprop
    ADD CONSTRAINT cvprop_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES cv(cv_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvprop
    ADD CONSTRAINT cvprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_cv_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm
    ADD CONSTRAINT cvterm_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES cv(cv_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_dbxref_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm
    ADD CONSTRAINT cvterm_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath_cv_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES cv(cv_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_object_id_fkey FOREIGN KEY (object_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermprop_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermprop
    ADD CONSTRAINT cvtermprop_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermprop
    ADD CONSTRAINT cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: cvtermsynonym_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermsynonym_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbxref_db_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dbxref
    ADD CONSTRAINT dbxref_db_id_fkey FOREIGN KEY (db_id) REFERENCES db(db_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbxrefprop_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dbxrefprop
    ADD CONSTRAINT dbxrefprop_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbxrefprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dbxrefprop
    ADD CONSTRAINT dbxrefprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_arraydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY element
    ADD CONSTRAINT element_arraydesign_id_fkey FOREIGN KEY (arraydesign_id) REFERENCES arraydesign(arraydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY element
    ADD CONSTRAINT element_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY element
    ADD CONSTRAINT element_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY element_relationship
    ADD CONSTRAINT element_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES element(element_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY element_relationship
    ADD CONSTRAINT element_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES element(element_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY element_relationship
    ADD CONSTRAINT element_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY element
    ADD CONSTRAINT element_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: elementresult_element_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY elementresult
    ADD CONSTRAINT elementresult_element_id_fkey FOREIGN KEY (element_id) REFERENCES element(element_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: elementresult_quantification_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY elementresult
    ADD CONSTRAINT elementresult_quantification_id_fkey FOREIGN KEY (quantification_id) REFERENCES quantification(quantification_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: elementresult_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY elementresult_relationship
    ADD CONSTRAINT elementresult_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES elementresult(elementresult_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: elementresult_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY elementresult_relationship
    ADD CONSTRAINT elementresult_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES elementresult(elementresult_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: elementresult_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY elementresult_relationship
    ADD CONSTRAINT elementresult_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: environment_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY environment_cvterm
    ADD CONSTRAINT environment_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: environment_cvterm_environment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY environment_cvterm
    ADD CONSTRAINT environment_cvterm_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES environment(environment_id) ON DELETE CASCADE;


--
-- Name: expression_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expression_cvterm
    ADD CONSTRAINT expression_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_cvterm_cvterm_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expression_cvterm
    ADD CONSTRAINT expression_cvterm_cvterm_type_id_fkey FOREIGN KEY (cvterm_type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_cvterm_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expression_cvterm
    ADD CONSTRAINT expression_cvterm_expression_id_fkey FOREIGN KEY (expression_id) REFERENCES expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_cvtermprop_expression_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expression_cvtermprop
    ADD CONSTRAINT expression_cvtermprop_expression_cvterm_id_fkey FOREIGN KEY (expression_cvterm_id) REFERENCES expression_cvterm(expression_cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expression_cvtermprop
    ADD CONSTRAINT expression_cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_image_eimage_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expression_image
    ADD CONSTRAINT expression_image_eimage_id_fkey FOREIGN KEY (eimage_id) REFERENCES eimage(eimage_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_image_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expression_image
    ADD CONSTRAINT expression_image_expression_id_fkey FOREIGN KEY (expression_id) REFERENCES expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_pub_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expression_pub
    ADD CONSTRAINT expression_pub_expression_id_fkey FOREIGN KEY (expression_id) REFERENCES expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expression_pub
    ADD CONSTRAINT expression_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expressionprop_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expressionprop
    ADD CONSTRAINT expressionprop_expression_id_fkey FOREIGN KEY (expression_id) REFERENCES expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expressionprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expressionprop
    ADD CONSTRAINT expressionprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm
    ADD CONSTRAINT feature_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_dbxref_feature_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_feature_cvterm_id_fkey FOREIGN KEY (feature_cvterm_id) REFERENCES feature_cvterm(feature_cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_cvterm_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm
    ADD CONSTRAINT feature_cvterm_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_pub_feature_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_feature_cvterm_id_fkey FOREIGN KEY (feature_cvterm_id) REFERENCES feature_cvterm(feature_cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm
    ADD CONSTRAINT feature_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvtermprop_feature_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_feature_cvterm_id_fkey FOREIGN KEY (feature_cvterm_id) REFERENCES feature_cvterm(feature_cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_dbxref
    ADD CONSTRAINT feature_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_dbxref_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_dbxref
    ADD CONSTRAINT feature_dbxref_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature
    ADD CONSTRAINT feature_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_expression_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_expression
    ADD CONSTRAINT feature_expression_expression_id_fkey FOREIGN KEY (expression_id) REFERENCES expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_expression_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_expression
    ADD CONSTRAINT feature_expression_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_expression_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_expression
    ADD CONSTRAINT feature_expression_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_expressionprop_feature_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_expressionprop
    ADD CONSTRAINT feature_expressionprop_feature_expression_id_fkey FOREIGN KEY (feature_expression_id) REFERENCES feature_expression(feature_expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_expressionprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_expressionprop
    ADD CONSTRAINT feature_expressionprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_genotype_chromosome_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_chromosome_id_fkey FOREIGN KEY (chromosome_id) REFERENCES feature(feature_id) ON DELETE SET NULL;


--
-- Name: feature_genotype_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_genotype_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE;


--
-- Name: feature_genotype_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: feature_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature
    ADD CONSTRAINT feature_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_phenotype_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_phenotype
    ADD CONSTRAINT feature_phenotype_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE;


--
-- Name: feature_phenotype_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_phenotype
    ADD CONSTRAINT feature_phenotype_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: feature_pub_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_pub
    ADD CONSTRAINT feature_pub_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_pub
    ADD CONSTRAINT feature_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_pubprop_feature_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_pubprop
    ADD CONSTRAINT feature_pubprop_feature_pub_id_fkey FOREIGN KEY (feature_pub_id) REFERENCES feature_pub(feature_pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_pubprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_pubprop
    ADD CONSTRAINT feature_pubprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship
    ADD CONSTRAINT feature_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_pub_feature_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_feature_relationship_id_fkey FOREIGN KEY (feature_relationship_id) REFERENCES feature_relationship(feature_relationship_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship
    ADD CONSTRAINT feature_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship
    ADD CONSTRAINT feature_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationshipprop_feature_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_feature_relationship_id_fkey FOREIGN KEY (feature_relationship_id) REFERENCES feature_relationship(feature_relationship_id) ON DELETE CASCADE;


--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_feature_relationshipprop_id_fkey FOREIGN KEY (feature_relationshipprop_id) REFERENCES feature_relationshipprop(feature_relationshipprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationshipprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationshipprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_synonym_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_synonym
    ADD CONSTRAINT feature_synonym_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_synonym_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_synonym
    ADD CONSTRAINT feature_synonym_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_synonym_synonym_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_synonym
    ADD CONSTRAINT feature_synonym_synonym_id_fkey FOREIGN KEY (synonym_id) REFERENCES synonym(synonym_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature
    ADD CONSTRAINT feature_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc
    ADD CONSTRAINT featureloc_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc_pub_featureloc_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc_pub
    ADD CONSTRAINT featureloc_pub_featureloc_id_fkey FOREIGN KEY (featureloc_id) REFERENCES featureloc(featureloc_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc_pub
    ADD CONSTRAINT featureloc_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc_srcfeature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc
    ADD CONSTRAINT featureloc_srcfeature_id_fkey FOREIGN KEY (srcfeature_id) REFERENCES feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featuremap_pub_featuremap_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featuremap_pub
    ADD CONSTRAINT featuremap_pub_featuremap_id_fkey FOREIGN KEY (featuremap_id) REFERENCES featuremap(featuremap_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featuremap_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featuremap_pub
    ADD CONSTRAINT featuremap_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featuremap_unittype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featuremap
    ADD CONSTRAINT featuremap_unittype_id_fkey FOREIGN KEY (unittype_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurepos_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featurepos
    ADD CONSTRAINT featurepos_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurepos_featuremap_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featurepos
    ADD CONSTRAINT featurepos_featuremap_id_fkey FOREIGN KEY (featuremap_id) REFERENCES featuremap(featuremap_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurepos_map_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featurepos
    ADD CONSTRAINT featurepos_map_feature_id_fkey FOREIGN KEY (map_feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop
    ADD CONSTRAINT featureprop_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_pub_featureprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop_pub
    ADD CONSTRAINT featureprop_pub_featureprop_id_fkey FOREIGN KEY (featureprop_id) REFERENCES featureprop(featureprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop_pub
    ADD CONSTRAINT featureprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop
    ADD CONSTRAINT featureprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featurerange
    ADD CONSTRAINT featurerange_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange_featuremap_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featurerange
    ADD CONSTRAINT featurerange_featuremap_id_fkey FOREIGN KEY (featuremap_id) REFERENCES featuremap(featuremap_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange_leftendf_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featurerange
    ADD CONSTRAINT featurerange_leftendf_id_fkey FOREIGN KEY (leftendf_id) REFERENCES feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange_leftstartf_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featurerange
    ADD CONSTRAINT featurerange_leftstartf_id_fkey FOREIGN KEY (leftstartf_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange_rightendf_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featurerange
    ADD CONSTRAINT featurerange_rightendf_id_fkey FOREIGN KEY (rightendf_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange_rightstartf_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featurerange
    ADD CONSTRAINT featurerange_rightstartf_id_fkey FOREIGN KEY (rightstartf_id) REFERENCES feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: genotype_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY genotype
    ADD CONSTRAINT genotype_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: genotypeprop_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY genotypeprop
    ADD CONSTRAINT genotypeprop_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: genotypeprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY genotypeprop
    ADD CONSTRAINT genotypeprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_cvterm
    ADD CONSTRAINT library_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id);


--
-- Name: library_cvterm_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_cvterm
    ADD CONSTRAINT library_cvterm_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_cvterm
    ADD CONSTRAINT library_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id);


--
-- Name: library_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_dbxref
    ADD CONSTRAINT library_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_dbxref_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_dbxref
    ADD CONSTRAINT library_dbxref_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_feature_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_feature
    ADD CONSTRAINT library_feature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_feature_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_feature
    ADD CONSTRAINT library_feature_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id);


--
-- Name: library_pub_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_pub
    ADD CONSTRAINT library_pub_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_pub
    ADD CONSTRAINT library_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_synonym_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_synonym
    ADD CONSTRAINT library_synonym_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_synonym_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_synonym
    ADD CONSTRAINT library_synonym_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_synonym_synonym_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library_synonym
    ADD CONSTRAINT library_synonym_synonym_id_fkey FOREIGN KEY (synonym_id) REFERENCES synonym(synonym_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id);


--
-- Name: libraryprop_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY libraryprop
    ADD CONSTRAINT libraryprop_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: libraryprop_pub_libraryprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY libraryprop_pub
    ADD CONSTRAINT libraryprop_pub_libraryprop_id_fkey FOREIGN KEY (libraryprop_id) REFERENCES libraryprop(libraryprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: libraryprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY libraryprop_pub
    ADD CONSTRAINT libraryprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: libraryprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY libraryprop
    ADD CONSTRAINT libraryprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id);


--
-- Name: magedocumentation_mageml_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY magedocumentation
    ADD CONSTRAINT magedocumentation_mageml_id_fkey FOREIGN KEY (mageml_id) REFERENCES mageml(mageml_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: magedocumentation_tableinfo_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY magedocumentation
    ADD CONSTRAINT magedocumentation_tableinfo_id_fkey FOREIGN KEY (tableinfo_id) REFERENCES tableinfo(tableinfo_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_contact_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_contact
    ADD CONSTRAINT nd_experiment_contact_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_contact_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_contact
    ADD CONSTRAINT nd_experiment_contact_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_dbxref
    ADD CONSTRAINT nd_experiment_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_dbxref_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_dbxref
    ADD CONSTRAINT nd_experiment_dbxref_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_genotype_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_genotype_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_nd_geolocation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment
    ADD CONSTRAINT nd_experiment_nd_geolocation_id_fkey FOREIGN KEY (nd_geolocation_id) REFERENCES nd_geolocation(nd_geolocation_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_phenotype_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_phenotype_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_project_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_project
    ADD CONSTRAINT nd_experiment_project_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_project_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_project
    ADD CONSTRAINT nd_experiment_project_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_protocol_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_protocol
    ADD CONSTRAINT nd_experiment_protocol_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_protocol_nd_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_protocol
    ADD CONSTRAINT nd_experiment_protocol_nd_protocol_id_fkey FOREIGN KEY (nd_protocol_id) REFERENCES nd_protocol(nd_protocol_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_pub_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock_dbxref
    ADD CONSTRAINT nd_experiment_stock_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock_dbxref_nd_experiment_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock_dbxref
    ADD CONSTRAINT nd_experiment_stock_dbxref_nd_experiment_stock_id_fkey FOREIGN KEY (nd_experiment_stock_id) REFERENCES nd_experiment_stock(nd_experiment_stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stockprop_nd_experiment_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_nd_experiment_stock_id_fkey FOREIGN KEY (nd_experiment_stock_id) REFERENCES nd_experiment_stock(nd_experiment_stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stockprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment
    ADD CONSTRAINT nd_experiment_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experimentprop_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experimentprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_geolocationprop_nd_geolocation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_nd_geolocation_id_fkey FOREIGN KEY (nd_geolocation_id) REFERENCES nd_geolocation(nd_geolocation_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_geolocationprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol_reagent_nd_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_nd_protocol_id_fkey FOREIGN KEY (nd_protocol_id) REFERENCES nd_protocol(nd_protocol_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol_reagent_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_reagent_id_fkey FOREIGN KEY (reagent_id) REFERENCES nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol_reagent_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocol
    ADD CONSTRAINT nd_protocol_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocolprop_nd_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_nd_protocol_id_fkey FOREIGN KEY (nd_protocol_id) REFERENCES nd_protocol(nd_protocol_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocolprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent_relationship_object_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_object_reagent_id_fkey FOREIGN KEY (object_reagent_id) REFERENCES nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent_relationship_subject_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_subject_reagent_id_fkey FOREIGN KEY (subject_reagent_id) REFERENCES nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagent
    ADD CONSTRAINT nd_reagent_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagentprop_nd_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_nd_reagent_id_fkey FOREIGN KEY (nd_reagent_id) REFERENCES nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagentprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism_dbxref
    ADD CONSTRAINT organism_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_dbxref_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism_dbxref
    ADD CONSTRAINT organism_dbxref_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organismprop_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organismprop
    ADD CONSTRAINT organismprop_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organismprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organismprop
    ADD CONSTRAINT organismprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: phendesc_environment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES environment(environment_id) ON DELETE CASCADE;


--
-- Name: phendesc_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phendesc_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: phendesc_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL;


--
-- Name: phenotype_attr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_attr_id_fkey FOREIGN KEY (attr_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL;


--
-- Name: phenotype_comparison_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_cvterm_phenotype_comparison_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_phenotype_comparison_id_fkey FOREIGN KEY (phenotype_comparison_id) REFERENCES phenotype_comparison(phenotype_comparison_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_environment1_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_environment1_id_fkey FOREIGN KEY (environment1_id) REFERENCES environment(environment_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_environment2_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_environment2_id_fkey FOREIGN KEY (environment2_id) REFERENCES environment(environment_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_genotype1_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_genotype1_id_fkey FOREIGN KEY (genotype1_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_genotype2_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_genotype2_id_fkey FOREIGN KEY (genotype2_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_phenotype1_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_phenotype1_id_fkey FOREIGN KEY (phenotype1_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_phenotype2_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_phenotype2_id_fkey FOREIGN KEY (phenotype2_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: phenotype_cvalue_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_cvalue_id_fkey FOREIGN KEY (cvalue_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL;


--
-- Name: phenotype_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype_cvterm_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_observable_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_observable_id_fkey FOREIGN KEY (observable_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenstatement_environment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES environment(environment_id) ON DELETE CASCADE;


--
-- Name: phenstatement_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phenstatement_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenstatement_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: phenstatement_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylonode_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE;


--
-- Name: phylonode_dbxref_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode
    ADD CONSTRAINT phylonode_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE;


--
-- Name: phylonode_organism_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_organism
    ADD CONSTRAINT phylonode_organism_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE;


--
-- Name: phylonode_organism_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_organism
    ADD CONSTRAINT phylonode_organism_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_parent_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode
    ADD CONSTRAINT phylonode_parent_phylonode_id_fkey FOREIGN KEY (parent_phylonode_id) REFERENCES phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_phylotree_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode
    ADD CONSTRAINT phylonode_phylotree_id_fkey FOREIGN KEY (phylotree_id) REFERENCES phylotree(phylotree_id) ON DELETE CASCADE;


--
-- Name: phylonode_pub_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_pub
    ADD CONSTRAINT phylonode_pub_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_pub
    ADD CONSTRAINT phylonode_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship_phylotree_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_phylotree_id_fkey FOREIGN KEY (phylotree_id) REFERENCES phylotree(phylotree_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylonode_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode
    ADD CONSTRAINT phylonode_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylonodeprop_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonodeprop
    ADD CONSTRAINT phylonodeprop_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonodeprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonodeprop
    ADD CONSTRAINT phylonodeprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylotree_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree
    ADD CONSTRAINT phylotree_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE;


--
-- Name: phylotree_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree
    ADD CONSTRAINT phylotree_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE;


--
-- Name: phylotree_pub_phylotree_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree_pub
    ADD CONSTRAINT phylotree_pub_phylotree_id_fkey FOREIGN KEY (phylotree_id) REFERENCES phylotree(phylotree_id) ON DELETE CASCADE;


--
-- Name: phylotree_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree_pub
    ADD CONSTRAINT phylotree_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: phylotree_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree
    ADD CONSTRAINT phylotree_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: project_contact_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_contact
    ADD CONSTRAINT project_contact_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_contact_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_contact
    ADD CONSTRAINT project_contact_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_pub_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_pub
    ADD CONSTRAINT project_pub_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_pub
    ADD CONSTRAINT project_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_relationship_object_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_relationship
    ADD CONSTRAINT project_relationship_object_project_id_fkey FOREIGN KEY (object_project_id) REFERENCES project(project_id) ON DELETE CASCADE;


--
-- Name: project_relationship_subject_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_relationship
    ADD CONSTRAINT project_relationship_subject_project_id_fkey FOREIGN KEY (subject_project_id) REFERENCES project(project_id) ON DELETE CASCADE;


--
-- Name: project_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_relationship
    ADD CONSTRAINT project_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE RESTRICT;


--
-- Name: projectprop_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY projectprop
    ADD CONSTRAINT projectprop_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id) ON DELETE CASCADE;


--
-- Name: projectprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY projectprop
    ADD CONSTRAINT projectprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: protocol_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY protocol
    ADD CONSTRAINT protocol_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: protocol_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY protocol
    ADD CONSTRAINT protocol_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: protocol_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY protocol
    ADD CONSTRAINT protocol_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: protocolparam_datatype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY protocolparam
    ADD CONSTRAINT protocolparam_datatype_id_fkey FOREIGN KEY (datatype_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: protocolparam_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY protocolparam
    ADD CONSTRAINT protocolparam_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES protocol(protocol_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: protocolparam_unittype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY protocolparam
    ADD CONSTRAINT protocolparam_unittype_id_fkey FOREIGN KEY (unittype_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_dbxref
    ADD CONSTRAINT pub_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_dbxref_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_dbxref
    ADD CONSTRAINT pub_dbxref_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_relationship
    ADD CONSTRAINT pub_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_relationship
    ADD CONSTRAINT pub_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_relationship
    ADD CONSTRAINT pub_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub
    ADD CONSTRAINT pub_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pubauthor_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubauthor
    ADD CONSTRAINT pubauthor_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pubprop_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubprop
    ADD CONSTRAINT pubprop_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pubprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubprop
    ADD CONSTRAINT pubprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_acquisition_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quantification
    ADD CONSTRAINT quantification_acquisition_id_fkey FOREIGN KEY (acquisition_id) REFERENCES acquisition(acquisition_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quantification
    ADD CONSTRAINT quantification_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_operator_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quantification
    ADD CONSTRAINT quantification_operator_id_fkey FOREIGN KEY (operator_id) REFERENCES contact(contact_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quantification
    ADD CONSTRAINT quantification_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES protocol(protocol_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quantification_relationship
    ADD CONSTRAINT quantification_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES quantification(quantification_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quantification_relationship
    ADD CONSTRAINT quantification_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES quantification(quantification_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quantification_relationship
    ADD CONSTRAINT quantification_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantificationprop_quantification_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quantificationprop
    ADD CONSTRAINT quantificationprop_quantification_id_fkey FOREIGN KEY (quantification_id) REFERENCES quantification(quantification_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantificationprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quantificationprop
    ADD CONSTRAINT quantificationprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvterm
    ADD CONSTRAINT stock_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvterm
    ADD CONSTRAINT stock_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvterm_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvterm
    ADD CONSTRAINT stock_cvterm_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvtermprop_stock_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_stock_cvterm_id_fkey FOREIGN KEY (stock_cvterm_id) REFERENCES stock_cvterm(stock_cvterm_id) ON DELETE CASCADE;


--
-- Name: stock_cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxref
    ADD CONSTRAINT stock_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock
    ADD CONSTRAINT stock_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxref_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxref
    ADD CONSTRAINT stock_dbxref_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxrefprop_stock_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_stock_dbxref_id_fkey FOREIGN KEY (stock_dbxref_id) REFERENCES stock_dbxref(stock_dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxrefprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_genotype_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_genotype
    ADD CONSTRAINT stock_genotype_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: stock_genotype_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_genotype
    ADD CONSTRAINT stock_genotype_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE;


--
-- Name: stock_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock
    ADD CONSTRAINT stock_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_pub
    ADD CONSTRAINT stock_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_pub_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_pub
    ADD CONSTRAINT stock_pub_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE RESTRICT;


--
-- Name: stock_relationship_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE RESTRICT;


--
-- Name: stock_relationship_cvterm_stock_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_stock_relationship_id_fkey FOREIGN KEY (stock_relationship_id) REFERENCES stock_relationship(stock_relationship_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship
    ADD CONSTRAINT stock_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_pub_stock_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_stock_relationship_id_fkey FOREIGN KEY (stock_relationship_id) REFERENCES stock_relationship(stock_relationship_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship
    ADD CONSTRAINT stock_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship
    ADD CONSTRAINT stock_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock
    ADD CONSTRAINT stock_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection
    ADD CONSTRAINT stockcollection_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contact(contact_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection_stock_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection_stock_stockcollection_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_stockcollection_id_fkey FOREIGN KEY (stockcollection_id) REFERENCES stockcollection(stockcollection_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection
    ADD CONSTRAINT stockcollection_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: stockcollectionprop_stockcollection_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_stockcollection_id_fkey FOREIGN KEY (stockcollection_id) REFERENCES stockcollection(stockcollection_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollectionprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id);


--
-- Name: stockprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop_pub
    ADD CONSTRAINT stockprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockprop_pub_stockprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop_pub
    ADD CONSTRAINT stockprop_pub_stockprop_id_fkey FOREIGN KEY (stockprop_id) REFERENCES stockprop(stockprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockprop_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop
    ADD CONSTRAINT stockprop_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop
    ADD CONSTRAINT stockprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: study_assay_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY study_assay
    ADD CONSTRAINT study_assay_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: study_assay_study_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY study_assay
    ADD CONSTRAINT study_assay_study_id_fkey FOREIGN KEY (study_id) REFERENCES study(study_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: study_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY study
    ADD CONSTRAINT study_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: study_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY study
    ADD CONSTRAINT study_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: study_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY study
    ADD CONSTRAINT study_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studydesign_study_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studydesign
    ADD CONSTRAINT studydesign_study_id_fkey FOREIGN KEY (study_id) REFERENCES study(study_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studydesignprop_studydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studydesignprop
    ADD CONSTRAINT studydesignprop_studydesign_id_fkey FOREIGN KEY (studydesign_id) REFERENCES studydesign(studydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studydesignprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studydesignprop
    ADD CONSTRAINT studydesignprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studyfactor_studydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studyfactor
    ADD CONSTRAINT studyfactor_studydesign_id_fkey FOREIGN KEY (studydesign_id) REFERENCES studydesign(studydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studyfactor_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studyfactor
    ADD CONSTRAINT studyfactor_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studyfactorvalue_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studyfactorvalue
    ADD CONSTRAINT studyfactorvalue_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studyfactorvalue_studyfactor_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studyfactorvalue
    ADD CONSTRAINT studyfactorvalue_studyfactor_id_fkey FOREIGN KEY (studyfactor_id) REFERENCES studyfactor(studyfactor_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studyprop_feature_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studyprop_feature
    ADD CONSTRAINT studyprop_feature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE;


--
-- Name: studyprop_feature_studyprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studyprop_feature
    ADD CONSTRAINT studyprop_feature_studyprop_id_fkey FOREIGN KEY (studyprop_id) REFERENCES studyprop(studyprop_id) ON DELETE CASCADE;


--
-- Name: studyprop_feature_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studyprop_feature
    ADD CONSTRAINT studyprop_feature_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: studyprop_study_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studyprop
    ADD CONSTRAINT studyprop_study_id_fkey FOREIGN KEY (study_id) REFERENCES study(study_id) ON DELETE CASCADE;


--
-- Name: studyprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY studyprop
    ADD CONSTRAINT studyprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: synonym_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY synonym
    ADD CONSTRAINT synonym_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: treatment_biomaterial_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY treatment
    ADD CONSTRAINT treatment_biomaterial_id_fkey FOREIGN KEY (biomaterial_id) REFERENCES biomaterial(biomaterial_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: treatment_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY treatment
    ADD CONSTRAINT treatment_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES protocol(protocol_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: treatment_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY treatment
    ADD CONSTRAINT treatment_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Name: cell_line; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cell_line FROM PUBLIC;
REVOKE ALL ON TABLE cell_line FROM postgres;
GRANT ALL ON TABLE cell_line TO postgres;
GRANT ALL ON TABLE cell_line TO PUBLIC;


--
-- Name: cell_line_cvterm; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cell_line_cvterm FROM PUBLIC;
REVOKE ALL ON TABLE cell_line_cvterm FROM postgres;
GRANT ALL ON TABLE cell_line_cvterm TO postgres;
GRANT ALL ON TABLE cell_line_cvterm TO PUBLIC;


--
-- Name: cell_line_cvtermprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cell_line_cvtermprop FROM PUBLIC;
REVOKE ALL ON TABLE cell_line_cvtermprop FROM postgres;
GRANT ALL ON TABLE cell_line_cvtermprop TO postgres;
GRANT ALL ON TABLE cell_line_cvtermprop TO PUBLIC;


--
-- Name: cell_line_dbxref; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cell_line_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE cell_line_dbxref FROM postgres;
GRANT ALL ON TABLE cell_line_dbxref TO postgres;
GRANT ALL ON TABLE cell_line_dbxref TO PUBLIC;


--
-- Name: cell_line_feature; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cell_line_feature FROM PUBLIC;
REVOKE ALL ON TABLE cell_line_feature FROM postgres;
GRANT ALL ON TABLE cell_line_feature TO postgres;
GRANT ALL ON TABLE cell_line_feature TO PUBLIC;


--
-- Name: cell_line_library; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cell_line_library FROM PUBLIC;
REVOKE ALL ON TABLE cell_line_library FROM postgres;
GRANT ALL ON TABLE cell_line_library TO postgres;
GRANT ALL ON TABLE cell_line_library TO PUBLIC;


--
-- Name: cell_line_pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cell_line_pub FROM PUBLIC;
REVOKE ALL ON TABLE cell_line_pub FROM postgres;
GRANT ALL ON TABLE cell_line_pub TO postgres;
GRANT ALL ON TABLE cell_line_pub TO PUBLIC;


--
-- Name: cell_line_relationship; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cell_line_relationship FROM PUBLIC;
REVOKE ALL ON TABLE cell_line_relationship FROM postgres;
GRANT ALL ON TABLE cell_line_relationship TO postgres;
GRANT ALL ON TABLE cell_line_relationship TO PUBLIC;


--
-- Name: cell_line_synonym; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cell_line_synonym FROM PUBLIC;
REVOKE ALL ON TABLE cell_line_synonym FROM postgres;
GRANT ALL ON TABLE cell_line_synonym TO postgres;
GRANT ALL ON TABLE cell_line_synonym TO PUBLIC;


--
-- Name: cell_lineprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cell_lineprop FROM PUBLIC;
REVOKE ALL ON TABLE cell_lineprop FROM postgres;
GRANT ALL ON TABLE cell_lineprop TO postgres;
GRANT ALL ON TABLE cell_lineprop TO PUBLIC;


--
-- Name: cell_lineprop_pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cell_lineprop_pub FROM PUBLIC;
REVOKE ALL ON TABLE cell_lineprop_pub FROM postgres;
GRANT ALL ON TABLE cell_lineprop_pub TO postgres;
GRANT ALL ON TABLE cell_lineprop_pub TO PUBLIC;


--
-- PostgreSQL database dump complete
--

