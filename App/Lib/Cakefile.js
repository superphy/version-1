// Generated by CoffeeScript 1.7.1
var config, exec, exerr, file, fs, outJS, spawn, specFiles, strFiles, _ref;

fs = require('fs');

_ref = require('child_process'), exec = _ref.exec, spawn = _ref.spawn;

config = {
  srcDir: 'coffee',
  outDir: 'js',
  specDir: 'spec',
  cssFile: '../Styling/css/superphy.css',
  lessFile: '../Styling/LESS/superphy.less',
  inFiles: ['superphy', 'superphy_tree', 'superphy_msa', 'superphy_tickers', 'superphy_matrix', 'superphy_map', 'groups_poller'],
  outFile: 'superphy',
  yuic: '~/Dropbox/toolbox/dotfiles/bin/yuicompressor-2.4.2.jar',
  browser: 'firefox'
};

outJS = "" + config.outDir + "/" + config.outFile;

strFiles = ((function() {
  var _i, _len, _ref1, _results;
  _ref1 = config.inFiles;
  _results = [];
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    file = _ref1[_i];
    _results.push("" + config.srcDir + "/" + file + ".coffee");
  }
  return _results;
})()).join(' ');

specFiles = "" + config.specDir + "/*.spec.coffee";

exerr = function(err, sout, serr) {
  if (err != null) {
    process.stdout.write(err);
  }
  if (sout) {
    process.stdout.write(sout);
  }
  if (serr) {
    return process.stdout.write(serr);
  }
};

task('doc', 'generate documentation for *.coffee files', function() {
  return exec("docco " + config.srcDir + "/*.coffee", exerr);
});

task('watch', 'watch and compile changes in source dir', function() {
  var watch;
  watch = exec("coffee -j " + outJS + ".js -cw " + strFiles);
  return watch.stdout.on('data', function(data) {
    return process.stdout.write(data);
  });
});

task('build', 'join and compile *.coffee files', function() {
  return exec("coffee -j " + outJS + ".js -c " + strFiles, exerr);
});

task('min', 'minify compiled *.js file', function() {
  return exec("java -jar " + config.yuic + " " + outJS + ".js -o " + outJS + ".min.js", exerr);
});

task('bam', 'build and minify', function() {
  invoke('build');
  return invoke('min');
});

task('test', 'runs jasmine tests in browser', function() {
  exec("coffee -c " + specFiles, exerr);
  return exec("" + config.browser + " " + config.specDir + "/SpecRunner.html", exerr);
});

task('css', 'compile and minify LESS/css files', function() {
  return exec("lessc " + config.lessFile + " " + config.cssFile, exerr);
});

task('watch:test', 'watch and run tests', function() {
  var f, whenChanged, _i, _len, _ref1, _results;
  console.log('watching...');
  whenChanged = function(filename, fun) {
    return fs.watchFile(filename, function(curr, prev) {
      if (curr.mtime > prev.mtime) {
        return fun();
      }
    });
  };
  _ref1 = config.inFiles;
  _results = [];
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    f = _ref1[_i];
    _results.push(whenChanged("" + f + ".coffee", function() {
      console.log("===== TEST " + (new Date().toLocaleString()) + " =====");
      return invoke('test');
    }));
  }
  return _results;
});
