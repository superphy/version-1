// Generated by CoffeeScript 1.7.1

/*


 File: superphy-tree.spec.coffee
 Desc: Jasmine test case for the TreeView class.
 Author: Matt Whiteside matthew.whiteside@phac-aspc.gc.ca
 Date: March 21th, 2013
 */

(function() {
  var testGenome1, testGenome2, treeView;

  viewController.init(public_genomes, private_genomes, 'multi_select', '/strains/info/');

  viewController.createView('tree', jQuery('#strains_tree'), tree);

  treeView = null;

  testGenome1 = 'public_3889';

  testGenome2 = 'private_130';

  describe("Creation of TreeView object by viewController createView method", function() {
    return it("should append instance of a TreeView object on the viewController views list", function() {
      var type;
      treeView = viewController.views[0];
      type = treeView.type;
      return expect((treeView != null) && type === 'tree').toBeTruthy();
    });
  });

  describe("TreeView update method", function() {
    it("should set tree node object properties to match corresponding genome properties in genomeController object - public test case (TC)", function() {
      var genome, node, test;
      treeView.update(viewController.genomeController);
      node = treeView.nodes.filter((function(_this) {
        return function(d) {
          return d.name === testGenome1;
        };
      })(this))[0];
      genome = viewController.genomeController.public_genomes[testGenome1];
      test = (node.viewname != null) && node.viewname === genome.viewname;
      test = test && (node.selected != null) && node.selected === ((genome.isSelected != null) && genome.isSelected);
      if (genome.cssClass != null) {
        test = test && (node.cssClass != null) && node.cssClass === genome.cssClass;
      }
      return expect(test).toBeTruthy();
    });
    return it("should set tree node object properties to match corresponding genome properties in genomeController object - private TC", function() {
      var genome, node, test;
      treeView.update(viewController.genomeController);
      node = treeView.nodes.filter((function(_this) {
        return function(d) {
          return d.name === testGenome2;
        };
      })(this))[0];
      genome = viewController.genomeController.public_genomes[testGenome1];
      test = (node.viewname != null) && node.viewname === genome.viewname;
      test = test && (node.selected != null) && node.selected === ((genome.isSelected != null) && genome.isSelected);
      if (genome.cssClass != null) {
        test = test && (node.cssClass != null) && node.cssClass === genome.cssClass;
      }
      return expect(test).toBeTruthy();
    });
  });

}).call(this);
