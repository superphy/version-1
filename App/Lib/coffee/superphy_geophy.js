// Generated by CoffeeScript 1.8.0
var GeoPhy;

GeoPhy = (function() {
  function GeoPhy(publicGenomes, privateGenomes, viewController, userGroups, treeDiv, mapDiv, sumDiv, tableDiv) {
    this.publicGenomes = publicGenomes;
    this.privateGenomes = privateGenomes;
    this.viewController = viewController;
    this.userGroups = userGroups;
    this.treeDiv = treeDiv;
    this.mapDiv = mapDiv;
    this.sumDiv = sumDiv;
    this.tableDiv = tableDiv;
  }

  GeoPhy.prototype.publicSubsetGenomes = {};

  GeoPhy.prototype.privateSubsetGenomes = {};

  GeoPhy.prototype.genomeController = null;

  GeoPhy.prototype.init = function(boolShowall) {
    if ((this.userGroups == null) || (this.userGroups != null) && boolShowall) {
      this._showall();
    } else if ((this.userGroups != null) && !boolShowall) {
      this._filter();
    }
    this.viewController.sideBar($('#search-utilities'));
    this.viewController.createView('tree', this.treeDiv, tree);
    this.viewController.createView('summary', this.sumDiv);
    $("#groups_table").appendTo(".map-manifest");
    this.viewController.createView('table', this.tableDiv);
    this._createSubmitForm();
    return true;
  };

  GeoPhy.prototype._getPublicSubset = function(public_genomes, selected_groups) {
    var public_subset_genomes;
    public_subset_genomes = {};
    jQuery.each(selected_groups, function(gp_num, gp) {
      return jQuery.each(gp, function(i, v) {
        if (public_genomes[v]) {
          return public_subset_genomes[v] = public_genomes[v];
        }
      });
    });
    return public_subset_genomes;
  };

  GeoPhy.prototype._getPrivateSubset = function(private_genomes, selected_groups) {
    var private_subset_genomes;
    private_subset_genomes = {};
    jQuery.each(selected_groups, function(gp_num, gp) {
      return jQuery.each(gp, function(i, v) {
        if (private_genomes[v]) {
          return private_subset_genomes[v] = private_genomes[v];
        }
      });
    });
    return private_subset_genomes;
  };

  GeoPhy.prototype._appendLegend = function(divEl, groups) {
    var aqua, blue, brown, buttonEl, clearFormEl, colors, div, gList, gNum, green, grey, hiddenFormEl, legendEl, lime, markerLegend, orange, panelEl, pink, purple, red, rowEl, submitEl, svg;
    blue = '#1f77b4';
    orange = '#ff7f0e';
    green = '#2ca02c';
    red = '#d62728';
    purple = '#9467bd';
    brown = '#8c564b';
    pink = '#e377c2';
    grey = '#7f7f7f';
    lime = '#bcbd22';
    aqua = '#17becf';
    colors = {
      'group1Color': blue,
      'group2Color': orange,
      'group3Color': green,
      'group4Color': red,
      'group5Color': purple,
      'group6Color': pink,
      'group7Color': brown,
      'group8Color': grey,
      'group9Color': aqua,
      'group10Color': lime
    };
    legendEl = jQuery('<div class="col-md-12 panel panel-default"></div>');
    panelEl = jQuery('<div class="panel-body"></div>').appendTo(legendEl);
    rowEl = jQuery('<div class="row"></div>').appendTo(panelEl);
    divEl.prepend(legendEl);
    for (gNum in groups) {
      gList = groups[gNum];
      console.log(gNum);
      div = document.createElement('div');
      div.className = "col-md-1";
      svg = d3.select(div).append('svg').attr('height', '20px').attr('width', '100px');
      markerLegend = svg.append("g").attr('transform', 'translate(0,0)');
      markerLegend.append("circle").attr('cx', 10).attr('cy', 10).attr('r', '5px').style({
        'fill': colors["group" + gNum + "Color"],
        'fill-opacity': '1.0'
      });
      markerLegend.append("text").attr("class", "legendlabel2").attr("dx", 20).attr("dy", 15).attr("text-anchor", "start").text("Group " + gNum);
      rowEl.append(div);
    }
    submitEl = jQuery("<div class='compare-genome-groups row'></div>").appendTo(panelEl);
    divEl = jQuery("<div class='col-md-12'></div>").appendTo(submitEl);
    clearFormEl = jQuery("<button class='btn btn-danger' onclick='location.reload()'><span class='fa fa-times'></span> Reset Form</button>").appendTo(divEl);
    buttonEl = jQuery("<button type='submit' class='btn btn-primary' value='Submit' form='groups-compare-form'><span class='fa fa-check'></span> Show All Groups</button>").appendTo(divEl);
    hiddenFormEl = jQuery('#groups-compare-form');
    buttonEl.click((function(_this) {
      return function(e) {
        var genome, groupGenomes, i, _i, _j, _len, _ref;
        e.preventDefault();
        jQuery("<input type='hidden' name='show-all' value='1'>").appendTo(hiddenFormEl);
        for (i = _i = 1, _ref = _this.viewController.groups.length; _i <= _ref; i = _i += 1) {
          groupGenomes = jQuery("#genome_group" + i + " .genome_group_item");
          for (_j = 0, _len = groupGenomes.length; _j < _len; _j++) {
            genome = groupGenomes[_j];
            jQuery("<input type='hidden' name='group" + i + "-genome' value='" + (jQuery(genome).find('a').data('genome')) + "'>").appendTo(hiddenFormEl);
          }
        }
        jQuery("<input type='hidden' name='num-groups' value='" + _this.viewController.groups.length + "'>").appendTo(hiddenFormEl);
        return hiddenFormEl.submit();
      };
    })(this));
    return true;
  };

  GeoPhy.prototype._showall = function() {
    var gpColors;
    this._setViewController(this.publicGenomes, this.privateGenomes);
    if (this.userGroups != null) {
      gpColors = this._prepareGroups();
    }
    this.viewController.createView('map', this.mapDiv, ['satellite']);
    return true;
  };

  GeoPhy.prototype._filter = function() {
    var gpColors;
    this.publicSubsetGenomes = this._getPublicSubset(this.publicGenomes, this.userGroups);
    this.privateSubsetGenomes = this._getPrivateSubset(this.privateGenomes, this.userGroups);
    this._setViewController(this.publicSubsetGenomes, this.privateSubsetGenomes);
    jQuery('#groups-compare').hide();
    gpColors = this._prepareGroups();
    this.viewController.createView('map', this.mapDiv, ['geophy'], gpColors);
    this._appendLegend(jQuery('#groups-geophy'), this.userGroups);
    return true;
  };

  GeoPhy.prototype._setViewController = function(pubList, pvtList) {
    var addMore, filter, submit;
    this.viewController.init(pubList, pvtList, 'multi_select', '/groups/geophy');
    addMore = true;
    submit = true;
    filter = true;
    return true;
  };

  GeoPhy.prototype._createSubmitForm = function() {
    var elem, form, parentTarget, resetButtonEl, submitButtonEl, submitEl, wrapper;
    elem = jQuery('#geophy-control');
    parentTarget = 'geophy-control-panel-body';
    wrapper = jQuery('<div class="panel panel-default" id="geophy-control-panel"></div>');
    elem.append(wrapper);
    form = jQuery("<div class='panel-body' id='" + parentTarget + "'></div>");
    wrapper.append(form);
    submitEl = jQuery('<div class="row"></div>');
    submitButtonEl = jQuery('<div class="col-md-2 col-md-offset-4"><button type="submit" value="Submit" form="geophy-form" class="btn btn-success"><span class="fa fa-exchange"></span> Highlight Genomes</button></div>').appendTo(submitEl);
    resetButtonEl = jQuery('<div class="col-md-2"><button type="button" form="geophy-form" class="btn btn-danger"><span class="fa fa-times"></span> Reset Views</button></div>').appendTo(submitEl);
    submitButtonEl.click((function(_this) {
      return function(e) {
        e.preventDefault();
        console.log("Button Clicked");
        _this.viewController.filterViews('selection');
        return true;
      };
    })(this));
    resetButtonEl.click((function(_this) {
      return function(e) {
        var g, _i, _j, _len, _len1, _ref, _ref1;
        e.preventDefault();
        _this.viewController.resetFilter();
        _ref = _this.viewController.genomeController.pubVisible;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          g = _ref[_i];
          _this.viewController.select(g, false);
        }
        _ref1 = _this.viewController.genomeController.pvtVisible;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          g = _ref1[_j];
          _this.viewController.select(g, false);
        }
        jQuery('#reset-map-view').click();
        return true;
      };
    })(this));
    form.append(submitEl);
    return true;
  };

  GeoPhy.prototype._prepareGroups = function() {
    var gId, gList, gNum, genomeGroupColor, userMaxGroupNum, _i, _len, _ref;
    genomeGroupColor = {};
    userMaxGroupNum = Math.max.apply(Math, Object.keys(this.userGroups));
    while (userMaxGroupNum > this.viewController.groups.length) {
      this.viewController.addGroupFormRow($("#group-form-block"));
    }
    _ref = this.userGroups;
    for (gNum in _ref) {
      gList = _ref[gNum];
      for (_i = 0, _len = gList.length; _i < _len; _i++) {
        gId = gList[_i];
        this.viewController.select(gId, true);
        genomeGroupColor[gId] = gNum;
      }
      this.viewController.addToGroup(parseInt(gNum));
    }
    return genomeGroupColor;
  };

  if (!root.GeoPhy) {
    root.GeoPhy = GeoPhy;
  }

  return GeoPhy;

})();
