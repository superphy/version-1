// Generated by CoffeeScript 1.8.0

/*

 File: superphy_summary.coffee
 Desc: Meta-data Summary class
 Author: Jason Masih jason.masih@phac-aspc.gc.ca
 Date: March 4th, 2015
 */

/*

 CLASS SummaryView

 Group/selection meta-data summary view 

 Creates stacked bar representation of meta-data for genome group/selection
 */
var SummaryView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SummaryView = (function(_super) {
  __extends(SummaryView, _super);

  function SummaryView(parentElem, style, elNum, genomes, summaryArgs) {
    var all_genomes, g, m, totalCount, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    this.parentElem = parentElem;
    this.style = style;
    this.elNum = elNum;
    this.genomes = genomes;
    this.width = 660;
    this.height = 200;
    this.offset = 150;
    this.genomeCounter = "No genomes selected.";
    this.groupTracker = "No group selected";
    this.selectionInfo = $("<p>" + this.genomeCounter + "</p>").appendTo('#selection-info');
    this.activeGroupInfo = $("<p>" + this.groupTracker + "</p>").appendTo('#active-group-info');
    this.svgSelection = d3.select('#selection-svg').append('svg').attr('class', 'summaryPanel').attr('width', this.width + this.offset).attr('height', this.height);
    this.svgActiveGroup = d3.select('#active-group-svg').append('svg').attr('class', 'summaryPanel').attr('width', this.width + this.offset).attr('height', this.height);
    this.mtypesDisplayed = ['serotype', 'isolation_host', 'isolation_source', 'syndrome', 'stx1_subtype', 'stx2_subtype'];
    this.colours = {
      'serotype': ['#236932', '#468554', '#6AA276', '#8DBE98', '#B0DABA', '#D4F7DC', '#e9fbed'],
      'isolation_host': ['#a70209', '#b3262c', '#c04a4f', '#cc6e72', '#d99295', '#e5b6b8', '#f2dadb'],
      'isolation_source': ['#3741ae', '#535cb9', '#7077c5', '#8c92d0', '#a9addc', '#c5c8e7', '#e2e3f3'],
      'syndrome': ['#962ba6', '#a549b2', '#b467bf', '#c385cc', '#d2a4d8', '#e1c2e5', '#f0e0f2'],
      'stx1_subtype': ['#F05C00', '#EF7123', '#EE8746', '#ED9D69', '#ECB28C', '#EBC8AF', '#EADED2'],
      'stx2_subtype': ['#35a6a7', '#51b2b3', '#6ebfc0', '#8bcccc', '#a8d8d9', '#c5e5e5', '#e2f2f2']
    };
    totalCount = {};
    _ref = this.mtypesDisplayed;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      totalCount[m] = {};
    }
    all_genomes = (Object.keys(this.genomes.public_genomes)).concat(Object.keys(this.genomes.private_genomes));
    for (_j = 0, _len1 = all_genomes.length; _j < _len1; _j++) {
      g = all_genomes[_j];
      this.countMeta(totalCount, this.genomes.genome(g), true);
    }
    this.metaOntology = {};
    this.tt_mtitle = {};
    _ref1 = this.mtypesDisplayed;
    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
      m = _ref1[_k];
      this.selectionCount[m] = {};
      this.metaOntology[m] = [];
      this.tt_mtitle[m] = new String();
      this.metaOntology[m] = Object.keys(totalCount[m]).sort(function(a, b) {
        return totalCount[m][b] - totalCount[m][a];
      });
      if (m === "isolation_host" || m === "isolation_source") {
        this.tt_mtitle[m] = m.charAt(0).toUpperCase() + m.slice(1);
        this.tt_mtitle[m] = this.tt_mtitle[m].replace("_", " ");
        this.tt_mtitle[m] = this.tt_mtitle[m].slice(0, 10) + this.tt_mtitle[m].charAt(10).toUpperCase() + this.tt_mtitle[m].slice(11);
      }
      if (m === "syndrome") {
        this.tt_mtitle[m] = "Symptoms/Diseases";
      }
      if (m === "stx1_subtype" || m === "stx2_subtype") {
        this.tt_mtitle[m] = m.charAt(0).toUpperCase() + m.slice(1);
        this.tt_mtitle[m] = this.tt_mtitle[m].replace("_", " ");
        this.tt_mtitle[m] = this.tt_mtitle[m].slice(0, 5) + this.tt_mtitle[m].charAt(5).toUpperCase() + this.tt_mtitle[m].slice(6);
      }
      if (m === "serotype") {
        this.tt_mtitle[m] = m.charAt(0).toUpperCase() + m.slice(1);
      }
    }
    SummaryView.__super__.constructor.call(this, this.parentElem, this.style, this.elNum);
  }

  SummaryView.prototype.selection = [];

  SummaryView.prototype.selectionCount = {};

  SummaryView.prototype.activeGroup = [];

  SummaryView.prototype.activeGroupCount = {};

  SummaryView.prototype.type = 'summary';

  SummaryView.prototype.elName = 'meta_summary';

  SummaryView.prototype.sumView = true;

  SummaryView.prototype.update = function(genomes) {
    return true;
  };

  SummaryView.prototype.updateActiveGroup = function(usrGrp) {
    var g, m, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    _ref = this.mtypesDisplayed;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      this.activeGroupCount[m] = {};
      this.selectionCount[m] = {};
    }
    this.activeGroup = [];
    this.activeGroup = usrGrp.active_group.public_list.concat(usrGrp.active_group.private_list);
    this.selection = [];
    this.selection = this.selection.concat(this.activeGroup);
    if (this.selection.length === 0) {
      this.genomeCounter = 'No genomes selected';
    }
    if (this.selection.length === 1) {
      this.genomeCounter = '1 genome selected';
    }
    if (this.selection.length > 1) {
      this.genomeCounter = this.selection.length + ' genomes selected';
    }
    $('#selection-info').html("<p>" + this.genomeCounter + "</p>");
    if (this.activeGroup.length === 0) {
      this.groupTracker = 'No group selected';
    }
    if (this.activeGroup.length === 1) {
      this.groupTracker = "Active Group: " + usrGrp.active_group.group_name + " (" + this.activeGroup.length + " genome)";
    }
    if (this.activeGroup.length > 1) {
      this.groupTracker = "Active Group: " + usrGrp.active_group.group_name + " (" + this.activeGroup.length + " genomes)";
    }
    $('#active-group-info').html("<p>" + this.groupTracker + "</p>");
    _ref1 = this.activeGroup;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      g = _ref1[_j];
      this.countMeta(this.activeGroupCount, this.genomes.genome(g), true);
    }
    _ref2 = this.selection;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      g = _ref2[_k];
      this.countMeta(this.selectionCount, this.genomes.genome(g), true);
    }
    this.createMeters(this.activeGroupCount, this.svgActiveGroup, this.activeGroup);
    this.createMeters(this.selectionCount, this.svgSelection, this.selection);
    return true;
  };

  SummaryView.prototype.countMeta = function(count, genome, isSelected) {
    if (isSelected) {
      if (count['serotype'][genome.serotype] != null) {
        count['serotype'][genome.serotype] += 1;
      } else {
        count['serotype'][genome.serotype] = 1;
      }
      if (count['isolation_host'][genome.isolation_host] != null) {
        count['isolation_host'][genome.isolation_host] += 1;
      } else {
        count['isolation_host'][genome.isolation_host] = 1;
      }
      if (count['isolation_source'][genome.isolation_source] != null) {
        count['isolation_source'][genome.isolation_source] += 1;
      } else {
        count['isolation_source'][genome.isolation_source] = 1;
      }
      if (count['syndrome'][genome.syndrome] != null) {
        count['syndrome'][genome.syndrome] += 1;
      } else {
        count['syndrome'][genome.syndrome] = 1;
      }
      if (count['stx1_subtype'][genome.stx1_subtype] != null) {
        count['stx1_subtype'][genome.stx1_subtype] += 1;
      } else {
        count['stx1_subtype'][genome.stx1_subtype] = 1;
      }
      if (count['stx2_subtype'][genome.stx2_subtype] != null) {
        count['stx2_subtype'][genome.stx2_subtype] += 1;
      } else {
        count['stx2_subtype'][genome.stx2_subtype] = 1;
      }
    } else {
      if (count['serotype'][genome.serotype] > 0) {
        count['serotype'][genome.serotype] -= 1;
      } else {
        count['serotype'][genome.serotype] = 0;
      }
      if (count['isolation_host'][genome.isolation_host] > 0) {
        count['isolation_host'][genome.isolation_host] -= 1;
      } else {
        count['isolation_host'][genome.isolation_host] = 0;
      }
      if (count['isolation_source'][genome.isolation_source] > 0) {
        count['isolation_source'][genome.isolation_source] -= 1;
      } else {
        count['isolation_source'][genome.isolation_source] = 0;
      }
      if (count['syndrome'][genome.syndrome] > 0) {
        count['syndrome'][genome.syndrome] -= 1;
      } else {
        count['syndrome'][genome.syndrome] = 0;
      }
      if (count['stx1_subtype'][genome.stx1_subtype] > 0) {
        count['stx1_subtype'][genome.stx1_subtype] -= 1;
      } else {
        count['stx1_subtype'][genome.stx1_subtype] = 0;
      }
      if (count['stx2_subtype'][genome.stx2_subtype] > 0) {
        count['stx2_subtype'][genome.stx2_subtype] -= 1;
      } else {
        count['stx2_subtype'][genome.stx2_subtype] = 0;
      }
    }
    return count;
  };

  SummaryView.prototype.select = function(genome, isSelected) {
    if (user_groups_menu.runSelect || !user_groups_menu.groupSelected) {
      if (isSelected) {
        if (!(this.selection.indexOf(genome) > -1)) {
          this.selection.push(genome);
        }
      } else {
        this.selection.splice(this.selection.indexOf(genome), 1);
      }
      if (this.selection.length === 0) {
        this.genomeCounter = 'No genomes selected';
      }
      if (this.selection.length === 1) {
        this.genomeCounter = '1 genome selected';
      }
      if (this.selection.length > 1) {
        this.genomeCounter = this.selection.length + ' genomes selected';
      }
      $('#selection-info').html("<p>" + this.genomeCounter + "</p>");
      this.countMeta(this.selectionCount, this.genomes.genome(genome), isSelected);
      this.createMeters(this.selectionCount, this.svgSelection, this.selection);
    }
    return true;
  };

  SummaryView.prototype.createMeters = function(sumCount, svgView, countType) {
    var bar_count, i, j, length, m, other_count, pos, sumBar, totalSelected, tt_data, tt_mtype, tt_mtype_last, tt_sub_table, tt_table, tt_table_partial, width, x, y, _i, _j, _len, _len1, _ref, _ref1;
    if (countType != null) {
      totalSelected = countType.length;
    } else {
      totalSelected = 0;
    }
    svgView.selectAll('rect.summaryMeter').remove();
    tt_sub_table = {};
    tt_table_partial = {};
    tt_table = {};
    other_count = {};
    _ref = this.mtypesDisplayed;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      tt_sub_table[m] = new String();
      tt_table_partial[m] = new String();
      tt_table[m] = new String();
      other_count[m] = 0;
      i = 0;
      while (i < this.metaOntology[m].length) {
        if (i > 5 && (sumCount[m][this.metaOntology[m][i]] != null)) {
          other_count[m] += sumCount[m][this.metaOntology[m][i]];
        }
        tt_mtype = this.metaOntology[m][i].charAt(0).toUpperCase() + this.metaOntology[m][i].slice(1);
        if (sumCount[m][this.metaOntology[m][i]] > 0) {
          if (i >= 6) {
            tt_sub_table[m] += "<tr><td>" + tt_mtype + "</td><td style='text-align:right'>" + sumCount[m][this.metaOntology[m][i]] + "</td></tr>";
            tt_table[m] = tt_table_partial[m] + ("<tbody class='other-row' onclick=\"$('.after-other').slideToggle(100);\"><tr><td>[+] Other</td><td style='text-align:right'\">" + other_count[m] + "</td></tr></tbody><tbody class='after-other'>" + tt_sub_table[m] + "</tbody>");
          } else {
            tt_table_partial[m] += "<tr><td>" + tt_mtype + "</td><td style='text-align:right'>" + sumCount[m][this.metaOntology[m][i]] + "</td></tr>";
            tt_mtype_last = tt_mtype;
            tt_table[m] = tt_table_partial[m];
          }
        }
        i++;
      }
    }
    y = 0;
    _ref1 = this.mtypesDisplayed;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      m = _ref1[_j];
      y += 30;
      svgView.selectAll('g.sumBar_' + m).remove();
      sumBar = svgView.append('g').attr('class', 'sumBar_' + m);
      sumBar.append('text').attr('y', y + 15).text(function() {
        var meta_label;
        if (m === "isolation_host" || m === "isolation_source") {
          meta_label = m.charAt(0).toUpperCase() + m.slice(1);
          meta_label = meta_label.replace("_", " ");
          meta_label = meta_label.slice(0, 10) + meta_label.charAt(10).toUpperCase() + meta_label.slice(11);
        }
        if (m === "syndrome") {
          meta_label = "Symptoms/Diseases";
        }
        if (m === "stx1_subtype" || m === "stx2_subtype") {
          meta_label = m.charAt(0).toUpperCase() + m.slice(1);
          meta_label = meta_label.replace("_", " ");
          meta_label = meta_label.slice(0, 5) + meta_label.charAt(5).toUpperCase() + meta_label.slice(6);
        }
        if (m === "serotype") {
          meta_label = m.charAt(0).toUpperCase() + m.slice(1);
        }
        if (totalSelected === 0) {
          meta_label = '';
        }
        return meta_label;
      });
      width = [];
      i = 0;
      j = 0;
      x = 0;
      if (this.metaOntology[m].length < 7) {
        bar_count = this.metaOntology[m].length;
      } else {
        bar_count = 7;
      }
      while (i < bar_count) {
        if (i < 6 && (sumCount[m][this.metaOntology[m][i]] != null)) {
          width[i] = this.width * (sumCount[m][this.metaOntology[m][i]] / totalSelected);
        } else if (i === 6 && totalSelected > 0 && (this.metaOntology[m][i] != null)) {
          width[i] = this.width - (width[0] + width[1] + width[2] + width[3] + width[4] + width[5]);
        } else {
          width[i] = 0;
        }
        length = 0;
        pos = 0;
        if (this.metaOntology[m][i] != null) {
          pos = tt_table[m].indexOf(this.metaOntology[m][i].charAt(0).toUpperCase() + this.metaOntology[m][i].slice(1));
        }
        if (sumCount[m][this.metaOntology[m][i]] > 0) {
          length = (this.metaOntology[m][i] + "</td><td style='text-align:right'>" + sumCount[m][this.metaOntology[m][i]]).length;
          tt_data = tt_table[m].slice(0, pos - 8) + "<tr class='table-row-bold' style='color:" + this.colours[m][3] + "'><td>" + tt_table[m].slice(pos, length + pos) + "</td></tr>" + tt_table[m].slice(length + pos);
        }
        if (i === 6) {
          if (sumCount[m][this.metaOntology[m][5]] == null) {
            if (tt_table[m].indexOf("[+] Other") != null) {
              pos = tt_table[m].indexOf("[+] Other");
            } else {
              pos = tt_table[m].indexOf(tt_mtype_last);
            }
            tt_data = tt_table[m].slice(0, pos - 8) + "<tr class='table-row-bold' style='color:" + this.colours[m][3] + "'><td>" + tt_table[m].slice(pos);
          } else {
            tt_data = tt_table[m].slice(0, tt_table[m].indexOf("[+] Other") - 8) + "<tr class='table-row-bold' style='color:" + this.colours[m][3] + "'><td>" + tt_table[m].slice(tt_table[m].indexOf("[+] Other"));
          }
        }
        sumBar.append('rect').attr('class', 'summaryMeter').attr('id', i === 6 ? "Other" : this.metaOntology[m][i]).attr('x', x + this.offset).attr('y', y).attr('height', 20).attr('width', Math.abs(width[i])).attr('stroke', 'black').attr('stroke-width', 1).attr('fill', this.colours[m][j++]).attr("data-toggle", "popover").attr('data-content', width[i] > 0 ? "<table class='popover-table'><tr><th style='min-width:160px;max-width:160px;text-align:left'>" + this.tt_mtitle[m] + "</th><th style='min-width:110px;max-width:110px;text-align:right'># of Genomes</th></tr>" + tt_data + "</table>" : void 0);
        x += width[i];
        i++;
      }
    }
    svgView.selectAll('.summaryMeter').each(function() {
      return $(this).popover({
        placement: 'bottom',
        html: 'true',
        trigger: 'hover',
        delay: {
          show: 500,
          hide: 500
        },
        animate: 'false',
        container: 'body'
      });
    });
    return true;
  };

  return SummaryView;

})(ViewTemplate);
