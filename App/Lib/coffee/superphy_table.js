// Generated by CoffeeScript 1.8.0

/*


 File: superphy_table.coffee
 Desc: Attribute Table View Class
 Author: Matt Whiteside matthew.whiteside@phac-aspc.gc.ca
 Date: May 27th, 2013
 */

/*
 CLASS TableView
  
 Attribute Table view
 
 Always genome-based
 Returns genome ID to redirect/select when genome list item is clicked
 */
var TableView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TableView = (function(_super) {
  __extends(TableView, _super);

  function TableView(parentElem, style, elNum, tableArgs) {
    this.parentElem = parentElem;
    this.style = style;
    this.elNum = elNum;
    if ((tableArgs != null) && (tableArgs[0] != null)) {
      this.locusData = tableArgs[0];
    }
    TableView.__super__.constructor.call(this, this.parentElem, this.style, this.elNum);
    this.sortField = 'displayname';
    this.sortAsc = true;
  }

  TableView.prototype.activeGroup = [];

  TableView.prototype.type = 'table';

  TableView.prototype.elName = 'genome_table';

  TableView.prototype.locusData = null;

  TableView.prototype.update = function(genomes) {
    var activeGroup, divElem, ft, t1, t2, table, tableElem;
    tableElem = jQuery("#" + this.elID + " table");
    if (tableElem.length) {
      tableElem.empty();
    } else {
      divElem = jQuery("<div id='" + this.elID + "' class='superphy-table'/>");
      tableElem = jQuery("<table />").appendTo(divElem);
      jQuery(this.parentElem).append(divElem);
    }
    t1 = new Date();
    table = '';
    table += this._appendHeader(genomes);
    table += '<tbody>';
    table += this._appendGenomes(genomes.sort(genomes.pubVisible, this.sortField, this.sortAsc), genomes.public_genomes, this.style, false);
    table += this._appendGenomes(genomes.sort(genomes.pvtVisible, this.sortField, this.sortAsc), genomes.private_genomes, this.style, true);
    table += '</tbody>';
    tableElem.append(table);
    this._actions(tableElem, this.style);
    t2 = new Date();
    ft = t2 - t1;
    console.log('TableView update elapsed time: ' + ft);
    activeGroup = this.activeGroup;
    $('.genome-table-checkbox').each(function() {
      if (genomes.genome(this.value).isSelected) {
        $("#active-group-circle-" + this.value).css('fill', 'lightsteelblue');
        return $(this).parents('tr:first').children().css('background-color', 'lightsteelblue');
      } else {
        return $("#active-group-circle-" + this.value).css('fill', '#fff');
      }
    });
    d3.selectAll('.active-group-symbol').filter(function(d) {
      return activeGroup.indexOf(this.id) > -1;
    }).style('opacity', '1');
    return true;
  };

  TableView.prototype.intro = function() {
    var tableIntro;
    tableIntro = [];
    tableIntro.push({
      element: document.querySelector('#genome_table1'),
      intro: "These are the names of the genomes in the database.  Check the boxes to select each genome.",
      position: 'right'
    });
    return tableIntro;
  };

  TableView.prototype._template = function(tmpl, values) {
    var html;
    html = null;
    if (tmpl === 'tr') {
      html = "<tr>" + values.row + "</tr>";
    } else if (tmpl === 'th') {
      html = "<th><a class='genome-table-sort' href='#' data-genomesort='" + values.type + "'>" + values.name + " <i class='fa " + values.sortIcon + "'></i></a></th>";
    } else if (tmpl === 'td') {
      html = "<td>" + values.data + "</td>";
    } else if (tmpl === 'td1_redirect') {
      html = "<td class='" + values.klass + "'>" + values.name + " <a class='genome-table-link' href='#' data-genome='" + values.g + "' title='Genome " + values.shortName + " info'><i class='fa fa-search'></i></a></td>";
    } else if (tmpl === 'td1_select') {
      html = "<td class='" + values.klass + "'><div class='checkbox'><label><input class='checkbox genome-table-checkbox' type='checkbox' value='" + values.g + "' " + values.checked + "/> <svg class='active-group-symbol' id='" + values.g + "' opacity='0' width='15' height='15'><rect y='4' width='11' height='11' style='fill: rgb(70, 130, 180)'></rect> <circle id='active-group-circle-" + values.g + "' r='4' cy='9.5' cx='5.5' style='stroke:steelblue;stroke-width:1.5;'></circle></svg>" + values.name + "</label></div></td>";
    } else if (tmpl === 'spacer') {
      html = "<tr class='genome-table-spacer'><td>---- USER-SUBMITTED GENOMES ----</td></tr>";
    } else {
      throw new SuperphyError("Unknown template type " + tmpl + " in TableView method _template");
    }
    return html;
  };

  TableView.prototype._appendHeader = function(genomes) {
    var i, sortIcon, t, tName, table, v, values, _i, _j, _len, _len1, _ref;
    table = '<thead><tr>';
    values = [];
    i = -1;
    if (this.sortField === 'displayname') {
      sortIcon = 'fa-sort-asc';
      if (!this.sortAsc) {
        sortIcon = 'fa-sort-desc';
      }
      values[++i] = {
        type: 'displayname',
        name: 'Genome',
        sortIcon: sortIcon
      };
    } else {
      values[++i] = {
        type: 'displayname',
        name: 'Genome',
        sortIcon: 'fa-sort'
      };
    }
    _ref = genomes.mtypes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      if (!genomes.visibleMeta[t]) {
        continue;
      }
      tName = genomes.metaMap[t];
      sortIcon = null;
      if (t === this.sortField) {
        sortIcon = 'fa-sort-asc';
        if (!this.sortAsc) {
          sortIcon = 'fa-sort-desc';
        }
      } else {
        sortIcon = 'fa-sort';
      }
      values[++i] = {
        type: t,
        name: tName,
        sortIcon: sortIcon
      };
    }
    for (_j = 0, _len1 = values.length; _j < _len1; _j++) {
      v = values[_j];
      table += this._template('th', v);
    }
    table += '</tr></thead>';
    return table;
  };

  TableView.prototype._appendGenomes = function(visibleG, genomes, style, priv) {
    var checked, cls, d, g, gObj, name, row, table, thiscls, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    cls = this.cssClass();
    table = '';
    if (priv && visibleG.length) {
      table += this._template('spacer', null);
    }
    for (_i = 0, _len = visibleG.length; _i < _len; _i++) {
      g = visibleG[_i];
      row = '';
      gObj = genomes[g];
      thiscls = cls;
      if (gObj.cssClass != null) {
        thiscls = cls + ' ' + gObj.cssClass;
      }
      name = gObj.meta_array[0];
      if (this.locusData != null) {
        name += this.locusData.genomeString(g);
      }
      if (style === 'redirect') {
        row += this._template('td1_redirect', {
          g: g,
          name: name,
          shortName: gObj.meta_array[0],
          klass: thiscls
        });
        _ref = gObj.meta_array.slice(1);
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          d = _ref[_j];
          row += this._template('td', {
            data: d
          });
        }
        table += this._template('tr', {
          row: row
        });
      } else if (style === 'select') {
        checked = '';
        if (gObj.isSelected) {
          checked = 'checked';
        }
        row += this._template('td1_select', {
          g: g,
          name: name,
          klass: thiscls,
          checked: checked
        });
        _ref1 = gObj.meta_array.slice(1);
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          d = _ref1[_k];
          row += this._template('td', {
            data: d
          });
        }
        table += this._template('tr', {
          row: row
        });
      } else {
        return false;
      }
    }
    return table;
  };

  TableView.prototype._actions = function(tableEl, style) {
    var num;
    num = this.elNum - 1;
    tableEl.find('.genome-table-sort').click(function(e) {
      var sortField;
      e.preventDefault();
      sortField = this.dataset.genomesort;
      return viewController.viewAction(num, 'sort', sortField);
    });
    if (style === 'select') {
      tableEl.find('.genome-table-checkbox').click(function(e) {
        return viewController.select(this.value, this.checked);
      });
    }
    if (style === 'redirect') {
      return tableEl.find('.genome-table-link').click(function(e) {
        var gid;
        e.preventDefault();
        gid = this.dataset.genome;
        return viewController.select(gid, true);
      });
    }
  };

  TableView.prototype.updateActiveGroup = function(usrGrp) {
    var activeGroup;
    this.activeGroup = usrGrp.active_group.public_list.concat(usrGrp.active_group.private_list);
    activeGroup = this.activeGroup;
    d3.selectAll('.active-group-symbol').filter(function(d) {
      return activeGroup.indexOf(this.id) > -1;
    }).style('opacity', '1');
    d3.selectAll('.active-group-symbol').filter(function(d) {
      return activeGroup.indexOf(this.id) === -1;
    }).style('opacity', '0');
    return true;
  };

  TableView.prototype.updateCSS = function(gset, genomes) {
    var tableEl;
    tableEl = jQuery("#" + this.elID);
    if (!((tableEl != null) && tableEl.length)) {
      throw new SuperphyError("DOM element for list view " + this.elID + " not found. Cannot call TableView method updateCSS().");
    }
    if (gset["public"] != null) {
      this._updateGenomeCSS(tableEl, gset["public"], genomes.public_genomes);
    }
    if (gset["private"] != null) {
      this._updateGenomeCSS(tableEl, gset["private"], genomes.private_genomes);
    }
    return true;
  };

  TableView.prototype._updateGenomeCSS = function(el, changedG, genomes) {
    var cls, dataEl, descriptor, g, itemEl, thiscls, _i, _len;
    cls = this.cssClass();
    for (_i = 0, _len = changedG.length; _i < _len; _i++) {
      g = changedG[_i];
      thiscls = cls;
      if (genomes[g].cssClass != null) {
        thiscls = cls + ' ' + genomes[g].cssClass;
      }
      dataEl = null;
      if (this.style === 'redirect') {
        descriptor = "td > a[data-genome='" + g + "']";
        itemEl = el.find(descriptor);
        if (!((itemEl != null) && itemEl.length && genomes[g].visible === true)) {
          continue;
        }
        dataEl = itemEl.parent();
      } else if (this.style === 'select') {
        descriptor = "td input[value='" + g + "']";
        itemEl = el.find(descriptor);
        if (!((itemEl != null) && itemEl.length && genomes[g].visible === true)) {
          continue;
        }
        dataEl = itemEl.parents().eq(1);
      } else {
        return false;
      }
      dataEl.attr('class', thiscls);
    }
    return true;
  };

  TableView.prototype.select = function(genome, isSelected) {
    var descriptor, itemEl;
    itemEl = null;
    if (this.style === 'select') {
      descriptor = "td input[value='" + genome + "']";
      itemEl = jQuery(descriptor);
    } else {
      return false;
    }
    itemEl.prop('checked', isSelected);
    if (isSelected) {
      $("#active-group-circle-" + genome).css('fill', 'lightsteelblue');
      $("input[value=" + genome + "]").parents('tr:first').children().css('background-color', 'lightsteelblue');
    } else {
      $("#active-group-circle-" + genome).css('fill', '#fff');
      $("input[value=" + genome + "]").parents('tr:first').children().css('background-color', '#fff');
    }
    return true;
  };

  TableView.prototype.dump = function(genomes) {
    var fullMeta, g, header, id, k, output, _ref, _ref1;
    fullMeta = {};
    for (k in genomes.visibleMeta) {
      fullMeta[k] = true;
    }
    output = '';
    header = (function() {
      var _i, _len, _ref, _results;
      _ref = genomes.mtypes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        _results.push(genomes.metaMap[k]);
      }
      return _results;
    })();
    header.unshift("Superphy ID", "Genome name");
    output += "#" + header.join("\t") + "\n";
    _ref = genomes.public_genomes;
    for (id in _ref) {
      g = _ref[id];
      output += id + "\t" + genomes.label(g, fullMeta, "\t") + "\n";
    }
    _ref1 = genomes.private_genomes;
    for (id in _ref1) {
      g = _ref1[id];
      output += id + "\t" + genomes.label(g, fullMeta, "\t") + "\n";
    }
    return {
      ext: 'csv',
      type: 'text/plain',
      data: output
    };
  };

  TableView.prototype.viewAction = function(genomes, argArray) {
    var event;
    event = argArray.shift();
    if (event === 'sort') {
      this._sort(genomes, argArray[0]);
    } else {
      throw new SuperphyError("Unrecognized event type: " + event + " in TableView viewAction method.");
    }
    return true;
  };

  TableView.prototype._sort = function(genomes, field) {
    if (field === this.sortField) {
      if (this.sortAsc) {
        this.sortAsc = false;
      } else {
        this.sortAsc = true;
      }
    } else {
      this.sortField = field;
      this.sortAsc = true;
    }
    console.log([field, this.sortField, this.sortAsc].join(', '));
    return this.update(genomes);
  };

  return TableView;

})(ViewTemplate);
