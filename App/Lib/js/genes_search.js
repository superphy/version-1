// Generated by CoffeeScript 1.7.1

/*


 File: genes_search.coffee
 Desc: Javascript functions for the genes/search page
 Author: Matt Whiteside matthew.whiteside@phac-aspc.gc.ca
 Date: May 16th, 2013
 */

(function() {
  var appendGenes, appendHeader, root, sort, template;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.numVfSelected = 0;

  root.numAmrSelected = 0;

  root.initGeneList = function(gList, geneType, categories, tableElem, selElem, countElem, catElem, autocElem, multi_select) {
    var dObj, k, o;
    if (multi_select == null) {
      multi_select = true;
    }
    if (!(geneType === 'vf' || geneType === 'amr')) {
      throw new Error("Invalid geneType parameter: " + geneType + ".");
    }
    for (k in gList) {
      o = gList[k];
      o.visible = true;
      o.selected = false;
    }
    return dObj = {
      type: geneType,
      genes: gList,
      categories: categories,
      num_selected: 0,
      sortField: 'name',
      sortAsc: true,
      element: {
        table: tableElem,
        select: selElem,
        count: countElem,
        category: catElem,
        autocomplete: autocElem
      },
      multi_select: multi_select
    };
  };

  root.appendGeneTable = function(d) {
    var cboxes, name, table, tableElem, tableHtml;
    table = d.element.table;
    name = "" + d.type + "-gene";
    tableElem = jQuery("<table />").appendTo(table);
    tableHtml = '';
    tableHtml += appendHeader(d);
    tableHtml += '<tbody>';
    tableHtml += appendGenes(d, sort(d.genes, d.sortField, d.sortAsc), d.genes, d.type, 'select');
    tableHtml += '</tbody>';
    tableElem.append(tableHtml);
    cboxes = table.find("input[name='" + name + "']");
    cboxes.change(function() {
      var checked, geneId, obj;
      obj = $(this);
      geneId = obj.val();
      checked = obj.prop('checked');
      return selectGene([geneId], checked, d);
    });
    updateCount(d);
    return true;
  };

  sort = function(gids, metaField, asc) {

    /*  return gids unless gids.length
     
    that = @
    gids.sort (a,b) ->
      aObj = that.genome(a)
      bObj = that.genome(b)
      
      aField = aObj[metaField]
      aName = aObj.displayname.toLowerCase()
      bField = bObj[metaField]
      bName = bObj.displayname.toLowerCase()
      
      if aField? and bField?
        
        if typeIsArray aField
          aField = aField.join('').toLowerCase()
          bField = bField.join('').toLowerCase()
        else
          aField = aField.toLowerCase()
          bField = bField.toLowerCase()
          
        if aField < bField
          return -1
        else if aField > bField
          return 1
        else
          if aName < bName
            return -1
          else if aName > bName
            return 1
          else
            return 0
            
      else
        if aField? and not bField?
          return -1
        else if bField? and not aField?
          return 1
        else
          if aName < bName
            return -1
          else if aName > bName
            return 1
          else
            return 0
    
    if not asc
      gids.reverse()
     */
    return gids;
  };

  template = function(tmpl, values) {
    var html;
    html = null;
    if (tmpl === 'tr') {
      html = "<tr>" + values.row + "</tr>";
    } else if (tmpl === 'th') {
      html = "<th><a class='genome-table-sort' href='#' data-genomesort='" + values.type + "'>" + values.name + " <i class='fa " + values.sortIcon + "'></i></a></th>";
    } else if (tmpl === 'td') {
      html = "<td>" + values.data + "</td>";
    } else if (tmpl === 'td1_redirect') {
      html = "<td class='" + values.klass + "'>" + values.name + " <a class='gene-table-link' href='/genes/info?" + values.type + "=" + values.g + "' data-gene='" + values.g + "' title='" + values.name + " info'><i class='fa fa-external-link'></i></a></td>";
    } else if (tmpl === 'td1_select') {
      html = "<td class='" + values.klass + "'><div class='checkbox'><label><input class='checkbox gene-table-checkbox gene-search-select' type='checkbox' value='" + values.g + "' " + values.checked + " name='" + values.type + "-gene'/> " + values.name + "</label> <a class='gene-table-link' href='/genes/info?" + values.type + "=" + values.g + "' data-gene='" + values.g + "' title='" + values.name + " info'><i class='fa fa-search'></i></a></div></td>";
    } else {
      throw new SuperphyError("Unknown template type " + tmpl + " in TableView method _template");
    }
    return html;
  };

  appendHeader = function(d) {
    var i, sortIcon, table, v, values, _i, _len;
    table = '<thead><tr>';
    values = [];
    i = -1;
    if (d.sortField === 'name') {
      sortIcon = 'fa-sort-asc';
      if (!d.sortAsc) {
        sortIcon = 'fa-sort-desc';
      }
      values[++i] = {
        type: 'name',
        name: 'Gene Name',
        sortIcon: sortIcon
      };
    } else {
      values[++i] = {
        type: 'name',
        name: 'Gene Name',
        sortIcon: 'fa-sort'
      };
    }
    values[++i] = {
      type: 'uniquename',
      name: 'Unique Name',
      sortIcon: 'fa-sort'
    };
    for (_i = 0, _len = values.length; _i < _len; _i++) {
      v = values[_i];
      table += template('th', v);
    }
    table += '</thead></tr>';
    return table;
  };

  appendGenes = function(d, visibleG, genes, type, style) {
    var checked, gId, gObj, geneObj, name, row, table, uniquename;
    table = '';
    for (gId in visibleG) {
      gObj = visibleG[gId];
      row = '';
      geneObj = genes[gId];
      name = geneObj.name;
      uniquename = geneObj.uniquename;
      if (!geneObj.visible) {
        continue;
      }
      if (style === 'redirect') {
        row += template('td1_redirect', {
          klass: 'gene_table_item',
          name: name,
          type: type
        });
      } else if (style = "select") {
        checked = '';
        if (geneObj.selected) {
          checked = 'checked';
        }
        row += template('td1_select', {
          klass: 'gene_table_item',
          g: gId,
          name: name,
          type: type,
          checked: checked
        });
      } else {
        return false;
      }
      row += template('td', {
        data: uniquename
      });
      table += template('tr', {
        row: row
      });
    }
    return table;
  };

  root.filterGeneList = function(d) {
    var searchTerm;
    searchTerm = d.element.autocomplete.val();
    matching(d.genes, searchTerm);
    d.element.table.empty();
    appendGeneTable(d);
    return true;
  };

  root.matching = function(gList, searchTerm) {
    var g, k, regex, val;
    regex = new RegExp(escapeRegExp(searchTerm), "i");
    for (k in gList) {
      g = gList[k];
      val = g.name;
      if (regex.test(val)) {
        g.visible = true;
      } else {
        g.visible = false;
      }
    }
    return true;
  };

  root.appendCategories = function(d) {
    var cTitle, categoryE, col2, def, id, introDiv, k, moreInfo, moreInfoId, name, o, resetButt, row1, row2, s, sel, t, titleDiv, _ref, _ref1;
    categoryE = d.element.category;
    introDiv = jQuery('<div class="gene-category-intro"></div>').appendTo(categoryE);
    introDiv.append('<span>Select category to refine list of genes:</span>');
    resetButt = jQuery("<button id='" + d.type + "-reset-category' class='btn btn-link'>Reset</button>").appendTo(introDiv);
    resetButt.click(function(e) {
      e.preventDefault();
      filterByCategory(-1, -1, d);
      return resetNullCategories(d);
    });
    _ref = d.categories;
    for (k in _ref) {
      o = _ref[k];
      row1 = jQuery('<div class="row"></div>').appendTo(categoryE);
      cTitle = capitaliseFirstLetter(o.parent_name);
      titleDiv = jQuery("<div class='category-header col-xs-12'>" + cTitle + ": </div>").appendTo(row1);
      if (o.parent_definition != null) {
        moreInfoId = 'category-info-' + k;
        moreInfo = jQuery("<a id='" + moreInfoId + "' href='#' data-toggle='tooltip' data-original-title='" + o.parent_definition + "'><i class='fa fa-info-circle'></i></a>");
        titleDiv.append(moreInfo);
        moreInfo.tooltip({
          placement: 'right'
        });
      }
      row2 = jQuery('<div class="row"></div>').appendTo(categoryE);
      col2 = jQuery('<div class="col-xs-12"></div>').appendTo(row2);
      sel = jQuery("<select name='" + d.type + "-category' data-category-id='" + k + "' class='form-control'></select>").appendTo(col2);
      _ref1 = o.subcategories;
      for (s in _ref1) {
        t = _ref1[s];
        def = "";
        if (t.category_definition != null) {
          def = t.category_definition;
        }
        name = capitaliseFirstLetter(t.category_name);
        id = "subcategory-id-" + s;
        def.replace(/\.n/g, ". &#13;");
        sel.append("<option id='" + id + "' value='" + s + "' title='" + def + "'>" + name + "</option>");
      }
      sel.append("<option value='null' selected><strong>--Select Category--</strong></option>");
      sel.change(function() {
        var catId, obj, subId;
        obj = jQuery(this);
        catId = obj.data('category-id');
        subId = obj.val();
        if (subId !== 'null') {
          jQuery("select[name='" + d.type + "-category'][data-category-id!='" + catId + "']").val('null');
          return filterByCategory(catId, subId, d);
        }
      });
    }
    return true;
  };

  root.filterByCategory = function(catId, subcatId, d) {
    var g, geneIds, k, o, _i, _len, _ref;
    geneIds = [];
    if (catId === -1) {
      geneIds = Object.keys(d.genes);
    } else {
      geneIds = d.categories[catId].subcategories[subcatId].gene_ids;
      if (!((geneIds != null) && typeIsArray(geneIds))) {
        throw new Error("Invalid category or subcategory ID: " + catId + " / " + subcatId + ".");
      }
      _ref = d.genes;
      for (k in _ref) {
        o = _ref[k];
        o.visible = false;
      }
    }
    for (_i = 0, _len = geneIds.length; _i < _len; _i++) {
      g = geneIds[_i];
      o = d.genes[g];
      if (o == null) {
        throw new Error("Invalid gene ID: " + g + ".");
      }
      o.visible = true;
    }
    d.element.table.empty();
    console.log(d);
    appendGeneTable(d);
    return true;
  };

  root.selectGene = function(geneIds, checked, d) {
    var g, _i, _len;
    console.log(geneIds);
    console.log(checked);
    for (_i = 0, _len = geneIds.length; _i < _len; _i++) {
      g = geneIds[_i];
      d.genes[g].selected = checked;
      if (checked) {
        d.num_selected++;
      } else {
        d.num_selected--;
      }
    }
    updateCount(d);
    if (checked) {
      addSelectedGenes(geneIds, d);
    } else {
      removeSelectedGenes(geneIds, d);
    }
    return true;
  };

  root.updateCount = function(d) {
    var innerElem;
    innerElem = d.element.count.find('span.selected-gene-count-text');
    if (!innerElem.length) {
      innerElem = jQuery("<span class='selected-gene-count-text'></span>").appendTo(d.element.count);
    }
    if (d.type === 'vf') {
      innerElem.text("" + d.num_selected + " virulence genes selected");
    }
    if (d.type === 'amr') {
      innerElem.text("" + d.num_selected + " AMR genes selected");
    }
    return true;
  };

  root.addSelectedGenes = function(geneIds, d) {
    var actionEl, cls, g, gObj, listEl, _i, _len;
    cls = 'selected-gene-item';
    for (_i = 0, _len = geneIds.length; _i < _len; _i++) {
      g = geneIds[_i];
      gObj = d.genes[g];
      listEl = jQuery(("<li class='" + cls + "'>") + gObj.name + ' - ' + gObj.uniquename + '</li>');
      actionEl = jQuery("<a href='#' data-gene='" + g + "'> <i class='fa fa-times'></a>");
      actionEl.click(function(e) {
        var gid;
        e.preventDefault();
        gid = this.dataset.gene;
        selectGene([gid], false, d);
        return $("input.gene-search-select[value='" + gid + "']").prop('checked', false);
      });
      listEl.append(actionEl);
      d.element.select.append(listEl);
    }
    return true;
  };

  root.removeSelectedGenes = function(geneIds, d) {
    var g, listEl, _i, _len;
    for (_i = 0, _len = geneIds.length; _i < _len; _i++) {
      g = geneIds[_i];
      listEl = d.element.select.find("li > a[data-gene='" + g + "']");
      listEl.parent().remove();
    }
    return true;
  };

  root.selectAllGenes = function(checked, d) {
    var all, g, k, visible, _i, _j, _len, _len1;
    if (checked) {
      visible = (function() {
        var _ref, _results;
        _ref = d.genes;
        _results = [];
        for (k in _ref) {
          g = _ref[k];
          if (g.visible && !g.selected) {
            _results.push(k);
          }
        }
        return _results;
      })();
      selectGene(visible, true, d);
      for (_i = 0, _len = visible.length; _i < _len; _i++) {
        g = visible[_i];
        $("input.gene-search-select[value='" + g + "']").prop('checked', true);
      }
    } else {
      all = (function() {
        var _ref, _results;
        _ref = d.genes;
        _results = [];
        for (k in _ref) {
          g = _ref[k];
          if (g.selected) {
            _results.push(k);
          }
        }
        return _results;
      })();
      selectGene(all, false, d);
      for (_j = 0, _len1 = all.length; _j < _len1; _j++) {
        g = all[_j];
        $("input.gene-search-select[value='" + g + "']").prop('checked', false);
      }
    }
    return true;
  };

  root.submitGeneQuery = function(vfData, amrData, viewController) {
    var form, g, input, k, _ref, _ref1;
    form = jQuery('<form></form');
    form.attr('method', 'POST');
    form.attr('action', viewController.action);
    viewController.submitGenomes(form, 'selected');
    _ref = vfData.genes;
    for (k in _ref) {
      g = _ref[k];
      if (!g.selected) {
        continue;
      }
      input = jQuery('<input></input>');
      input.attr('type', 'hidden');
      input.attr('name', 'gene');
      input.val(k);
      form.append(input);
    }
    _ref1 = amrData.genes;
    for (k in _ref1) {
      g = _ref1[k];
      if (!g.selected) {
        continue;
      }
      input = jQuery('<input></input>');
      input.attr('type', 'hidden');
      input.attr('name', 'gene');
      input.val(k);
      form.append(input);
    }
    jQuery('body').append(form);
    form.submit();
    return true;
  };

  root.resetNullCategories = function(d) {
    var el, name;
    el = d.element.category;
    name = "" + d.type + "-category";
    el.find("select[name='" + name + "']").val('null');
    return true;
  };

  root.capitaliseFirstLetter = function(str) {
    return str[0].toUpperCase() + str.slice(1);
  };

  root.escapeRegExp = function(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
  };

  root.typeIsArray = Array.isArray || function(value) {
    return {}.toString.call(value) === '[object Array]';
  };

}).call(this);
