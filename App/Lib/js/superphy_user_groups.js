// Generated by CoffeeScript 1.9.0

/*


File: superphy_user_groups.coffee
Desc: Objects & functions for managing user created groups in Superphy
Author: Akiff Manji akiff.manji@gmail.com
Date: Sept 8th, 2014
 */

(function() {
  var SuperphyError, UserGroups, root,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;


  /*
  CLASS SuperphyError
  
  Error object for this library
   */

  SuperphyError = (function(_super) {
    __extends(SuperphyError, _super);

    function SuperphyError(_at_message, _at_name) {
      this.message = _at_message != null ? _at_message : '';
      this.name = _at_name != null ? _at_name : 'Superphy Error';
    }

    return SuperphyError;

  })(Error);

  UserGroups = (function() {
    function UserGroups(_at_userGroupsObj, _at_username, _at_parentElem, _at_viewController, _at_public_genomes, _at_private_genomes) {
      this.userGroupsObj = _at_userGroupsObj;
      this.username = _at_username;
      this.parentElem = _at_parentElem;
      this.viewController = _at_viewController;
      this.public_genomes = _at_public_genomes;
      this.private_genomes = _at_private_genomes;
      this._updateSelections = __bind(this._updateSelections, this);
      this._getGroupGenomes = __bind(this._getGroupGenomes, this);
      this._processGroups = __bind(this._processGroups, this);
      this.appendGroupForm = __bind(this.appendGroupForm, this);
      if (!this.userGroupsObj) {
        throw new SuperphyError('User groups object cannot be empty/null.');
      }
      if (!this.parentElem) {
        throw new SuperphyError('Parent div not specified.');
      }
      if (!this.viewController) {
        throw new SuperphyError('ViewController object is required');
      }
      this.user_custom_collections = {};
      this.user_custom_groups = {};
      this.active_group = {
        group_id: '',
        public_list: [],
        private_list: []
      };
      this.appendGroupForm(this.userGroupsObj);
    }

    UserGroups.prototype.appendGroupForm = function(uGpObj) {
      var container, createGroupPane, createGroupsTab, create_group_form, custom_select, elem, group_create_button, group_delete_button, group_query_input, group_select, group_update, group_update_button, group_update_button_row, group_update_input, group_update_input_row, loadGroupPane, loadGroupsTab, load_group, load_group_row, load_groups_button, load_groups_form, notification_box, parentTarget, standard_select, tabPanes, tabUl, wrapper;
      container = jQuery('<div></div>').appendTo(this.parentElem);
      tabUl = jQuery('<ul class="nav nav-tabs"></ul>').appendTo(container);
      loadGroupsTab = jQuery('<li role="presentation" class="active"><a href="#load-groups" role="tab" data-toggle="tab">Load</a></li>').appendTo(tabUl);
      createGroupsTab = jQuery('<li role="presentation"><a href="#create-groups" role="tab" data-toggle="tab">Update/Create</a></li>').appendTo(tabUl);
      tabPanes = jQuery('<div class="tab-content"></div>').appendTo(container);
      loadGroupPane = jQuery('<div role="tabpanel" class="tab-pane active" id="load-groups"></div>').appendTo(tabPanes);
      load_groups_form = jQuery('<form class="form"></form>').appendTo(loadGroupPane);
      group_select = jQuery('<div class="control-group" style="margin-top:5px"></div>').appendTo(load_groups_form);
      standard_select = jQuery('<select id="standard_group_collections" class="form-control" placeholder="Select group(s)..."></select>').appendTo(group_select);
      group_query_input = jQuery('<input id="group-query-input" type="hidden" data-group="" data-genome_list="">').appendTo(group_select);
      load_group = jQuery('<div class="form-group"></div>').appendTo(load_groups_form);
      load_group_row = jQuery('<div class="row"></div>').appendTo(load_group);
      load_groups_button = jQuery('button#user-groups-submit');
      load_groups_button.click((function(_this) {
        return function(e) {
          var data, select_ids;
          e.preventDefault();
          data = $('#group-query-input').data();
          select_ids = _this._getGroupGenomes(data.group, _this.public_genomes, _this.private_genomes);
          _this._updateSelections(select_ids, data.group, data.genome_list);
          _this.standardSelectizeControl.clear();
          return _this.customSelectizeControl.clear();
        };
      })(this));
      createGroupPane = jQuery('<div role="tabpanel" class="tab-pane" id="create-groups"></div>').appendTo(tabPanes);
      create_group_form = jQuery('<form class="form"></form>').appendTo(createGroupPane);
      group_update = jQuery('<div class="form-group"></div>').appendTo(create_group_form);
      if (this.username === "") {
        custom_select = jQuery('<p>Please <a href="/user/login">sign in</a> to view your custom groups</p>');
        group_update_input_row = jQuery('<div style="margin-top:5px"><p>Please <a href="/user/login">sign in</a> to create, update and delete groups</p></div>').appendTo(group_update);
      } else {
        custom_select = jQuery('<select id="custom_group_collections" class="form-control" placeholder="Select custom group(s)..."></select>');
        group_update_input_row = jQuery('<div class="row" style="margin-top:5px"></div>').appendTo(group_update);
        group_update_input = jQuery('<div class="col-xs-12">' + '<input class="form-control input-sm" type="text" id="create_group_name_input" placeholder="Group Name">' + '<input style="margin-top:5px" class="form-control input-sm" type="text" id="create_collection_name_input" placeholder="Collection Name">' + '<input style="margin-top:5px" class="form-control input-sm" type="text" id="create_description_input" placeholder="Description">' + '</div>').appendTo(group_update_input_row);
        group_update_button_row = jQuery('<div class="row" style="margin-top:5px"></div>').appendTo(group_update);
        group_create_button = jQuery('<div class="col-xs-3"><button class="btn btn-sm" type="button">Create</button></div>').appendTo(group_update_button_row);
        group_update_button = jQuery('<div class="col-xs-3"><button class="btn btn-sm" type="button">Update</button></div>').appendTo(group_update_button_row);
        group_delete_button = jQuery('<div class="col-xs-3"><button class="btn btn-sm" type="button">Delete</button></div>').appendTo(group_update_button_row);
        group_create_button.click((function(_this) {
          return function(e) {
            var data, data_str, g, g_obj, _ref, _ref1;
            e.preventDefault();
            data = [];
            _ref = _this.viewController.genomeController.public_genomes;
            for (g in _ref) {
              g_obj = _ref[g];
              if (g_obj.isSelected) {
                data.push('genome=' + g);
              }
            }
            _ref1 = _this.viewController.genomeController.private_genomes;
            for (g in _ref1) {
              g_obj = _ref1[g];
              if (g_obj.isSelected) {
                data.push('genome=' + g);
              }
            }
            data_str = data.join('&');
            return jQuery.ajax({
              type: "GET",
              url: '/collections/create?' + data_str,
              data: {
                'name': $('#create_group_name_input').val(),
                'category': $('#create_collection_name_input').val(),
                'description': $('#create_description_input').val()
              }
            }).done(function(data) {
              return console.log(data);
            }).fail((function(error) {
              return console.log(error);
            }));
          };
        })(this));
        group_update_button.click((function(_this) {
          return function(e) {
            var data, data_str, g, g_obj, group_id, name, _ref, _ref1;
            data = [];
            _ref = _this.viewController.genomeController.public_genomes;
            for (g in _ref) {
              g_obj = _ref[g];
              if (g_obj.isSelected) {
                data.push('genome=' + g);
              }
            }
            _ref1 = _this.viewController.genomeController.private_genomes;
            for (g in _ref1) {
              g_obj = _ref1[g];
              if (g_obj.isSelected) {
                data.push('genome=' + g);
              }
            }
            data_str = data.join('&');
            name = $('#create_group_name_input').val();
            group_id = _this.user_custom_groups[name];
            console.log(name);
            console.log(group_id);
            e.preventDefault();
            return jQuery.ajax({
              type: "GET",
              url: '/collections/update?' + data_str,
              data: {
                'group_id': group_id,
                'name': name,
                'category': $('#create_collection_name_input').val(),
                'description': $('#create_description_input').val()
              }
            }).done(function(data) {
              return console.log(data);
            }).fail((function(error) {
              return console.log(error);
            }));
          };
        })(this));
        group_delete_button.click((function(_this) {
          return function(e) {
            var group_id, name;
            e.preventDefault();
            name = $('#create_group_name_input').val();
            group_id = _this.user_custom_groups[name];
            return jQuery.ajax({
              type: "GET",
              url: '/collections/delete',
              data: {
                'group_id': group_id
              }
            }).done(function(data) {
              return console.log(data);
            }).fail((function(error) {
              return console.log(error);
            }));
          };
        })(this));
      }
      custom_select.appendTo(group_select);
      this._processGroups(uGpObj);
      elem = jQuery('#geophy-control');
      parentTarget = 'geophy-control-panel-body';
      wrapper = jQuery('<div class="panel panel-default" id="geophy-control-panel"></div>');
      elem.append(wrapper);
      notification_box = jQuery("<div class='panel-body' id='" + parentTarget + "'></div>");
      wrapper.append(notification_box);
      return true;
    };

    UserGroups.prototype._processGroups = function(uGpObj) {
      var $selectized_custom_group_select, $selectized_standard_group_select, custom_groups_select_optgroups, custom_groups_select_options, group, group_collection, group_collection_index, standard_groups_select_optgroups, standard_groups_select_options, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4;
      standard_groups_select_optgroups = [];
      standard_groups_select_options = [];
      _ref = uGpObj.standard;
      for (group_collection in _ref) {
        group_collection_index = _ref[group_collection];
        standard_groups_select_optgroups.push({
          value: group_collection_index.name,
          label: group_collection_index.name,
          count: group_collection_index.children.length
        });
        _ref1 = group_collection_index.children;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          group = _ref1[_i];
          standard_groups_select_options.push({
            "class": group_collection_index.name,
            value: group.id,
            name: group.name
          });
        }
      }
      $selectized_standard_group_select = $('#standard_group_collections').selectize({
        delimiter: ',',
        persist: false,
        options: standard_groups_select_options,
        optgroups: standard_groups_select_optgroups,
        optgroupField: 'class',
        labelField: 'name',
        searchField: ['name'],
        render: {
          optgroup_header: (function(_this) {
            return function(data, escape) {
              return "<div class='optgroup-header'>" + data.label + " - <span>" + data.count + "</span></div> ";
            };
          })(this),
          option: (function(_this) {
            return function(data, escape) {
              return "<div data-collection_name='" + data["class"] + "' data-group_name='" + data.name + "'>" + data.name + "</div>";
            };
          })(this),
          item: (function(_this) {
            return function(data, escape) {
              return "<div>" + data.name + "</div>";
            };
          })(this)
        },
        create: true
      });
      this.standardSelectizeControl = $selectized_standard_group_select[0].selectize;
      this.standardSelectizeControl.on('change', function() {
        return $('#group-query-input').data('group', this.getValue()).data('genome_list', 'public');
      });
      if (this.username === "") {
        return;
      }
      custom_groups_select_optgroups = [];
      custom_groups_select_options = [];
      _ref2 = uGpObj.custom;
      for (group_collection in _ref2) {
        group_collection_index = _ref2[group_collection];
        custom_groups_select_optgroups.push({
          value: group_collection_index.name,
          label: group_collection_index.name,
          count: group_collection_index.children.length
        });
        _ref3 = group_collection_index.children;
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          group = _ref3[_j];
          custom_groups_select_options.push({
            "class": group_collection_index.name,
            value: group.id,
            name: group.name
          });
        }
        _ref4 = group_collection_index.children;
        for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
          group = _ref4[_k];
          this.user_custom_groups[group.name] = group.id;
        }
      }
      $selectized_custom_group_select = $('#custom_group_collections').selectize({
        delimiter: ',',
        persist: false,
        options: custom_groups_select_options,
        optgroups: custom_groups_select_optgroups,
        optgroupField: 'class',
        labelField: 'name',
        searchField: ['name'],
        render: {
          optgroup_header: (function(_this) {
            return function(data, escape) {
              return "<div class='optgroup-header'>" + data.label + " - <span>" + data.count + "</span></div> ";
            };
          })(this),
          option: (function(_this) {
            return function(data, escape) {
              return "<div data-collection_name='" + data["class"] + "' data-group_name='" + data.name + "'>" + data.name + "</div>";
            };
          })(this),
          item: (function(_this) {
            return function(data, escape) {
              return "<div>" + data.name + "</div>";
            };
          })(this)
        },
        create: true
      });
      this.customSelectizeControl = $selectized_custom_group_select[0].selectize;
      return this.customSelectizeControl.on('change', function() {
        return $('#group-query-input').data('group', this.getValue()).data('genome_list', 'private');
      });
    };

    UserGroups.prototype._getGroupGenomes = function(group_id, public_genomes, private_genomes) {
      var collection_name, genome_id, genome_obj, group_name, option, select_private_ids, select_public_ids;
      option = this.standardSelectizeControl.getOption(group_id)[0];
      collection_name = $(option).data("collection_name");
      group_name = $(option).data("group_name");
      select_public_ids = (function() {
        var _ref, _results;
        _results = [];
        for (genome_id in public_genomes) {
          genome_obj = public_genomes[genome_id];
          if (_ref = parseInt(group_id), __indexOf.call(genome_obj.groups, _ref) >= 0) {
            _results.push(genome_id);
          }
        }
        return _results;
      })();
      select_private_ids = (function() {
        var _ref, _results;
        _results = [];
        for (genome_id in private_genomes) {
          genome_obj = private_genomes[genome_id];
          if (_ref = parseInt(group_id), __indexOf.call(genome_obj.groups, _ref) >= 0) {
            _results.push(genome_id);
          }
        }
        return _results;
      })();
      return {
        'select_public_ids': select_public_ids,
        'select_private_ids': select_private_ids
      };
    };

    UserGroups.prototype._updateSelections = function(select_ids, group_id, genome_list) {
      var collection_name, genome_id, group_name, notification_alert, notification_box, option, private_selected, public_selected, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      public_selected = [];
      private_selected = [];
      notification_box = $('#geophy-control-panel-body');
      notification_box.empty();
      _ref = Object.keys(viewController.genomeController.public_genomes);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        genome_id = _ref[_i];
        this.viewController.select(genome_id, false);
      }
      _ref1 = Object.keys(viewController.genomeController.private_genomes);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        genome_id = _ref1[_j];
        this.viewController.select(genome_id, false);
      }
      if (!select_ids.select_public_ids.length && !select_ids.select_private_ids.length) {
        return;
      } else {
        _ref2 = select_ids.select_public_ids;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          genome_id = _ref2[_k];
          public_selected.push(genome_id);
          if (__indexOf.call(viewController.genomeController.pubVisible, genome_id) >= 0) {
            this.viewController.select(genome_id, true);
          }
        }
        _ref3 = select_ids.select_private_ids;
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          genome_id = _ref3[_l];
          private_selected.push(genome_id);
          if (__indexOf.call(viewController.genomeController.pvtVisible, genome_id) >= 0) {
            this.viewController.select(genome_id, true);
          }
        }
      }
      if (genome_list === "public") {
        option = this.standardSelectizeControl.getOption(group_id)[0];
      }
      if (genome_list === "private") {
        option = this.customSelectizeControl.getOption(group_id)[0];
      }
      collection_name = $(option).data("collection_name");
      group_name = $(option).data("group_name");
      this.active_group.group_id = group_id;
      this.active_group.public_list = public_selected;
      this.active_group.private_list = private_selected;
      notification_alert = $("<div class='alert alert-info' role='alert'>Current group loaded: " + group_name + "</div>");
      $("<span class='help-block'>" + public_selected.length + " genomes from " + collection_name + " collection</span>").appendTo(notification_alert);
      notification_alert.appendTo(notification_box);
      return true;
    };

    return UserGroups;

  })();

  if (!root.UserGroups) {
    root.UserGroups = UserGroups;
  }

}).call(this);
