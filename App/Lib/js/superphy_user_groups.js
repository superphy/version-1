// Generated by CoffeeScript 1.10.0

/*


File: superphy_user_groups.coffee
Desc: Objects & functions for managing user created groups in Superphy
Author: Akiff Manji akiff.manji@gmail.com
Date: Sept 8th, 2014
 */

(function() {
  var SuperphyError, UserGroups, root,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;


  /*
  CLASS SuperphyError
  
  Error object for this library
   */

  SuperphyError = (function(superClass) {
    extend(SuperphyError, superClass);

    function SuperphyError(message, name1) {
      this.message = message != null ? message : '';
      this.name = name1 != null ? name1 : 'Superphy Error';
    }

    return SuperphyError;

  })(Error);

  UserGroups = (function() {
    var initialBonsaiState;

    function UserGroups(userGroupsObj, username, parentElem, viewController1, public_genomes1, private_genomes1) {
      this.userGroupsObj = userGroupsObj;
      this.username = username;
      this.parentElem = parentElem;
      this.viewController = viewController1;
      this.public_genomes = public_genomes1;
      this.private_genomes = private_genomes1;
      this._updateSelections = bind(this._updateSelections, this);
      this._removeCategoryRadio = bind(this._removeCategoryRadio, this);
      this._getGroupGenomes = bind(this._getGroupGenomes, this);
      this._create_edit_custom_groups = bind(this._create_edit_custom_groups, this);
      this._processGroups = bind(this._processGroups, this);
      this.appendGroupForm = bind(this.appendGroupForm, this);
      if (!this.userGroupsObj) {
        throw new SuperphyError('User groups object cannot be empty/null.');
      }
      if (!this.parentElem) {
        throw new SuperphyError('Parent div not specified.');
      }
      if (!this.viewController) {
        throw new SuperphyError('ViewController object is required');
      }
      this.user_custom_collections = {};
      this.user_custom_groups = {};
      this.runSelect = false;
      this.groupSelected = false;
      this.active_group = {
        group_id: '',
        public_list: [],
        private_list: [],
        group_name: ''
      };
      this.appendGroupForm(this.userGroupsObj);
    }

    initialBonsaiState = {};

    UserGroups.prototype.appendGroupForm = function(uGpObj) {
      var bonsai, container, createGroupPane, createGroupsTab, create_group_form, custom_edit, custom_select, group_create_button, group_create_button_row, group_create_input, group_delete_button, group_query_input, group_select, group_tab_content, group_toggle, group_update, group_update_button, group_update_button_row, group_update_input, group_update_input_row, loadGroupPane, loadGroupsTab, load_group, load_group_row, load_groups_button, load_groups_button2, load_groups_form, standard_select, tabPanes, tabUl;
      container = jQuery('<div id="user-groups-selectize-form"></div>').appendTo(this.parentElem);
      tabUl = jQuery('<ul class="nav nav-tabs"></ul>').appendTo(container);
      loadGroupsTab = jQuery('<li role="presentation" class="active"><a href="#load-groups" role="tab" data-toggle="tab">Load</a></li>').appendTo(tabUl);
      createGroupsTab = jQuery('<li role="presentation"><a href="#create-groups" role="tab" data-toggle="tab">Modify/Delete</a></li>').appendTo(tabUl);
      tabPanes = jQuery('<div class="tab-content"></div>').appendTo(container);
      loadGroupPane = jQuery('<div role="tabpanel" class="tab-pane active" id="load-groups"></div>').appendTo(tabPanes);
      load_groups_form = jQuery('<form class="form"></form>').appendTo(loadGroupPane);
      group_select = jQuery('<div class="control-group" style="margin-top:5px"></div>').appendTo(load_groups_form);

      /*
      if window.Worker 
        myWorker = new Worker("../App/Lib/js/worker/group_builder.js");
      
        myWorker.postMessage(JSON.stringify(uGpObj));
        myWorker.onmessage = (e) =>
          standard_select = jQuery(e.data).prependTo(group_select)
          bonsai = $('.group-list').bonsai({createInputs: 'radio',checkboxes: true})
          bonsai = $('.group-list').data('bonsai')
          @_removeCategoryRadio();
          initialBonsaiState = bonsai.serialize();
          return 1
      else
       */
      standard_select = jQuery(this.bonsaiUserGroupList(uGpObj)).appendTo(group_select);
      bonsai = $('.group-list').bonsai({
        createInputs: 'radio',
        checkboxes: true
      });
      bonsai = $('.group-list').data('bonsai');
      this._removeCategoryRadio();
      initialBonsaiState = bonsai.serialize();
      group_query_input = jQuery('<input id="group-query-input" type="hidden" data-group="" data-genome_list="">').appendTo(group_select);
      load_group = jQuery('<div class="form-group" style="margin-bottom:0px"></div>').appendTo(load_groups_form);
      load_group_row = jQuery('<div class="row"></div>').appendTo(load_group);
      load_groups_button = jQuery('button#user-groups-submit');
      load_groups_button2 = $('<div class="col-md-3"><button class="btn btn-sm" id="load-button-group" type="button">Load</button></div>').appendTo(load_group_row);
      load_groups_button.click((function(_this) {
        return function(e) {
          var data, group_number, select_ids;
          e.preventDefault();
          data = $('#group-query-input').data();
          if (data.group) {
            select_ids = _this._getGroupGenomes(data.group, _this.public_genomes, _this.private_genomes);
            _this._updateSelections(select_ids, data.group, data.genome_list);
          } else {
            group_number = $('input[name=undefined]:checked', '.group-list').val();
            data = $("li[id=bonsai" + group_number + "]", '.group-list');
            select_ids = _this._getGroupGenomes(group_number, _this.public_genomes, _this.private_genomes);
            _this._updateSelections(select_ids, group_number, data.genome_list);
          }
          if (_this.customSelectizeControl) {
            return _this.customSelectizeControl.clear();
          }
        };
      })(this));
      load_groups_button2.click((function(_this) {
        return function(e) {
          var data, group_number, select_ids;
          console.log("The button was clicked");
          console.log(uGpObj);
          e.preventDefault();
          data = $('#group-query-input').data();
          if (data.group) {
            select_ids = _this._getGroupGenomes(data.group, _this.public_genomes, _this.private_genomes);
            _this._updateSelections(select_ids, data.group, data.genome_list);
          } else {
            group_number = $('input[name=undefined]:checked', '.group-list').val();
            data = $("li[id=bonsai" + group_number + "]", '.group-list');
            select_ids = _this._getGroupGenomes(group_number, _this.public_genomes, _this.private_genomes);
            _this._updateSelections(select_ids, group_number, data.genome_list);
          }
          if (_this.customSelectizeControl) {
            _this.customSelectizeControl.clear();
          }
        };
      })(this));
      createGroupPane = jQuery('<div role="tabpanel" class="tab-pane" id="create-groups"></div>').appendTo(tabPanes);
      create_group_form = jQuery('<form class="form"></form>').appendTo(createGroupPane);
      group_update = jQuery('<div class="form-group"></div>').appendTo(create_group_form);
      if (this.username === "") {
        custom_select = jQuery('<p>Please <a href="/superphy/user/login">sign in</a> to view your custom groups</p>');
        group_update_input_row = jQuery('<div style="margin-top:5px"><p>Please <a href="/superphy/user/login">sign in</a> to create, update and delete groups</p></div>').appendTo(group_update);
      } else {
        custom_select = jQuery('<select id="custom_group_collections" class="form-control" placeholder="Select custom group..."></select>');
        group_update_input_row = jQuery('<div class="row" style="margin:4pt;"></div>').appendTo(group_update);
        group_toggle = jQuery(' <ul class="nav nav-pills nav-justified"> <li role="presentation" class="active"> <a href="#custom-group-create-toggle" data-toggle="pill">Create</a> </li> <li role="presentation"> <a href="#custom-group-change-toggle" data-toggle="pill">Update/Delete</a> </li> </ul>').appendTo(group_update_input_row);
        group_tab_content = jQuery('<div class="tab-content"></div>').appendTo(group_update);
        group_create_input = jQuery('<div  class="tab-pane fade in active" id="custom-group-create-toggle">' + '<input class="form-control input-sm" type="text" id="create_group_name_input" placeholder="Group Name">' + '<input style="margin-top:5px" class="form-control input-sm" type="text" id="create_collection_name_input" placeholder="Collection Name">' + '<input style="margin-top:5px" class="form-control input-sm" type="text" id="create_description_input" placeholder="Description">' + '</div>').appendTo(group_tab_content);
        group_create_button_row = jQuery('<div class="row" style="margin-top:5px"></div>').appendTo(group_create_input);
        group_create_button = jQuery('<div class="col-xs-3"><button class="btn btn-sm" type="button">Create</button></div>').appendTo(group_create_button_row);
        group_update_input = jQuery('<div  class="tab-pane fade" id="custom-group-change-toggle">' + '<input class="form-control input-sm" type="hidden" id="update_group_name_input" placeholder="Group Name">' + '<input style="margin-top:5px" class="form-control input-sm" type="text" id="update_collection_name_input" placeholder="Collection Name">' + '<input style="margin-top:5px" class="form-control input-sm" type="text" id="update_description_input" placeholder="Description">' + '</div>').appendTo(group_tab_content);
        custom_edit = jQuery('<select id="custom_edit_collections" class="form-control" placeholder="Select custom group..."></select>').prependTo(group_update_input);
        group_update_button_row = jQuery('<div class="row" style="margin-top:5px"></div>').appendTo(group_update_input);
        group_update_button = jQuery('<div class="col-xs-3"><button class="btn btn-sm" type="button">Update</button></div>').appendTo(group_update_button_row);
        group_delete_button = jQuery('<div class="col-xs-3"><button class="btn btn-sm" type="button">Delete</button></div>').appendTo(group_update_button_row);
        group_create_button.click((function(_this) {
          return function(e) {
            var data, data_str, g, g_obj, name, ref, ref1;
            e.preventDefault();
            $('#success-notice').remove();
            group_create_button.attr('class', 'col-xs-4');
            group_create_button.find(':button').prepend(" <span class='fa fa-refresh spinning' style='margin-right:5pt;'></span>");
            data = [];
            ref = _this.viewController.genomeController.public_genomes;
            for (g in ref) {
              g_obj = ref[g];
              if (g_obj.isSelected) {
                data.push('genome=' + g);
              }
            }
            ref1 = _this.viewController.genomeController.private_genomes;
            for (g in ref1) {
              g_obj = ref1[g];
              if (g_obj.isSelected) {
                data.push('genome=' + g);
              }
            }
            data_str = data.join('&');
            name = $('#create_group_name_input').val();
            return jQuery.ajax({
              type: "GET",
              url: '/superphy/collections/create?' + data_str,
              data: {
                'name': $('#create_group_name_input').val(),
                'category': $('#create_collection_name_input').val(),
                'description': $('#create_description_input').val()
              }
            }).done(function(data) {
              var ref2, ref3;
              console.log(data);
              group_create_button.attr('class', 'col-xs-3');
              group_create_button.find(':button').find('span').remove();
              if (data.success === 1) {
                if ($('#create_group_name_input_error')) {
                  $('#create_group_name_input_error').remove();
                }
                ref2 = _this.viewController.genomeController.public_genomes;
                for (g in ref2) {
                  g_obj = ref2[g];
                  if (g_obj.isSelected) {
                    if (!(g_obj.groups.indexOf(data.group_id) > -1)) {
                      g_obj.groups.push(data.group_id);
                    }
                  }
                }
                ref3 = _this.viewController.genomeController.private_genomes;
                for (g in ref3) {
                  g_obj = ref3[g];
                  if (g_obj.isSelected) {
                    if (!(g_obj.groups.indexOf(data.group_id) > -1)) {
                      g_obj.groups.push(data.group_id);
                    }
                  }
                }
                $('#user-groups-selectize-form').remove();
                _this.appendGroupForm(data.groups);
                _this.active_group.group_name = name;
                $("#custom_group_collections").val($("#custom_group_collections option:first").val(data.group_id));
                $('#group-query-input').data('group', data.group_id).data('genome_list', 'private');
                $('#load-button-group').trigger("click");
                return $('#user-groups-selectize-form').before("<p id='success-notice' style ='color:green;'>Success!<br>Your group has been created</p>");
              } else if (data.success === 0) {
                if ($('#create_group_name_input_error')) {
                  $('#create_group_name_input_error').remove();
                }
                return $('#create_group_name_input').before("<p id='create_group_name_input_error' style ='color:red;'>" + data.error + "</p>");
              }
            }).fail((function(error) {
              return console.log(error);
            }));
          };
        })(this));
        group_update_button.click((function(_this) {
          return function(e) {
            var data, data_str, g, g_obj, group_id, name, ref, ref1;
            $('#success-notice').remove();
            group_update_button.attr('class', 'col-xs-4');
            group_update_button.find(':button').prepend(" <span class='fa fa-refresh spinning' style='margin-right:5pt;'></span>");
            data = [];
            ref = _this.viewController.genomeController.public_genomes;
            for (g in ref) {
              g_obj = ref[g];
              if (g_obj.isSelected) {
                data.push('genome=' + g);
              }
            }
            ref1 = _this.viewController.genomeController.private_genomes;
            for (g in ref1) {
              g_obj = ref1[g];
              if (g_obj.isSelected) {
                data.push('genome=' + g);
              }
            }
            data_str = data.join('&');
            name = $('#update_group_name_input').val();
            group_id = _this.user_custom_groups[name];
            console.log(name);
            console.log(group_id);
            e.preventDefault();
            return jQuery.ajax({
              type: "GET",
              url: '/superphy/collections/update?' + data_str,
              data: {
                'group_id': group_id,
                'name': name,
                'category': $('#update_collection_name_input').val(),
                'description': $('#update_description_input').val()
              }
            }).done(function(data) {
              var ref2, ref3;
              console.log(data);
              if ($('#custom-group-change-toggle_error')) {
                $('#custom-group-change-toggle_error').remove();
              }
              group_update_button.attr('class', 'col-xs-3');
              group_update_button.find(':button').find('span').remove();
              if (data.success === 1) {
                ref2 = _this.viewController.genomeController.public_genomes;
                for (g in ref2) {
                  g_obj = ref2[g];
                  if (g_obj.isSelected) {
                    if (!(g_obj.groups.indexOf(data.group_id) > -1)) {
                      g_obj.groups.push(data.group_id);
                    }
                  }
                }
                ref3 = _this.viewController.genomeController.private_genomes;
                for (g in ref3) {
                  g_obj = ref3[g];
                  if (g_obj.isSelected) {
                    if (!(g_obj.groups.indexOf(data.group_id) > -1)) {
                      g_obj.groups.push(data.group_id);
                    }
                  }
                }
                $('#user-groups-selectize-form').remove();
                _this.appendGroupForm(data.groups);
                _this.active_group.group_name = name;
                $("#custom_group_collections").val($("#custom_group_collections option:first").val(data.group_id));
                $('#group-query-input').data('group', data.group_id).data('genome_list', 'private');
                $('#load-button-group').trigger("click");
                return $('#user-groups-selectize-form').before("<p id='success-notice' style ='color:green;'>Success!<br>Your group has been updated</p>");
              } else if (data.success === 0) {
                if ($('#custom-group-change-toggle_error')) {
                  $('#custom-group-change-toggle_error').remove();
                }
                return $('#custom-group-change-toggle').prepend("<p id='custom-group-change-toggle_error' style ='color:red;'>" + data.error + "</p>");
              }
            }).fail((function(error) {
              return console.log(error);
            }));
          };
        })(this));
        group_delete_button.click((function(_this) {
          return function(e) {
            var group_delete_alert, group_delete_alert_div, group_delete_button_no, group_delete_button_yes, temp_group_update;
            e.preventDefault();
            $('#success-notice').remove();
            temp_group_update = group_update;
            group_update.css('display', 'none');
            group_delete_alert = jQuery("<div class='alert alert-danger alert-dismissible fade in' role='alert' style='margin-top:5pt;'><p style='width:110%;'>Are you sure you want to delete this group</p></div>").appendTo(create_group_form);
            create_group_form.append(group_delete_alert);
            group_delete_alert_div = jQuery("<div type='button' style='text-align:center; width 110%;'></div>").appendTo(group_delete_alert);
            group_delete_button_yes = jQuery("<button type='button' class='btn btn-danger' style='margin-right:5pt;'>Yes</button>").appendTo(group_delete_alert_div);
            group_delete_button_no = jQuery("<button type='button' class='btn btn-default' data-dismiss='alert'>No</button>").appendTo(group_delete_alert_div);
            group_delete_button_yes.click(function(e) {
              var group_id, name;
              group_delete_alert.replaceWith(" <span class='fa fa-refresh spinning' style='display:block;text-align:center;font-size: 5em;'></span>");
              name = $('#update_group_name_input').val();
              group_id = _this.user_custom_groups[name];
              if (_this.active_group.group_id === group_id) {
                _this._updateSelections({
                  select_public_ids: [],
                  select_private_ids: []
                }, "", "public");
              }
              return jQuery.ajax({
                type: "GET",
                url: '/superphy/collections/delete',
                data: {
                  'group_id': group_id
                }
              }).done(function(data) {
                var g, g_obj, ref, ref1;
                if ($('#custom-group-change-toggle_error')) {
                  $('#custom-group-change-toggle_error').remove();
                }
                if (data.success === 1) {
                  ref = _this.viewController.genomeController.public_genomes;
                  for (g in ref) {
                    g_obj = ref[g];
                    if (g_obj.isSelected) {
                      g_obj.groups.push(data.group_id);
                    }
                  }
                  ref1 = _this.viewController.genomeController.private_genomes;
                  for (g in ref1) {
                    g_obj = ref1[g];
                    if (g_obj.isSelected) {
                      g_obj.groups.push(data.group_id);
                    }
                  }
                  $('#user-groups-selectize-form').remove();
                  _this.appendGroupForm(data.groups);
                  group_delete_alert.alert('close');
                  $('#user-groups-selectize-form').remove();
                  _this.appendGroupForm(data.groups);
                  return $('#user-groups-selectize-form').before("<p id='success-notice' style ='color:green;'>Success!<br>Your group has been deleted</p>");
                } else if (data.success === 0) {
                  create_group_form.find('span').remove();
                  group_delete_alert.alert('close');
                  if ($('#custom-group-change-toggle_error')) {
                    $('#custom-group-change-toggle_error').remove();
                  }
                  $('#custom-group-change-toggle').prepend("<p id='custom-group-change-toggle_error' style ='color:red;'>" + data.error + "</p>");
                  return group_update.css('display', 'inline');
                }
              }).fail((function(error) {
                return console.log(error);
              }));
            });
            return group_delete_button_no.click(function(e) {
              group_delete_alert.css('display', 'none');
              group_delete_alert.alert('close');
              return group_update.css('display', 'inline');
            });
          };
        })(this));
      }
      custom_select.appendTo(group_select);
      this._processGroups(uGpObj);
      this._create_edit_custom_groups(uGpObj);
      return true;
    };

    UserGroups.prototype._processGroups = function(uGpObj) {
      var $selectized_custom_group_select, custom_groups_select_optgroups, custom_groups_select_options, group, group_collection, group_collection_index, i, j, len, len1, ref, ref1, ref2;
      if (this.username === "") {
        return;
      }
      custom_groups_select_optgroups = [];
      custom_groups_select_options = [];
      ref = uGpObj.custom;
      for (group_collection in ref) {
        group_collection_index = ref[group_collection];
        custom_groups_select_optgroups.push({
          value: group_collection_index.name,
          label: group_collection_index.name,
          count: group_collection_index.children.length
        });
        ref1 = group_collection_index.children;
        for (i = 0, len = ref1.length; i < len; i++) {
          group = ref1[i];
          custom_groups_select_options.push({
            "class": group_collection_index.name,
            value: group.id,
            name: group.name
          });
        }
        ref2 = group_collection_index.children;
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          group = ref2[j];
          this.user_custom_groups[group.name] = group.id;
        }
      }
      $selectized_custom_group_select = $('#custom_group_collections').selectize({
        delimiter: ',',
        persist: false,
        options: custom_groups_select_options,
        optgroups: custom_groups_select_optgroups,
        optgroupField: 'class',
        labelField: 'name',
        searchField: ['name'],
        render: {
          optgroup_header: (function(_this) {
            return function(data, escape) {
              return "<div class='optgroup-header'>" + data.label + " - <span>" + data.count + "</span></div> ";
            };
          })(this),
          option: (function(_this) {
            return function(data, escape) {
              return "<div data-collection_name='" + data["class"] + "' data-group_name='" + data.name + "'>" + data.name + "</div>";
            };
          })(this),
          item: (function(_this) {
            return function(data, escape) {
              return "<div>" + data.name + "</div>";
            };
          })(this)
        },
        create: true
      });
      this.customSelectizeControl = $selectized_custom_group_select[0].selectize;
      return this.customSelectizeControl.on('change', function() {
        return $('#group-query-input').data('group', this.getValue()).data('genome_list', 'private');
      });
    };

    UserGroups.prototype._create_edit_custom_groups = function(uGpObj) {
      var $selectized_custom_group_edit_select, custom_groups_select_optgroups, custom_groups_select_options, group, group_collection, group_collection_index, i, j, len, len1, ref, ref1, ref2;
      if (this.username === "") {
        return;
      }
      custom_groups_select_optgroups = [];
      custom_groups_select_options = [];
      console.log(uGpObj.custom);
      ref = uGpObj.custom;
      for (group_collection in ref) {
        group_collection_index = ref[group_collection];
        custom_groups_select_optgroups.push({
          value: group_collection_index.name,
          label: group_collection_index.name,
          count: group_collection_index.children.length
        });
        ref1 = group_collection_index.children;
        for (i = 0, len = ref1.length; i < len; i++) {
          group = ref1[i];
          custom_groups_select_options.push({
            "class": group_collection_index.name,
            value: group.id,
            name: group.name
          });
        }
        ref2 = group_collection_index.children;
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          group = ref2[j];
          this.user_custom_groups[group.name] = group.id;
        }
      }
      $selectized_custom_group_edit_select = $('#custom_edit_collections').selectize({
        delimiter: ',',
        persist: false,
        options: custom_groups_select_options,
        optgroups: custom_groups_select_optgroups,
        optgroupField: 'class',
        labelField: 'name',
        searchField: ['name'],
        render: {
          optgroup_header: (function(_this) {
            return function(data, escape) {
              return "<div class='optgroup-header'>" + data.label + " - <span>" + data.count + "</span></div> ";
            };
          })(this),
          option: (function(_this) {
            return function(data, escape) {
              return "<div data-collection_name='" + data["class"] + "' data-group_name='" + data.name + "'>" + data.name + "</div>";
            };
          })(this),
          item: (function(_this) {
            return function(data, escape) {
              return "<div>" + data.name + "</div>";
            };
          })(this)
        },
        create: true
      });
      this.customSelectizeControlEdit = $selectized_custom_group_edit_select[0].selectize;
      return this.customSelectizeControlEdit.on('change', function() {
        var k, len2, ref3, ref4;
        ref3 = uGpObj.custom;
        for (group_collection in ref3) {
          group_collection_index = ref3[group_collection];
          ref4 = group_collection_index.children;
          for (k = 0, len2 = ref4.length; k < len2; k++) {
            group = ref4[k];
            if (group.id === this.getValue()) {
              $('#update_group_name_input').val(group.name);
              $('#update_collection_name_input').val(group_collection_index.name);
              $('#update_description_input').val(group.description);
            }
          }
        }
        return $('#group-query-input').data('group', this.getValue()).data('genome_list', 'private');
      });
    };

    UserGroups.prototype.bonsaiUserGroupList = function(uGpObj) {
      var group, groupHash, group_collection, group_collection_index, i, j, k, l, len, len1, len2, len3, len4, len5, len6, level0Key, level1, level1key, level2, level2key, level3, level3key, m, n, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, table;
      groupHash = {};
      ref = uGpObj.standard;
      for (group_collection in ref) {
        group_collection_index = ref[group_collection];
        groupHash[group_collection_index.name] = {};
        ref1 = group_collection_index.children;
        for (i = 0, len = ref1.length; i < len; i++) {
          group = ref1[i];
          groupHash[group_collection_index.name][group.name] = {};
          if (group.type === "collection") {
            groupHash[group_collection_index.name][group.name]['type'] = 'collection';
            ref2 = group.children;
            for (j = 0, len1 = ref2.length; j < len1; j++) {
              level1 = ref2[j];
              groupHash[group_collection_index.name][group.name][level1.name] = {};
              if (level1.type === "collection") {
                groupHash[group_collection_index.name][group.name][level1.name]['type'] = 'collection';
                ref3 = level1.children;
                for (k = 0, len2 = ref3.length; k < len2; k++) {
                  level2 = ref3[k];
                  groupHash[group_collection_index.name][group.name][level1.name][level2.name] = {};
                  if (level2.type === "group") {
                    groupHash[group_collection_index.name][group.name][level1.name][level2.name] = {};
                    groupHash[group_collection_index.name][group.name][level1.name][level2.name]['id'] = level2.id;
                    groupHash[group_collection_index.name][group.name][level1.name][level2.name]['type'] = level2.type;
                  }
                }
              }
              if (level1.type === "group") {
                groupHash[group_collection_index.name][group.name][level1.name]['id'] = level1.id;
                groupHash[group_collection_index.name][group.name][level1.name]['type'] = level1.type;
              }
            }
          }
          if (group.type === "group") {
            groupHash[group_collection_index.name][group.name] = {};
            groupHash[group_collection_index.name][group.name]['id'] = group.id;
            groupHash[group_collection_index.name][group.name]['type'] = group.type;
          }
        }
      }
      table = "<ol class='group-list' genome_list='public'>";
      ref4 = Object.keys(groupHash).sort();
      for (l = 0, len3 = ref4.length; l < len3; l++) {
        level0Key = ref4[l];
        table += "<li id=" + level0Key + " data-value='false'><label style='font-weight:normal;margin-top:2px;margin-left:5px;'>" + level0Key + "</label>";
        table += "<ol>";
        ref5 = Object.keys(groupHash[level0Key]).sort();
        for (m = 0, len4 = ref5.length; m < len4; m++) {
          level1key = ref5[m];
          level1 = groupHash[level0Key][level1key];
          if (level1['type'] === 'collection') {
            table += "<li id=" + level1key + " data-value='false'><label style='font-weight:normal;margin-top:2px;margin-left:5px;'>" + level1key + "</label>";
            table += "<ol>";
            ref6 = Object.keys(groupHash[level0Key][level1key]).sort();
            for (n = 0, len5 = ref6.length; n < len5; n++) {
              level2key = ref6[n];
              level2 = groupHash[level0Key][level1key][level2key];
              if (level2['type'] === "collection") {
                table += "<li id=" + level2key + " data-value='false'><label style='font-weight:normal;margin-top:2px;margin-left:5px;'>" + level2key + "</label>";
                table += "<ol>";
                ref7 = Object.keys(groupHash[level0Key][level1key][level2key]).sort();
                for (o = 0, len6 = ref7.length; o < len6; o++) {
                  level3key = ref7[o];
                  level3 = groupHash[level0Key][level1key][level2key][level3key];
                  if (level3['type'] === "group") {
                    table += "<li id=\"bonsai" + level2['id'] + "\"  data-value=" + level3['id'] + " data-collection_name=" + level2key + " data-group_name=" + level3key + "><label style='font-weight:normal;line-height:100%;'>" + level3key + "</label></li>";
                  }
                }
                table += "</ol></li>";
              }
              if (level2['type'] === "group") {
                table += "<li id=\"bonsai" + level2['id'] + "\"  data-value=" + level2['id'] + " data-collection_name=" + level1key + " data-group_name=" + level2key + "><label style='font-weight:normal;line-height:100%;'>" + level2key + "</label></li>";
              }
            }
            table += "</ol></li>";
          }
          if (level1['type'] === "group") {
            table += "<li id=\"bonsai" + level1['id'] + "\"  data-value=" + level1['id'] + " data-collection_name=" + level0Key + " data-group_name=" + level1key + "><label style='font-weight:normal;line-height:100%;'>" + level1key + "</label></li>";
          }
        }
        table += "</ol></li>";
      }
      table = table + "</ol>";
      return table;
    };

    UserGroups.prototype._getGroupGenomes = function(group_id, public_genomes, private_genomes) {
      var genome_id, genome_obj, select_private_ids, select_public_ids;
      select_public_ids = (function() {
        var ref, results;
        results = [];
        for (genome_id in public_genomes) {
          genome_obj = public_genomes[genome_id];
          if (ref = parseInt(group_id), indexOf.call(genome_obj.groups, ref) >= 0) {
            results.push(genome_id);
          }
        }
        return results;
      })();
      select_private_ids = (function() {
        var ref, results;
        results = [];
        for (genome_id in private_genomes) {
          genome_obj = private_genomes[genome_id];
          if (ref = parseInt(group_id), indexOf.call(genome_obj.groups, ref) >= 0) {
            results.push(genome_id);
          }
        }
        return results;
      })();
      return {
        'select_public_ids': select_public_ids,
        'select_private_ids': select_private_ids
      };
    };

    UserGroups.prototype._removeCategoryRadio = function() {
      return $('.group-list').find("input").each(function() {
        if (this.value === 'false') {
          return this.remove();
        } else {
          $("#" + this.id).css({
            'position': 'absolute',
            'height': '100%',
            'margin-top': '0px'
          });
          return $("label[for=" + this.id + "]", '.group-list').css({
            'width': '80%',
            'margin-bottom': '0px',
            'margin-left': '12%'
          });
        }
      });
    };

    UserGroups.prototype._updateSelections = function(select_ids, group_id, genome_list, uGpObj) {
      var bonsai, collection_name, genome_id, group_name, i, j, len, len1, notification_alert, notification_box, option, private_selected, public_selected, ref, ref1, tmpArray;
      this.groupSelected = true;
      this.runSelect = false;
      public_selected = [];
      private_selected = [];
      notification_box = $('#geophy-control-panel-body');
      notification_box.empty();
      tmpArray = Object.keys(viewController.genomeController.public_genomes).concat(Object.keys(viewController.genomeController.private_genomes));
      this.viewController.select(tmpArray, false);
      $('#success-notice').remove();
      if (!select_ids.select_public_ids.length && !select_ids.select_private_ids.length) {
        this.active_group.group_id = '';
        this.active_group.public_list = [];
        this.active_group.private_list = [];
        this.active_group.group_name = '';
        this.groupSelected = false;
        if (this.viewController.views[3] != null) {
          this.viewController.views[3].updateActiveGroup(this);
        }
        this.viewController.views[2].updateActiveGroup(this);
        this.viewController.views[1].updateActiveGroup(this);
        this.viewController.views[0].updateActiveGroup(this);
        bonsai = $('.group-list').data('bonsai');
        bonsai.restore(initialBonsaiState);
        return;
      } else {
        ref = select_ids.select_public_ids;
        for (i = 0, len = ref.length; i < len; i++) {
          genome_id = ref[i];
          public_selected.push(genome_id);
        }
        ref1 = select_ids.select_private_ids;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          genome_id = ref1[j];
          private_selected.push(genome_id);
          tmpArray = public_selected.concat(private_selected);
          this.viewController.select(tmpArray, true);
        }
      }
      this.runSelect = true;
      if (genome_list === "private") {
        option = this.customSelectizeControl.getOption(group_id)[0];
      } else {
        if ($("li[id=bonsai" + group_id + "]", '.group-list')) {
          option = $("li[id=bonsai" + group_id + "]", '.group-list');
        }
      }
      if (option) {
        collection_name = $(option).data("collection_name");
        group_name = $(option).data("group_name");
        this.active_group.group_name = group_name;
      }
      this.active_group.group_id = group_id;
      this.active_group.public_list = public_selected;
      this.active_group.private_list = private_selected;
      notification_alert = $("<div class='alert alert-info' role='alert'>Current group loaded: " + group_name + "</div><br>");
      $("<span clasfgroups='help-block'>" + public_selected.length + " genomes from " + collection_name + " collection</span>").appendTo(notification_alert);
      notification_alert.appendTo(notification_box);
      if (this.viewController.views[3] != null) {
        this.viewController.views[3].updateActiveGroup(this);
      }
      this.viewController.views[2].updateActiveGroup(this);
      this.viewController.views[1].updateActiveGroup(this);
      this.viewController.views[0].updateActiveGroup(this);
      return true;
      return true;
    };

    return UserGroups;

  })();

  if (!root.UserGroups) {
    root.UserGroups = UserGroups;
  }

}).call(this);
