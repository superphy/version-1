// Generated by CoffeeScript 1.7.1

/*


 File: superphy_genes.coffee
 Desc: Javascript functions for genes in the genes/search and strains/info pages
 Author: Matt Whiteside matthew.whiteside@phac-aspc.gc.ca & Akiff Manji akiff.manji@gmail.com
 Date: June 26th, 2014
 */

(function() {
  var GenesList, GenesSearch, root,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  GenesList = (function() {
    var typeIsArray;

    function GenesList(geneList, geneType, categories, tableElem, categoriesElem, mTypes, multi_select) {
      var cat, catCount, cats, k, o, subcats, subs, _i, _len, _ref, _ref1, _ref2;
      this.geneList = geneList;
      this.geneType = geneType;
      this.categories = categories;
      this.tableElem = tableElem;
      this.categoriesElem = categoriesElem;
      this.mTypes = mTypes;
      this.multi_select = multi_select != null ? multi_select : false;
      if (!(this.geneType === 'vf' || this.geneType === 'amr')) {
        throw new Error("Invalid gene type parameter: " + this.geneType + ".");
      }
      this.sortField = 'name';
      this.sortAsc = true;
      if (__indexOf.call(this.mTypes, 'alleles') >= 0) {
        this.sortField = 'alleles';
      }
      if (__indexOf.call(this.mTypes, 'alleles') >= 0) {
        this.sortAsc = false;
      }
      this.filtered_category = null;
      this.filtered_subcategory = null;
      this.metaMap = {
        'name': 'Gene Name',
        'uniquename': 'Unique Name',
        'alleles': 'Number of Alleles',
        'category': 'Category',
        'subcategory': 'Sub Category'
      };
      _ref = this.geneList;
      for (k in _ref) {
        o = _ref[k];
        o.visible = true;
        o.selected = false;
        cats = [];
        subcats = [];
        catCount = 0;
        _ref1 = o.cats;
        for (cat in _ref1) {
          subs = _ref1[cat];
          catCount++;
          cats.push((" <span class='category-superscript  help-block'>[" + catCount + "]</span> ") + this._capitaliseFirstLetter(this.categories[cat].parent_name) + "<br/>");
          _ref2 = Object.keys(subs.subcats);
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            k = _ref2[_i];
            subcats.push(this._capitaliseFirstLetter(this.categories[cat].subcategories[k].category_name) + (" <span class='category-superscript help-block'>[" + catCount + "]</span><br/>"));
          }
          o.category = cats.join("");
          o.subcategory = subcats.join("");
        }
      }
      this._appendGeneTable();
      this._appendCategories();
    }

    typeIsArray = Array.isArray || function(value) {
      return {}.toString.call(value) === '[object Array]';
    };

    GenesList.prototype._appendGeneTable = function() {
      var style, table, tableElem, tableHtml;
      if (this.tableElem.length) {
        this.tableElem.empty();
      }
      table = this.tableElem;
      tableElem = jQuery("<table />").appendTo(table);
      if (this.multi_select) {
        style = 'select';
      }
      if (!this.multi_select) {
        style = 'redirect';
      }
      tableHtml = '';
      tableHtml += this._appendHeader();
      tableHtml += '<tbody>';
      tableHtml += this._appendGenes(this._sort(Object.keys(this.geneList), this.sortField, this.sortAsc), this.geneList, this.geneType, style);
      tableHtml += '</tbody>';
      tableElem.append(tableHtml);
      this._actions(tableElem, style);
      return true;
    };

    GenesList.prototype._appendCategories = function() {
      var cTitle, categoryE, col2, def, id, introDiv, k, moreInfo, moreInfoId, name, o, options, resetButt, row1, row2, s, sel, t, that, titleDiv, _ref, _ref1;
      categoryE = this.categoriesElem;
      introDiv = jQuery('<div class="gene-category-intro"></div>').appendTo(categoryE);
      introDiv.append('<span>Select category to refine list of genes:</span>');
      resetButt = jQuery("<button id='" + this.geneType + "-reset-category' class='btn btn-link'>Reset</button>").appendTo(introDiv);
      resetButt.click((function(_this) {
        return function(e) {
          e.preventDefault();
          _this._filterByCategory(-1, -1);
          return _this._resetNullCategories();
        };
      })(this));
      _ref = this.categories;
      for (k in _ref) {
        o = _ref[k];
        row1 = jQuery('<div class="row"></div>').appendTo(categoryE);
        cTitle = this._capitaliseFirstLetter(o.parent_name);
        titleDiv = jQuery("<div class='category-header col-xs-12'>" + cTitle + ": </div>").appendTo(row1);
        if (o.parent_definition != null) {
          moreInfoId = 'category-info-' + k;
          moreInfo = jQuery("<a id='" + moreInfoId + "' href='#' data-toggle='tooltip' data-original-title='" + o.parent_definition + "'><i class='fa fa-info-circle'></i></a>");
          titleDiv.append(moreInfo);
          moreInfo.tooltip({
            placement: 'right'
          });
        }
        row2 = jQuery('<div class="row"></div>').appendTo(categoryE);
        col2 = jQuery('<div class="col-xs-12"></div>').appendTo(row2);
        sel = jQuery("<select name='" + this.geneType + "-category' data-category-id='" + k + "' class='form-control' placeholder='--Select a category--'></select>").appendTo(col2);
        options = [];
        _ref1 = o.subcategories;
        for (s in _ref1) {
          t = _ref1[s];
          def = "";
          if (t.category_definition != null) {
            def = t.category_definition;
          }
          name = this._capitaliseFirstLetter(t.category_name);
          id = "subcategory-id-" + s;
          def.replace(/\.n/g, ". &#13;");
          options.push({
            id: "" + id,
            value: "" + s,
            title: "" + def,
            name: "" + name,
            parent: "" + k
          });
        }
        sel.selectize({
          searchField: ['name'],
          options: options,
          render: {
            option: (function(_this) {
              return function(data, escape) {
                return "<div class='option' title='" + data.title + "'>" + data.name + " <span class='badge'>" + _this.categories[data.parent].subcategories[data.value].gene_ids.length + " genes</span></div>";
              };
            })(this),
            item: (function(_this) {
              return function(data, escape) {
                return "<div class='item'>" + data.name + "</div>";
              };
            })(this)
          }
        });
        that = this;
        sel.change(function() {
          var catId, obj, selectized, selects, subId, _i, _len;
          selects = jQuery("select[name='" + that.geneType + "-category']");
          obj = jQuery(this);
          catId = obj.data('category-id');
          subId = obj.val();
          if (subId !== "" || null) {
            for (_i = 0, _len = selects.length; _i < _len; _i++) {
              sel = selects[_i];
              selectized = sel.selectize;
              if (selectized.getValue() !== subId) {
                selectized.clear();
              }
            }
            this.selectize.getItem(subId);
            that._filterByCategory(catId, subId);
          }
          if (subId === "" || null) {
            return that._filterByCategory(-1, -1);
          }
        });
      }
      return true;
    };

    GenesList.prototype._appendHeader = function() {
      var i, sortIcon, t, tName, table, v, values, _i, _j, _len, _len1, _ref;
      table = '<thead><tr>';
      values = [];
      i = -1;
      if (this.sortField === 'name') {
        sortIcon = 'fa-sort-asc';
        if (!this.sortAsc) {
          sortIcon = 'fa-sort-desc';
        }
        values[++i] = {
          type: 'name',
          name: 'Gene Name',
          sortIcon: sortIcon
        };
      } else {
        values[++i] = {
          type: 'name',
          name: 'Gene Name',
          sortIcon: 'fa-sort'
        };
      }
      _ref = this.mTypes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        tName = this.metaMap[t];
        sortIcon = null;
        if (t === this.sortField) {
          sortIcon = 'fa-sort-asc';
          if (!this.sortAsc) {
            sortIcon = 'fa-sort-desc';
          }
        } else {
          sortIcon = 'fa-sort';
        }
        values[++i] = {
          type: t,
          name: tName,
          sortIcon: sortIcon
        };
      }
      for (_j = 0, _len1 = values.length; _j < _len1; _j++) {
        v = values[_j];
        table += this._template('th', v);
      }
      table += '</thead></tr>';
      return table;
    };

    GenesList.prototype._appendGenes = function(visibleG, genes, type, style) {
      var checked, d, gId, geneObj, mData, name, row, table, _i, _j, _len, _len1, _ref;
      table = '';
      for (_i = 0, _len = visibleG.length; _i < _len; _i++) {
        gId = visibleG[_i];
        row = '';
        geneObj = genes[gId];
        name = geneObj.name;
        if (!geneObj.visible) {
          continue;
        }
        if (style === 'redirect') {
          row += this._template('td1_redirect', {
            klass: 'gene_table_item',
            g: gId,
            name: name,
            type: type
          });
        } else if (style = "select") {
          checked = '';
          if (geneObj.selected) {
            checked = 'checked';
          }
          row += this._template('td1_select', {
            klass: 'gene_table_item',
            g: gId,
            name: name,
            type: type,
            checked: checked
          });
        } else {
          return false;
        }
        _ref = this.mTypes;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          d = _ref[_j];
          switch (d) {
            case 'category':
              if (this.filtered_category !== null) {
                mData = this.filtered_category;
              } else {
                mData = geneObj[d];
              }
              break;
            case 'subcategory':
              if (this.filtered_subcategory !== null) {
                mData = this.filtered_subcategory;
              } else {
                mData = geneObj[d];
              }
              break;
            default:
              mData = geneObj[d];
          }
          row += this._template('td', {
            data: mData
          });
        }
        table += this._template('tr', {
          row: row
        });
      }
      return table;
    };

    GenesList.prototype._template = function(tmpl, values) {
      var html;
      html = null;
      if (tmpl === 'tr') {
        html = "<tr>" + values.row + "</tr>";
      } else if (tmpl === 'th') {
        html = "<th><a class='genome-table-sort' href='#' data-genomesort='" + values.type + "'>" + values.name + " <i class='fa " + values.sortIcon + "'></i></a></th>";
      } else if (tmpl === 'td') {
        html = "<td>" + values.data + "</td>";
      } else if (tmpl === 'td1_redirect') {
        html = "<td class='" + values.klass + "'>" + values.name + " <a class='gene-table-link' href='/genes/info?" + values.type + "=" + values.g + "' data-gene='" + values.g + "' title='" + values.name + " info'><i class='fa fa-search'></i></a></td>";
      } else if (tmpl === 'td1_select') {
        html = "<td class='" + values.klass + "'><div class='checkbox'><label><input class='checkbox gene-table-checkbox gene-search-select' type='checkbox' value='" + values.g + "' " + values.checked + " name='" + values.type + "-gene'/> " + values.name + "</label> <a class='gene-table-link' href='/genes/info?" + values.type + "=" + values.g + "' data-gene='" + values.g + "' title='" + values.name + " info'><i class='fa fa-search'></i></a></div></td>";
      } else {
        throw new SuperphyError("Unknown template type " + tmpl + " in TableView method _template");
      }
      return html;
    };

    GenesList.prototype._actions = function(tableEl, style) {
      var that;
      that = this;
      return tableEl.find('.genome-table-sort').click(function(e) {
        var sortField;
        e.preventDefault();
        sortField = this.dataset.genomesort;
        return that._genesort(sortField);
      });
    };

    GenesList.prototype._genesort = function(field) {
      if (field === this.sortField) {
        if (this.sortAsc) {
          this.sortAsc = false;
        } else {
          this.sortAsc = true;
        }
      } else {
        this.sortField = field;
        this.sortAsc = true;
      }
      console.log([field, this.sortField, this.sortAsc].join(', '));
      return this._appendGeneTable();
    };

    GenesList.prototype._sort = function(gids, metaField, asc) {
      var that;
      if (!gids.length) {
        return gids;
      }
      that = this;
      gids.sort(function(a, b) {
        var aField, aName, aObj, bField, bName, bObj;
        aObj = that.geneList[a];
        bObj = that.geneList[b];
        aField = aObj[metaField];
        aName = aObj.name.toString().toLowerCase();
        bField = bObj[metaField];
        bName = bObj.name.toString().toLowerCase();
        if ((aField != null) && (bField != null)) {
          if (typeIsArray(aField)) {
            aField = aField.join('').toLowerCase();
            bField = bField.join('').toLowerCase();
          } else {
            aField = aField.toString().toLowerCase();
            bField = bField.toString().toLowerCase();
          }
          if (aField < bField) {
            return -1;
          } else if (aField > bField) {
            return 1;
          } else {
            if (aName < bName) {
              return -1;
            } else if (aName > bName) {
              return 1;
            } else {
              return 0;
            }
          }
        } else {
          if ((aField != null) && (bField == null)) {
            return -1;
          } else if ((bField != null) && (aField == null)) {
            return 1;
          } else {
            if (aName < bName) {
              return -1;
            } else if (aName > bName) {
              return 1;
            } else {
              return 0;
            }
          }
        }
      });
      if (!asc) {
        gids.reverse();
      }
      return gids;
    };

    GenesList.prototype._filterByCategory = function(catId, subcatId) {
      var g, geneIds, id, k, o, _i, _j, _len, _len1, _ref, _ref1;
      geneIds = [];
      if (catId === -1) {
        geneIds = Object.keys(this.geneList);
        this.filtered_category = null;
        this.filtered_subcategory = null;
      } else {
        _ref = this.categories[catId].subcategories[subcatId].gene_ids;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          id = _ref[_i];
          if (this.geneList[id] != null) {
            geneIds.push(id);
          }
        }
        if (!((geneIds != null) && typeIsArray(geneIds))) {
          throw new Error("Invalid category or subcategory ID: " + catId + " / " + subcatId + ".");
        }
        _ref1 = this.geneList;
        for (k in _ref1) {
          o = _ref1[k];
          o.visible = false;
        }
        this.filtered_category = this._capitaliseFirstLetter(this.categories[catId].parent_name);
        this.filtered_subcategory = this._capitaliseFirstLetter(this.categories[catId].subcategories[subcatId].category_name);
      }
      for (_j = 0, _len1 = geneIds.length; _j < _len1; _j++) {
        g = geneIds[_j];
        o = this.geneList[g];
        if (o == null) {
          throw new Error("Invalid gene ID: " + g + ".");
        }
        o.visible = true;
      }
      this.tableElem.empty();
      this._appendGeneTable();
      return true;
    };

    GenesList.prototype._resetNullCategories = function() {
      var el, name, sel, select, _i, _len;
      el = this.categoriesElem;
      name = "" + this.geneType + "-category";
      select = el.find("select[name='" + name + "']");
      for (_i = 0, _len = select.length; _i < _len; _i++) {
        sel = select[_i];
        sel.selectize.clear();
      }
      return true;
    };

    GenesList.prototype._capitaliseFirstLetter = function(str) {
      return str[0].toUpperCase() + str.slice(1);
    };

    return GenesList;

  })();

  if (!root.GenesList) {
    root.GenesList = GenesList;
  }

  GenesSearch = (function(_super) {
    __extends(GenesSearch, _super);

    function GenesSearch(geneList, geneType, categories, tableElem, selectedElem, countElem, categoriesElem, autocompleteElem, selectAllEl, unselectAllEl, mTypes, multi_select) {
      this.geneList = geneList;
      this.geneType = geneType;
      this.categories = categories;
      this.tableElem = tableElem;
      this.selectedElem = selectedElem;
      this.countElem = countElem;
      this.categoriesElem = categoriesElem;
      this.autocompleteElem = autocompleteElem;
      this.selectAllEl = selectAllEl;
      this.unselectAllEl = unselectAllEl;
      this.mTypes = mTypes;
      this.multi_select = multi_select != null ? multi_select : false;
      GenesSearch.__super__.constructor.call(this, this.geneList, this.geneType, this.categories, this.tableElem, this.categoriesElem, this.mTypes, this.multi_select);
      this.num_selected = 0;
      jQuery(this.autocompleteElem).keyup((function(_this) {
        return function() {
          return _this._filterGeneList();
        };
      })(this));
      jQuery(this.selectAllEl).click((function(_this) {
        return function(e) {
          e.preventDefault();
          return _this._selectAllGenes(true);
        };
      })(this));
      jQuery(this.unselectAllEl).click((function(_this) {
        return function(e) {
          e.preventDefault();
          return _this._selectAllGenes(false);
        };
      })(this));
    }

    GenesSearch.prototype._appendGeneTable = function() {
      var cboxes, name, table, that;
      GenesSearch.__super__._appendGeneTable.apply(this, arguments);
      table = this.tableElem;
      name = "" + this.geneType + "-gene";
      cboxes = table.find("input[name='" + name + "']");
      that = this;
      cboxes.change(function() {
        var checked, geneId, obj;
        obj = $(this);
        geneId = obj.val();
        checked = obj.prop('checked');
        console.log(checked);
        return that._selectGene([geneId], checked);
      });
      this._updateCount();
      return true;
    };

    GenesSearch.prototype._filterGeneList = function() {
      var searchTerm;
      searchTerm = this.autocompleteElem.val();
      this._matching(this.geneList, searchTerm);
      this.tableElem.empty();
      this._appendGeneTable();
      return true;
    };

    GenesSearch.prototype._matching = function(gList, searchTerm) {
      var g, k, regex, val;
      regex = new RegExp(this.escapeRegExp(searchTerm), "i");
      for (k in gList) {
        g = gList[k];
        val = g.name;
        if (regex.test(val)) {
          g.visible = true;
        } else {
          g.visible = false;
        }
      }
      return true;
    };

    GenesSearch.prototype._selectGene = function(geneIds, checked) {
      var g, _i, _len;
      console.log(geneIds);
      console.log(checked);
      for (_i = 0, _len = geneIds.length; _i < _len; _i++) {
        g = geneIds[_i];
        this.geneList[g].selected = checked;
        if (checked) {
          this.num_selected++;
        } else {
          this.num_selected--;
        }
      }
      this._updateCount();
      if (checked) {
        this._addSelectedGenes(geneIds);
      } else {
        this._removeSelectedGenes(geneIds);
      }
      return true;
    };

    GenesSearch.prototype._updateCount = function() {
      var innerElem;
      innerElem = this.countElem.find('span.selected-gene-count-text');
      if (!innerElem.length) {
        innerElem = jQuery("<span class='selected-gene-count-text'></span>").appendTo(this.countElem);
      }
      if (this.geneType === 'vf') {
        innerElem.text("" + this.num_selected + " virulence genes selected");
      }
      if (this.geneType === 'amr') {
        innerElem.text("" + this.num_selected + " AMR genes selected");
      }
      return true;
    };

    GenesSearch.prototype._addSelectedGenes = function(geneIds) {
      var actionEl, cls, g, gObj, listEl, that, _i, _len;
      cls = 'selected-gene-item';
      for (_i = 0, _len = geneIds.length; _i < _len; _i++) {
        g = geneIds[_i];
        gObj = this.geneList[g];
        listEl = jQuery(("<li class='" + cls + "'>") + gObj.name + ' - ' + gObj.uniquename + '</li>');
        actionEl = jQuery("<a href='#' data-gene='" + g + "'> <i class='fa fa-times'></a>");
        that = this;
        actionEl.click(function(e) {
          var gid;
          e.preventDefault();
          gid = this.dataset.gene;
          that._selectGene([gid], false);
          return $("input.gene-search-select[value='" + gid + "']").prop('checked', false);
        });
        listEl.append(actionEl);
        this.selectedElem.append(listEl);
      }
      return true;
    };

    GenesSearch.prototype._removeSelectedGenes = function(geneIds) {
      var g, listEl, _i, _len;
      for (_i = 0, _len = geneIds.length; _i < _len; _i++) {
        g = geneIds[_i];
        listEl = this.selectedElem.find("li > a[data-gene='" + g + "']");
        listEl.parent().remove();
      }
      return true;
    };

    GenesSearch.prototype._selectAllGenes = function(checked) {
      var all, g, k, visible, _i, _j, _len, _len1;
      if (checked) {
        visible = (function() {
          var _ref, _results;
          _ref = this.geneList;
          _results = [];
          for (k in _ref) {
            g = _ref[k];
            if (g.visible && !g.selected) {
              _results.push(k);
            }
          }
          return _results;
        }).call(this);
        this._selectGene(visible, true);
        for (_i = 0, _len = visible.length; _i < _len; _i++) {
          g = visible[_i];
          $("input.gene-search-select[value='" + g + "']").prop('checked', true);
        }
      } else {
        all = (function() {
          var _ref, _results;
          _ref = this.geneList;
          _results = [];
          for (k in _ref) {
            g = _ref[k];
            if (g.selected) {
              _results.push(k);
            }
          }
          return _results;
        }).call(this);
        this._selectGene(all, false);
        for (_j = 0, _len1 = all.length; _j < _len1; _j++) {
          g = all[_j];
          $("input.gene-search-select[value='" + g + "']").prop('checked', false);
        }
      }
      return true;
    };

    GenesSearch.prototype.prepareGenesQuery = function() {
      var form, g, input, k, _ref;
      form = jQuery('form .genes_search');
      _ref = this.geneList;
      for (k in _ref) {
        g = _ref[k];
        if (!g.selected) {
          continue;
        }
        input = jQuery('<input></input>');
        input.attr('type', 'hidden');
        input.attr('name', 'gene');
        input.val(k);
        form.append(input);
      }
      return true;
    };

    GenesSearch.prototype.escapeRegExp = function(str) {
      return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
    };

    GenesSearch.prototype._filterByCategory = function(catId, subcatId) {
      this.autocompleteElem.val("");
      return GenesSearch.__super__._filterByCategory.apply(this, arguments);
    };

    return GenesSearch;

  })(GenesList);

  if (!root.GenesSearch) {
    root.GenesSearch = GenesSearch;
  }

}).call(this);
